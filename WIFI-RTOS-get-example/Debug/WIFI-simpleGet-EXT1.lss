
WIFI-simpleGet-EXT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d6e4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040d6e4  0040d6e4  0001d6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040d6ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000c184  204009d0  0040e0bc  000209d0  2**2
                  ALLOC
  4 .stack        00002004  2040cb54  0041a240  000209d0  2**0
                  ALLOC
  5 .heap         00000200  2040eb58  0041c244  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00037fc2  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000071bf  00000000  00000000  00058a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001670  00000000  00000000  0005fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028eb8  00000000  00000000  00061248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001db72  00000000  00000000  0008a100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009b5a1  00000000  00000000  000a7c72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001371f  00000000  00000000  00143213  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019b8  00000000  00000000  00156932  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004e1c  00000000  00000000  001582ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 eb 40 20 31 54 40 00 2f 54 40 00 2f 54 40 00     X.@ 1T@./T@./T@.
  400010:	2f 54 40 00 2f 54 40 00 2f 54 40 00 00 00 00 00     /T@./T@./T@.....
	...
  40002c:	65 08 40 00 2f 54 40 00 00 00 00 00 c1 08 40 00     e.@./T@.......@.
  40003c:	29 09 40 00 2f 54 40 00 2f 54 40 00 21 5e 40 00     ).@./T@./T@.!^@.
  40004c:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  40005c:	2f 54 40 00 2f 54 40 00 00 00 00 00 49 4f 40 00     /T@./T@.....IO@.
  40006c:	5d 4f 40 00 71 4f 40 00 2f 54 40 00 2f 54 40 00     ]O@.qO@./T@./T@.
  40007c:	2f 54 40 00 85 4f 40 00 99 4f 40 00 2f 54 40 00     /T@..O@..O@./T@.
  40008c:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  40009c:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  4000ac:	2f 54 40 00 2f 54 40 00 21 04 40 00 2f 54 40 00     /T@./T@.!.@./T@.
  4000bc:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  4000cc:	2f 54 40 00 00 00 00 00 2f 54 40 00 00 00 00 00     /T@...../T@.....
  4000dc:	2f 54 40 00 35 04 40 00 2f 54 40 00 2f 54 40 00     /T@.5.@./T@./T@.
  4000ec:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  4000fc:	2f 54 40 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     /T@./T@./T@./T@.
  40010c:	2f 54 40 00 2f 54 40 00 00 00 00 00 00 00 00 00     /T@./T@.........
  40011c:	00 00 00 00 2f 54 40 00 2f 54 40 00 2f 54 40 00     ..../T@./T@./T@.
  40012c:	2f 54 40 00 2f 54 40 00 00 00 00 00 2f 54 40 00     /T@./T@...../T@.
  40013c:	2f 54 40 00                                         /T@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040d6ec 	.word	0x0040d6ec

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040d6ec 	.word	0x0040d6ec
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040d6ec 	.word	0x0040d6ec
  4001a8:	00000000 	.word	0x00000000

004001ac <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4001ac:	b570      	push	{r4, r5, r6, lr}
  4001ae:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4001b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4001b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4001b4:	4013      	ands	r3, r2
  4001b6:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001b8:	2400      	movs	r4, #0
	if (afec_callback_pointer[inst_num][source]) {
  4001ba:	4e1c      	ldr	r6, [pc, #112]	; (40022c <afec_process_callback+0x80>)
  4001bc:	4d1c      	ldr	r5, [pc, #112]	; (400230 <afec_process_callback+0x84>)
  4001be:	42a8      	cmp	r0, r5
  4001c0:	bf14      	ite	ne
  4001c2:	2000      	movne	r0, #0
  4001c4:	2001      	moveq	r0, #1
  4001c6:	0105      	lsls	r5, r0, #4
  4001c8:	e00b      	b.n	4001e2 <afec_process_callback+0x36>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4001ca:	2c0e      	cmp	r4, #14
  4001cc:	d81e      	bhi.n	40020c <afec_process_callback+0x60>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4001ce:	9a01      	ldr	r2, [sp, #4]
  4001d0:	f104 010c 	add.w	r1, r4, #12
  4001d4:	2301      	movs	r3, #1
  4001d6:	408b      	lsls	r3, r1
  4001d8:	4213      	tst	r3, r2
  4001da:	d110      	bne.n	4001fe <afec_process_callback+0x52>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4001dc:	3401      	adds	r4, #1
  4001de:	2c10      	cmp	r4, #16
  4001e0:	d022      	beq.n	400228 <afec_process_callback+0x7c>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4001e2:	2c0b      	cmp	r4, #11
  4001e4:	d8f1      	bhi.n	4001ca <afec_process_callback+0x1e>
			if (status & (1 << cnt)) {
  4001e6:	9a01      	ldr	r2, [sp, #4]
  4001e8:	2301      	movs	r3, #1
  4001ea:	40a3      	lsls	r3, r4
  4001ec:	4213      	tst	r3, r2
  4001ee:	d0f5      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001f0:	192b      	adds	r3, r5, r4
  4001f2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4001f6:	2b00      	cmp	r3, #0
  4001f8:	d0f0      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  4001fa:	4798      	blx	r3
  4001fc:	e7ee      	b.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  4001fe:	192b      	adds	r3, r5, r4
  400200:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400204:	2b00      	cmp	r3, #0
  400206:	d0e9      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400208:	4798      	blx	r3
  40020a:	e7e7      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  40020c:	9a01      	ldr	r2, [sp, #4]
  40020e:	f104 010f 	add.w	r1, r4, #15
  400212:	2301      	movs	r3, #1
  400214:	408b      	lsls	r3, r1
  400216:	4213      	tst	r3, r2
  400218:	d0e0      	beq.n	4001dc <afec_process_callback+0x30>
	if (afec_callback_pointer[inst_num][source]) {
  40021a:	192b      	adds	r3, r5, r4
  40021c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  400220:	2b00      	cmp	r3, #0
  400222:	d0db      	beq.n	4001dc <afec_process_callback+0x30>
		afec_callback_pointer[inst_num][source]();
  400224:	4798      	blx	r3
  400226:	e7d9      	b.n	4001dc <afec_process_callback+0x30>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  400228:	b002      	add	sp, #8
  40022a:	bd70      	pop	{r4, r5, r6, pc}
  40022c:	2040c9a0 	.word	0x2040c9a0
  400230:	40064000 	.word	0x40064000

00400234 <afec_ch_set_config>:
{
  400234:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  400236:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  400238:	2301      	movs	r3, #1
  40023a:	408b      	lsls	r3, r1
  40023c:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  400240:	7815      	ldrb	r5, [r2, #0]
  400242:	2d00      	cmp	r5, #0
  400244:	bf08      	it	eq
  400246:	2300      	moveq	r3, #0
  400248:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  40024a:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  40024c:	6d44      	ldr	r4, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  40024e:	004b      	lsls	r3, r1, #1
  400250:	2103      	movs	r1, #3
  400252:	4099      	lsls	r1, r3
  400254:	ea24 0401 	bic.w	r4, r4, r1
	reg |= (config->gain) << (2 * channel);
  400258:	7851      	ldrb	r1, [r2, #1]
  40025a:	4099      	lsls	r1, r3
  40025c:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  40025e:	6541      	str	r1, [r0, #84]	; 0x54
}
  400260:	bc30      	pop	{r4, r5}
  400262:	4770      	bx	lr

00400264 <afec_temp_sensor_set_config>:
	reg = ((config->rctc) ? AFEC_TEMPMR_RTCT : 0) | (config->mode);
  400264:	784b      	ldrb	r3, [r1, #1]
  400266:	780a      	ldrb	r2, [r1, #0]
  400268:	4313      	orrs	r3, r2
	afec->AFEC_TEMPMR = reg;
  40026a:	6703      	str	r3, [r0, #112]	; 0x70
			AFEC_TEMPCWR_THIGHTHRES(config->high_threshold);
  40026c:	888a      	ldrh	r2, [r1, #4]
	afec->AFEC_TEMPCWR = AFEC_TEMPCWR_TLOWTHRES(config->low_threshold) |
  40026e:	884b      	ldrh	r3, [r1, #2]
  400270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  400274:	6743      	str	r3, [r0, #116]	; 0x74
  400276:	4770      	bx	lr

00400278 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  400278:	2200      	movs	r2, #0
  40027a:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  40027c:	4b08      	ldr	r3, [pc, #32]	; (4002a0 <afec_get_config_defaults+0x28>)
  40027e:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  400280:	4b08      	ldr	r3, [pc, #32]	; (4002a4 <afec_get_config_defaults+0x2c>)
  400282:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  400284:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400288:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40028a:	2302      	movs	r3, #2
  40028c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40028e:	2301      	movs	r3, #1
  400290:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  400292:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  400294:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  400296:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  400298:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40029a:	7583      	strb	r3, [r0, #22]
  40029c:	4770      	bx	lr
  40029e:	bf00      	nop
  4002a0:	11e1a300 	.word	0x11e1a300
  4002a4:	005b8d80 	.word	0x005b8d80

004002a8 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  4002a8:	2300      	movs	r3, #0
  4002aa:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  4002ac:	2301      	movs	r3, #1
  4002ae:	7043      	strb	r3, [r0, #1]
  4002b0:	4770      	bx	lr

004002b2 <afec_temp_sensor_get_config_defaults>:
	cfg->rctc = false;
  4002b2:	2300      	movs	r3, #0
  4002b4:	7003      	strb	r3, [r0, #0]
	cfg->mode= AFEC_TEMP_CMP_MODE_2;
  4002b6:	2320      	movs	r3, #32
  4002b8:	7043      	strb	r3, [r0, #1]
	cfg->low_threshold= 0xFF;
  4002ba:	23ff      	movs	r3, #255	; 0xff
  4002bc:	8043      	strh	r3, [r0, #2]
	cfg->high_threshold= 0xFFF;
  4002be:	f640 73ff 	movw	r3, #4095	; 0xfff
  4002c2:	8083      	strh	r3, [r0, #4]
  4002c4:	4770      	bx	lr
	...

004002c8 <afec_init>:
	return afec->AFEC_ISR;
  4002c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  4002ca:	f012 7280 	ands.w	r2, r2, #16777216	; 0x1000000
  4002ce:	d001      	beq.n	4002d4 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  4002d0:	2019      	movs	r0, #25
  4002d2:	4770      	bx	lr
{
  4002d4:	b410      	push	{r4}
	afec->AFEC_CR = AFEC_CR_SWRST;
  4002d6:	2301      	movs	r3, #1
  4002d8:	6003      	str	r3, [r0, #0]
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002da:	7ccb      	ldrb	r3, [r1, #19]
  4002dc:	2b00      	cmp	r3, #0
  4002de:	bf18      	it	ne
  4002e0:	f04f 4200 	movne.w	r2, #2147483648	; 0x80000000
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4002e4:	684b      	ldr	r3, [r1, #4]
  4002e6:	688c      	ldr	r4, [r1, #8]
  4002e8:	fbb3 f3f4 	udiv	r3, r3, r4
  4002ec:	3b01      	subs	r3, #1
  4002ee:	021b      	lsls	r3, r3, #8
  4002f0:	b29b      	uxth	r3, r3
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4002f2:	68cc      	ldr	r4, [r1, #12]
  4002f4:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  4002f8:	4323      	orrs	r3, r4
			AFEC_MR_TRACKTIM(config->tracktim) |
  4002fa:	7c0c      	ldrb	r4, [r1, #16]
  4002fc:	0624      	lsls	r4, r4, #24
  4002fe:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  400302:	4323      	orrs	r3, r4
			AFEC_MR_TRANSFER(config->transfer) |
  400304:	7c4c      	ldrb	r4, [r1, #17]
  400306:	0724      	lsls	r4, r4, #28
  400308:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40030c:	4323      	orrs	r3, r4
  40030e:	4313      	orrs	r3, r2
	afec->AFEC_MR = reg;
  400310:	6043      	str	r3, [r0, #4]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400312:	7d0b      	ldrb	r3, [r1, #20]
  400314:	2b00      	cmp	r3, #0
  400316:	bf14      	ite	ne
  400318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  40031c:	2300      	moveq	r3, #0
  40031e:	680a      	ldr	r2, [r1, #0]
  400320:	4313      	orrs	r3, r2
			(config->stm ? AFEC_EMR_STM : 0);
  400322:	7d4a      	ldrb	r2, [r1, #21]
  400324:	2a00      	cmp	r2, #0
  400326:	bf14      	ite	ne
  400328:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
  40032c:	2200      	moveq	r2, #0
			(config->resolution) |
  40032e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  400330:	6083      	str	r3, [r0, #8]
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400332:	7d8b      	ldrb	r3, [r1, #22]
  400334:	021b      	lsls	r3, r3, #8
  400336:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40033a:	f043 030c 	orr.w	r3, r3, #12
  40033e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	if(afec == AFEC0) {
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <afec_init+0xb8>)
  400344:	4298      	cmp	r0, r3
  400346:	d006      	beq.n	400356 <afec_init+0x8e>
	if(afec == AFEC1) {
  400348:	4b0e      	ldr	r3, [pc, #56]	; (400384 <afec_init+0xbc>)
  40034a:	4298      	cmp	r0, r3
  40034c:	d00d      	beq.n	40036a <afec_init+0xa2>
	return STATUS_OK;
  40034e:	2000      	movs	r0, #0
}
  400350:	f85d 4b04 	ldr.w	r4, [sp], #4
  400354:	4770      	bx	lr
  400356:	4b0c      	ldr	r3, [pc, #48]	; (400388 <afec_init+0xc0>)
  400358:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[0][i] = 0;
  40035c:	2200      	movs	r2, #0
  40035e:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400362:	428b      	cmp	r3, r1
  400364:	d1fb      	bne.n	40035e <afec_init+0x96>
	return STATUS_OK;
  400366:	2000      	movs	r0, #0
  400368:	e7f2      	b.n	400350 <afec_init+0x88>
  40036a:	4b08      	ldr	r3, [pc, #32]	; (40038c <afec_init+0xc4>)
  40036c:	f103 0140 	add.w	r1, r3, #64	; 0x40
			afec_callback_pointer[1][i] = 0;
  400370:	2200      	movs	r2, #0
  400372:	f843 2b04 	str.w	r2, [r3], #4
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  400376:	428b      	cmp	r3, r1
  400378:	d1fb      	bne.n	400372 <afec_init+0xaa>
	return STATUS_OK;
  40037a:	2000      	movs	r0, #0
  40037c:	e7e8      	b.n	400350 <afec_init+0x88>
  40037e:	bf00      	nop
  400380:	4003c000 	.word	0x4003c000
  400384:	40064000 	.word	0x40064000
  400388:	2040c99c 	.word	0x2040c99c
  40038c:	2040c9e0 	.word	0x2040c9e0

00400390 <afec_enable_interrupt>:
	if (interrupt_source == AFEC_INTERRUPT_ALL) {
  400390:	4b0c      	ldr	r3, [pc, #48]	; (4003c4 <afec_enable_interrupt+0x34>)
  400392:	4299      	cmp	r1, r3
  400394:	d007      	beq.n	4003a6 <afec_enable_interrupt+0x16>
	if (interrupt_source < AFEC_INTERRUPT_DATA_READY) {
  400396:	290b      	cmp	r1, #11
  400398:	d80b      	bhi.n	4003b2 <afec_enable_interrupt+0x22>
		if (interrupt_source == AFEC_INTERRUPT_EOC_11) {
  40039a:	d006      	beq.n	4003aa <afec_enable_interrupt+0x1a>
			afec->AFEC_IER = 1 << interrupt_source;
  40039c:	2301      	movs	r3, #1
  40039e:	fa03 f101 	lsl.w	r1, r3, r1
  4003a2:	6241      	str	r1, [r0, #36]	; 0x24
  4003a4:	4770      	bx	lr
		afec->AFEC_IER = AFEC_INTERRUPT_ALL;
  4003a6:	6243      	str	r3, [r0, #36]	; 0x24
		return;
  4003a8:	4770      	bx	lr
			afec->AFEC_IER = 1 << AFEC_TEMP_INT_SOURCE_NUM;
  4003aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ae:	6243      	str	r3, [r0, #36]	; 0x24
  4003b0:	4770      	bx	lr
	} else if (interrupt_source < AFEC_INTERRUPT_TEMP_CHANGE) {
  4003b2:	290e      	cmp	r1, #14
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1);
  4003b4:	bf94      	ite	ls
  4003b6:	310c      	addls	r1, #12
				+ AFEC_INTERRUPT_GAP2);
  4003b8:	310f      	addhi	r1, #15
		afec->AFEC_IER = 1 << (interrupt_source + AFEC_INTERRUPT_GAP1
  4003ba:	2301      	movs	r3, #1
  4003bc:	fa03 f101 	lsl.w	r1, r3, r1
  4003c0:	6241      	str	r1, [r0, #36]	; 0x24
  4003c2:	4770      	bx	lr
  4003c4:	47000fff 	.word	0x47000fff

004003c8 <afec_set_callback>:
{
  4003c8:	b538      	push	{r3, r4, r5, lr}
	if (afec == AFEC1) {
  4003ca:	4c11      	ldr	r4, [pc, #68]	; (400410 <afec_set_callback+0x48>)
  4003cc:	42a0      	cmp	r0, r4
	afec_callback_pointer[i][source] = callback;
  4003ce:	bf0c      	ite	eq
  4003d0:	2410      	moveq	r4, #16
  4003d2:	2400      	movne	r4, #0
  4003d4:	440c      	add	r4, r1
  4003d6:	4d0f      	ldr	r5, [pc, #60]	; (400414 <afec_set_callback+0x4c>)
  4003d8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
	if (!i) {
  4003dc:	d10a      	bne.n	4003f4 <afec_set_callback+0x2c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003de:	4a0e      	ldr	r2, [pc, #56]	; (400418 <afec_set_callback+0x50>)
  4003e0:	f44f 7480 	mov.w	r4, #256	; 0x100
  4003e4:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003e8:	015b      	lsls	r3, r3, #5
  4003ea:	b2db      	uxtb	r3, r3
  4003ec:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4003f0:	6054      	str	r4, [r2, #4]
  4003f2:	e009      	b.n	400408 <afec_set_callback+0x40>
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4003f4:	4a08      	ldr	r2, [pc, #32]	; (400418 <afec_set_callback+0x50>)
  4003f6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
  4003fa:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4003fe:	015b      	lsls	r3, r3, #5
  400400:	b2db      	uxtb	r3, r3
  400402:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400406:	6014      	str	r4, [r2, #0]
	afec_enable_interrupt(afec, source);
  400408:	4b04      	ldr	r3, [pc, #16]	; (40041c <afec_set_callback+0x54>)
  40040a:	4798      	blx	r3
  40040c:	bd38      	pop	{r3, r4, r5, pc}
  40040e:	bf00      	nop
  400410:	40064000 	.word	0x40064000
  400414:	2040c9a0 	.word	0x2040c9a0
  400418:	e000e100 	.word	0xe000e100
  40041c:	00400391 	.word	0x00400391

00400420 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  400420:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  400422:	4802      	ldr	r0, [pc, #8]	; (40042c <AFEC0_Handler+0xc>)
  400424:	4b02      	ldr	r3, [pc, #8]	; (400430 <AFEC0_Handler+0x10>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	4003c000 	.word	0x4003c000
  400430:	004001ad 	.word	0x004001ad

00400434 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  400434:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  400436:	4802      	ldr	r0, [pc, #8]	; (400440 <AFEC1_Handler+0xc>)
  400438:	4b02      	ldr	r3, [pc, #8]	; (400444 <AFEC1_Handler+0x10>)
  40043a:	4798      	blx	r3
  40043c:	bd08      	pop	{r3, pc}
  40043e:	bf00      	nop
  400440:	40064000 	.word	0x40064000
  400444:	004001ad 	.word	0x004001ad

00400448 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  400448:	b500      	push	{lr}
  40044a:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  40044c:	4b13      	ldr	r3, [pc, #76]	; (40049c <afec_enable+0x54>)
  40044e:	4298      	cmp	r0, r3
  400450:	bf0c      	ite	eq
  400452:	2028      	moveq	r0, #40	; 0x28
  400454:	201d      	movne	r0, #29
  400456:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <afec_enable+0x58>)
  400458:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40045a:	4b12      	ldr	r3, [pc, #72]	; (4004a4 <afec_enable+0x5c>)
  40045c:	789b      	ldrb	r3, [r3, #2]
  40045e:	2bff      	cmp	r3, #255	; 0xff
  400460:	d01a      	beq.n	400498 <afec_enable+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400462:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400466:	fab3 f383 	clz	r3, r3
  40046a:	095b      	lsrs	r3, r3, #5
  40046c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40046e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400470:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400474:	2200      	movs	r2, #0
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <afec_enable+0x60>)
  400478:	701a      	strb	r2, [r3, #0]
	return flags;
  40047a:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40047c:	4a09      	ldr	r2, [pc, #36]	; (4004a4 <afec_enable+0x5c>)
  40047e:	7893      	ldrb	r3, [r2, #2]
  400480:	3301      	adds	r3, #1
  400482:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400484:	b129      	cbz	r1, 400492 <afec_enable+0x4a>
		cpu_irq_enable();
  400486:	2201      	movs	r2, #1
  400488:	4b07      	ldr	r3, [pc, #28]	; (4004a8 <afec_enable+0x60>)
  40048a:	701a      	strb	r2, [r3, #0]
  40048c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400490:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  400492:	b003      	add	sp, #12
  400494:	f85d fb04 	ldr.w	pc, [sp], #4
  400498:	e7fe      	b.n	400498 <afec_enable+0x50>
  40049a:	bf00      	nop
  40049c:	40064000 	.word	0x40064000
  4004a0:	00405151 	.word	0x00405151
  4004a4:	2040c998 	.word	0x2040c998
  4004a8:	20400018 	.word	0x20400018

004004ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004ac:	b921      	cbnz	r1, 4004b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4004ae:	6843      	ldr	r3, [r0, #4]
  4004b0:	f023 0301 	bic.w	r3, r3, #1
  4004b4:	6043      	str	r3, [r0, #4]
  4004b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4004b8:	6843      	ldr	r3, [r0, #4]
  4004ba:	f043 0301 	orr.w	r3, r3, #1
  4004be:	6043      	str	r3, [r0, #4]
  4004c0:	4770      	bx	lr

004004c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4004c2:	6201      	str	r1, [r0, #32]
  4004c4:	4770      	bx	lr

004004c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4004c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4004c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004ca:	6884      	ldr	r4, [r0, #8]
  4004cc:	42a5      	cmp	r5, r4
  4004ce:	d003      	beq.n	4004d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4004d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4004d2:	6884      	ldr	r4, [r0, #8]
  4004d4:	42ac      	cmp	r4, r5
  4004d6:	d1fb      	bne.n	4004d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4004d8:	b161      	cbz	r1, 4004f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4004da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4004de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4004e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4004e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4004ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4004ee:	bf18      	it	ne
  4004f0:	300c      	addne	r0, #12
  4004f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4004f4:	b142      	cbz	r2, 400508 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4004f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4004fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4004fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400502:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400506:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400508:	b143      	cbz	r3, 40051c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40050a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40050e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400512:	f004 040f 	and.w	r4, r4, #15
  400516:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40051a:	601c      	str	r4, [r3, #0]
	}
}
  40051c:	bc30      	pop	{r4, r5}
  40051e:	4770      	bx	lr

00400520 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400520:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400522:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400524:	f014 0f01 	tst.w	r4, #1
  400528:	d005      	beq.n	400536 <rtc_set_time+0x16>
  40052a:	290c      	cmp	r1, #12
  40052c:	d903      	bls.n	400536 <rtc_set_time+0x16>
			ul_hour -= 12;
  40052e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400530:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400534:	e000      	b.n	400538 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400536:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400538:	4c1c      	ldr	r4, [pc, #112]	; (4005ac <rtc_set_time+0x8c>)
  40053a:	fba4 5603 	umull	r5, r6, r4, r3
  40053e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400540:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400544:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400548:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40054c:	fba4 6502 	umull	r6, r5, r4, r2
  400550:	08ed      	lsrs	r5, r5, #3
  400552:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400556:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40055a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40055e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400562:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400564:	fba4 4201 	umull	r4, r2, r4, r1
  400568:	08d2      	lsrs	r2, r2, #3
  40056a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40056e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400572:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400576:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40057a:	6983      	ldr	r3, [r0, #24]
  40057c:	f013 0f04 	tst.w	r3, #4
  400580:	d0fb      	beq.n	40057a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400582:	6803      	ldr	r3, [r0, #0]
  400584:	f043 0301 	orr.w	r3, r3, #1
  400588:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40058a:	6983      	ldr	r3, [r0, #24]
  40058c:	f013 0f01 	tst.w	r3, #1
  400590:	d0fb      	beq.n	40058a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400592:	2301      	movs	r3, #1
  400594:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400596:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400598:	6803      	ldr	r3, [r0, #0]
  40059a:	f023 0301 	bic.w	r3, r3, #1
  40059e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4005a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4005a2:	f000 0001 	and.w	r0, r0, #1
  4005a6:	bcf0      	pop	{r4, r5, r6, r7}
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	cccccccd 	.word	0xcccccccd

004005b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4005b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005b2:	9c05      	ldr	r4, [sp, #20]
  4005b4:	9d06      	ldr	r5, [sp, #24]
  4005b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4005b8:	460e      	mov	r6, r1
  4005ba:	b1b1      	cbz	r1, 4005ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4005bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4005be:	f011 0f01 	tst.w	r1, #1
  4005c2:	d005      	beq.n	4005d0 <rtc_set_time_alarm+0x20>
  4005c4:	2a0c      	cmp	r2, #12
  4005c6:	d903      	bls.n	4005d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4005c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4005ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4005ce:	e000      	b.n	4005d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4005d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005d2:	4919      	ldr	r1, [pc, #100]	; (400638 <rtc_set_time_alarm+0x88>)
  4005d4:	fba1 e102 	umull	lr, r1, r1, r2
  4005d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4005da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4005de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4005e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4005e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4005e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4005ea:	b15b      	cbz	r3, 400604 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005ec:	4b12      	ldr	r3, [pc, #72]	; (400638 <rtc_set_time_alarm+0x88>)
  4005ee:	fba3 2304 	umull	r2, r3, r3, r4
  4005f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4005f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4005f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4005fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4005fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400602:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400604:	b155      	cbz	r5, 40061c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400606:	4b0c      	ldr	r3, [pc, #48]	; (400638 <rtc_set_time_alarm+0x88>)
  400608:	fba3 2307 	umull	r2, r3, r3, r7
  40060c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40060e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400612:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400616:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40061a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40061c:	6902      	ldr	r2, [r0, #16]
  40061e:	4b07      	ldr	r3, [pc, #28]	; (40063c <rtc_set_time_alarm+0x8c>)
  400620:	4013      	ands	r3, r2
  400622:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400624:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400626:	6902      	ldr	r2, [r0, #16]
  400628:	4b05      	ldr	r3, [pc, #20]	; (400640 <rtc_set_time_alarm+0x90>)
  40062a:	4313      	orrs	r3, r2
  40062c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40062e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400630:	f000 0004 	and.w	r0, r0, #4
  400634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400636:	bf00      	nop
  400638:	cccccccd 	.word	0xcccccccd
  40063c:	ff7f7f7f 	.word	0xff7f7f7f
  400640:	00808080 	.word	0x00808080

00400644 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400644:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400646:	4d2a      	ldr	r5, [pc, #168]	; (4006f0 <rtc_set_date+0xac>)
  400648:	fba5 4603 	umull	r4, r6, r5, r3
  40064c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40064e:	9c03      	ldr	r4, [sp, #12]
  400650:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400652:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400656:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40065a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40065e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400662:	fba5 6402 	umull	r6, r4, r5, r2
  400666:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400668:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40066c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400670:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400674:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400678:	4b1e      	ldr	r3, [pc, #120]	; (4006f4 <rtc_set_date+0xb0>)
  40067a:	fba3 4301 	umull	r4, r3, r3, r1
  40067e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400680:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400684:	4b1c      	ldr	r3, [pc, #112]	; (4006f8 <rtc_set_date+0xb4>)
  400686:	fba3 4301 	umull	r4, r3, r3, r1
  40068a:	095b      	lsrs	r3, r3, #5
  40068c:	fba5 6403 	umull	r6, r4, r5, r3
  400690:	08e4      	lsrs	r4, r4, #3
  400692:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400696:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40069a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40069c:	fba5 4301 	umull	r4, r3, r5, r1
  4006a0:	08db      	lsrs	r3, r3, #3
  4006a2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4006a6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4006ae:	fba5 1503 	umull	r1, r5, r5, r3
  4006b2:	08ed      	lsrs	r5, r5, #3
  4006b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4006b8:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4006bc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4006c0:	6983      	ldr	r3, [r0, #24]
  4006c2:	f013 0f04 	tst.w	r3, #4
  4006c6:	d0fb      	beq.n	4006c0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4006c8:	6803      	ldr	r3, [r0, #0]
  4006ca:	f043 0302 	orr.w	r3, r3, #2
  4006ce:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4006d0:	6983      	ldr	r3, [r0, #24]
  4006d2:	f013 0f01 	tst.w	r3, #1
  4006d6:	d0fb      	beq.n	4006d0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4006d8:	2301      	movs	r3, #1
  4006da:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4006dc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4006de:	6803      	ldr	r3, [r0, #0]
  4006e0:	f023 0302 	bic.w	r3, r3, #2
  4006e4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4006e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4006e8:	f000 0002 	and.w	r0, r0, #2
  4006ec:	bc70      	pop	{r4, r5, r6}
  4006ee:	4770      	bx	lr
  4006f0:	cccccccd 	.word	0xcccccccd
  4006f4:	10624dd3 	.word	0x10624dd3
  4006f8:	51eb851f 	.word	0x51eb851f

004006fc <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4006fc:	b430      	push	{r4, r5}
  4006fe:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400700:	460c      	mov	r4, r1
  400702:	b151      	cbz	r1, 40071a <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400704:	4c12      	ldr	r4, [pc, #72]	; (400750 <rtc_set_date_alarm+0x54>)
  400706:	fba4 1402 	umull	r1, r4, r4, r2
  40070a:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40070c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400710:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400714:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400716:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40071a:	b15b      	cbz	r3, 400734 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40071c:	4a0c      	ldr	r2, [pc, #48]	; (400750 <rtc_set_date_alarm+0x54>)
  40071e:	fba2 3205 	umull	r3, r2, r2, r5
  400722:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400724:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  400728:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  40072c:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40072e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  400732:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400734:	6942      	ldr	r2, [r0, #20]
  400736:	4b07      	ldr	r3, [pc, #28]	; (400754 <rtc_set_date_alarm+0x58>)
  400738:	4013      	ands	r3, r2
  40073a:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  40073c:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  40073e:	6942      	ldr	r2, [r0, #20]
  400740:	4b05      	ldr	r3, [pc, #20]	; (400758 <rtc_set_date_alarm+0x5c>)
  400742:	4313      	orrs	r3, r2
  400744:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  400746:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400748:	f000 0008 	and.w	r0, r0, #8
  40074c:	bc30      	pop	{r4, r5}
  40074e:	4770      	bx	lr
  400750:	cccccccd 	.word	0xcccccccd
  400754:	7f7fffff 	.word	0x7f7fffff
  400758:	80800000 	.word	0x80800000

0040075c <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  40075c:	6980      	ldr	r0, [r0, #24]
}
  40075e:	4770      	bx	lr

00400760 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400760:	61c1      	str	r1, [r0, #28]
  400762:	4770      	bx	lr

00400764 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400764:	f100 0308 	add.w	r3, r0, #8
  400768:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40076a:	f04f 32ff 	mov.w	r2, #4294967295
  40076e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400770:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400772:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400774:	2300      	movs	r3, #0
  400776:	6003      	str	r3, [r0, #0]
  400778:	4770      	bx	lr

0040077a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40077a:	2300      	movs	r3, #0
  40077c:	6103      	str	r3, [r0, #16]
  40077e:	4770      	bx	lr

00400780 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400780:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400782:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400784:	689a      	ldr	r2, [r3, #8]
  400786:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400788:	689a      	ldr	r2, [r3, #8]
  40078a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40078c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40078e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400790:	6803      	ldr	r3, [r0, #0]
  400792:	3301      	adds	r3, #1
  400794:	6003      	str	r3, [r0, #0]
  400796:	4770      	bx	lr

00400798 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400798:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40079a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40079c:	f1b5 3fff 	cmp.w	r5, #4294967295
  4007a0:	d002      	beq.n	4007a8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4007a2:	f100 0208 	add.w	r2, r0, #8
  4007a6:	e002      	b.n	4007ae <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  4007a8:	6902      	ldr	r2, [r0, #16]
  4007aa:	e004      	b.n	4007b6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4007ac:	461a      	mov	r2, r3
  4007ae:	6853      	ldr	r3, [r2, #4]
  4007b0:	681c      	ldr	r4, [r3, #0]
  4007b2:	42a5      	cmp	r5, r4
  4007b4:	d2fa      	bcs.n	4007ac <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  4007b6:	6853      	ldr	r3, [r2, #4]
  4007b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  4007ba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  4007bc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  4007be:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4007c0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4007c2:	6803      	ldr	r3, [r0, #0]
  4007c4:	3301      	adds	r3, #1
  4007c6:	6003      	str	r3, [r0, #0]
}
  4007c8:	bc30      	pop	{r4, r5}
  4007ca:	4770      	bx	lr

004007cc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  4007cc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  4007ce:	6842      	ldr	r2, [r0, #4]
  4007d0:	6881      	ldr	r1, [r0, #8]
  4007d2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4007d4:	6882      	ldr	r2, [r0, #8]
  4007d6:	6841      	ldr	r1, [r0, #4]
  4007d8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4007da:	685a      	ldr	r2, [r3, #4]
  4007dc:	4290      	cmp	r0, r2
  4007de:	d005      	beq.n	4007ec <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4007e0:	2200      	movs	r2, #0
  4007e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4007e4:	6818      	ldr	r0, [r3, #0]
  4007e6:	3801      	subs	r0, #1
  4007e8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4007ea:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4007ec:	6882      	ldr	r2, [r0, #8]
  4007ee:	605a      	str	r2, [r3, #4]
  4007f0:	e7f6      	b.n	4007e0 <uxListRemove+0x14>

004007f2 <prvTaskExitError>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4007f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007f6:	b672      	cpsid	i
  4007f8:	f383 8811 	msr	BASEPRI, r3
  4007fc:	f3bf 8f6f 	isb	sy
  400800:	f3bf 8f4f 	dsb	sy
  400804:	b662      	cpsie	i
  400806:	e7fe      	b.n	400806 <prvTaskExitError+0x14>

00400808 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400808:	4806      	ldr	r0, [pc, #24]	; (400824 <prvPortStartFirstTask+0x1c>)
  40080a:	6800      	ldr	r0, [r0, #0]
  40080c:	6800      	ldr	r0, [r0, #0]
  40080e:	f380 8808 	msr	MSP, r0
  400812:	b662      	cpsie	i
  400814:	b661      	cpsie	f
  400816:	f3bf 8f4f 	dsb	sy
  40081a:	f3bf 8f6f 	isb	sy
  40081e:	df00      	svc	0
  400820:	bf00      	nop
  400822:	0000      	.short	0x0000
  400824:	e000ed08 	.word	0xe000ed08

00400828 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400828:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400838 <vPortEnableVFP+0x10>
  40082c:	6801      	ldr	r1, [r0, #0]
  40082e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400832:	6001      	str	r1, [r0, #0]
  400834:	4770      	bx	lr
  400836:	0000      	.short	0x0000
  400838:	e000ed88 	.word	0xe000ed88

0040083c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  40083c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400840:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400844:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400848:	4b05      	ldr	r3, [pc, #20]	; (400860 <pxPortInitialiseStack+0x24>)
  40084a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40084e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400852:	f06f 0302 	mvn.w	r3, #2
  400856:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40085a:	3844      	subs	r0, #68	; 0x44
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	004007f3 	.word	0x004007f3

00400864 <SVC_Handler>:
	__asm volatile (
  400864:	4b06      	ldr	r3, [pc, #24]	; (400880 <pxCurrentTCBConst2>)
  400866:	6819      	ldr	r1, [r3, #0]
  400868:	6808      	ldr	r0, [r1, #0]
  40086a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40086e:	f380 8809 	msr	PSP, r0
  400872:	f3bf 8f6f 	isb	sy
  400876:	f04f 0000 	mov.w	r0, #0
  40087a:	f380 8811 	msr	BASEPRI, r0
  40087e:	4770      	bx	lr

00400880 <pxCurrentTCBConst2>:
  400880:	2040c1f4 	.word	0x2040c1f4
  400884:	4770      	bx	lr
  400886:	bf00      	nop

00400888 <vPortEnterCritical>:
  400888:	f04f 0380 	mov.w	r3, #128	; 0x80
  40088c:	b672      	cpsid	i
  40088e:	f383 8811 	msr	BASEPRI, r3
  400892:	f3bf 8f6f 	isb	sy
  400896:	f3bf 8f4f 	dsb	sy
  40089a:	b662      	cpsie	i
	uxCriticalNesting++;
  40089c:	4a02      	ldr	r2, [pc, #8]	; (4008a8 <vPortEnterCritical+0x20>)
  40089e:	6813      	ldr	r3, [r2, #0]
  4008a0:	3301      	adds	r3, #1
  4008a2:	6013      	str	r3, [r2, #0]
  4008a4:	4770      	bx	lr
  4008a6:	bf00      	nop
  4008a8:	2040000c 	.word	0x2040000c

004008ac <vPortExitCritical>:
	uxCriticalNesting--;
  4008ac:	4a03      	ldr	r2, [pc, #12]	; (4008bc <vPortExitCritical+0x10>)
  4008ae:	6813      	ldr	r3, [r2, #0]
  4008b0:	3b01      	subs	r3, #1
  4008b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4008b4:	b90b      	cbnz	r3, 4008ba <vPortExitCritical+0xe>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4008b6:	f383 8811 	msr	BASEPRI, r3
  4008ba:	4770      	bx	lr
  4008bc:	2040000c 	.word	0x2040000c

004008c0 <PendSV_Handler>:
	__asm volatile
  4008c0:	f3ef 8009 	mrs	r0, PSP
  4008c4:	f3bf 8f6f 	isb	sy
  4008c8:	4b15      	ldr	r3, [pc, #84]	; (400920 <pxCurrentTCBConst>)
  4008ca:	681a      	ldr	r2, [r3, #0]
  4008cc:	f01e 0f10 	tst.w	lr, #16
  4008d0:	bf08      	it	eq
  4008d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4008d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008da:	6010      	str	r0, [r2, #0]
  4008dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4008e0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4008e4:	b672      	cpsid	i
  4008e6:	f380 8811 	msr	BASEPRI, r0
  4008ea:	f3bf 8f4f 	dsb	sy
  4008ee:	f3bf 8f6f 	isb	sy
  4008f2:	b662      	cpsie	i
  4008f4:	f000 ff06 	bl	401704 <vTaskSwitchContext>
  4008f8:	f04f 0000 	mov.w	r0, #0
  4008fc:	f380 8811 	msr	BASEPRI, r0
  400900:	bc08      	pop	{r3}
  400902:	6819      	ldr	r1, [r3, #0]
  400904:	6808      	ldr	r0, [r1, #0]
  400906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40090a:	f01e 0f10 	tst.w	lr, #16
  40090e:	bf08      	it	eq
  400910:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400914:	f380 8809 	msr	PSP, r0
  400918:	f3bf 8f6f 	isb	sy
  40091c:	4770      	bx	lr
  40091e:	bf00      	nop

00400920 <pxCurrentTCBConst>:
  400920:	2040c1f4 	.word	0x2040c1f4
  400924:	4770      	bx	lr
  400926:	bf00      	nop

00400928 <SysTick_Handler>:
{
  400928:	b508      	push	{r3, lr}
	__asm volatile
  40092a:	f3ef 8311 	mrs	r3, BASEPRI
  40092e:	f04f 0280 	mov.w	r2, #128	; 0x80
  400932:	b672      	cpsid	i
  400934:	f382 8811 	msr	BASEPRI, r2
  400938:	f3bf 8f6f 	isb	sy
  40093c:	f3bf 8f4f 	dsb	sy
  400940:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400942:	4b05      	ldr	r3, [pc, #20]	; (400958 <SysTick_Handler+0x30>)
  400944:	4798      	blx	r3
  400946:	b118      	cbz	r0, 400950 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40094c:	4b03      	ldr	r3, [pc, #12]	; (40095c <SysTick_Handler+0x34>)
  40094e:	601a      	str	r2, [r3, #0]
	__asm volatile
  400950:	2300      	movs	r3, #0
  400952:	f383 8811 	msr	BASEPRI, r3
  400956:	bd08      	pop	{r3, pc}
  400958:	004013c5 	.word	0x004013c5
  40095c:	e000ed04 	.word	0xe000ed04

00400960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400960:	4a03      	ldr	r2, [pc, #12]	; (400970 <vPortSetupTimerInterrupt+0x10>)
  400962:	4b04      	ldr	r3, [pc, #16]	; (400974 <vPortSetupTimerInterrupt+0x14>)
  400964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400966:	2207      	movs	r2, #7
  400968:	3b04      	subs	r3, #4
  40096a:	601a      	str	r2, [r3, #0]
  40096c:	4770      	bx	lr
  40096e:	bf00      	nop
  400970:	000927bf 	.word	0x000927bf
  400974:	e000e014 	.word	0xe000e014

00400978 <xPortStartScheduler>:
{
  400978:	b508      	push	{r3, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40097a:	4b0c      	ldr	r3, [pc, #48]	; (4009ac <xPortStartScheduler+0x34>)
  40097c:	681a      	ldr	r2, [r3, #0]
  40097e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  400982:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  400984:	681a      	ldr	r2, [r3, #0]
  400986:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40098a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40098c:	4b08      	ldr	r3, [pc, #32]	; (4009b0 <xPortStartScheduler+0x38>)
  40098e:	4798      	blx	r3
	uxCriticalNesting = 0;
  400990:	2200      	movs	r2, #0
  400992:	4b08      	ldr	r3, [pc, #32]	; (4009b4 <xPortStartScheduler+0x3c>)
  400994:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  400996:	4b08      	ldr	r3, [pc, #32]	; (4009b8 <xPortStartScheduler+0x40>)
  400998:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40099a:	4a08      	ldr	r2, [pc, #32]	; (4009bc <xPortStartScheduler+0x44>)
  40099c:	6813      	ldr	r3, [r2, #0]
  40099e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4009a2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4009a4:	4b06      	ldr	r3, [pc, #24]	; (4009c0 <xPortStartScheduler+0x48>)
  4009a6:	4798      	blx	r3
	prvTaskExitError();
  4009a8:	4b06      	ldr	r3, [pc, #24]	; (4009c4 <xPortStartScheduler+0x4c>)
  4009aa:	4798      	blx	r3
  4009ac:	e000ed20 	.word	0xe000ed20
  4009b0:	00400961 	.word	0x00400961
  4009b4:	2040000c 	.word	0x2040000c
  4009b8:	00400829 	.word	0x00400829
  4009bc:	e000ef34 	.word	0xe000ef34
  4009c0:	00400809 	.word	0x00400809
  4009c4:	004007f3 	.word	0x004007f3

004009c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4009c8:	b538      	push	{r3, r4, r5, lr}
  4009ca:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4009cc:	f010 0f07 	tst.w	r0, #7
  4009d0:	d002      	beq.n	4009d8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4009d2:	f020 0407 	bic.w	r4, r0, #7
  4009d6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4009d8:	4b11      	ldr	r3, [pc, #68]	; (400a20 <pvPortMalloc+0x58>)
  4009da:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4009dc:	4b11      	ldr	r3, [pc, #68]	; (400a24 <pvPortMalloc+0x5c>)
  4009de:	681b      	ldr	r3, [r3, #0]
  4009e0:	b193      	cbz	r3, 400a08 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4009e2:	4b11      	ldr	r3, [pc, #68]	; (400a28 <pvPortMalloc+0x60>)
  4009e4:	681b      	ldr	r3, [r3, #0]
  4009e6:	441c      	add	r4, r3
  4009e8:	42a3      	cmp	r3, r4
  4009ea:	d213      	bcs.n	400a14 <pvPortMalloc+0x4c>
  4009ec:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4009f0:	4294      	cmp	r4, r2
  4009f2:	d80f      	bhi.n	400a14 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4009f4:	4a0b      	ldr	r2, [pc, #44]	; (400a24 <pvPortMalloc+0x5c>)
  4009f6:	6815      	ldr	r5, [r2, #0]
  4009f8:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4009fa:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <pvPortMalloc+0x60>)
  4009fc:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4009fe:	4b0b      	ldr	r3, [pc, #44]	; (400a2c <pvPortMalloc+0x64>)
  400a00:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  400a02:	b14d      	cbz	r5, 400a18 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  400a04:	4628      	mov	r0, r5
  400a06:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  400a08:	4b09      	ldr	r3, [pc, #36]	; (400a30 <pvPortMalloc+0x68>)
  400a0a:	f023 0307 	bic.w	r3, r3, #7
  400a0e:	4a05      	ldr	r2, [pc, #20]	; (400a24 <pvPortMalloc+0x5c>)
  400a10:	6013      	str	r3, [r2, #0]
  400a12:	e7e6      	b.n	4009e2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  400a14:	4b05      	ldr	r3, [pc, #20]	; (400a2c <pvPortMalloc+0x64>)
  400a16:	4798      	blx	r3
			vApplicationMallocFailedHook();
  400a18:	4b06      	ldr	r3, [pc, #24]	; (400a34 <pvPortMalloc+0x6c>)
  400a1a:	4798      	blx	r3
  400a1c:	2500      	movs	r5, #0
	return pvReturn;
  400a1e:	e7f1      	b.n	400a04 <pvPortMalloc+0x3c>
  400a20:	004013a9 	.word	0x004013a9
  400a24:	204009ec 	.word	0x204009ec
  400a28:	2040c1f0 	.word	0x2040c1f0
  400a2c:	004014fd 	.word	0x004014fd
  400a30:	204009f8 	.word	0x204009f8
  400a34:	00405be3 	.word	0x00405be3

00400a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  400a38:	4770      	bx	lr
	...

00400a3c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400a3c:	b538      	push	{r3, r4, r5, lr}
  400a3e:	4604      	mov	r4, r0
  400a40:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400a42:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a44:	b962      	cbnz	r2, 400a60 <prvCopyDataToQueue+0x24>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400a46:	6803      	ldr	r3, [r0, #0]
  400a48:	b123      	cbz	r3, 400a54 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
  400a4a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  400a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400a4e:	3301      	adds	r3, #1
  400a50:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400a52:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400a54:	6840      	ldr	r0, [r0, #4]
  400a56:	4b18      	ldr	r3, [pc, #96]	; (400ab8 <prvCopyDataToQueue+0x7c>)
  400a58:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400a5a:	2300      	movs	r3, #0
  400a5c:	6063      	str	r3, [r4, #4]
  400a5e:	e7f5      	b.n	400a4c <prvCopyDataToQueue+0x10>
	else if( xPosition == queueSEND_TO_BACK )
  400a60:	b96d      	cbnz	r5, 400a7e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  400a62:	6880      	ldr	r0, [r0, #8]
  400a64:	4b15      	ldr	r3, [pc, #84]	; (400abc <prvCopyDataToQueue+0x80>)
  400a66:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400a68:	68a3      	ldr	r3, [r4, #8]
  400a6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a6c:	4413      	add	r3, r2
  400a6e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a70:	6862      	ldr	r2, [r4, #4]
  400a72:	4293      	cmp	r3, r2
  400a74:	d31c      	bcc.n	400ab0 <prvCopyDataToQueue+0x74>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  400a76:	6823      	ldr	r3, [r4, #0]
  400a78:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  400a7a:	2000      	movs	r0, #0
  400a7c:	e7e6      	b.n	400a4c <prvCopyDataToQueue+0x10>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400a7e:	68c0      	ldr	r0, [r0, #12]
  400a80:	4b0e      	ldr	r3, [pc, #56]	; (400abc <prvCopyDataToQueue+0x80>)
  400a82:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  400a84:	6c22      	ldr	r2, [r4, #64]	; 0x40
  400a86:	4252      	negs	r2, r2
  400a88:	68e3      	ldr	r3, [r4, #12]
  400a8a:	4413      	add	r3, r2
  400a8c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400a8e:	6821      	ldr	r1, [r4, #0]
  400a90:	428b      	cmp	r3, r1
  400a92:	d202      	bcs.n	400a9a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400a94:	6863      	ldr	r3, [r4, #4]
  400a96:	441a      	add	r2, r3
  400a98:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
  400a9a:	2d02      	cmp	r5, #2
  400a9c:	d001      	beq.n	400aa2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
  400a9e:	2000      	movs	r0, #0
  400aa0:	e7d4      	b.n	400a4c <prvCopyDataToQueue+0x10>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400aa4:	b133      	cbz	r3, 400ab4 <prvCopyDataToQueue+0x78>
				--( pxQueue->uxMessagesWaiting );
  400aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400aa8:	3b01      	subs	r3, #1
  400aaa:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  400aac:	2000      	movs	r0, #0
  400aae:	e7cd      	b.n	400a4c <prvCopyDataToQueue+0x10>
  400ab0:	2000      	movs	r0, #0
  400ab2:	e7cb      	b.n	400a4c <prvCopyDataToQueue+0x10>
  400ab4:	2000      	movs	r0, #0
  400ab6:	e7c9      	b.n	400a4c <prvCopyDataToQueue+0x10>
  400ab8:	00401a55 	.word	0x00401a55
  400abc:	004060ad 	.word	0x004060ad

00400ac0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  400ac0:	b530      	push	{r4, r5, lr}
  400ac2:	b083      	sub	sp, #12
  400ac4:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400ac6:	6d44      	ldr	r4, [r0, #84]	; 0x54
		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400ac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400acc:	429a      	cmp	r2, r3
  400ace:	d303      	bcc.n	400ad8 <prvNotifyQueueSetContainer+0x18>
	BaseType_t xReturn = pdFALSE;
  400ad0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400ad2:	4628      	mov	r0, r5
  400ad4:	b003      	add	sp, #12
  400ad6:	bd30      	pop	{r4, r5, pc}
  400ad8:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400ada:	a901      	add	r1, sp, #4
  400adc:	4620      	mov	r0, r4
  400ade:	4b0b      	ldr	r3, [pc, #44]	; (400b0c <prvNotifyQueueSetContainer+0x4c>)
  400ae0:	4798      	blx	r3
  400ae2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400aea:	d003      	beq.n	400af4 <prvNotifyQueueSetContainer+0x34>
				( pxQueueSetContainer->xTxLock )++;
  400aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400aee:	3301      	adds	r3, #1
  400af0:	64a3      	str	r3, [r4, #72]	; 0x48
  400af2:	e7ee      	b.n	400ad2 <prvNotifyQueueSetContainer+0x12>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400af6:	2b00      	cmp	r3, #0
  400af8:	d0eb      	beq.n	400ad2 <prvNotifyQueueSetContainer+0x12>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400afa:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400afe:	4b04      	ldr	r3, [pc, #16]	; (400b10 <prvNotifyQueueSetContainer+0x50>)
  400b00:	4798      	blx	r3
  400b02:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  400b04:	bf18      	it	ne
  400b06:	2501      	movne	r5, #1
  400b08:	e7e3      	b.n	400ad2 <prvNotifyQueueSetContainer+0x12>
  400b0a:	bf00      	nop
  400b0c:	00400a3d 	.word	0x00400a3d
  400b10:	00401889 	.word	0x00401889

00400b14 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400b14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b16:	b172      	cbz	r2, 400b36 <prvCopyDataFromQueue+0x22>
{
  400b18:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400b1a:	68c3      	ldr	r3, [r0, #12]
  400b1c:	4413      	add	r3, r2
  400b1e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400b20:	6844      	ldr	r4, [r0, #4]
  400b22:	42a3      	cmp	r3, r4
  400b24:	d301      	bcc.n	400b2a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400b26:	6803      	ldr	r3, [r0, #0]
  400b28:	60c3      	str	r3, [r0, #12]
  400b2a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400b2c:	68c1      	ldr	r1, [r0, #12]
  400b2e:	4620      	mov	r0, r4
  400b30:	4b01      	ldr	r3, [pc, #4]	; (400b38 <prvCopyDataFromQueue+0x24>)
  400b32:	4798      	blx	r3
  400b34:	bd10      	pop	{r4, pc}
  400b36:	4770      	bx	lr
  400b38:	004060ad 	.word	0x004060ad

00400b3c <prvUnlockQueue>:
{
  400b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b3e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  400b40:	4b22      	ldr	r3, [pc, #136]	; (400bcc <prvUnlockQueue+0x90>)
  400b42:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400b44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b46:	2b00      	cmp	r3, #0
  400b48:	dd1b      	ble.n	400b82 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400b4a:	4d21      	ldr	r5, [pc, #132]	; (400bd0 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  400b4c:	4f21      	ldr	r7, [pc, #132]	; (400bd4 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b4e:	4e22      	ldr	r6, [pc, #136]	; (400bd8 <prvUnlockQueue+0x9c>)
  400b50:	e00b      	b.n	400b6a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b54:	b1ab      	cbz	r3, 400b82 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b56:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b5a:	47b0      	blx	r6
  400b5c:	b978      	cbnz	r0, 400b7e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  400b5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b60:	3b01      	subs	r3, #1
  400b62:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400b64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b66:	2b00      	cmp	r3, #0
  400b68:	dd0b      	ble.n	400b82 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  400b6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400b6c:	2b00      	cmp	r3, #0
  400b6e:	d0f0      	beq.n	400b52 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400b70:	2100      	movs	r1, #0
  400b72:	4620      	mov	r0, r4
  400b74:	47a8      	blx	r5
  400b76:	2801      	cmp	r0, #1
  400b78:	d1f1      	bne.n	400b5e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  400b7a:	47b8      	blx	r7
  400b7c:	e7ef      	b.n	400b5e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  400b7e:	47b8      	blx	r7
  400b80:	e7ed      	b.n	400b5e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  400b82:	f04f 33ff 	mov.w	r3, #4294967295
  400b86:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  400b88:	4b14      	ldr	r3, [pc, #80]	; (400bdc <prvUnlockQueue+0xa0>)
  400b8a:	4798      	blx	r3
	taskENTER_CRITICAL();
  400b8c:	4b0f      	ldr	r3, [pc, #60]	; (400bcc <prvUnlockQueue+0x90>)
  400b8e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b92:	2b00      	cmp	r3, #0
  400b94:	dd14      	ble.n	400bc0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b96:	6923      	ldr	r3, [r4, #16]
  400b98:	b193      	cbz	r3, 400bc0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b9a:	f104 0610 	add.w	r6, r4, #16
  400b9e:	4d0e      	ldr	r5, [pc, #56]	; (400bd8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  400ba0:	4f0c      	ldr	r7, [pc, #48]	; (400bd4 <prvUnlockQueue+0x98>)
  400ba2:	e007      	b.n	400bb4 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  400ba4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ba6:	3b01      	subs	r3, #1
  400ba8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400bac:	2b00      	cmp	r3, #0
  400bae:	dd07      	ble.n	400bc0 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400bb0:	6923      	ldr	r3, [r4, #16]
  400bb2:	b12b      	cbz	r3, 400bc0 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400bb4:	4630      	mov	r0, r6
  400bb6:	47a8      	blx	r5
  400bb8:	2800      	cmp	r0, #0
  400bba:	d0f3      	beq.n	400ba4 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  400bbc:	47b8      	blx	r7
  400bbe:	e7f1      	b.n	400ba4 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  400bc0:	f04f 33ff 	mov.w	r3, #4294967295
  400bc4:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  400bc6:	4b05      	ldr	r3, [pc, #20]	; (400bdc <prvUnlockQueue+0xa0>)
  400bc8:	4798      	blx	r3
  400bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400bcc:	00400889 	.word	0x00400889
  400bd0:	00400ac1 	.word	0x00400ac1
  400bd4:	00401985 	.word	0x00401985
  400bd8:	00401889 	.word	0x00401889
  400bdc:	004008ad 	.word	0x004008ad

00400be0 <xQueueGenericReset>:
{
  400be0:	b538      	push	{r3, r4, r5, lr}
  400be2:	4604      	mov	r4, r0
  400be4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  400be6:	4b18      	ldr	r3, [pc, #96]	; (400c48 <xQueueGenericReset+0x68>)
  400be8:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400bea:	6822      	ldr	r2, [r4, #0]
  400bec:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400bf0:	fb03 f301 	mul.w	r3, r3, r1
  400bf4:	18d0      	adds	r0, r2, r3
  400bf6:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400bf8:	2000      	movs	r0, #0
  400bfa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400bfc:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400bfe:	1a5b      	subs	r3, r3, r1
  400c00:	4413      	add	r3, r2
  400c02:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400c04:	f04f 33ff 	mov.w	r3, #4294967295
  400c08:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400c0a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  400c0c:	b9a5      	cbnz	r5, 400c38 <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c0e:	6923      	ldr	r3, [r4, #16]
  400c10:	b91b      	cbnz	r3, 400c1a <xQueueGenericReset+0x3a>
	taskEXIT_CRITICAL();
  400c12:	4b0e      	ldr	r3, [pc, #56]	; (400c4c <xQueueGenericReset+0x6c>)
  400c14:	4798      	blx	r3
}
  400c16:	2001      	movs	r0, #1
  400c18:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c1a:	f104 0010 	add.w	r0, r4, #16
  400c1e:	4b0c      	ldr	r3, [pc, #48]	; (400c50 <xQueueGenericReset+0x70>)
  400c20:	4798      	blx	r3
  400c22:	2801      	cmp	r0, #1
  400c24:	d1f5      	bne.n	400c12 <xQueueGenericReset+0x32>
					queueYIELD_IF_USING_PREEMPTION();
  400c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c2a:	4b0a      	ldr	r3, [pc, #40]	; (400c54 <xQueueGenericReset+0x74>)
  400c2c:	601a      	str	r2, [r3, #0]
  400c2e:	f3bf 8f4f 	dsb	sy
  400c32:	f3bf 8f6f 	isb	sy
  400c36:	e7ec      	b.n	400c12 <xQueueGenericReset+0x32>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400c38:	f104 0010 	add.w	r0, r4, #16
  400c3c:	4d06      	ldr	r5, [pc, #24]	; (400c58 <xQueueGenericReset+0x78>)
  400c3e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400c40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c44:	47a8      	blx	r5
  400c46:	e7e4      	b.n	400c12 <xQueueGenericReset+0x32>
  400c48:	00400889 	.word	0x00400889
  400c4c:	004008ad 	.word	0x004008ad
  400c50:	00401889 	.word	0x00401889
  400c54:	e000ed04 	.word	0xe000ed04
  400c58:	00400765 	.word	0x00400765

00400c5c <xQueueGenericCreate>:
{
  400c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c5e:	4605      	mov	r5, r0
  400c60:	4617      	mov	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
  400c62:	460e      	mov	r6, r1
  400c64:	b159      	cbz	r1, 400c7e <xQueueGenericCreate+0x22>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400c66:	fb00 f001 	mul.w	r0, r0, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c6a:	3059      	adds	r0, #89	; 0x59
  400c6c:	4b0d      	ldr	r3, [pc, #52]	; (400ca4 <xQueueGenericCreate+0x48>)
  400c6e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c70:	4604      	mov	r4, r0
  400c72:	b118      	cbz	r0, 400c7c <xQueueGenericCreate+0x20>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c74:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c78:	6003      	str	r3, [r0, #0]
  400c7a:	e006      	b.n	400c8a <xQueueGenericCreate+0x2e>
  400c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c7e:	2058      	movs	r0, #88	; 0x58
  400c80:	4b08      	ldr	r3, [pc, #32]	; (400ca4 <xQueueGenericCreate+0x48>)
  400c82:	4798      	blx	r3
	if( pxNewQueue != NULL )
  400c84:	4604      	mov	r4, r0
  400c86:	b160      	cbz	r0, 400ca2 <xQueueGenericCreate+0x46>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c88:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  400c8a:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c8c:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c8e:	2101      	movs	r1, #1
  400c90:	4620      	mov	r0, r4
  400c92:	4b05      	ldr	r3, [pc, #20]	; (400ca8 <xQueueGenericCreate+0x4c>)
  400c94:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  400c96:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  400c9a:	2300      	movs	r3, #0
  400c9c:	6563      	str	r3, [r4, #84]	; 0x54
  400c9e:	4620      	mov	r0, r4
	return xReturn;
  400ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
  400ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ca4:	004009c9 	.word	0x004009c9
  400ca8:	00400be1 	.word	0x00400be1

00400cac <xQueueGenericSend>:
{
  400cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400cb0:	b085      	sub	sp, #20
  400cb2:	4604      	mov	r4, r0
  400cb4:	468a      	mov	sl, r1
  400cb6:	9201      	str	r2, [sp, #4]
  400cb8:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  400cba:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400cbc:	4d4a      	ldr	r5, [pc, #296]	; (400de8 <xQueueGenericSend+0x13c>)
					vTaskSetTimeOutState( &xTimeOut );
  400cbe:	f8df 8154 	ldr.w	r8, [pc, #340]	; 400e14 <xQueueGenericSend+0x168>
					portYIELD_WITHIN_API();
  400cc2:	f8df 9134 	ldr.w	r9, [pc, #308]	; 400df8 <xQueueGenericSend+0x14c>
  400cc6:	e04a      	b.n	400d5e <xQueueGenericSend+0xb2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cc8:	463a      	mov	r2, r7
  400cca:	4651      	mov	r1, sl
  400ccc:	4620      	mov	r0, r4
  400cce:	4b47      	ldr	r3, [pc, #284]	; (400dec <xQueueGenericSend+0x140>)
  400cd0:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  400cd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400cd4:	b1a3      	cbz	r3, 400d00 <xQueueGenericSend+0x54>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400cd6:	4639      	mov	r1, r7
  400cd8:	4620      	mov	r0, r4
  400cda:	4b45      	ldr	r3, [pc, #276]	; (400df0 <xQueueGenericSend+0x144>)
  400cdc:	4798      	blx	r3
  400cde:	2801      	cmp	r0, #1
  400ce0:	d005      	beq.n	400cee <xQueueGenericSend+0x42>
				taskEXIT_CRITICAL();
  400ce2:	4b44      	ldr	r3, [pc, #272]	; (400df4 <xQueueGenericSend+0x148>)
  400ce4:	4798      	blx	r3
				return pdPASS;
  400ce6:	2001      	movs	r0, #1
}
  400ce8:	b005      	add	sp, #20
  400cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							queueYIELD_IF_USING_PREEMPTION();
  400cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400cf2:	4b41      	ldr	r3, [pc, #260]	; (400df8 <xQueueGenericSend+0x14c>)
  400cf4:	601a      	str	r2, [r3, #0]
  400cf6:	f3bf 8f4f 	dsb	sy
  400cfa:	f3bf 8f6f 	isb	sy
  400cfe:	e7f0      	b.n	400ce2 <xQueueGenericSend+0x36>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d02:	b953      	cbnz	r3, 400d1a <xQueueGenericSend+0x6e>
						else if( xYieldRequired != pdFALSE )
  400d04:	2800      	cmp	r0, #0
  400d06:	d0ec      	beq.n	400ce2 <xQueueGenericSend+0x36>
							queueYIELD_IF_USING_PREEMPTION();
  400d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d0c:	4b3a      	ldr	r3, [pc, #232]	; (400df8 <xQueueGenericSend+0x14c>)
  400d0e:	601a      	str	r2, [r3, #0]
  400d10:	f3bf 8f4f 	dsb	sy
  400d14:	f3bf 8f6f 	isb	sy
  400d18:	e7e3      	b.n	400ce2 <xQueueGenericSend+0x36>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400d1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d1e:	4b37      	ldr	r3, [pc, #220]	; (400dfc <xQueueGenericSend+0x150>)
  400d20:	4798      	blx	r3
  400d22:	2801      	cmp	r0, #1
  400d24:	d1dd      	bne.n	400ce2 <xQueueGenericSend+0x36>
								queueYIELD_IF_USING_PREEMPTION();
  400d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d2a:	4b33      	ldr	r3, [pc, #204]	; (400df8 <xQueueGenericSend+0x14c>)
  400d2c:	601a      	str	r2, [r3, #0]
  400d2e:	f3bf 8f4f 	dsb	sy
  400d32:	f3bf 8f6f 	isb	sy
  400d36:	e7d4      	b.n	400ce2 <xQueueGenericSend+0x36>
					taskEXIT_CRITICAL();
  400d38:	4b2e      	ldr	r3, [pc, #184]	; (400df4 <xQueueGenericSend+0x148>)
  400d3a:	4798      	blx	r3
					return errQUEUE_FULL;
  400d3c:	2000      	movs	r0, #0
  400d3e:	e7d3      	b.n	400ce8 <xQueueGenericSend+0x3c>
					vTaskSetTimeOutState( &xTimeOut );
  400d40:	a802      	add	r0, sp, #8
  400d42:	47c0      	blx	r8
  400d44:	e017      	b.n	400d76 <xQueueGenericSend+0xca>
		prvLockQueue( pxQueue );
  400d46:	2300      	movs	r3, #0
  400d48:	6463      	str	r3, [r4, #68]	; 0x44
  400d4a:	e01d      	b.n	400d88 <xQueueGenericSend+0xdc>
  400d4c:	2300      	movs	r3, #0
  400d4e:	64a3      	str	r3, [r4, #72]	; 0x48
  400d50:	e01e      	b.n	400d90 <xQueueGenericSend+0xe4>
				prvUnlockQueue( pxQueue );
  400d52:	4620      	mov	r0, r4
  400d54:	4b2a      	ldr	r3, [pc, #168]	; (400e00 <xQueueGenericSend+0x154>)
  400d56:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d58:	4b2a      	ldr	r3, [pc, #168]	; (400e04 <xQueueGenericSend+0x158>)
  400d5a:	4798      	blx	r3
  400d5c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400d5e:	47a8      	blx	r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400d60:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400d62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400d64:	429a      	cmp	r2, r3
  400d66:	d3af      	bcc.n	400cc8 <xQueueGenericSend+0x1c>
  400d68:	2f02      	cmp	r7, #2
  400d6a:	d0ad      	beq.n	400cc8 <xQueueGenericSend+0x1c>
				if( xTicksToWait == ( TickType_t ) 0 )
  400d6c:	9b01      	ldr	r3, [sp, #4]
  400d6e:	2b00      	cmp	r3, #0
  400d70:	d0e2      	beq.n	400d38 <xQueueGenericSend+0x8c>
				else if( xEntryTimeSet == pdFALSE )
  400d72:	2e00      	cmp	r6, #0
  400d74:	d0e4      	beq.n	400d40 <xQueueGenericSend+0x94>
		taskEXIT_CRITICAL();
  400d76:	4b1f      	ldr	r3, [pc, #124]	; (400df4 <xQueueGenericSend+0x148>)
  400d78:	4798      	blx	r3
		vTaskSuspendAll();
  400d7a:	4b23      	ldr	r3, [pc, #140]	; (400e08 <xQueueGenericSend+0x15c>)
  400d7c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d7e:	47a8      	blx	r5
  400d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d82:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d86:	d0de      	beq.n	400d46 <xQueueGenericSend+0x9a>
  400d88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d8e:	d0dd      	beq.n	400d4c <xQueueGenericSend+0xa0>
  400d90:	4b18      	ldr	r3, [pc, #96]	; (400df4 <xQueueGenericSend+0x148>)
  400d92:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d94:	a901      	add	r1, sp, #4
  400d96:	a802      	add	r0, sp, #8
  400d98:	4b1c      	ldr	r3, [pc, #112]	; (400e0c <xQueueGenericSend+0x160>)
  400d9a:	4798      	blx	r3
  400d9c:	b9e0      	cbnz	r0, 400dd8 <xQueueGenericSend+0x12c>
	taskENTER_CRITICAL();
  400d9e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400da0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400da4:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  400da6:	4b13      	ldr	r3, [pc, #76]	; (400df4 <xQueueGenericSend+0x148>)
  400da8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400daa:	45b3      	cmp	fp, r6
  400dac:	d1d1      	bne.n	400d52 <xQueueGenericSend+0xa6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400dae:	9901      	ldr	r1, [sp, #4]
  400db0:	f104 0010 	add.w	r0, r4, #16
  400db4:	4b16      	ldr	r3, [pc, #88]	; (400e10 <xQueueGenericSend+0x164>)
  400db6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400db8:	4620      	mov	r0, r4
  400dba:	4b11      	ldr	r3, [pc, #68]	; (400e00 <xQueueGenericSend+0x154>)
  400dbc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400dbe:	4b11      	ldr	r3, [pc, #68]	; (400e04 <xQueueGenericSend+0x158>)
  400dc0:	4798      	blx	r3
  400dc2:	2800      	cmp	r0, #0
  400dc4:	d1ca      	bne.n	400d5c <xQueueGenericSend+0xb0>
					portYIELD_WITHIN_API();
  400dc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400dca:	f8c9 3000 	str.w	r3, [r9]
  400dce:	f3bf 8f4f 	dsb	sy
  400dd2:	f3bf 8f6f 	isb	sy
  400dd6:	e7c1      	b.n	400d5c <xQueueGenericSend+0xb0>
			prvUnlockQueue( pxQueue );
  400dd8:	4620      	mov	r0, r4
  400dda:	4b09      	ldr	r3, [pc, #36]	; (400e00 <xQueueGenericSend+0x154>)
  400ddc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400dde:	4b09      	ldr	r3, [pc, #36]	; (400e04 <xQueueGenericSend+0x158>)
  400de0:	4798      	blx	r3
			return errQUEUE_FULL;
  400de2:	2000      	movs	r0, #0
  400de4:	e780      	b.n	400ce8 <xQueueGenericSend+0x3c>
  400de6:	bf00      	nop
  400de8:	00400889 	.word	0x00400889
  400dec:	00400a3d 	.word	0x00400a3d
  400df0:	00400ac1 	.word	0x00400ac1
  400df4:	004008ad 	.word	0x004008ad
  400df8:	e000ed04 	.word	0xe000ed04
  400dfc:	00401889 	.word	0x00401889
  400e00:	00400b3d 	.word	0x00400b3d
  400e04:	004014fd 	.word	0x004014fd
  400e08:	004013a9 	.word	0x004013a9
  400e0c:	00401921 	.word	0x00401921
  400e10:	004017b5 	.word	0x004017b5
  400e14:	00401909 	.word	0x00401909

00400e18 <xQueueGenericSendFromISR>:
{
  400e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile
  400e1a:	f3ef 8711 	mrs	r7, BASEPRI
  400e1e:	f04f 0480 	mov.w	r4, #128	; 0x80
  400e22:	b672      	cpsid	i
  400e24:	f384 8811 	msr	BASEPRI, r4
  400e28:	f3bf 8f6f 	isb	sy
  400e2c:	f3bf 8f4f 	dsb	sy
  400e30:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400e32:	6b85      	ldr	r5, [r0, #56]	; 0x38
  400e34:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  400e36:	42a5      	cmp	r5, r4
  400e38:	d305      	bcc.n	400e46 <xQueueGenericSendFromISR+0x2e>
  400e3a:	2b02      	cmp	r3, #2
  400e3c:	d003      	beq.n	400e46 <xQueueGenericSendFromISR+0x2e>
			xReturn = errQUEUE_FULL;
  400e3e:	2000      	movs	r0, #0
	__asm volatile
  400e40:	f387 8811 	msr	BASEPRI, r7
}
  400e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e46:	461d      	mov	r5, r3
  400e48:	4616      	mov	r6, r2
  400e4a:	4604      	mov	r4, r0
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400e4c:	461a      	mov	r2, r3
  400e4e:	4b13      	ldr	r3, [pc, #76]	; (400e9c <xQueueGenericSendFromISR+0x84>)
  400e50:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  400e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e54:	f1b3 3fff 	cmp.w	r3, #4294967295
  400e58:	d004      	beq.n	400e64 <xQueueGenericSendFromISR+0x4c>
				++( pxQueue->xTxLock );
  400e5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e5c:	3301      	adds	r3, #1
  400e5e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  400e60:	2001      	movs	r0, #1
  400e62:	e7ed      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
					if( pxQueue->pxQueueSetContainer != NULL )
  400e64:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400e66:	b143      	cbz	r3, 400e7a <xQueueGenericSendFromISR+0x62>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400e68:	4629      	mov	r1, r5
  400e6a:	4620      	mov	r0, r4
  400e6c:	4b0c      	ldr	r3, [pc, #48]	; (400ea0 <xQueueGenericSendFromISR+0x88>)
  400e6e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  400e70:	b186      	cbz	r6, 400e94 <xQueueGenericSendFromISR+0x7c>
  400e72:	2801      	cmp	r0, #1
  400e74:	d10e      	bne.n	400e94 <xQueueGenericSendFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e76:	6030      	str	r0, [r6, #0]
  400e78:	e7e2      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e7c:	b90b      	cbnz	r3, 400e82 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  400e7e:	2001      	movs	r0, #1
  400e80:	e7de      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e82:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e86:	4b07      	ldr	r3, [pc, #28]	; (400ea4 <xQueueGenericSendFromISR+0x8c>)
  400e88:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  400e8a:	b12e      	cbz	r6, 400e98 <xQueueGenericSendFromISR+0x80>
  400e8c:	b120      	cbz	r0, 400e98 <xQueueGenericSendFromISR+0x80>
									*pxHigherPriorityTaskWoken = pdTRUE;
  400e8e:	2001      	movs	r0, #1
  400e90:	6030      	str	r0, [r6, #0]
  400e92:	e7d5      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
			xReturn = pdPASS;
  400e94:	2001      	movs	r0, #1
  400e96:	e7d3      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
  400e98:	2001      	movs	r0, #1
  400e9a:	e7d1      	b.n	400e40 <xQueueGenericSendFromISR+0x28>
  400e9c:	00400a3d 	.word	0x00400a3d
  400ea0:	00400ac1 	.word	0x00400ac1
  400ea4:	00401889 	.word	0x00401889

00400ea8 <xQueueGenericReceive>:
{
  400ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400eac:	b084      	sub	sp, #16
  400eae:	4604      	mov	r4, r0
  400eb0:	468a      	mov	sl, r1
  400eb2:	9201      	str	r2, [sp, #4]
  400eb4:	4699      	mov	r9, r3
BaseType_t xEntryTimeSet = pdFALSE;
  400eb6:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  400eb8:	4d4d      	ldr	r5, [pc, #308]	; (400ff0 <xQueueGenericReceive+0x148>)
					vTaskSetTimeOutState( &xTimeOut );
  400eba:	f8df 8164 	ldr.w	r8, [pc, #356]	; 401020 <xQueueGenericReceive+0x178>
					portYIELD_WITHIN_API();
  400ebe:	4f4d      	ldr	r7, [pc, #308]	; (400ff4 <xQueueGenericReceive+0x14c>)
  400ec0:	e054      	b.n	400f6c <xQueueGenericReceive+0xc4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400ec2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400ec4:	4651      	mov	r1, sl
  400ec6:	4620      	mov	r0, r4
  400ec8:	4b4b      	ldr	r3, [pc, #300]	; (400ff8 <xQueueGenericReceive+0x150>)
  400eca:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  400ecc:	f1b9 0f00 	cmp.w	r9, #0
  400ed0:	d11f      	bne.n	400f12 <xQueueGenericReceive+0x6a>
					--( pxQueue->uxMessagesWaiting );
  400ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ed4:	3b01      	subs	r3, #1
  400ed6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ed8:	6823      	ldr	r3, [r4, #0]
  400eda:	b13b      	cbz	r3, 400eec <xQueueGenericReceive+0x44>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400edc:	6923      	ldr	r3, [r4, #16]
  400ede:	b94b      	cbnz	r3, 400ef4 <xQueueGenericReceive+0x4c>
				taskEXIT_CRITICAL();
  400ee0:	4b46      	ldr	r3, [pc, #280]	; (400ffc <xQueueGenericReceive+0x154>)
  400ee2:	4798      	blx	r3
				return pdPASS;
  400ee4:	2001      	movs	r0, #1
}
  400ee6:	b004      	add	sp, #16
  400ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400eec:	4b44      	ldr	r3, [pc, #272]	; (401000 <xQueueGenericReceive+0x158>)
  400eee:	4798      	blx	r3
  400ef0:	6060      	str	r0, [r4, #4]
  400ef2:	e7f3      	b.n	400edc <xQueueGenericReceive+0x34>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400ef4:	f104 0010 	add.w	r0, r4, #16
  400ef8:	4b42      	ldr	r3, [pc, #264]	; (401004 <xQueueGenericReceive+0x15c>)
  400efa:	4798      	blx	r3
  400efc:	2801      	cmp	r0, #1
  400efe:	d1ef      	bne.n	400ee0 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f04:	4b3b      	ldr	r3, [pc, #236]	; (400ff4 <xQueueGenericReceive+0x14c>)
  400f06:	601a      	str	r2, [r3, #0]
  400f08:	f3bf 8f4f 	dsb	sy
  400f0c:	f3bf 8f6f 	isb	sy
  400f10:	e7e6      	b.n	400ee0 <xQueueGenericReceive+0x38>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400f12:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f16:	2b00      	cmp	r3, #0
  400f18:	d0e2      	beq.n	400ee0 <xQueueGenericReceive+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f1e:	4b39      	ldr	r3, [pc, #228]	; (401004 <xQueueGenericReceive+0x15c>)
  400f20:	4798      	blx	r3
  400f22:	2800      	cmp	r0, #0
  400f24:	d0dc      	beq.n	400ee0 <xQueueGenericReceive+0x38>
							queueYIELD_IF_USING_PREEMPTION();
  400f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f2a:	4b32      	ldr	r3, [pc, #200]	; (400ff4 <xQueueGenericReceive+0x14c>)
  400f2c:	601a      	str	r2, [r3, #0]
  400f2e:	f3bf 8f4f 	dsb	sy
  400f32:	f3bf 8f6f 	isb	sy
  400f36:	e7d3      	b.n	400ee0 <xQueueGenericReceive+0x38>
					taskEXIT_CRITICAL();
  400f38:	4b30      	ldr	r3, [pc, #192]	; (400ffc <xQueueGenericReceive+0x154>)
  400f3a:	4798      	blx	r3
					return errQUEUE_EMPTY;
  400f3c:	2000      	movs	r0, #0
  400f3e:	e7d2      	b.n	400ee6 <xQueueGenericReceive+0x3e>
					vTaskSetTimeOutState( &xTimeOut );
  400f40:	a802      	add	r0, sp, #8
  400f42:	47c0      	blx	r8
  400f44:	e01b      	b.n	400f7e <xQueueGenericReceive+0xd6>
		prvLockQueue( pxQueue );
  400f46:	2300      	movs	r3, #0
  400f48:	6463      	str	r3, [r4, #68]	; 0x44
  400f4a:	e021      	b.n	400f90 <xQueueGenericReceive+0xe8>
  400f4c:	2300      	movs	r3, #0
  400f4e:	64a3      	str	r3, [r4, #72]	; 0x48
  400f50:	e022      	b.n	400f98 <xQueueGenericReceive+0xf0>
						taskENTER_CRITICAL();
  400f52:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400f54:	6860      	ldr	r0, [r4, #4]
  400f56:	4b2c      	ldr	r3, [pc, #176]	; (401008 <xQueueGenericReceive+0x160>)
  400f58:	4798      	blx	r3
						taskEXIT_CRITICAL();
  400f5a:	4b28      	ldr	r3, [pc, #160]	; (400ffc <xQueueGenericReceive+0x154>)
  400f5c:	4798      	blx	r3
  400f5e:	e02b      	b.n	400fb8 <xQueueGenericReceive+0x110>
				prvUnlockQueue( pxQueue );
  400f60:	4620      	mov	r0, r4
  400f62:	4b2a      	ldr	r3, [pc, #168]	; (40100c <xQueueGenericReceive+0x164>)
  400f64:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400f66:	4b2a      	ldr	r3, [pc, #168]	; (401010 <xQueueGenericReceive+0x168>)
  400f68:	4798      	blx	r3
  400f6a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  400f6c:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400f70:	2b00      	cmp	r3, #0
  400f72:	d1a6      	bne.n	400ec2 <xQueueGenericReceive+0x1a>
				if( xTicksToWait == ( TickType_t ) 0 )
  400f74:	9b01      	ldr	r3, [sp, #4]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d0de      	beq.n	400f38 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
  400f7a:	2e00      	cmp	r6, #0
  400f7c:	d0e0      	beq.n	400f40 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
  400f7e:	4b1f      	ldr	r3, [pc, #124]	; (400ffc <xQueueGenericReceive+0x154>)
  400f80:	4798      	blx	r3
		vTaskSuspendAll();
  400f82:	4b24      	ldr	r3, [pc, #144]	; (401014 <xQueueGenericReceive+0x16c>)
  400f84:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400f86:	47a8      	blx	r5
  400f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f8e:	d0da      	beq.n	400f46 <xQueueGenericReceive+0x9e>
  400f90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f92:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f96:	d0d9      	beq.n	400f4c <xQueueGenericReceive+0xa4>
  400f98:	4b18      	ldr	r3, [pc, #96]	; (400ffc <xQueueGenericReceive+0x154>)
  400f9a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400f9c:	a901      	add	r1, sp, #4
  400f9e:	a802      	add	r0, sp, #8
  400fa0:	4b1d      	ldr	r3, [pc, #116]	; (401018 <xQueueGenericReceive+0x170>)
  400fa2:	4798      	blx	r3
  400fa4:	b9e0      	cbnz	r0, 400fe0 <xQueueGenericReceive+0x138>
	taskENTER_CRITICAL();
  400fa6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400fa8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  400faa:	4b14      	ldr	r3, [pc, #80]	; (400ffc <xQueueGenericReceive+0x154>)
  400fac:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400fae:	2e00      	cmp	r6, #0
  400fb0:	d1d6      	bne.n	400f60 <xQueueGenericReceive+0xb8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400fb2:	6823      	ldr	r3, [r4, #0]
  400fb4:	2b00      	cmp	r3, #0
  400fb6:	d0cc      	beq.n	400f52 <xQueueGenericReceive+0xaa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400fb8:	9901      	ldr	r1, [sp, #4]
  400fba:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fbe:	4b17      	ldr	r3, [pc, #92]	; (40101c <xQueueGenericReceive+0x174>)
  400fc0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400fc2:	4620      	mov	r0, r4
  400fc4:	4b11      	ldr	r3, [pc, #68]	; (40100c <xQueueGenericReceive+0x164>)
  400fc6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400fc8:	4b11      	ldr	r3, [pc, #68]	; (401010 <xQueueGenericReceive+0x168>)
  400fca:	4798      	blx	r3
  400fcc:	2800      	cmp	r0, #0
  400fce:	d1cc      	bne.n	400f6a <xQueueGenericReceive+0xc2>
					portYIELD_WITHIN_API();
  400fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400fd4:	603b      	str	r3, [r7, #0]
  400fd6:	f3bf 8f4f 	dsb	sy
  400fda:	f3bf 8f6f 	isb	sy
  400fde:	e7c4      	b.n	400f6a <xQueueGenericReceive+0xc2>
			prvUnlockQueue( pxQueue );
  400fe0:	4620      	mov	r0, r4
  400fe2:	4b0a      	ldr	r3, [pc, #40]	; (40100c <xQueueGenericReceive+0x164>)
  400fe4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400fe6:	4b0a      	ldr	r3, [pc, #40]	; (401010 <xQueueGenericReceive+0x168>)
  400fe8:	4798      	blx	r3
			return errQUEUE_EMPTY;
  400fea:	2000      	movs	r0, #0
  400fec:	e77b      	b.n	400ee6 <xQueueGenericReceive+0x3e>
  400fee:	bf00      	nop
  400ff0:	00400889 	.word	0x00400889
  400ff4:	e000ed04 	.word	0xe000ed04
  400ff8:	00400b15 	.word	0x00400b15
  400ffc:	004008ad 	.word	0x004008ad
  401000:	00401ad9 	.word	0x00401ad9
  401004:	00401889 	.word	0x00401889
  401008:	004019b1 	.word	0x004019b1
  40100c:	00400b3d 	.word	0x00400b3d
  401010:	004014fd 	.word	0x004014fd
  401014:	004013a9 	.word	0x004013a9
  401018:	00401921 	.word	0x00401921
  40101c:	004017b5 	.word	0x004017b5
  401020:	00401909 	.word	0x00401909

00401024 <vQueueAddToRegistry>:
	{
  401024:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401026:	4b0b      	ldr	r3, [pc, #44]	; (401054 <vQueueAddToRegistry+0x30>)
  401028:	681b      	ldr	r3, [r3, #0]
  40102a:	b153      	cbz	r3, 401042 <vQueueAddToRegistry+0x1e>
  40102c:	2301      	movs	r3, #1
  40102e:	4c09      	ldr	r4, [pc, #36]	; (401054 <vQueueAddToRegistry+0x30>)
  401030:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401034:	b132      	cbz	r2, 401044 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401036:	3301      	adds	r3, #1
  401038:	2b08      	cmp	r3, #8
  40103a:	d1f9      	bne.n	401030 <vQueueAddToRegistry+0xc>
	}
  40103c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401040:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401042:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401044:	4a03      	ldr	r2, [pc, #12]	; (401054 <vQueueAddToRegistry+0x30>)
  401046:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40104a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40104e:	6058      	str	r0, [r3, #4]
				break;
  401050:	e7f4      	b.n	40103c <vQueueAddToRegistry+0x18>
  401052:	bf00      	nop
  401054:	2040ca20 	.word	0x2040ca20

00401058 <vQueueWaitForMessageRestricted>:
	{
  401058:	b570      	push	{r4, r5, r6, lr}
  40105a:	4604      	mov	r4, r0
  40105c:	460d      	mov	r5, r1
  40105e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401060:	4b0f      	ldr	r3, [pc, #60]	; (4010a0 <vQueueWaitForMessageRestricted+0x48>)
  401062:	4798      	blx	r3
  401064:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401066:	f1b3 3fff 	cmp.w	r3, #4294967295
  40106a:	d00b      	beq.n	401084 <vQueueWaitForMessageRestricted+0x2c>
  40106c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40106e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401072:	d00a      	beq.n	40108a <vQueueWaitForMessageRestricted+0x32>
  401074:	4b0b      	ldr	r3, [pc, #44]	; (4010a4 <vQueueWaitForMessageRestricted+0x4c>)
  401076:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40107a:	b14b      	cbz	r3, 401090 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40107c:	4620      	mov	r0, r4
  40107e:	4b0a      	ldr	r3, [pc, #40]	; (4010a8 <vQueueWaitForMessageRestricted+0x50>)
  401080:	4798      	blx	r3
  401082:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401084:	2300      	movs	r3, #0
  401086:	6463      	str	r3, [r4, #68]	; 0x44
  401088:	e7f0      	b.n	40106c <vQueueWaitForMessageRestricted+0x14>
  40108a:	2300      	movs	r3, #0
  40108c:	64a3      	str	r3, [r4, #72]	; 0x48
  40108e:	e7f1      	b.n	401074 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401090:	4632      	mov	r2, r6
  401092:	4629      	mov	r1, r5
  401094:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401098:	4b04      	ldr	r3, [pc, #16]	; (4010ac <vQueueWaitForMessageRestricted+0x54>)
  40109a:	4798      	blx	r3
  40109c:	e7ee      	b.n	40107c <vQueueWaitForMessageRestricted+0x24>
  40109e:	bf00      	nop
  4010a0:	00400889 	.word	0x00400889
  4010a4:	004008ad 	.word	0x004008ad
  4010a8:	00400b3d 	.word	0x00400b3d
  4010ac:	00401821 	.word	0x00401821

004010b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4010b0:	4b08      	ldr	r3, [pc, #32]	; (4010d4 <prvResetNextTaskUnblockTime+0x24>)
  4010b2:	681b      	ldr	r3, [r3, #0]
  4010b4:	681b      	ldr	r3, [r3, #0]
  4010b6:	b13b      	cbz	r3, 4010c8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4010b8:	4b06      	ldr	r3, [pc, #24]	; (4010d4 <prvResetNextTaskUnblockTime+0x24>)
  4010ba:	681b      	ldr	r3, [r3, #0]
  4010bc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4010be:	68db      	ldr	r3, [r3, #12]
  4010c0:	685a      	ldr	r2, [r3, #4]
  4010c2:	4b05      	ldr	r3, [pc, #20]	; (4010d8 <prvResetNextTaskUnblockTime+0x28>)
  4010c4:	601a      	str	r2, [r3, #0]
  4010c6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4010c8:	f04f 32ff 	mov.w	r2, #4294967295
  4010cc:	4b02      	ldr	r3, [pc, #8]	; (4010d8 <prvResetNextTaskUnblockTime+0x28>)
  4010ce:	601a      	str	r2, [r3, #0]
  4010d0:	4770      	bx	lr
  4010d2:	bf00      	nop
  4010d4:	2040c1f8 	.word	0x2040c1f8
  4010d8:	2040c2a4 	.word	0x2040c2a4

004010dc <prvAddCurrentTaskToDelayedList>:
{
  4010dc:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4010de:	4b0f      	ldr	r3, [pc, #60]	; (40111c <prvAddCurrentTaskToDelayedList+0x40>)
  4010e0:	681b      	ldr	r3, [r3, #0]
  4010e2:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  4010e4:	4b0e      	ldr	r3, [pc, #56]	; (401120 <prvAddCurrentTaskToDelayedList+0x44>)
  4010e6:	681b      	ldr	r3, [r3, #0]
  4010e8:	4298      	cmp	r0, r3
  4010ea:	d30e      	bcc.n	40110a <prvAddCurrentTaskToDelayedList+0x2e>
  4010ec:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4010ee:	4b0d      	ldr	r3, [pc, #52]	; (401124 <prvAddCurrentTaskToDelayedList+0x48>)
  4010f0:	6818      	ldr	r0, [r3, #0]
  4010f2:	4b0a      	ldr	r3, [pc, #40]	; (40111c <prvAddCurrentTaskToDelayedList+0x40>)
  4010f4:	6819      	ldr	r1, [r3, #0]
  4010f6:	3104      	adds	r1, #4
  4010f8:	4b0b      	ldr	r3, [pc, #44]	; (401128 <prvAddCurrentTaskToDelayedList+0x4c>)
  4010fa:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  4010fc:	4b0b      	ldr	r3, [pc, #44]	; (40112c <prvAddCurrentTaskToDelayedList+0x50>)
  4010fe:	681b      	ldr	r3, [r3, #0]
  401100:	429c      	cmp	r4, r3
  401102:	d201      	bcs.n	401108 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401104:	4b09      	ldr	r3, [pc, #36]	; (40112c <prvAddCurrentTaskToDelayedList+0x50>)
  401106:	601c      	str	r4, [r3, #0]
  401108:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40110a:	4b09      	ldr	r3, [pc, #36]	; (401130 <prvAddCurrentTaskToDelayedList+0x54>)
  40110c:	6818      	ldr	r0, [r3, #0]
  40110e:	4b03      	ldr	r3, [pc, #12]	; (40111c <prvAddCurrentTaskToDelayedList+0x40>)
  401110:	6819      	ldr	r1, [r3, #0]
  401112:	3104      	adds	r1, #4
  401114:	4b04      	ldr	r3, [pc, #16]	; (401128 <prvAddCurrentTaskToDelayedList+0x4c>)
  401116:	4798      	blx	r3
  401118:	bd10      	pop	{r4, pc}
  40111a:	bf00      	nop
  40111c:	2040c1f4 	.word	0x2040c1f4
  401120:	2040c2ec 	.word	0x2040c2ec
  401124:	2040c1f8 	.word	0x2040c1f8
  401128:	00400799 	.word	0x00400799
  40112c:	2040c2a4 	.word	0x2040c2a4
  401130:	2040c1fc 	.word	0x2040c1fc

00401134 <xTaskGenericCreate>:
{
  401134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401138:	b083      	sub	sp, #12
  40113a:	9000      	str	r0, [sp, #0]
  40113c:	460e      	mov	r6, r1
  40113e:	4617      	mov	r7, r2
  401140:	9301      	str	r3, [sp, #4]
  401142:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  401146:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40114a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40114c:	2d00      	cmp	r5, #0
  40114e:	f000 8089 	beq.w	401264 <xTaskGenericCreate+0x130>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401152:	2058      	movs	r0, #88	; 0x58
  401154:	4b5f      	ldr	r3, [pc, #380]	; (4012d4 <xTaskGenericCreate+0x1a0>)
  401156:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401158:	4604      	mov	r4, r0
  40115a:	2800      	cmp	r0, #0
  40115c:	f000 8088 	beq.w	401270 <xTaskGenericCreate+0x13c>
				pxNewTCB->pxStack = pxStack;
  401160:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401162:	00ba      	lsls	r2, r7, #2
  401164:	21a5      	movs	r1, #165	; 0xa5
  401166:	4628      	mov	r0, r5
  401168:	4b5b      	ldr	r3, [pc, #364]	; (4012d8 <xTaskGenericCreate+0x1a4>)
  40116a:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  40116c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  401170:	443b      	add	r3, r7
  401172:	6b25      	ldr	r5, [r4, #48]	; 0x30
  401174:	eb05 0583 	add.w	r5, r5, r3, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401178:	f025 0507 	bic.w	r5, r5, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40117c:	7833      	ldrb	r3, [r6, #0]
  40117e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401182:	7833      	ldrb	r3, [r6, #0]
  401184:	b15b      	cbz	r3, 40119e <xTaskGenericCreate+0x6a>
  401186:	4633      	mov	r3, r6
  401188:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40118c:	3609      	adds	r6, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40118e:	7859      	ldrb	r1, [r3, #1]
  401190:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401194:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401198:	b109      	cbz	r1, 40119e <xTaskGenericCreate+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40119a:	42b3      	cmp	r3, r6
  40119c:	d1f7      	bne.n	40118e <xTaskGenericCreate+0x5a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40119e:	2700      	movs	r7, #0
  4011a0:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  4011a4:	465e      	mov	r6, fp
  4011a6:	2e04      	cmp	r6, #4
  4011a8:	bf28      	it	cs
  4011aa:	2604      	movcs	r6, #4
	pxTCB->uxPriority = uxPriority;
  4011ac:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  4011ae:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4011b0:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4011b2:	f104 0804 	add.w	r8, r4, #4
  4011b6:	4640      	mov	r0, r8
  4011b8:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40132c <xTaskGenericCreate+0x1f8>
  4011bc:	47c8      	blx	r9
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4011be:	f104 0018 	add.w	r0, r4, #24
  4011c2:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4011c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011c6:	f1c6 0605 	rsb	r6, r6, #5
  4011ca:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4011cc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  4011ce:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4011d0:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4011d4:	9a01      	ldr	r2, [sp, #4]
  4011d6:	9900      	ldr	r1, [sp, #0]
  4011d8:	4628      	mov	r0, r5
  4011da:	4b40      	ldr	r3, [pc, #256]	; (4012dc <xTaskGenericCreate+0x1a8>)
  4011dc:	4798      	blx	r3
  4011de:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4011e0:	f1ba 0f00 	cmp.w	sl, #0
  4011e4:	d001      	beq.n	4011ea <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4011e6:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  4011ea:	4b3d      	ldr	r3, [pc, #244]	; (4012e0 <xTaskGenericCreate+0x1ac>)
  4011ec:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4011ee:	4a3d      	ldr	r2, [pc, #244]	; (4012e4 <xTaskGenericCreate+0x1b0>)
  4011f0:	6813      	ldr	r3, [r2, #0]
  4011f2:	3301      	adds	r3, #1
  4011f4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4011f6:	4b3c      	ldr	r3, [pc, #240]	; (4012e8 <xTaskGenericCreate+0x1b4>)
  4011f8:	681b      	ldr	r3, [r3, #0]
  4011fa:	2b00      	cmp	r3, #0
  4011fc:	d03e      	beq.n	40127c <xTaskGenericCreate+0x148>
				if( xSchedulerRunning == pdFALSE )
  4011fe:	4b3b      	ldr	r3, [pc, #236]	; (4012ec <xTaskGenericCreate+0x1b8>)
  401200:	681b      	ldr	r3, [r3, #0]
  401202:	b933      	cbnz	r3, 401212 <xTaskGenericCreate+0xde>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401204:	4b38      	ldr	r3, [pc, #224]	; (4012e8 <xTaskGenericCreate+0x1b4>)
  401206:	681b      	ldr	r3, [r3, #0]
  401208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40120a:	459b      	cmp	fp, r3
  40120c:	d301      	bcc.n	401212 <xTaskGenericCreate+0xde>
						pxCurrentTCB = pxNewTCB;
  40120e:	4b36      	ldr	r3, [pc, #216]	; (4012e8 <xTaskGenericCreate+0x1b4>)
  401210:	601c      	str	r4, [r3, #0]
			uxTaskNumber++;
  401212:	4a37      	ldr	r2, [pc, #220]	; (4012f0 <xTaskGenericCreate+0x1bc>)
  401214:	6813      	ldr	r3, [r2, #0]
  401216:	3301      	adds	r3, #1
  401218:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40121a:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40121c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40121e:	4a35      	ldr	r2, [pc, #212]	; (4012f4 <xTaskGenericCreate+0x1c0>)
  401220:	6811      	ldr	r1, [r2, #0]
  401222:	2301      	movs	r3, #1
  401224:	4083      	lsls	r3, r0
  401226:	430b      	orrs	r3, r1
  401228:	6013      	str	r3, [r2, #0]
  40122a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40122e:	4641      	mov	r1, r8
  401230:	4b31      	ldr	r3, [pc, #196]	; (4012f8 <xTaskGenericCreate+0x1c4>)
  401232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401236:	4b31      	ldr	r3, [pc, #196]	; (4012fc <xTaskGenericCreate+0x1c8>)
  401238:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40123a:	4b31      	ldr	r3, [pc, #196]	; (401300 <xTaskGenericCreate+0x1cc>)
  40123c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  40123e:	4b2b      	ldr	r3, [pc, #172]	; (4012ec <xTaskGenericCreate+0x1b8>)
  401240:	681b      	ldr	r3, [r3, #0]
  401242:	2b00      	cmp	r3, #0
  401244:	d040      	beq.n	4012c8 <xTaskGenericCreate+0x194>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401246:	4b28      	ldr	r3, [pc, #160]	; (4012e8 <xTaskGenericCreate+0x1b4>)
  401248:	681b      	ldr	r3, [r3, #0]
  40124a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40124c:	459b      	cmp	fp, r3
  40124e:	d93f      	bls.n	4012d0 <xTaskGenericCreate+0x19c>
				taskYIELD_IF_USING_PREEMPTION();
  401250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401254:	4b2b      	ldr	r3, [pc, #172]	; (401304 <xTaskGenericCreate+0x1d0>)
  401256:	601a      	str	r2, [r3, #0]
  401258:	f3bf 8f4f 	dsb	sy
  40125c:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401260:	2001      	movs	r0, #1
  401262:	e032      	b.n	4012ca <xTaskGenericCreate+0x196>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401264:	0090      	lsls	r0, r2, #2
  401266:	4b1b      	ldr	r3, [pc, #108]	; (4012d4 <xTaskGenericCreate+0x1a0>)
  401268:	4798      	blx	r3
		if( pxStack != NULL )
  40126a:	4605      	mov	r5, r0
  40126c:	b118      	cbz	r0, 401276 <xTaskGenericCreate+0x142>
  40126e:	e770      	b.n	401152 <xTaskGenericCreate+0x1e>
				vPortFree( pxStack );
  401270:	4628      	mov	r0, r5
  401272:	4b25      	ldr	r3, [pc, #148]	; (401308 <xTaskGenericCreate+0x1d4>)
  401274:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401276:	f04f 30ff 	mov.w	r0, #4294967295
  40127a:	e026      	b.n	4012ca <xTaskGenericCreate+0x196>
				pxCurrentTCB =  pxNewTCB;
  40127c:	4b1a      	ldr	r3, [pc, #104]	; (4012e8 <xTaskGenericCreate+0x1b4>)
  40127e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401280:	6813      	ldr	r3, [r2, #0]
  401282:	2b01      	cmp	r3, #1
  401284:	d1c5      	bne.n	401212 <xTaskGenericCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401286:	4e1c      	ldr	r6, [pc, #112]	; (4012f8 <xTaskGenericCreate+0x1c4>)
  401288:	4630      	mov	r0, r6
  40128a:	4d20      	ldr	r5, [pc, #128]	; (40130c <xTaskGenericCreate+0x1d8>)
  40128c:	47a8      	blx	r5
  40128e:	f106 0014 	add.w	r0, r6, #20
  401292:	47a8      	blx	r5
  401294:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401298:	47a8      	blx	r5
  40129a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  40129e:	47a8      	blx	r5
  4012a0:	f106 0050 	add.w	r0, r6, #80	; 0x50
  4012a4:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  4012a6:	4f1a      	ldr	r7, [pc, #104]	; (401310 <xTaskGenericCreate+0x1dc>)
  4012a8:	4638      	mov	r0, r7
  4012aa:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  4012ac:	4e19      	ldr	r6, [pc, #100]	; (401314 <xTaskGenericCreate+0x1e0>)
  4012ae:	4630      	mov	r0, r6
  4012b0:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  4012b2:	4819      	ldr	r0, [pc, #100]	; (401318 <xTaskGenericCreate+0x1e4>)
  4012b4:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  4012b6:	4819      	ldr	r0, [pc, #100]	; (40131c <xTaskGenericCreate+0x1e8>)
  4012b8:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  4012ba:	4819      	ldr	r0, [pc, #100]	; (401320 <xTaskGenericCreate+0x1ec>)
  4012bc:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  4012be:	4b19      	ldr	r3, [pc, #100]	; (401324 <xTaskGenericCreate+0x1f0>)
  4012c0:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4012c2:	4b19      	ldr	r3, [pc, #100]	; (401328 <xTaskGenericCreate+0x1f4>)
  4012c4:	601e      	str	r6, [r3, #0]
  4012c6:	e7a4      	b.n	401212 <xTaskGenericCreate+0xde>
			xReturn = pdPASS;
  4012c8:	2001      	movs	r0, #1
}
  4012ca:	b003      	add	sp, #12
  4012cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  4012d0:	2001      	movs	r0, #1
	return xReturn;
  4012d2:	e7fa      	b.n	4012ca <xTaskGenericCreate+0x196>
  4012d4:	004009c9 	.word	0x004009c9
  4012d8:	004061e1 	.word	0x004061e1
  4012dc:	0040083d 	.word	0x0040083d
  4012e0:	00400889 	.word	0x00400889
  4012e4:	2040c264 	.word	0x2040c264
  4012e8:	2040c1f4 	.word	0x2040c1f4
  4012ec:	2040c2c0 	.word	0x2040c2c0
  4012f0:	2040c270 	.word	0x2040c270
  4012f4:	2040c278 	.word	0x2040c278
  4012f8:	2040c200 	.word	0x2040c200
  4012fc:	00400781 	.word	0x00400781
  401300:	004008ad 	.word	0x004008ad
  401304:	e000ed04 	.word	0xe000ed04
  401308:	00400a39 	.word	0x00400a39
  40130c:	00400765 	.word	0x00400765
  401310:	2040c27c 	.word	0x2040c27c
  401314:	2040c290 	.word	0x2040c290
  401318:	2040c2ac 	.word	0x2040c2ac
  40131c:	2040c2d8 	.word	0x2040c2d8
  401320:	2040c2c4 	.word	0x2040c2c4
  401324:	2040c1f8 	.word	0x2040c1f8
  401328:	2040c1fc 	.word	0x2040c1fc
  40132c:	0040077b 	.word	0x0040077b

00401330 <vTaskStartScheduler>:
{
  401330:	b510      	push	{r4, lr}
  401332:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401334:	2300      	movs	r3, #0
  401336:	9303      	str	r3, [sp, #12]
  401338:	9302      	str	r3, [sp, #8]
  40133a:	9301      	str	r3, [sp, #4]
  40133c:	9300      	str	r3, [sp, #0]
  40133e:	2282      	movs	r2, #130	; 0x82
  401340:	4911      	ldr	r1, [pc, #68]	; (401388 <vTaskStartScheduler+0x58>)
  401342:	4812      	ldr	r0, [pc, #72]	; (40138c <vTaskStartScheduler+0x5c>)
  401344:	4c12      	ldr	r4, [pc, #72]	; (401390 <vTaskStartScheduler+0x60>)
  401346:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401348:	2801      	cmp	r0, #1
  40134a:	d001      	beq.n	401350 <vTaskStartScheduler+0x20>
}
  40134c:	b004      	add	sp, #16
  40134e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401350:	4b10      	ldr	r3, [pc, #64]	; (401394 <vTaskStartScheduler+0x64>)
  401352:	4798      	blx	r3
	if( xReturn == pdPASS )
  401354:	2801      	cmp	r0, #1
  401356:	d1f9      	bne.n	40134c <vTaskStartScheduler+0x1c>
	__asm volatile
  401358:	f04f 0380 	mov.w	r3, #128	; 0x80
  40135c:	b672      	cpsid	i
  40135e:	f383 8811 	msr	BASEPRI, r3
  401362:	f3bf 8f6f 	isb	sy
  401366:	f3bf 8f4f 	dsb	sy
  40136a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40136c:	f04f 32ff 	mov.w	r2, #4294967295
  401370:	4b09      	ldr	r3, [pc, #36]	; (401398 <vTaskStartScheduler+0x68>)
  401372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401374:	2201      	movs	r2, #1
  401376:	4b09      	ldr	r3, [pc, #36]	; (40139c <vTaskStartScheduler+0x6c>)
  401378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40137a:	2200      	movs	r2, #0
  40137c:	4b08      	ldr	r3, [pc, #32]	; (4013a0 <vTaskStartScheduler+0x70>)
  40137e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401380:	4b08      	ldr	r3, [pc, #32]	; (4013a4 <vTaskStartScheduler+0x74>)
  401382:	4798      	blx	r3
}
  401384:	e7e2      	b.n	40134c <vTaskStartScheduler+0x1c>
  401386:	bf00      	nop
  401388:	0040c474 	.word	0x0040c474
  40138c:	0040166d 	.word	0x0040166d
  401390:	00401135 	.word	0x00401135
  401394:	00401bb1 	.word	0x00401bb1
  401398:	2040c2a4 	.word	0x2040c2a4
  40139c:	2040c2c0 	.word	0x2040c2c0
  4013a0:	2040c2ec 	.word	0x2040c2ec
  4013a4:	00400979 	.word	0x00400979

004013a8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4013a8:	4a02      	ldr	r2, [pc, #8]	; (4013b4 <vTaskSuspendAll+0xc>)
  4013aa:	6813      	ldr	r3, [r2, #0]
  4013ac:	3301      	adds	r3, #1
  4013ae:	6013      	str	r3, [r2, #0]
  4013b0:	4770      	bx	lr
  4013b2:	bf00      	nop
  4013b4:	2040c26c 	.word	0x2040c26c

004013b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
  4013b8:	4b01      	ldr	r3, [pc, #4]	; (4013c0 <xTaskGetTickCount+0x8>)
  4013ba:	6818      	ldr	r0, [r3, #0]
}
  4013bc:	4770      	bx	lr
  4013be:	bf00      	nop
  4013c0:	2040c2ec 	.word	0x2040c2ec

004013c4 <xTaskIncrementTick>:
{
  4013c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4013c8:	4b3d      	ldr	r3, [pc, #244]	; (4014c0 <xTaskIncrementTick+0xfc>)
  4013ca:	681b      	ldr	r3, [r3, #0]
  4013cc:	2b00      	cmp	r3, #0
  4013ce:	d16e      	bne.n	4014ae <xTaskIncrementTick+0xea>
		++xTickCount;
  4013d0:	4b3c      	ldr	r3, [pc, #240]	; (4014c4 <xTaskIncrementTick+0x100>)
  4013d2:	681a      	ldr	r2, [r3, #0]
  4013d4:	3201      	adds	r2, #1
  4013d6:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  4013d8:	f8d3 a000 	ldr.w	sl, [r3]
			if( xConstTickCount == ( TickType_t ) 0U )
  4013dc:	f1ba 0f00 	cmp.w	sl, #0
  4013e0:	d01b      	beq.n	40141a <xTaskIncrementTick+0x56>
			if( xConstTickCount >= xNextTaskUnblockTime )
  4013e2:	4b39      	ldr	r3, [pc, #228]	; (4014c8 <xTaskIncrementTick+0x104>)
  4013e4:	681b      	ldr	r3, [r3, #0]
  4013e6:	459a      	cmp	sl, r3
  4013e8:	d224      	bcs.n	401434 <xTaskIncrementTick+0x70>
BaseType_t xSwitchRequired = pdFALSE;
  4013ea:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4013ec:	4b37      	ldr	r3, [pc, #220]	; (4014cc <xTaskIncrementTick+0x108>)
  4013ee:	681b      	ldr	r3, [r3, #0]
  4013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4013f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4013f6:	4a36      	ldr	r2, [pc, #216]	; (4014d0 <xTaskIncrementTick+0x10c>)
  4013f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4013fc:	2b02      	cmp	r3, #2
  4013fe:	bf28      	it	cs
  401400:	2601      	movcs	r6, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401402:	4b34      	ldr	r3, [pc, #208]	; (4014d4 <xTaskIncrementTick+0x110>)
  401404:	681b      	ldr	r3, [r3, #0]
  401406:	2b00      	cmp	r3, #0
  401408:	d04e      	beq.n	4014a8 <xTaskIncrementTick+0xe4>
		if( xYieldPending != pdFALSE )
  40140a:	4b33      	ldr	r3, [pc, #204]	; (4014d8 <xTaskIncrementTick+0x114>)
  40140c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40140e:	2b00      	cmp	r3, #0
}
  401410:	bf0c      	ite	eq
  401412:	4630      	moveq	r0, r6
  401414:	2001      	movne	r0, #1
  401416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				taskSWITCH_DELAYED_LISTS();
  40141a:	4a30      	ldr	r2, [pc, #192]	; (4014dc <xTaskIncrementTick+0x118>)
  40141c:	6811      	ldr	r1, [r2, #0]
  40141e:	4b30      	ldr	r3, [pc, #192]	; (4014e0 <xTaskIncrementTick+0x11c>)
  401420:	6818      	ldr	r0, [r3, #0]
  401422:	6010      	str	r0, [r2, #0]
  401424:	6019      	str	r1, [r3, #0]
  401426:	4a2f      	ldr	r2, [pc, #188]	; (4014e4 <xTaskIncrementTick+0x120>)
  401428:	6813      	ldr	r3, [r2, #0]
  40142a:	3301      	adds	r3, #1
  40142c:	6013      	str	r3, [r2, #0]
  40142e:	4b2e      	ldr	r3, [pc, #184]	; (4014e8 <xTaskIncrementTick+0x124>)
  401430:	4798      	blx	r3
  401432:	e7d6      	b.n	4013e2 <xTaskIncrementTick+0x1e>
  401434:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401436:	4f29      	ldr	r7, [pc, #164]	; (4014dc <xTaskIncrementTick+0x118>)
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401438:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4014f4 <xTaskIncrementTick+0x130>
						prvAddTaskToReadyList( pxTCB );
  40143c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4014f8 <xTaskIncrementTick+0x134>
  401440:	e021      	b.n	401486 <xTaskIncrementTick+0xc2>
						xNextTaskUnblockTime = portMAX_DELAY;
  401442:	f04f 32ff 	mov.w	r2, #4294967295
  401446:	4b20      	ldr	r3, [pc, #128]	; (4014c8 <xTaskIncrementTick+0x104>)
  401448:	601a      	str	r2, [r3, #0]
						break;
  40144a:	e7cf      	b.n	4013ec <xTaskIncrementTick+0x28>
							xNextTaskUnblockTime = xItemValue;
  40144c:	4a1e      	ldr	r2, [pc, #120]	; (4014c8 <xTaskIncrementTick+0x104>)
  40144e:	6013      	str	r3, [r2, #0]
							break;
  401450:	e7cc      	b.n	4013ec <xTaskIncrementTick+0x28>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401452:	f104 0018 	add.w	r0, r4, #24
  401456:	47c8      	blx	r9
						prvAddTaskToReadyList( pxTCB );
  401458:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40145a:	f8d8 2000 	ldr.w	r2, [r8]
  40145e:	2301      	movs	r3, #1
  401460:	4083      	lsls	r3, r0
  401462:	4313      	orrs	r3, r2
  401464:	f8c8 3000 	str.w	r3, [r8]
  401468:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40146c:	4629      	mov	r1, r5
  40146e:	4b18      	ldr	r3, [pc, #96]	; (4014d0 <xTaskIncrementTick+0x10c>)
  401470:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401474:	4b1d      	ldr	r3, [pc, #116]	; (4014ec <xTaskIncrementTick+0x128>)
  401476:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401478:	4b14      	ldr	r3, [pc, #80]	; (4014cc <xTaskIncrementTick+0x108>)
  40147a:	681b      	ldr	r3, [r3, #0]
  40147c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401480:	429a      	cmp	r2, r3
  401482:	bf28      	it	cs
  401484:	2601      	movcs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401486:	683b      	ldr	r3, [r7, #0]
  401488:	681b      	ldr	r3, [r3, #0]
  40148a:	2b00      	cmp	r3, #0
  40148c:	d0d9      	beq.n	401442 <xTaskIncrementTick+0x7e>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40148e:	683b      	ldr	r3, [r7, #0]
  401490:	68db      	ldr	r3, [r3, #12]
  401492:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401494:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
  401496:	459a      	cmp	sl, r3
  401498:	d3d8      	bcc.n	40144c <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40149a:	1d25      	adds	r5, r4, #4
  40149c:	4628      	mov	r0, r5
  40149e:	47c8      	blx	r9
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4014a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4014a2:	2b00      	cmp	r3, #0
  4014a4:	d1d5      	bne.n	401452 <xTaskIncrementTick+0x8e>
  4014a6:	e7d7      	b.n	401458 <xTaskIncrementTick+0x94>
				vApplicationTickHook();
  4014a8:	4b11      	ldr	r3, [pc, #68]	; (4014f0 <xTaskIncrementTick+0x12c>)
  4014aa:	4798      	blx	r3
  4014ac:	e7ad      	b.n	40140a <xTaskIncrementTick+0x46>
		++uxPendedTicks;
  4014ae:	4a09      	ldr	r2, [pc, #36]	; (4014d4 <xTaskIncrementTick+0x110>)
  4014b0:	6813      	ldr	r3, [r2, #0]
  4014b2:	3301      	adds	r3, #1
  4014b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  4014b6:	4b0e      	ldr	r3, [pc, #56]	; (4014f0 <xTaskIncrementTick+0x12c>)
  4014b8:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  4014ba:	2600      	movs	r6, #0
  4014bc:	e7a5      	b.n	40140a <xTaskIncrementTick+0x46>
  4014be:	bf00      	nop
  4014c0:	2040c26c 	.word	0x2040c26c
  4014c4:	2040c2ec 	.word	0x2040c2ec
  4014c8:	2040c2a4 	.word	0x2040c2a4
  4014cc:	2040c1f4 	.word	0x2040c1f4
  4014d0:	2040c200 	.word	0x2040c200
  4014d4:	2040c268 	.word	0x2040c268
  4014d8:	2040c2f0 	.word	0x2040c2f0
  4014dc:	2040c1f8 	.word	0x2040c1f8
  4014e0:	2040c1fc 	.word	0x2040c1fc
  4014e4:	2040c2a8 	.word	0x2040c2a8
  4014e8:	004010b1 	.word	0x004010b1
  4014ec:	00400781 	.word	0x00400781
  4014f0:	00405be1 	.word	0x00405be1
  4014f4:	004007cd 	.word	0x004007cd
  4014f8:	2040c278 	.word	0x2040c278

004014fc <xTaskResumeAll>:
{
  4014fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	taskENTER_CRITICAL();
  401500:	4b2f      	ldr	r3, [pc, #188]	; (4015c0 <xTaskResumeAll+0xc4>)
  401502:	4798      	blx	r3
		--uxSchedulerSuspended;
  401504:	4b2f      	ldr	r3, [pc, #188]	; (4015c4 <xTaskResumeAll+0xc8>)
  401506:	681a      	ldr	r2, [r3, #0]
  401508:	3a01      	subs	r2, #1
  40150a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40150c:	681b      	ldr	r3, [r3, #0]
  40150e:	2b00      	cmp	r3, #0
  401510:	d150      	bne.n	4015b4 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401512:	4b2d      	ldr	r3, [pc, #180]	; (4015c8 <xTaskResumeAll+0xcc>)
  401514:	681b      	ldr	r3, [r3, #0]
  401516:	b333      	cbz	r3, 401566 <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401518:	4e2c      	ldr	r6, [pc, #176]	; (4015cc <xTaskResumeAll+0xd0>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40151a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 4015f0 <xTaskResumeAll+0xf4>
					prvAddTaskToReadyList( pxTCB );
  40151e:	4f2c      	ldr	r7, [pc, #176]	; (4015d0 <xTaskResumeAll+0xd4>)
  401520:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4015f4 <xTaskResumeAll+0xf8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401524:	6833      	ldr	r3, [r6, #0]
  401526:	b303      	cbz	r3, 40156a <xTaskResumeAll+0x6e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401528:	68f3      	ldr	r3, [r6, #12]
  40152a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40152c:	f104 0018 	add.w	r0, r4, #24
  401530:	47c0      	blx	r8
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401532:	1d25      	adds	r5, r4, #4
  401534:	4628      	mov	r0, r5
  401536:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401538:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40153a:	683a      	ldr	r2, [r7, #0]
  40153c:	2301      	movs	r3, #1
  40153e:	4083      	lsls	r3, r0
  401540:	4313      	orrs	r3, r2
  401542:	603b      	str	r3, [r7, #0]
  401544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401548:	4629      	mov	r1, r5
  40154a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40154e:	4b21      	ldr	r3, [pc, #132]	; (4015d4 <xTaskResumeAll+0xd8>)
  401550:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401552:	4b21      	ldr	r3, [pc, #132]	; (4015d8 <xTaskResumeAll+0xdc>)
  401554:	681b      	ldr	r3, [r3, #0]
  401556:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40155a:	429a      	cmp	r2, r3
  40155c:	d3e2      	bcc.n	401524 <xTaskResumeAll+0x28>
						xYieldPending = pdTRUE;
  40155e:	2201      	movs	r2, #1
  401560:	4b1e      	ldr	r3, [pc, #120]	; (4015dc <xTaskResumeAll+0xe0>)
  401562:	601a      	str	r2, [r3, #0]
  401564:	e7de      	b.n	401524 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
  401566:	2400      	movs	r4, #0
  401568:	e025      	b.n	4015b6 <xTaskResumeAll+0xba>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40156a:	4b1d      	ldr	r3, [pc, #116]	; (4015e0 <xTaskResumeAll+0xe4>)
  40156c:	681b      	ldr	r3, [r3, #0]
  40156e:	b18b      	cbz	r3, 401594 <xTaskResumeAll+0x98>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401570:	4b1b      	ldr	r3, [pc, #108]	; (4015e0 <xTaskResumeAll+0xe4>)
  401572:	681b      	ldr	r3, [r3, #0]
  401574:	b173      	cbz	r3, 401594 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401576:	4d1b      	ldr	r5, [pc, #108]	; (4015e4 <xTaskResumeAll+0xe8>)
							xYieldPending = pdTRUE;
  401578:	4e18      	ldr	r6, [pc, #96]	; (4015dc <xTaskResumeAll+0xe0>)
						--uxPendedTicks;
  40157a:	4c19      	ldr	r4, [pc, #100]	; (4015e0 <xTaskResumeAll+0xe4>)
  40157c:	e004      	b.n	401588 <xTaskResumeAll+0x8c>
  40157e:	6823      	ldr	r3, [r4, #0]
  401580:	3b01      	subs	r3, #1
  401582:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401584:	6823      	ldr	r3, [r4, #0]
  401586:	b12b      	cbz	r3, 401594 <xTaskResumeAll+0x98>
						if( xTaskIncrementTick() != pdFALSE )
  401588:	47a8      	blx	r5
  40158a:	2800      	cmp	r0, #0
  40158c:	d0f7      	beq.n	40157e <xTaskResumeAll+0x82>
							xYieldPending = pdTRUE;
  40158e:	2301      	movs	r3, #1
  401590:	6033      	str	r3, [r6, #0]
  401592:	e7f4      	b.n	40157e <xTaskResumeAll+0x82>
				if( xYieldPending == pdTRUE )
  401594:	4b11      	ldr	r3, [pc, #68]	; (4015dc <xTaskResumeAll+0xe0>)
  401596:	681b      	ldr	r3, [r3, #0]
  401598:	2b01      	cmp	r3, #1
  40159a:	d001      	beq.n	4015a0 <xTaskResumeAll+0xa4>
BaseType_t xAlreadyYielded = pdFALSE;
  40159c:	2400      	movs	r4, #0
  40159e:	e00a      	b.n	4015b6 <xTaskResumeAll+0xba>
					taskYIELD_IF_USING_PREEMPTION();
  4015a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015a4:	4b10      	ldr	r3, [pc, #64]	; (4015e8 <xTaskResumeAll+0xec>)
  4015a6:	601a      	str	r2, [r3, #0]
  4015a8:	f3bf 8f4f 	dsb	sy
  4015ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4015b0:	2401      	movs	r4, #1
  4015b2:	e000      	b.n	4015b6 <xTaskResumeAll+0xba>
BaseType_t xAlreadyYielded = pdFALSE;
  4015b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4015b6:	4b0d      	ldr	r3, [pc, #52]	; (4015ec <xTaskResumeAll+0xf0>)
  4015b8:	4798      	blx	r3
}
  4015ba:	4620      	mov	r0, r4
  4015bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4015c0:	00400889 	.word	0x00400889
  4015c4:	2040c26c 	.word	0x2040c26c
  4015c8:	2040c264 	.word	0x2040c264
  4015cc:	2040c2ac 	.word	0x2040c2ac
  4015d0:	2040c278 	.word	0x2040c278
  4015d4:	00400781 	.word	0x00400781
  4015d8:	2040c1f4 	.word	0x2040c1f4
  4015dc:	2040c2f0 	.word	0x2040c2f0
  4015e0:	2040c268 	.word	0x2040c268
  4015e4:	004013c5 	.word	0x004013c5
  4015e8:	e000ed04 	.word	0xe000ed04
  4015ec:	004008ad 	.word	0x004008ad
  4015f0:	004007cd 	.word	0x004007cd
  4015f4:	2040c200 	.word	0x2040c200

004015f8 <vTaskDelay>:
	{
  4015f8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4015fa:	b940      	cbnz	r0, 40160e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
  4015fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401600:	4b12      	ldr	r3, [pc, #72]	; (40164c <vTaskDelay+0x54>)
  401602:	601a      	str	r2, [r3, #0]
  401604:	f3bf 8f4f 	dsb	sy
  401608:	f3bf 8f6f 	isb	sy
  40160c:	bd10      	pop	{r4, pc}
  40160e:	4604      	mov	r4, r0
			vTaskSuspendAll();
  401610:	4b0f      	ldr	r3, [pc, #60]	; (401650 <vTaskDelay+0x58>)
  401612:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  401614:	4b0f      	ldr	r3, [pc, #60]	; (401654 <vTaskDelay+0x5c>)
  401616:	681b      	ldr	r3, [r3, #0]
  401618:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40161a:	4b0f      	ldr	r3, [pc, #60]	; (401658 <vTaskDelay+0x60>)
  40161c:	6818      	ldr	r0, [r3, #0]
  40161e:	3004      	adds	r0, #4
  401620:	4b0e      	ldr	r3, [pc, #56]	; (40165c <vTaskDelay+0x64>)
  401622:	4798      	blx	r3
  401624:	b948      	cbnz	r0, 40163a <vTaskDelay+0x42>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401626:	4b0c      	ldr	r3, [pc, #48]	; (401658 <vTaskDelay+0x60>)
  401628:	681a      	ldr	r2, [r3, #0]
  40162a:	490d      	ldr	r1, [pc, #52]	; (401660 <vTaskDelay+0x68>)
  40162c:	680b      	ldr	r3, [r1, #0]
  40162e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401630:	2201      	movs	r2, #1
  401632:	4082      	lsls	r2, r0
  401634:	ea23 0302 	bic.w	r3, r3, r2
  401638:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40163a:	4620      	mov	r0, r4
  40163c:	4b09      	ldr	r3, [pc, #36]	; (401664 <vTaskDelay+0x6c>)
  40163e:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  401640:	4b09      	ldr	r3, [pc, #36]	; (401668 <vTaskDelay+0x70>)
  401642:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  401644:	2800      	cmp	r0, #0
  401646:	d1e1      	bne.n	40160c <vTaskDelay+0x14>
  401648:	e7d8      	b.n	4015fc <vTaskDelay+0x4>
  40164a:	bf00      	nop
  40164c:	e000ed04 	.word	0xe000ed04
  401650:	004013a9 	.word	0x004013a9
  401654:	2040c2ec 	.word	0x2040c2ec
  401658:	2040c1f4 	.word	0x2040c1f4
  40165c:	004007cd 	.word	0x004007cd
  401660:	2040c278 	.word	0x2040c278
  401664:	004010dd 	.word	0x004010dd
  401668:	004014fd 	.word	0x004014fd

0040166c <prvIdleTask>:
{
  40166c:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40166e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4016f8 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401672:	4e19      	ldr	r6, [pc, #100]	; (4016d8 <prvIdleTask+0x6c>)
				taskYIELD();
  401674:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4016fc <prvIdleTask+0x90>
  401678:	e02a      	b.n	4016d0 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40167a:	4b18      	ldr	r3, [pc, #96]	; (4016dc <prvIdleTask+0x70>)
  40167c:	681b      	ldr	r3, [r3, #0]
  40167e:	2b01      	cmp	r3, #1
  401680:	d81e      	bhi.n	4016c0 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401682:	682b      	ldr	r3, [r5, #0]
  401684:	2b00      	cmp	r3, #0
  401686:	d0f8      	beq.n	40167a <prvIdleTask+0xe>
			vTaskSuspendAll();
  401688:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40168a:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  40168c:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40168e:	2c00      	cmp	r4, #0
  401690:	d0f7      	beq.n	401682 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  401692:	4b13      	ldr	r3, [pc, #76]	; (4016e0 <prvIdleTask+0x74>)
  401694:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401696:	68f3      	ldr	r3, [r6, #12]
  401698:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40169a:	1d20      	adds	r0, r4, #4
  40169c:	4b11      	ldr	r3, [pc, #68]	; (4016e4 <prvIdleTask+0x78>)
  40169e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4016a0:	4a11      	ldr	r2, [pc, #68]	; (4016e8 <prvIdleTask+0x7c>)
  4016a2:	6813      	ldr	r3, [r2, #0]
  4016a4:	3b01      	subs	r3, #1
  4016a6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4016a8:	682b      	ldr	r3, [r5, #0]
  4016aa:	3b01      	subs	r3, #1
  4016ac:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4016ae:	4b0f      	ldr	r3, [pc, #60]	; (4016ec <prvIdleTask+0x80>)
  4016b0:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4016b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4016b4:	f8df a048 	ldr.w	sl, [pc, #72]	; 401700 <prvIdleTask+0x94>
  4016b8:	47d0      	blx	sl
		vPortFree( pxTCB );
  4016ba:	4620      	mov	r0, r4
  4016bc:	47d0      	blx	sl
  4016be:	e7e0      	b.n	401682 <prvIdleTask+0x16>
				taskYIELD();
  4016c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4016c4:	f8c9 3000 	str.w	r3, [r9]
  4016c8:	f3bf 8f4f 	dsb	sy
  4016cc:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4016d0:	4d07      	ldr	r5, [pc, #28]	; (4016f0 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4016d2:	4f08      	ldr	r7, [pc, #32]	; (4016f4 <prvIdleTask+0x88>)
  4016d4:	e7d5      	b.n	401682 <prvIdleTask+0x16>
  4016d6:	bf00      	nop
  4016d8:	2040c2d8 	.word	0x2040c2d8
  4016dc:	2040c200 	.word	0x2040c200
  4016e0:	00400889 	.word	0x00400889
  4016e4:	004007cd 	.word	0x004007cd
  4016e8:	2040c264 	.word	0x2040c264
  4016ec:	004008ad 	.word	0x004008ad
  4016f0:	2040c274 	.word	0x2040c274
  4016f4:	004014fd 	.word	0x004014fd
  4016f8:	004013a9 	.word	0x004013a9
  4016fc:	e000ed04 	.word	0xe000ed04
  401700:	00400a39 	.word	0x00400a39

00401704 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401704:	4b25      	ldr	r3, [pc, #148]	; (40179c <vTaskSwitchContext+0x98>)
  401706:	681b      	ldr	r3, [r3, #0]
  401708:	2b00      	cmp	r3, #0
  40170a:	d12e      	bne.n	40176a <vTaskSwitchContext+0x66>
{
  40170c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40170e:	2200      	movs	r2, #0
  401710:	4b23      	ldr	r3, [pc, #140]	; (4017a0 <vTaskSwitchContext+0x9c>)
  401712:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  401714:	4b23      	ldr	r3, [pc, #140]	; (4017a4 <vTaskSwitchContext+0xa0>)
  401716:	681b      	ldr	r3, [r3, #0]
  401718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171a:	681a      	ldr	r2, [r3, #0]
  40171c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401720:	d027      	beq.n	401772 <vTaskSwitchContext+0x6e>
  401722:	4b20      	ldr	r3, [pc, #128]	; (4017a4 <vTaskSwitchContext+0xa0>)
  401724:	6818      	ldr	r0, [r3, #0]
  401726:	6819      	ldr	r1, [r3, #0]
  401728:	3134      	adds	r1, #52	; 0x34
  40172a:	4b1f      	ldr	r3, [pc, #124]	; (4017a8 <vTaskSwitchContext+0xa4>)
  40172c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40172e:	4b1f      	ldr	r3, [pc, #124]	; (4017ac <vTaskSwitchContext+0xa8>)
  401730:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401732:	fab3 f383 	clz	r3, r3
  401736:	b2db      	uxtb	r3, r3
  401738:	f1c3 031f 	rsb	r3, r3, #31
  40173c:	4a1c      	ldr	r2, [pc, #112]	; (4017b0 <vTaskSwitchContext+0xac>)
  40173e:	0099      	lsls	r1, r3, #2
  401740:	18c8      	adds	r0, r1, r3
  401742:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401746:	6844      	ldr	r4, [r0, #4]
  401748:	6864      	ldr	r4, [r4, #4]
  40174a:	6044      	str	r4, [r0, #4]
  40174c:	4419      	add	r1, r3
  40174e:	4602      	mov	r2, r0
  401750:	3208      	adds	r2, #8
  401752:	4294      	cmp	r4, r2
  401754:	d01a      	beq.n	40178c <vTaskSwitchContext+0x88>
  401756:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40175a:	4a15      	ldr	r2, [pc, #84]	; (4017b0 <vTaskSwitchContext+0xac>)
  40175c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  401760:	685b      	ldr	r3, [r3, #4]
  401762:	68da      	ldr	r2, [r3, #12]
  401764:	4b0f      	ldr	r3, [pc, #60]	; (4017a4 <vTaskSwitchContext+0xa0>)
  401766:	601a      	str	r2, [r3, #0]
  401768:	bd10      	pop	{r4, pc}
		xYieldPending = pdTRUE;
  40176a:	2201      	movs	r2, #1
  40176c:	4b0c      	ldr	r3, [pc, #48]	; (4017a0 <vTaskSwitchContext+0x9c>)
  40176e:	601a      	str	r2, [r3, #0]
  401770:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  401772:	685a      	ldr	r2, [r3, #4]
  401774:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401778:	d1d3      	bne.n	401722 <vTaskSwitchContext+0x1e>
  40177a:	689a      	ldr	r2, [r3, #8]
  40177c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  401780:	d1cf      	bne.n	401722 <vTaskSwitchContext+0x1e>
  401782:	68db      	ldr	r3, [r3, #12]
  401784:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  401788:	d1cb      	bne.n	401722 <vTaskSwitchContext+0x1e>
  40178a:	e7d0      	b.n	40172e <vTaskSwitchContext+0x2a>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40178c:	6860      	ldr	r0, [r4, #4]
  40178e:	460a      	mov	r2, r1
  401790:	4907      	ldr	r1, [pc, #28]	; (4017b0 <vTaskSwitchContext+0xac>)
  401792:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401796:	6050      	str	r0, [r2, #4]
  401798:	e7dd      	b.n	401756 <vTaskSwitchContext+0x52>
  40179a:	bf00      	nop
  40179c:	2040c26c 	.word	0x2040c26c
  4017a0:	2040c2f0 	.word	0x2040c2f0
  4017a4:	2040c1f4 	.word	0x2040c1f4
  4017a8:	00405bc9 	.word	0x00405bc9
  4017ac:	2040c278 	.word	0x2040c278
  4017b0:	2040c200 	.word	0x2040c200

004017b4 <vTaskPlaceOnEventList>:
{
  4017b4:	b538      	push	{r3, r4, r5, lr}
  4017b6:	460d      	mov	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4017b8:	4c11      	ldr	r4, [pc, #68]	; (401800 <vTaskPlaceOnEventList+0x4c>)
  4017ba:	6821      	ldr	r1, [r4, #0]
  4017bc:	3118      	adds	r1, #24
  4017be:	4b11      	ldr	r3, [pc, #68]	; (401804 <vTaskPlaceOnEventList+0x50>)
  4017c0:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4017c2:	6820      	ldr	r0, [r4, #0]
  4017c4:	3004      	adds	r0, #4
  4017c6:	4b10      	ldr	r3, [pc, #64]	; (401808 <vTaskPlaceOnEventList+0x54>)
  4017c8:	4798      	blx	r3
  4017ca:	b940      	cbnz	r0, 4017de <vTaskPlaceOnEventList+0x2a>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4017cc:	6822      	ldr	r2, [r4, #0]
  4017ce:	490f      	ldr	r1, [pc, #60]	; (40180c <vTaskPlaceOnEventList+0x58>)
  4017d0:	680b      	ldr	r3, [r1, #0]
  4017d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4017d4:	2201      	movs	r2, #1
  4017d6:	4082      	lsls	r2, r0
  4017d8:	ea23 0302 	bic.w	r3, r3, r2
  4017dc:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4017de:	f1b5 3fff 	cmp.w	r5, #4294967295
  4017e2:	d005      	beq.n	4017f0 <vTaskPlaceOnEventList+0x3c>
			xTimeToWake = xTickCount + xTicksToWait;
  4017e4:	4b0a      	ldr	r3, [pc, #40]	; (401810 <vTaskPlaceOnEventList+0x5c>)
  4017e6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4017e8:	4428      	add	r0, r5
  4017ea:	4b0a      	ldr	r3, [pc, #40]	; (401814 <vTaskPlaceOnEventList+0x60>)
  4017ec:	4798      	blx	r3
  4017ee:	bd38      	pop	{r3, r4, r5, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4017f0:	4b03      	ldr	r3, [pc, #12]	; (401800 <vTaskPlaceOnEventList+0x4c>)
  4017f2:	6819      	ldr	r1, [r3, #0]
  4017f4:	3104      	adds	r1, #4
  4017f6:	4808      	ldr	r0, [pc, #32]	; (401818 <vTaskPlaceOnEventList+0x64>)
  4017f8:	4b08      	ldr	r3, [pc, #32]	; (40181c <vTaskPlaceOnEventList+0x68>)
  4017fa:	4798      	blx	r3
  4017fc:	bd38      	pop	{r3, r4, r5, pc}
  4017fe:	bf00      	nop
  401800:	2040c1f4 	.word	0x2040c1f4
  401804:	00400799 	.word	0x00400799
  401808:	004007cd 	.word	0x004007cd
  40180c:	2040c278 	.word	0x2040c278
  401810:	2040c2ec 	.word	0x2040c2ec
  401814:	004010dd 	.word	0x004010dd
  401818:	2040c2c4 	.word	0x2040c2c4
  40181c:	00400781 	.word	0x00400781

00401820 <vTaskPlaceOnEventListRestricted>:
	{
  401820:	b570      	push	{r4, r5, r6, lr}
  401822:	460e      	mov	r6, r1
  401824:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401826:	4c11      	ldr	r4, [pc, #68]	; (40186c <vTaskPlaceOnEventListRestricted+0x4c>)
  401828:	6821      	ldr	r1, [r4, #0]
  40182a:	3118      	adds	r1, #24
  40182c:	4b10      	ldr	r3, [pc, #64]	; (401870 <vTaskPlaceOnEventListRestricted+0x50>)
  40182e:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401830:	6820      	ldr	r0, [r4, #0]
  401832:	3004      	adds	r0, #4
  401834:	4b0f      	ldr	r3, [pc, #60]	; (401874 <vTaskPlaceOnEventListRestricted+0x54>)
  401836:	4798      	blx	r3
  401838:	b940      	cbnz	r0, 40184c <vTaskPlaceOnEventListRestricted+0x2c>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40183a:	6822      	ldr	r2, [r4, #0]
  40183c:	490e      	ldr	r1, [pc, #56]	; (401878 <vTaskPlaceOnEventListRestricted+0x58>)
  40183e:	680b      	ldr	r3, [r1, #0]
  401840:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401842:	2201      	movs	r2, #1
  401844:	4082      	lsls	r2, r0
  401846:	ea23 0302 	bic.w	r3, r3, r2
  40184a:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40184c:	2d01      	cmp	r5, #1
  40184e:	d005      	beq.n	40185c <vTaskPlaceOnEventListRestricted+0x3c>
				xTimeToWake = xTickCount + xTicksToWait;
  401850:	4b0a      	ldr	r3, [pc, #40]	; (40187c <vTaskPlaceOnEventListRestricted+0x5c>)
  401852:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401854:	4430      	add	r0, r6
  401856:	4b0a      	ldr	r3, [pc, #40]	; (401880 <vTaskPlaceOnEventListRestricted+0x60>)
  401858:	4798      	blx	r3
  40185a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40185c:	4b03      	ldr	r3, [pc, #12]	; (40186c <vTaskPlaceOnEventListRestricted+0x4c>)
  40185e:	6819      	ldr	r1, [r3, #0]
  401860:	3104      	adds	r1, #4
  401862:	4808      	ldr	r0, [pc, #32]	; (401884 <vTaskPlaceOnEventListRestricted+0x64>)
  401864:	4b02      	ldr	r3, [pc, #8]	; (401870 <vTaskPlaceOnEventListRestricted+0x50>)
  401866:	4798      	blx	r3
  401868:	bd70      	pop	{r4, r5, r6, pc}
  40186a:	bf00      	nop
  40186c:	2040c1f4 	.word	0x2040c1f4
  401870:	00400781 	.word	0x00400781
  401874:	004007cd 	.word	0x004007cd
  401878:	2040c278 	.word	0x2040c278
  40187c:	2040c2ec 	.word	0x2040c2ec
  401880:	004010dd 	.word	0x004010dd
  401884:	2040c2c4 	.word	0x2040c2c4

00401888 <xTaskRemoveFromEventList>:
{
  401888:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40188a:	68c3      	ldr	r3, [r0, #12]
  40188c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40188e:	f104 0518 	add.w	r5, r4, #24
  401892:	4628      	mov	r0, r5
  401894:	4b14      	ldr	r3, [pc, #80]	; (4018e8 <xTaskRemoveFromEventList+0x60>)
  401896:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401898:	4b14      	ldr	r3, [pc, #80]	; (4018ec <xTaskRemoveFromEventList+0x64>)
  40189a:	681b      	ldr	r3, [r3, #0]
  40189c:	b9e3      	cbnz	r3, 4018d8 <xTaskRemoveFromEventList+0x50>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40189e:	1d25      	adds	r5, r4, #4
  4018a0:	4628      	mov	r0, r5
  4018a2:	4b11      	ldr	r3, [pc, #68]	; (4018e8 <xTaskRemoveFromEventList+0x60>)
  4018a4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4018a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4018a8:	4a11      	ldr	r2, [pc, #68]	; (4018f0 <xTaskRemoveFromEventList+0x68>)
  4018aa:	6811      	ldr	r1, [r2, #0]
  4018ac:	2301      	movs	r3, #1
  4018ae:	4083      	lsls	r3, r0
  4018b0:	430b      	orrs	r3, r1
  4018b2:	6013      	str	r3, [r2, #0]
  4018b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4018b8:	4629      	mov	r1, r5
  4018ba:	4b0e      	ldr	r3, [pc, #56]	; (4018f4 <xTaskRemoveFromEventList+0x6c>)
  4018bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4018c0:	4b0d      	ldr	r3, [pc, #52]	; (4018f8 <xTaskRemoveFromEventList+0x70>)
  4018c2:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4018c4:	4b0d      	ldr	r3, [pc, #52]	; (4018fc <xTaskRemoveFromEventList+0x74>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4018cc:	429a      	cmp	r2, r3
  4018ce:	d908      	bls.n	4018e2 <xTaskRemoveFromEventList+0x5a>
		xYieldPending = pdTRUE;
  4018d0:	2001      	movs	r0, #1
  4018d2:	4b0b      	ldr	r3, [pc, #44]	; (401900 <xTaskRemoveFromEventList+0x78>)
  4018d4:	6018      	str	r0, [r3, #0]
  4018d6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4018d8:	4629      	mov	r1, r5
  4018da:	480a      	ldr	r0, [pc, #40]	; (401904 <xTaskRemoveFromEventList+0x7c>)
  4018dc:	4b06      	ldr	r3, [pc, #24]	; (4018f8 <xTaskRemoveFromEventList+0x70>)
  4018de:	4798      	blx	r3
  4018e0:	e7f0      	b.n	4018c4 <xTaskRemoveFromEventList+0x3c>
		xReturn = pdFALSE;
  4018e2:	2000      	movs	r0, #0
}
  4018e4:	bd38      	pop	{r3, r4, r5, pc}
  4018e6:	bf00      	nop
  4018e8:	004007cd 	.word	0x004007cd
  4018ec:	2040c26c 	.word	0x2040c26c
  4018f0:	2040c278 	.word	0x2040c278
  4018f4:	2040c200 	.word	0x2040c200
  4018f8:	00400781 	.word	0x00400781
  4018fc:	2040c1f4 	.word	0x2040c1f4
  401900:	2040c2f0 	.word	0x2040c2f0
  401904:	2040c2ac 	.word	0x2040c2ac

00401908 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401908:	4b03      	ldr	r3, [pc, #12]	; (401918 <vTaskSetTimeOutState+0x10>)
  40190a:	681b      	ldr	r3, [r3, #0]
  40190c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40190e:	4b03      	ldr	r3, [pc, #12]	; (40191c <vTaskSetTimeOutState+0x14>)
  401910:	681b      	ldr	r3, [r3, #0]
  401912:	6043      	str	r3, [r0, #4]
  401914:	4770      	bx	lr
  401916:	bf00      	nop
  401918:	2040c2a8 	.word	0x2040c2a8
  40191c:	2040c2ec 	.word	0x2040c2ec

00401920 <xTaskCheckForTimeOut>:
{
  401920:	b538      	push	{r3, r4, r5, lr}
  401922:	4604      	mov	r4, r0
  401924:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401926:	4b12      	ldr	r3, [pc, #72]	; (401970 <xTaskCheckForTimeOut+0x50>)
  401928:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40192a:	4b12      	ldr	r3, [pc, #72]	; (401974 <xTaskCheckForTimeOut+0x54>)
  40192c:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40192e:	682b      	ldr	r3, [r5, #0]
  401930:	f1b3 3fff 	cmp.w	r3, #4294967295
  401934:	d018      	beq.n	401968 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401936:	4910      	ldr	r1, [pc, #64]	; (401978 <xTaskCheckForTimeOut+0x58>)
  401938:	6809      	ldr	r1, [r1, #0]
  40193a:	6820      	ldr	r0, [r4, #0]
  40193c:	4288      	cmp	r0, r1
  40193e:	d002      	beq.n	401946 <xTaskCheckForTimeOut+0x26>
  401940:	6861      	ldr	r1, [r4, #4]
  401942:	428a      	cmp	r2, r1
  401944:	d212      	bcs.n	40196c <xTaskCheckForTimeOut+0x4c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401946:	6861      	ldr	r1, [r4, #4]
  401948:	1a50      	subs	r0, r2, r1
  40194a:	4283      	cmp	r3, r0
  40194c:	d804      	bhi.n	401958 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
  40194e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  401950:	4b0a      	ldr	r3, [pc, #40]	; (40197c <xTaskCheckForTimeOut+0x5c>)
  401952:	4798      	blx	r3
}
  401954:	4620      	mov	r0, r4
  401956:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401958:	1a8a      	subs	r2, r1, r2
  40195a:	4413      	add	r3, r2
  40195c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40195e:	4620      	mov	r0, r4
  401960:	4b07      	ldr	r3, [pc, #28]	; (401980 <xTaskCheckForTimeOut+0x60>)
  401962:	4798      	blx	r3
			xReturn = pdFALSE;
  401964:	2400      	movs	r4, #0
  401966:	e7f3      	b.n	401950 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
  401968:	2400      	movs	r4, #0
  40196a:	e7f1      	b.n	401950 <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
  40196c:	2401      	movs	r4, #1
  40196e:	e7ef      	b.n	401950 <xTaskCheckForTimeOut+0x30>
  401970:	00400889 	.word	0x00400889
  401974:	2040c2ec 	.word	0x2040c2ec
  401978:	2040c2a8 	.word	0x2040c2a8
  40197c:	004008ad 	.word	0x004008ad
  401980:	00401909 	.word	0x00401909

00401984 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  401984:	2201      	movs	r2, #1
  401986:	4b01      	ldr	r3, [pc, #4]	; (40198c <vTaskMissedYield+0x8>)
  401988:	601a      	str	r2, [r3, #0]
  40198a:	4770      	bx	lr
  40198c:	2040c2f0 	.word	0x2040c2f0

00401990 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401990:	4b05      	ldr	r3, [pc, #20]	; (4019a8 <xTaskGetSchedulerState+0x18>)
  401992:	681b      	ldr	r3, [r3, #0]
  401994:	b133      	cbz	r3, 4019a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401996:	4b05      	ldr	r3, [pc, #20]	; (4019ac <xTaskGetSchedulerState+0x1c>)
  401998:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  40199a:	2b00      	cmp	r3, #0
  40199c:	bf0c      	ite	eq
  40199e:	2002      	moveq	r0, #2
  4019a0:	2000      	movne	r0, #0
  4019a2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4019a4:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4019a6:	4770      	bx	lr
  4019a8:	2040c2c0 	.word	0x2040c2c0
  4019ac:	2040c26c 	.word	0x2040c26c

004019b0 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4019b0:	2800      	cmp	r0, #0
  4019b2:	d044      	beq.n	401a3e <vTaskPriorityInherit+0x8e>
	{
  4019b4:	b538      	push	{r3, r4, r5, lr}
  4019b6:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4019b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4019ba:	4921      	ldr	r1, [pc, #132]	; (401a40 <vTaskPriorityInherit+0x90>)
  4019bc:	6809      	ldr	r1, [r1, #0]
  4019be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4019c0:	428a      	cmp	r2, r1
  4019c2:	d214      	bcs.n	4019ee <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4019c4:	6981      	ldr	r1, [r0, #24]
  4019c6:	2900      	cmp	r1, #0
  4019c8:	db05      	blt.n	4019d6 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4019ca:	491d      	ldr	r1, [pc, #116]	; (401a40 <vTaskPriorityInherit+0x90>)
  4019cc:	6809      	ldr	r1, [r1, #0]
  4019ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4019d0:	f1c1 0105 	rsb	r1, r1, #5
  4019d4:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  4019d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4019da:	491a      	ldr	r1, [pc, #104]	; (401a44 <vTaskPriorityInherit+0x94>)
  4019dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4019e0:	6961      	ldr	r1, [r4, #20]
  4019e2:	4291      	cmp	r1, r2
  4019e4:	d004      	beq.n	4019f0 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4019e6:	4a16      	ldr	r2, [pc, #88]	; (401a40 <vTaskPriorityInherit+0x90>)
  4019e8:	6812      	ldr	r2, [r2, #0]
  4019ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4019ec:	62e2      	str	r2, [r4, #44]	; 0x2c
  4019ee:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019f0:	1d25      	adds	r5, r4, #4
  4019f2:	4628      	mov	r0, r5
  4019f4:	4b14      	ldr	r3, [pc, #80]	; (401a48 <vTaskPriorityInherit+0x98>)
  4019f6:	4798      	blx	r3
  4019f8:	b970      	cbnz	r0, 401a18 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4019fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4019fc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a00:	4a10      	ldr	r2, [pc, #64]	; (401a44 <vTaskPriorityInherit+0x94>)
  401a02:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401a06:	b93a      	cbnz	r2, 401a18 <vTaskPriorityInherit+0x68>
  401a08:	4810      	ldr	r0, [pc, #64]	; (401a4c <vTaskPriorityInherit+0x9c>)
  401a0a:	6802      	ldr	r2, [r0, #0]
  401a0c:	2101      	movs	r1, #1
  401a0e:	fa01 f303 	lsl.w	r3, r1, r3
  401a12:	ea22 0303 	bic.w	r3, r2, r3
  401a16:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401a18:	4b09      	ldr	r3, [pc, #36]	; (401a40 <vTaskPriorityInherit+0x90>)
  401a1a:	681b      	ldr	r3, [r3, #0]
  401a1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401a1e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401a20:	4a0a      	ldr	r2, [pc, #40]	; (401a4c <vTaskPriorityInherit+0x9c>)
  401a22:	6811      	ldr	r1, [r2, #0]
  401a24:	2301      	movs	r3, #1
  401a26:	4083      	lsls	r3, r0
  401a28:	430b      	orrs	r3, r1
  401a2a:	6013      	str	r3, [r2, #0]
  401a2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a30:	4629      	mov	r1, r5
  401a32:	4b04      	ldr	r3, [pc, #16]	; (401a44 <vTaskPriorityInherit+0x94>)
  401a34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a38:	4b05      	ldr	r3, [pc, #20]	; (401a50 <vTaskPriorityInherit+0xa0>)
  401a3a:	4798      	blx	r3
  401a3c:	bd38      	pop	{r3, r4, r5, pc}
  401a3e:	4770      	bx	lr
  401a40:	2040c1f4 	.word	0x2040c1f4
  401a44:	2040c200 	.word	0x2040c200
  401a48:	004007cd 	.word	0x004007cd
  401a4c:	2040c278 	.word	0x2040c278
  401a50:	00400781 	.word	0x00400781

00401a54 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401a54:	2800      	cmp	r0, #0
  401a56:	d033      	beq.n	401ac0 <xTaskPriorityDisinherit+0x6c>
	{
  401a58:	b538      	push	{r3, r4, r5, lr}
  401a5a:	4604      	mov	r4, r0
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
  401a5c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401a5e:	3a01      	subs	r2, #1
  401a60:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401a62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401a64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401a66:	4288      	cmp	r0, r1
  401a68:	d02c      	beq.n	401ac4 <xTaskPriorityDisinherit+0x70>
  401a6a:	bb5a      	cbnz	r2, 401ac4 <xTaskPriorityDisinherit+0x70>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a6c:	1d25      	adds	r5, r4, #4
  401a6e:	4628      	mov	r0, r5
  401a70:	4b15      	ldr	r3, [pc, #84]	; (401ac8 <xTaskPriorityDisinherit+0x74>)
  401a72:	4798      	blx	r3
  401a74:	b970      	cbnz	r0, 401a94 <xTaskPriorityDisinherit+0x40>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401a76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401a78:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401a7c:	4a13      	ldr	r2, [pc, #76]	; (401acc <xTaskPriorityDisinherit+0x78>)
  401a7e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401a82:	b93a      	cbnz	r2, 401a94 <xTaskPriorityDisinherit+0x40>
  401a84:	4812      	ldr	r0, [pc, #72]	; (401ad0 <xTaskPriorityDisinherit+0x7c>)
  401a86:	6802      	ldr	r2, [r0, #0]
  401a88:	2101      	movs	r1, #1
  401a8a:	fa01 f303 	lsl.w	r3, r1, r3
  401a8e:	ea22 0303 	bic.w	r3, r2, r3
  401a92:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401a94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401a96:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a98:	f1c0 0305 	rsb	r3, r0, #5
  401a9c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401a9e:	4a0c      	ldr	r2, [pc, #48]	; (401ad0 <xTaskPriorityDisinherit+0x7c>)
  401aa0:	6811      	ldr	r1, [r2, #0]
  401aa2:	2401      	movs	r4, #1
  401aa4:	fa04 f300 	lsl.w	r3, r4, r0
  401aa8:	430b      	orrs	r3, r1
  401aaa:	6013      	str	r3, [r2, #0]
  401aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401ab0:	4629      	mov	r1, r5
  401ab2:	4b06      	ldr	r3, [pc, #24]	; (401acc <xTaskPriorityDisinherit+0x78>)
  401ab4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ab8:	4b06      	ldr	r3, [pc, #24]	; (401ad4 <xTaskPriorityDisinherit+0x80>)
  401aba:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401abc:	4620      	mov	r0, r4
  401abe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  401ac0:	2000      	movs	r0, #0
  401ac2:	4770      	bx	lr
  401ac4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401ac6:	bd38      	pop	{r3, r4, r5, pc}
  401ac8:	004007cd 	.word	0x004007cd
  401acc:	2040c200 	.word	0x2040c200
  401ad0:	2040c278 	.word	0x2040c278
  401ad4:	00400781 	.word	0x00400781

00401ad8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401ad8:	4b05      	ldr	r3, [pc, #20]	; (401af0 <pvTaskIncrementMutexHeldCount+0x18>)
  401ada:	681b      	ldr	r3, [r3, #0]
  401adc:	b123      	cbz	r3, 401ae8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401ade:	4b04      	ldr	r3, [pc, #16]	; (401af0 <pvTaskIncrementMutexHeldCount+0x18>)
  401ae0:	681a      	ldr	r2, [r3, #0]
  401ae2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401ae4:	3301      	adds	r3, #1
  401ae6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401ae8:	4b01      	ldr	r3, [pc, #4]	; (401af0 <pvTaskIncrementMutexHeldCount+0x18>)
  401aea:	6818      	ldr	r0, [r3, #0]
	}
  401aec:	4770      	bx	lr
  401aee:	bf00      	nop
  401af0:	2040c1f4 	.word	0x2040c1f4

00401af4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401af4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401af6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401af8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401afa:	4291      	cmp	r1, r2
  401afc:	d80c      	bhi.n	401b18 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401afe:	1ad2      	subs	r2, r2, r3
  401b00:	6983      	ldr	r3, [r0, #24]
  401b02:	429a      	cmp	r2, r3
  401b04:	d301      	bcc.n	401b0a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401b06:	2001      	movs	r0, #1
  401b08:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401b0a:	1d01      	adds	r1, r0, #4
  401b0c:	4b09      	ldr	r3, [pc, #36]	; (401b34 <prvInsertTimerInActiveList+0x40>)
  401b0e:	6818      	ldr	r0, [r3, #0]
  401b10:	4b09      	ldr	r3, [pc, #36]	; (401b38 <prvInsertTimerInActiveList+0x44>)
  401b12:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b14:	2000      	movs	r0, #0
  401b16:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401b18:	429a      	cmp	r2, r3
  401b1a:	d203      	bcs.n	401b24 <prvInsertTimerInActiveList+0x30>
  401b1c:	4299      	cmp	r1, r3
  401b1e:	d301      	bcc.n	401b24 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401b20:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401b22:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401b24:	1d01      	adds	r1, r0, #4
  401b26:	4b05      	ldr	r3, [pc, #20]	; (401b3c <prvInsertTimerInActiveList+0x48>)
  401b28:	6818      	ldr	r0, [r3, #0]
  401b2a:	4b03      	ldr	r3, [pc, #12]	; (401b38 <prvInsertTimerInActiveList+0x44>)
  401b2c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  401b2e:	2000      	movs	r0, #0
  401b30:	bd08      	pop	{r3, pc}
  401b32:	bf00      	nop
  401b34:	2040c2f8 	.word	0x2040c2f8
  401b38:	00400799 	.word	0x00400799
  401b3c:	2040c2f4 	.word	0x2040c2f4

00401b40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401b40:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401b42:	4b10      	ldr	r3, [pc, #64]	; (401b84 <prvCheckForValidListAndQueue+0x44>)
  401b44:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401b46:	4b10      	ldr	r3, [pc, #64]	; (401b88 <prvCheckForValidListAndQueue+0x48>)
  401b48:	681b      	ldr	r3, [r3, #0]
  401b4a:	b113      	cbz	r3, 401b52 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401b4c:	4b0f      	ldr	r3, [pc, #60]	; (401b8c <prvCheckForValidListAndQueue+0x4c>)
  401b4e:	4798      	blx	r3
  401b50:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  401b52:	4d0f      	ldr	r5, [pc, #60]	; (401b90 <prvCheckForValidListAndQueue+0x50>)
  401b54:	4628      	mov	r0, r5
  401b56:	4e0f      	ldr	r6, [pc, #60]	; (401b94 <prvCheckForValidListAndQueue+0x54>)
  401b58:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401b5a:	4c0f      	ldr	r4, [pc, #60]	; (401b98 <prvCheckForValidListAndQueue+0x58>)
  401b5c:	4620      	mov	r0, r4
  401b5e:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401b60:	4b0e      	ldr	r3, [pc, #56]	; (401b9c <prvCheckForValidListAndQueue+0x5c>)
  401b62:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401b64:	4b0e      	ldr	r3, [pc, #56]	; (401ba0 <prvCheckForValidListAndQueue+0x60>)
  401b66:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401b68:	2200      	movs	r2, #0
  401b6a:	2110      	movs	r1, #16
  401b6c:	2005      	movs	r0, #5
  401b6e:	4b0d      	ldr	r3, [pc, #52]	; (401ba4 <prvCheckForValidListAndQueue+0x64>)
  401b70:	4798      	blx	r3
  401b72:	4b05      	ldr	r3, [pc, #20]	; (401b88 <prvCheckForValidListAndQueue+0x48>)
  401b74:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  401b76:	2800      	cmp	r0, #0
  401b78:	d0e8      	beq.n	401b4c <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401b7a:	490b      	ldr	r1, [pc, #44]	; (401ba8 <prvCheckForValidListAndQueue+0x68>)
  401b7c:	4b0b      	ldr	r3, [pc, #44]	; (401bac <prvCheckForValidListAndQueue+0x6c>)
  401b7e:	4798      	blx	r3
  401b80:	e7e4      	b.n	401b4c <prvCheckForValidListAndQueue+0xc>
  401b82:	bf00      	nop
  401b84:	00400889 	.word	0x00400889
  401b88:	2040c328 	.word	0x2040c328
  401b8c:	004008ad 	.word	0x004008ad
  401b90:	2040c2fc 	.word	0x2040c2fc
  401b94:	00400765 	.word	0x00400765
  401b98:	2040c310 	.word	0x2040c310
  401b9c:	2040c2f4 	.word	0x2040c2f4
  401ba0:	2040c2f8 	.word	0x2040c2f8
  401ba4:	00400c5d 	.word	0x00400c5d
  401ba8:	0040c47c 	.word	0x0040c47c
  401bac:	00401025 	.word	0x00401025

00401bb0 <xTimerCreateTimerTask>:
{
  401bb0:	b510      	push	{r4, lr}
  401bb2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  401bb4:	4b0a      	ldr	r3, [pc, #40]	; (401be0 <xTimerCreateTimerTask+0x30>)
  401bb6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  401bb8:	4b0a      	ldr	r3, [pc, #40]	; (401be4 <xTimerCreateTimerTask+0x34>)
  401bba:	681b      	ldr	r3, [r3, #0]
  401bbc:	b16b      	cbz	r3, 401bda <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401bbe:	2300      	movs	r3, #0
  401bc0:	9303      	str	r3, [sp, #12]
  401bc2:	9302      	str	r3, [sp, #8]
  401bc4:	9301      	str	r3, [sp, #4]
  401bc6:	2204      	movs	r2, #4
  401bc8:	9200      	str	r2, [sp, #0]
  401bca:	f44f 7282 	mov.w	r2, #260	; 0x104
  401bce:	4906      	ldr	r1, [pc, #24]	; (401be8 <xTimerCreateTimerTask+0x38>)
  401bd0:	4806      	ldr	r0, [pc, #24]	; (401bec <xTimerCreateTimerTask+0x3c>)
  401bd2:	4c07      	ldr	r4, [pc, #28]	; (401bf0 <xTimerCreateTimerTask+0x40>)
  401bd4:	47a0      	blx	r4
}
  401bd6:	b004      	add	sp, #16
  401bd8:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
  401bda:	2000      	movs	r0, #0
	return xReturn;
  401bdc:	e7fb      	b.n	401bd6 <xTimerCreateTimerTask+0x26>
  401bde:	bf00      	nop
  401be0:	00401b41 	.word	0x00401b41
  401be4:	2040c328 	.word	0x2040c328
  401be8:	0040c484 	.word	0x0040c484
  401bec:	00401cf1 	.word	0x00401cf1
  401bf0:	00401135 	.word	0x00401135

00401bf4 <xTimerGenericCommand>:
{
  401bf4:	b530      	push	{r4, r5, lr}
  401bf6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
  401bf8:	4c10      	ldr	r4, [pc, #64]	; (401c3c <xTimerGenericCommand+0x48>)
  401bfa:	6825      	ldr	r5, [r4, #0]
  401bfc:	b1dd      	cbz	r5, 401c36 <xTimerGenericCommand+0x42>
  401bfe:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
  401c00:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401c02:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401c04:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401c06:	2905      	cmp	r1, #5
  401c08:	dc0e      	bgt.n	401c28 <xTimerGenericCommand+0x34>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401c0a:	4b0d      	ldr	r3, [pc, #52]	; (401c40 <xTimerGenericCommand+0x4c>)
  401c0c:	4798      	blx	r3
  401c0e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401c10:	f04f 0300 	mov.w	r3, #0
  401c14:	bf0c      	ite	eq
  401c16:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401c18:	461a      	movne	r2, r3
  401c1a:	4669      	mov	r1, sp
  401c1c:	4807      	ldr	r0, [pc, #28]	; (401c3c <xTimerGenericCommand+0x48>)
  401c1e:	6800      	ldr	r0, [r0, #0]
  401c20:	4c08      	ldr	r4, [pc, #32]	; (401c44 <xTimerGenericCommand+0x50>)
  401c22:	47a0      	blx	r4
}
  401c24:	b005      	add	sp, #20
  401c26:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401c28:	2300      	movs	r3, #0
  401c2a:	4622      	mov	r2, r4
  401c2c:	4669      	mov	r1, sp
  401c2e:	4628      	mov	r0, r5
  401c30:	4c05      	ldr	r4, [pc, #20]	; (401c48 <xTimerGenericCommand+0x54>)
  401c32:	47a0      	blx	r4
  401c34:	e7f6      	b.n	401c24 <xTimerGenericCommand+0x30>
BaseType_t xReturn = pdFAIL;
  401c36:	2000      	movs	r0, #0
	return xReturn;
  401c38:	e7f4      	b.n	401c24 <xTimerGenericCommand+0x30>
  401c3a:	bf00      	nop
  401c3c:	2040c328 	.word	0x2040c328
  401c40:	00401991 	.word	0x00401991
  401c44:	00400cad 	.word	0x00400cad
  401c48:	00400e19 	.word	0x00400e19

00401c4c <prvSampleTimeNow>:
{
  401c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401c50:	b082      	sub	sp, #8
  401c52:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  401c54:	4b1f      	ldr	r3, [pc, #124]	; (401cd4 <prvSampleTimeNow+0x88>)
  401c56:	4798      	blx	r3
  401c58:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  401c5a:	4b1f      	ldr	r3, [pc, #124]	; (401cd8 <prvSampleTimeNow+0x8c>)
  401c5c:	681b      	ldr	r3, [r3, #0]
  401c5e:	4298      	cmp	r0, r3
  401c60:	d310      	bcc.n	401c84 <prvSampleTimeNow+0x38>
		*pxTimerListsWereSwitched = pdFALSE;
  401c62:	2300      	movs	r3, #0
  401c64:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  401c68:	4b1b      	ldr	r3, [pc, #108]	; (401cd8 <prvSampleTimeNow+0x8c>)
  401c6a:	601f      	str	r7, [r3, #0]
}
  401c6c:	4638      	mov	r0, r7
  401c6e:	b002      	add	sp, #8
  401c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401c74:	2100      	movs	r1, #0
  401c76:	9100      	str	r1, [sp, #0]
  401c78:	460b      	mov	r3, r1
  401c7a:	4652      	mov	r2, sl
  401c7c:	4620      	mov	r0, r4
  401c7e:	4c17      	ldr	r4, [pc, #92]	; (401cdc <prvSampleTimeNow+0x90>)
  401c80:	47a0      	blx	r4
  401c82:	e001      	b.n	401c88 <prvSampleTimeNow+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401c84:	4d16      	ldr	r5, [pc, #88]	; (401ce0 <prvSampleTimeNow+0x94>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c86:	4e17      	ldr	r6, [pc, #92]	; (401ce4 <prvSampleTimeNow+0x98>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401c88:	682b      	ldr	r3, [r5, #0]
  401c8a:	681a      	ldr	r2, [r3, #0]
  401c8c:	b1c2      	cbz	r2, 401cc0 <prvSampleTimeNow+0x74>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c8e:	68db      	ldr	r3, [r3, #12]
  401c90:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401c94:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401c96:	f104 0904 	add.w	r9, r4, #4
  401c9a:	4648      	mov	r0, r9
  401c9c:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ca0:	4620      	mov	r0, r4
  401ca2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401ca4:	69e3      	ldr	r3, [r4, #28]
  401ca6:	2b01      	cmp	r3, #1
  401ca8:	d1ee      	bne.n	401c88 <prvSampleTimeNow+0x3c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401caa:	69a3      	ldr	r3, [r4, #24]
  401cac:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401cae:	459a      	cmp	sl, r3
  401cb0:	d2e0      	bcs.n	401c74 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401cb2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401cb4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401cb6:	4649      	mov	r1, r9
  401cb8:	6828      	ldr	r0, [r5, #0]
  401cba:	4b0b      	ldr	r3, [pc, #44]	; (401ce8 <prvSampleTimeNow+0x9c>)
  401cbc:	4798      	blx	r3
  401cbe:	e7e3      	b.n	401c88 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
  401cc0:	4a0a      	ldr	r2, [pc, #40]	; (401cec <prvSampleTimeNow+0xa0>)
  401cc2:	6810      	ldr	r0, [r2, #0]
  401cc4:	4906      	ldr	r1, [pc, #24]	; (401ce0 <prvSampleTimeNow+0x94>)
  401cc6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401cc8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  401cca:	2301      	movs	r3, #1
  401ccc:	f8c8 3000 	str.w	r3, [r8]
  401cd0:	e7ca      	b.n	401c68 <prvSampleTimeNow+0x1c>
  401cd2:	bf00      	nop
  401cd4:	004013b9 	.word	0x004013b9
  401cd8:	2040c324 	.word	0x2040c324
  401cdc:	00401bf5 	.word	0x00401bf5
  401ce0:	2040c2f4 	.word	0x2040c2f4
  401ce4:	004007cd 	.word	0x004007cd
  401ce8:	00400799 	.word	0x00400799
  401cec:	2040c2f8 	.word	0x2040c2f8

00401cf0 <prvTimerTask>:
{
  401cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401cf4:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401cf6:	4e63      	ldr	r6, [pc, #396]	; (401e84 <prvTimerTask+0x194>)
	vTaskSuspendAll();
  401cf8:	4f63      	ldr	r7, [pc, #396]	; (401e88 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401cfa:	4d64      	ldr	r5, [pc, #400]	; (401e8c <prvTimerTask+0x19c>)
					portYIELD_WITHIN_API();
  401cfc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 401eb0 <prvTimerTask+0x1c0>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d00:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 401eb4 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401d04:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  401d06:	681a      	ldr	r2, [r3, #0]
  401d08:	2a00      	cmp	r2, #0
  401d0a:	f000 80a9 	beq.w	401e60 <prvTimerTask+0x170>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d0e:	68db      	ldr	r3, [r3, #12]
  401d10:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
  401d14:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401d16:	a804      	add	r0, sp, #16
  401d18:	4b5d      	ldr	r3, [pc, #372]	; (401e90 <prvTimerTask+0x1a0>)
  401d1a:	4798      	blx	r3
  401d1c:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401d1e:	9b04      	ldr	r3, [sp, #16]
  401d20:	2b00      	cmp	r3, #0
  401d22:	d137      	bne.n	401d94 <prvTimerTask+0xa4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401d24:	4550      	cmp	r0, sl
  401d26:	d211      	bcs.n	401d4c <prvTimerTask+0x5c>
  401d28:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401d2a:	ebaa 0104 	sub.w	r1, sl, r4
  401d2e:	6828      	ldr	r0, [r5, #0]
  401d30:	4b58      	ldr	r3, [pc, #352]	; (401e94 <prvTimerTask+0x1a4>)
  401d32:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401d34:	4b58      	ldr	r3, [pc, #352]	; (401e98 <prvTimerTask+0x1a8>)
  401d36:	4798      	blx	r3
  401d38:	bb70      	cbnz	r0, 401d98 <prvTimerTask+0xa8>
					portYIELD_WITHIN_API();
  401d3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d3e:	f8c9 3000 	str.w	r3, [r9]
  401d42:	f3bf 8f4f 	dsb	sy
  401d46:	f3bf 8f6f 	isb	sy
  401d4a:	e025      	b.n	401d98 <prvTimerTask+0xa8>
				( void ) xTaskResumeAll();
  401d4c:	4b52      	ldr	r3, [pc, #328]	; (401e98 <prvTimerTask+0x1a8>)
  401d4e:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401d50:	6833      	ldr	r3, [r6, #0]
  401d52:	68db      	ldr	r3, [r3, #12]
  401d54:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401d58:	f10b 0004 	add.w	r0, fp, #4
  401d5c:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401d5e:	f8db 301c 	ldr.w	r3, [fp, #28]
  401d62:	2b01      	cmp	r3, #1
  401d64:	d004      	beq.n	401d70 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401d66:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
  401d6a:	4658      	mov	r0, fp
  401d6c:	4798      	blx	r3
  401d6e:	e013      	b.n	401d98 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401d70:	f8db 1018 	ldr.w	r1, [fp, #24]
  401d74:	4653      	mov	r3, sl
  401d76:	4622      	mov	r2, r4
  401d78:	4451      	add	r1, sl
  401d7a:	4658      	mov	r0, fp
  401d7c:	4c47      	ldr	r4, [pc, #284]	; (401e9c <prvTimerTask+0x1ac>)
  401d7e:	47a0      	blx	r4
  401d80:	2801      	cmp	r0, #1
  401d82:	d1f0      	bne.n	401d66 <prvTimerTask+0x76>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401d84:	2100      	movs	r1, #0
  401d86:	9100      	str	r1, [sp, #0]
  401d88:	460b      	mov	r3, r1
  401d8a:	4652      	mov	r2, sl
  401d8c:	4658      	mov	r0, fp
  401d8e:	4c44      	ldr	r4, [pc, #272]	; (401ea0 <prvTimerTask+0x1b0>)
  401d90:	47a0      	blx	r4
  401d92:	e7e8      	b.n	401d66 <prvTimerTask+0x76>
			( void ) xTaskResumeAll();
  401d94:	4b40      	ldr	r3, [pc, #256]	; (401e98 <prvTimerTask+0x1a8>)
  401d96:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401d98:	4c42      	ldr	r4, [pc, #264]	; (401ea4 <prvTimerTask+0x1b4>)
  401d9a:	e006      	b.n	401daa <prvTimerTask+0xba>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401d9c:	9907      	ldr	r1, [sp, #28]
  401d9e:	9806      	ldr	r0, [sp, #24]
  401da0:	9b05      	ldr	r3, [sp, #20]
  401da2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401da4:	9b04      	ldr	r3, [sp, #16]
  401da6:	2b00      	cmp	r3, #0
  401da8:	da09      	bge.n	401dbe <prvTimerTask+0xce>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401daa:	2300      	movs	r3, #0
  401dac:	461a      	mov	r2, r3
  401dae:	a904      	add	r1, sp, #16
  401db0:	6828      	ldr	r0, [r5, #0]
  401db2:	47a0      	blx	r4
  401db4:	2800      	cmp	r0, #0
  401db6:	d0a5      	beq.n	401d04 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401db8:	9b04      	ldr	r3, [sp, #16]
  401dba:	2b00      	cmp	r3, #0
  401dbc:	dbee      	blt.n	401d9c <prvTimerTask+0xac>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401dbe:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401dc2:	f8da 3014 	ldr.w	r3, [sl, #20]
  401dc6:	b113      	cbz	r3, 401dce <prvTimerTask+0xde>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401dc8:	f10a 0004 	add.w	r0, sl, #4
  401dcc:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401dce:	a803      	add	r0, sp, #12
  401dd0:	4b2f      	ldr	r3, [pc, #188]	; (401e90 <prvTimerTask+0x1a0>)
  401dd2:	4798      	blx	r3
			switch( xMessage.xMessageID )
  401dd4:	9b04      	ldr	r3, [sp, #16]
  401dd6:	2b09      	cmp	r3, #9
  401dd8:	d8e7      	bhi.n	401daa <prvTimerTask+0xba>
  401dda:	a201      	add	r2, pc, #4	; (adr r2, 401de0 <prvTimerTask+0xf0>)
  401ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401de0:	00401e09 	.word	0x00401e09
  401de4:	00401e09 	.word	0x00401e09
  401de8:	00401e09 	.word	0x00401e09
  401dec:	00401dab 	.word	0x00401dab
  401df0:	00401e45 	.word	0x00401e45
  401df4:	00401e59 	.word	0x00401e59
  401df8:	00401e09 	.word	0x00401e09
  401dfc:	00401e09 	.word	0x00401e09
  401e00:	00401dab 	.word	0x00401dab
  401e04:	00401e45 	.word	0x00401e45
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401e08:	9c05      	ldr	r4, [sp, #20]
  401e0a:	f8da 1018 	ldr.w	r1, [sl, #24]
  401e0e:	4623      	mov	r3, r4
  401e10:	4602      	mov	r2, r0
  401e12:	4421      	add	r1, r4
  401e14:	4650      	mov	r0, sl
  401e16:	4c21      	ldr	r4, [pc, #132]	; (401e9c <prvTimerTask+0x1ac>)
  401e18:	47a0      	blx	r4
  401e1a:	2801      	cmp	r0, #1
  401e1c:	d1bc      	bne.n	401d98 <prvTimerTask+0xa8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401e1e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  401e22:	4650      	mov	r0, sl
  401e24:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401e26:	f8da 301c 	ldr.w	r3, [sl, #28]
  401e2a:	2b01      	cmp	r3, #1
  401e2c:	d1b4      	bne.n	401d98 <prvTimerTask+0xa8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401e2e:	f8da 2018 	ldr.w	r2, [sl, #24]
  401e32:	2100      	movs	r1, #0
  401e34:	9100      	str	r1, [sp, #0]
  401e36:	460b      	mov	r3, r1
  401e38:	9805      	ldr	r0, [sp, #20]
  401e3a:	4402      	add	r2, r0
  401e3c:	4650      	mov	r0, sl
  401e3e:	4c18      	ldr	r4, [pc, #96]	; (401ea0 <prvTimerTask+0x1b0>)
  401e40:	47a0      	blx	r4
  401e42:	e7a9      	b.n	401d98 <prvTimerTask+0xa8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401e44:	9905      	ldr	r1, [sp, #20]
  401e46:	f8ca 1018 	str.w	r1, [sl, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401e4a:	4603      	mov	r3, r0
  401e4c:	4602      	mov	r2, r0
  401e4e:	4401      	add	r1, r0
  401e50:	4650      	mov	r0, sl
  401e52:	4c12      	ldr	r4, [pc, #72]	; (401e9c <prvTimerTask+0x1ac>)
  401e54:	47a0      	blx	r4
  401e56:	e79f      	b.n	401d98 <prvTimerTask+0xa8>
					vPortFree( pxTimer );
  401e58:	4650      	mov	r0, sl
  401e5a:	4b13      	ldr	r3, [pc, #76]	; (401ea8 <prvTimerTask+0x1b8>)
  401e5c:	4798      	blx	r3
  401e5e:	e79b      	b.n	401d98 <prvTimerTask+0xa8>
	vTaskSuspendAll();
  401e60:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401e62:	a804      	add	r0, sp, #16
  401e64:	4b0a      	ldr	r3, [pc, #40]	; (401e90 <prvTimerTask+0x1a0>)
  401e66:	4798      	blx	r3
  401e68:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401e6a:	9b04      	ldr	r3, [sp, #16]
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	d191      	bne.n	401d94 <prvTimerTask+0xa4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401e70:	4b0e      	ldr	r3, [pc, #56]	; (401eac <prvTimerTask+0x1bc>)
  401e72:	681b      	ldr	r3, [r3, #0]
  401e74:	681a      	ldr	r2, [r3, #0]
  401e76:	fab2 f282 	clz	r2, r2
  401e7a:	0952      	lsrs	r2, r2, #5
  401e7c:	f04f 0a00 	mov.w	sl, #0
  401e80:	e753      	b.n	401d2a <prvTimerTask+0x3a>
  401e82:	bf00      	nop
  401e84:	2040c2f4 	.word	0x2040c2f4
  401e88:	004013a9 	.word	0x004013a9
  401e8c:	2040c328 	.word	0x2040c328
  401e90:	00401c4d 	.word	0x00401c4d
  401e94:	00401059 	.word	0x00401059
  401e98:	004014fd 	.word	0x004014fd
  401e9c:	00401af5 	.word	0x00401af5
  401ea0:	00401bf5 	.word	0x00401bf5
  401ea4:	00400ea9 	.word	0x00400ea9
  401ea8:	00400a39 	.word	0x00400a39
  401eac:	2040c2f8 	.word	0x2040c2f8
  401eb0:	e000ed04 	.word	0xe000ed04
  401eb4:	004007cd 	.word	0x004007cd

00401eb8 <chip_isr>:

static tpfNmBspIsr gpfIsr;

static void chip_isr(uint32_t id, uint32_t mask)
{
	if ((id == CONF_WINC_SPI_INT_PIO_ID) && (mask == CONF_WINC_SPI_INT_MASK)) {
  401eb8:	2810      	cmp	r0, #16
  401eba:	d108      	bne.n	401ece <chip_isr+0x16>
  401ebc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401ec0:	d105      	bne.n	401ece <chip_isr+0x16>
{
  401ec2:	b508      	push	{r3, lr}
		if (gpfIsr) {
  401ec4:	4b02      	ldr	r3, [pc, #8]	; (401ed0 <chip_isr+0x18>)
  401ec6:	681b      	ldr	r3, [r3, #0]
  401ec8:	b103      	cbz	r3, 401ecc <chip_isr+0x14>
			gpfIsr();
  401eca:	4798      	blx	r3
  401ecc:	bd08      	pop	{r3, pc}
  401ece:	4770      	bx	lr
  401ed0:	2040c32c 	.word	0x2040c32c

00401ed4 <nm_bsp_sleep>:
*	@param[IN]	u32TimeMsec
*				Time in milliseconds
*/
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while(u32TimeMsec--) {
  401ed4:	b150      	cbz	r0, 401eec <nm_bsp_sleep+0x18>
{
  401ed6:	b570      	push	{r4, r5, r6, lr}
  401ed8:	1e44      	subs	r4, r0, #1
		delay_ms(4);
  401eda:	4e05      	ldr	r6, [pc, #20]	; (401ef0 <nm_bsp_sleep+0x1c>)
  401edc:	4d05      	ldr	r5, [pc, #20]	; (401ef4 <nm_bsp_sleep+0x20>)
  401ede:	4630      	mov	r0, r6
  401ee0:	47a8      	blx	r5
	while(u32TimeMsec--) {
  401ee2:	3c01      	subs	r4, #1
  401ee4:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ee8:	d1f9      	bne.n	401ede <nm_bsp_sleep+0xa>
  401eea:	bd70      	pop	{r4, r5, r6, pc}
  401eec:	4770      	bx	lr
  401eee:	bf00      	nop
  401ef0:	00031635 	.word	0x00031635
  401ef4:	20400001 	.word	0x20400001

00401ef8 <nm_bsp_reset>:
{
  401ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401efc:	4f09      	ldr	r7, [pc, #36]	; (401f24 <nm_bsp_reset+0x2c>)
  401efe:	f44f 3800 	mov.w	r8, #131072	; 0x20000
  401f02:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  401f06:	4d08      	ldr	r5, [pc, #32]	; (401f28 <nm_bsp_reset+0x30>)
  401f08:	2608      	movs	r6, #8
  401f0a:	636e      	str	r6, [r5, #52]	; 0x34
	nm_bsp_sleep(100);
  401f0c:	2064      	movs	r0, #100	; 0x64
  401f0e:	4c07      	ldr	r4, [pc, #28]	; (401f2c <nm_bsp_reset+0x34>)
  401f10:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f12:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
	nm_bsp_sleep(100);
  401f16:	2064      	movs	r0, #100	; 0x64
  401f18:	47a0      	blx	r4
  401f1a:	632e      	str	r6, [r5, #48]	; 0x30
	nm_bsp_sleep(100);
  401f1c:	2064      	movs	r0, #100	; 0x64
  401f1e:	47a0      	blx	r4
  401f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f24:	400e1200 	.word	0x400e1200
  401f28:	400e1000 	.word	0x400e1000
  401f2c:	00401ed5 	.word	0x00401ed5

00401f30 <nm_bsp_init>:
{
  401f30:	b510      	push	{r4, lr}
	gpfIsr = NULL;
  401f32:	2200      	movs	r2, #0
  401f34:	4b14      	ldr	r3, [pc, #80]	; (401f88 <nm_bsp_init+0x58>)
  401f36:	601a      	str	r2, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  401f38:	200a      	movs	r0, #10
  401f3a:	4c14      	ldr	r4, [pc, #80]	; (401f8c <nm_bsp_init+0x5c>)
  401f3c:	47a0      	blx	r4
  401f3e:	200b      	movs	r0, #11
  401f40:	47a0      	blx	r4
  401f42:	200c      	movs	r0, #12
  401f44:	47a0      	blx	r4
  401f46:	2010      	movs	r0, #16
  401f48:	47a0      	blx	r4
  401f4a:	2011      	movs	r0, #17
  401f4c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f4e:	4b10      	ldr	r3, [pc, #64]	; (401f90 <nm_bsp_init+0x60>)
  401f50:	2208      	movs	r2, #8
  401f52:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f58:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f5a:	4a0e      	ldr	r2, [pc, #56]	; (401f94 <nm_bsp_init+0x64>)
  401f5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401f60:	6111      	str	r1, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f62:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f66:	6311      	str	r1, [r2, #48]	; 0x30
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401f68:	2204      	movs	r2, #4
  401f6a:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401f70:	631a      	str	r2, [r3, #48]	; 0x30
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
  401f72:	4b09      	ldr	r3, [pc, #36]	; (401f98 <nm_bsp_init+0x68>)
  401f74:	681b      	ldr	r3, [r3, #0]
  401f76:	f013 0f01 	tst.w	r3, #1
  401f7a:	d001      	beq.n	401f80 <nm_bsp_init+0x50>
  401f7c:	4b06      	ldr	r3, [pc, #24]	; (401f98 <nm_bsp_init+0x68>)
  401f7e:	681b      	ldr	r3, [r3, #0]
	nm_bsp_reset();
  401f80:	4b06      	ldr	r3, [pc, #24]	; (401f9c <nm_bsp_init+0x6c>)
  401f82:	4798      	blx	r3
}
  401f84:	2000      	movs	r0, #0
  401f86:	bd10      	pop	{r4, pc}
  401f88:	2040c32c 	.word	0x2040c32c
  401f8c:	00405151 	.word	0x00405151
  401f90:	400e1000 	.word	0x400e1000
  401f94:	400e1200 	.word	0x400e1200
  401f98:	e000e010 	.word	0xe000e010
  401f9c:	00401ef9 	.word	0x00401ef9

00401fa0 <nm_bsp_register_isr>:
*	@brief	Register interrupt service routine
*	@param[IN]	pfIsr
*				Pointer to ISR handler
*/
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
  401fa0:	b530      	push	{r4, r5, lr}
  401fa2:	b083      	sub	sp, #12
	gpfIsr = pfIsr;
  401fa4:	4b14      	ldr	r3, [pc, #80]	; (401ff8 <nm_bsp_register_isr+0x58>)
  401fa6:	6018      	str	r0, [r3, #0]

	/* Configure PGIO pin for interrupt from SPI slave, used when slave has data to send. */
	pmc_enable_periph_clk(CONF_WINC_SPI_INT_PIO_ID);
  401fa8:	2010      	movs	r0, #16
  401faa:	4b14      	ldr	r3, [pc, #80]	; (401ffc <nm_bsp_register_isr+0x5c>)
  401fac:	4798      	blx	r3
	pio_configure_pin(CONF_WINC_SPI_INT_PIN, PIO_TYPE_PIO_INPUT);
  401fae:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401fb2:	207c      	movs	r0, #124	; 0x7c
  401fb4:	4b12      	ldr	r3, [pc, #72]	; (402000 <nm_bsp_register_isr+0x60>)
  401fb6:	4798      	blx	r3
	pio_pull_up(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK, PIO_PULLUP);
  401fb8:	4c12      	ldr	r4, [pc, #72]	; (402004 <nm_bsp_register_isr+0x64>)
  401fba:	2201      	movs	r2, #1
  401fbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401fc0:	4620      	mov	r0, r4
  401fc2:	4b11      	ldr	r3, [pc, #68]	; (402008 <nm_bsp_register_isr+0x68>)
  401fc4:	4798      	blx	r3
	/*Interrupt on falling edge*/
	pio_handler_set(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_PIO_ID,
  401fc6:	4b11      	ldr	r3, [pc, #68]	; (40200c <nm_bsp_register_isr+0x6c>)
  401fc8:	9300      	str	r3, [sp, #0]
  401fca:	2351      	movs	r3, #81	; 0x51
  401fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fd0:	2110      	movs	r1, #16
  401fd2:	4620      	mov	r0, r4
  401fd4:	4d0e      	ldr	r5, [pc, #56]	; (402010 <nm_bsp_register_isr+0x70>)
  401fd6:	47a8      	blx	r5
	CONF_WINC_SPI_INT_MASK, PIO_PULLUP | PIO_IT_FALL_EDGE, chip_isr);
	pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  401fd8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401fdc:	4620      	mov	r0, r4
  401fde:	4b0d      	ldr	r3, [pc, #52]	; (402014 <nm_bsp_register_isr+0x74>)
  401fe0:	4798      	blx	r3
  401fe2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401fe6:	4b0c      	ldr	r3, [pc, #48]	; (402018 <nm_bsp_register_isr+0x78>)
  401fe8:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) CONF_WINC_SPI_INT_PIO_ID);
	pio_handler_set_priority(CONF_WINC_SPI_INT_PIO, (IRQn_Type)CONF_WINC_SPI_INT_PIO_ID,
  401fea:	2200      	movs	r2, #0
  401fec:	2110      	movs	r1, #16
  401fee:	4620      	mov	r0, r4
  401ff0:	4b0a      	ldr	r3, [pc, #40]	; (40201c <nm_bsp_register_isr+0x7c>)
  401ff2:	4798      	blx	r3
			CONF_WINC_SPI_INT_PRIORITY);
}
  401ff4:	b003      	add	sp, #12
  401ff6:	bd30      	pop	{r4, r5, pc}
  401ff8:	2040c32c 	.word	0x2040c32c
  401ffc:	00405151 	.word	0x00405151
  402000:	00404d59 	.word	0x00404d59
  402004:	400e1400 	.word	0x400e1400
  402008:	00404c1d 	.word	0x00404c1d
  40200c:	00401eb9 	.word	0x00401eb9
  402010:	00404ed9 	.word	0x00404ed9
  402014:	00404d49 	.word	0x00404d49
  402018:	e000e100 	.word	0xe000e100
  40201c:	00404fad 	.word	0x00404fad

00402020 <nm_bsp_interrupt_ctrl>:
*	@brief	Enable/Disable interrupts
*	@param[IN]	u8Enable
*				'0' disable interrupts. '1' enable interrupts
*/
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
  402020:	b508      	push	{r3, lr}
	if (u8Enable) {
  402022:	b928      	cbnz	r0, 402030 <nm_bsp_interrupt_ctrl+0x10>
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
	}
	else {
		pio_disable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402024:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402028:	4804      	ldr	r0, [pc, #16]	; (40203c <nm_bsp_interrupt_ctrl+0x1c>)
  40202a:	4b05      	ldr	r3, [pc, #20]	; (402040 <nm_bsp_interrupt_ctrl+0x20>)
  40202c:	4798      	blx	r3
  40202e:	bd08      	pop	{r3, pc}
		pio_enable_interrupt(CONF_WINC_SPI_INT_PIO, CONF_WINC_SPI_INT_MASK);
  402030:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402034:	4801      	ldr	r0, [pc, #4]	; (40203c <nm_bsp_interrupt_ctrl+0x1c>)
  402036:	4b03      	ldr	r3, [pc, #12]	; (402044 <nm_bsp_interrupt_ctrl+0x24>)
  402038:	4798      	blx	r3
  40203a:	bd08      	pop	{r3, pc}
  40203c:	400e1400 	.word	0x400e1400
  402040:	00404d4d 	.word	0x00404d4d
  402044:	00404d49 	.word	0x00404d49

00402048 <nm_bus_init>:
 *	@fn		nm_bus_init
 *	@brief	Initialize the bus wrapper
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_init(void *pvinit)
{
  402048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		base->PIO_PUDR = mask;
  40204a:	4c39      	ldr	r4, [pc, #228]	; (402130 <nm_bus_init+0xe8>)
  40204c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  402050:	6621      	str	r1, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402052:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402056:	6561      	str	r1, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402058:	6261      	str	r1, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40205a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40205e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402060:	430b      	orrs	r3, r1
  402062:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402064:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402066:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  40206a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40206c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  402070:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402072:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402076:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402078:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40207a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40207e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  402080:	4313      	orrs	r3, r2
  402082:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  402084:	6f63      	ldr	r3, [r4, #116]	; 0x74
  402086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  40208a:	6763      	str	r3, [r4, #116]	; 0x74
		base->PIO_PUDR = mask;
  40208c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  402090:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  402092:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  402096:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  402098:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40209a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40209e:	6f20      	ldr	r0, [r4, #112]	; 0x70
  4020a0:	4318      	orrs	r0, r3
  4020a2:	6720      	str	r0, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4020a4:	6f60      	ldr	r0, [r4, #116]	; 0x74
  4020a6:	f420 0080 	bic.w	r0, r0, #4194304	; 0x400000
  4020aa:	6760      	str	r0, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4020ac:	6061      	str	r1, [r4, #4]
  4020ae:	6062      	str	r2, [r4, #4]
  4020b0:	6063      	str	r3, [r4, #4]
  4020b2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  4020b6:	6066      	str	r6, [r4, #4]
	ioport_disable_pin(CONF_WINC_SPI_MOSI_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CLK_GPIO);
	ioport_disable_pin(CONF_WINC_SPI_CS_GPIO);
	
	/* disable CS control by peripheral */
	PIOD->PIO_PER = (1<<25);
  4020b8:	6026      	str	r6, [r4, #0]
	PIOD->PIO_OER = (1<<25);
  4020ba:	6126      	str	r6, [r4, #16]
	SPI_DEASSERT_CS();
  4020bc:	6326      	str	r6, [r4, #48]	; 0x30

	spi_enable_clock(CONF_WINC_SPI);
  4020be:	4d1d      	ldr	r5, [pc, #116]	; (402134 <nm_bus_init+0xec>)
  4020c0:	4628      	mov	r0, r5
  4020c2:	4b1d      	ldr	r3, [pc, #116]	; (402138 <nm_bus_init+0xf0>)
  4020c4:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  4020c6:	2302      	movs	r3, #2
  4020c8:	602b      	str	r3, [r5, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  4020ca:	2380      	movs	r3, #128	; 0x80
  4020cc:	602b      	str	r3, [r5, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4020ce:	686b      	ldr	r3, [r5, #4]
  4020d0:	f043 0301 	orr.w	r3, r3, #1
  4020d4:	606b      	str	r3, [r5, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4020d6:	686b      	ldr	r3, [r5, #4]
  4020d8:	f043 0310 	orr.w	r3, r3, #16
  4020dc:	606b      	str	r3, [r5, #4]
	spi_disable(CONF_WINC_SPI);
	spi_reset(CONF_WINC_SPI);
	spi_set_master_mode(CONF_WINC_SPI);
	spi_disable_mode_fault_detect(CONF_WINC_SPI);
	spi_set_peripheral_chip_select_value(CONF_WINC_SPI, CONF_WINC_SPI_NPCS);
  4020de:	2101      	movs	r1, #1
  4020e0:	4628      	mov	r0, r5
  4020e2:	4b16      	ldr	r3, [pc, #88]	; (40213c <nm_bus_init+0xf4>)
  4020e4:	4798      	blx	r3
	spi_set_clock_polarity(CONF_WINC_SPI,
  4020e6:	2200      	movs	r2, #0
  4020e8:	2101      	movs	r1, #1
  4020ea:	4628      	mov	r0, r5
  4020ec:	4b14      	ldr	r3, [pc, #80]	; (402140 <nm_bus_init+0xf8>)
  4020ee:	4798      	blx	r3
			CONF_WINC_SPI_NPCS, CONF_WINC_SPI_POL);
	spi_set_clock_phase(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_PHA);
  4020f0:	2201      	movs	r2, #1
  4020f2:	4611      	mov	r1, r2
  4020f4:	4628      	mov	r0, r5
  4020f6:	4b13      	ldr	r3, [pc, #76]	; (402144 <nm_bus_init+0xfc>)
  4020f8:	4798      	blx	r3
	spi_set_bits_per_transfer(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, SPI_CSR_BITS_8_BIT);
  4020fa:	2200      	movs	r2, #0
  4020fc:	2101      	movs	r1, #1
  4020fe:	4628      	mov	r0, r5
  402100:	4b11      	ldr	r3, [pc, #68]	; (402148 <nm_bus_init+0x100>)
  402102:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
			spi_calc_baudrate_div(CONF_WINC_SPI_CLOCK, sysclk_get_cpu_hz()));
  402104:	4911      	ldr	r1, [pc, #68]	; (40214c <nm_bus_init+0x104>)
  402106:	4812      	ldr	r0, [pc, #72]	; (402150 <nm_bus_init+0x108>)
  402108:	4b12      	ldr	r3, [pc, #72]	; (402154 <nm_bus_init+0x10c>)
  40210a:	4798      	blx	r3
	spi_set_baudrate_div(CONF_WINC_SPI, CONF_WINC_SPI_NPCS,
  40210c:	b2c2      	uxtb	r2, r0
  40210e:	2101      	movs	r1, #1
  402110:	4628      	mov	r0, r5
  402112:	4b11      	ldr	r3, [pc, #68]	; (402158 <nm_bus_init+0x110>)
  402114:	4798      	blx	r3
	spi_set_transfer_delay(CONF_WINC_SPI, CONF_WINC_SPI_NPCS, CONF_WINC_SPI_DLYBS,
  402116:	2300      	movs	r3, #0
  402118:	461a      	mov	r2, r3
  40211a:	2101      	movs	r1, #1
  40211c:	4628      	mov	r0, r5
  40211e:	4f0f      	ldr	r7, [pc, #60]	; (40215c <nm_bus_init+0x114>)
  402120:	47b8      	blx	r7
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402122:	2301      	movs	r3, #1
  402124:	602b      	str	r3, [r5, #0]
			CONF_WINC_SPI_DLYBCT);
	spi_enable(CONF_WINC_SPI);
	
	SPI_DEASSERT_CS();
  402126:	6326      	str	r6, [r4, #48]	; 0x30
	nm_bsp_reset();
  402128:	4b0d      	ldr	r3, [pc, #52]	; (402160 <nm_bus_init+0x118>)
  40212a:	4798      	blx	r3
#endif
	return result;
}
  40212c:	2000      	movs	r0, #0
  40212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402130:	400e1400 	.word	0x400e1400
  402134:	40008000 	.word	0x40008000
  402138:	004051a5 	.word	0x004051a5
  40213c:	004051d1 	.word	0x004051d1
  402140:	0040524b 	.word	0x0040524b
  402144:	00405269 	.word	0x00405269
  402148:	00405287 	.word	0x00405287
  40214c:	11e1a300 	.word	0x11e1a300
  402150:	02dc6c00 	.word	0x02dc6c00
  402154:	0040529b 	.word	0x0040529b
  402158:	004052b1 	.word	0x004052b1
  40215c:	004052d9 	.word	0x004052d9
  402160:	00401ef9 	.word	0x00401ef9

00402164 <nm_bus_ioctl>:
 *					Arbitrary parameter depenging on IOCTL
 *	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 *	@note	For SPI only, it's important to be able to send/receive at the same time
 */
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
  402164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402168:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
  40216a:	2803      	cmp	r0, #3
  40216c:	d144      	bne.n	4021f8 <nm_bus_ioctl+0x94>
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
  40216e:	680e      	ldr	r6, [r1, #0]
  402170:	684d      	ldr	r5, [r1, #4]
  402172:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
  402174:	2300      	movs	r3, #0
  402176:	f88d 3004 	strb.w	r3, [sp, #4]
	uint16_t rxd_data = 0;
  40217a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (!pu8Mosi) {
  40217e:	b186      	cbz	r6, 4021a2 <nm_bus_ioctl+0x3e>
	else if(!pu8Miso) {
  402180:	2d00      	cmp	r5, #0
  402182:	d136      	bne.n	4021f2 <nm_bus_ioctl+0x8e>
		u8SkipMiso = 1;
  402184:	f04f 0801 	mov.w	r8, #1
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  402188:	4699      	mov	r9, r3
		pu8Miso = &u8Dummy;
  40218a:	ad01      	add	r5, sp, #4
	SPI_ASSERT_CS();
  40218c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402190:	4b20      	ldr	r3, [pc, #128]	; (402214 <nm_bus_ioctl+0xb0>)
  402192:	635a      	str	r2, [r3, #52]	; 0x34
	while (u16Sz) {
  402194:	b32c      	cbz	r4, 4021e2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  402196:	4f20      	ldr	r7, [pc, #128]	; (402218 <nm_bus_ioctl+0xb4>)
  402198:	f8df b094 	ldr.w	fp, [pc, #148]	; 402230 <nm_bus_ioctl+0xcc>
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  40219c:	f8df a094 	ldr.w	sl, [pc, #148]	; 402234 <nm_bus_ioctl+0xd0>
  4021a0:	e006      	b.n	4021b0 <nm_bus_ioctl+0x4c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
  4021a2:	f04f 0800 	mov.w	r8, #0
		u8SkipMosi = 1;
  4021a6:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
  4021aa:	ae01      	add	r6, sp, #4
  4021ac:	e7ee      	b.n	40218c <nm_bus_ioctl+0x28>
	while (u16Sz) {
  4021ae:	b1c4      	cbz	r4, 4021e2 <nm_bus_ioctl+0x7e>
		spi_write(CONF_WINC_SPI, txd_data, 0, 0);
  4021b0:	2300      	movs	r3, #0
  4021b2:	461a      	mov	r2, r3
  4021b4:	7831      	ldrb	r1, [r6, #0]
  4021b6:	4638      	mov	r0, r7
  4021b8:	47d8      	blx	fp
		spi_read(CONF_WINC_SPI, &rxd_data, &uc_pcs);
  4021ba:	f10d 0205 	add.w	r2, sp, #5
  4021be:	f10d 0106 	add.w	r1, sp, #6
  4021c2:	4638      	mov	r0, r7
  4021c4:	47d0      	blx	sl
		*pu8Miso = rxd_data;
  4021c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4021ca:	702b      	strb	r3, [r5, #0]
		u16Sz--;
  4021cc:	3c01      	subs	r4, #1
  4021ce:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
  4021d0:	f1b8 0f00 	cmp.w	r8, #0
  4021d4:	d100      	bne.n	4021d8 <nm_bus_ioctl+0x74>
			pu8Miso++;
  4021d6:	3501      	adds	r5, #1
		if (!u8SkipMosi)
  4021d8:	f1b9 0f00 	cmp.w	r9, #0
  4021dc:	d1e7      	bne.n	4021ae <nm_bus_ioctl+0x4a>
			pu8Mosi++;
  4021de:	3601      	adds	r6, #1
  4021e0:	e7e5      	b.n	4021ae <nm_bus_ioctl+0x4a>
	SPI_DEASSERT_CS();
  4021e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  4021e6:	4b0b      	ldr	r3, [pc, #44]	; (402214 <nm_bus_ioctl+0xb0>)
  4021e8:	631a      	str	r2, [r3, #48]	; 0x30
	return M2M_SUCCESS;
  4021ea:	2000      	movs	r0, #0
			M2M_ERR("Invalid IOCTL command!\n");
			break;
	}

	return s8Ret;
}
  4021ec:	b003      	add	sp, #12
  4021ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return M2M_ERR_BUS_FAIL;
  4021f2:	f06f 0005 	mvn.w	r0, #5
		break;
  4021f6:	e7f9      	b.n	4021ec <nm_bus_ioctl+0x88>
			M2M_ERR("Invalid IOCTL command!\n");
  4021f8:	f240 121f 	movw	r2, #287	; 0x11f
  4021fc:	4907      	ldr	r1, [pc, #28]	; (40221c <nm_bus_ioctl+0xb8>)
  4021fe:	4808      	ldr	r0, [pc, #32]	; (402220 <nm_bus_ioctl+0xbc>)
  402200:	4c08      	ldr	r4, [pc, #32]	; (402224 <nm_bus_ioctl+0xc0>)
  402202:	47a0      	blx	r4
  402204:	4808      	ldr	r0, [pc, #32]	; (402228 <nm_bus_ioctl+0xc4>)
  402206:	47a0      	blx	r4
  402208:	4808      	ldr	r0, [pc, #32]	; (40222c <nm_bus_ioctl+0xc8>)
  40220a:	47a0      	blx	r4
			s8Ret = -1;
  40220c:	f04f 30ff 	mov.w	r0, #4294967295
			break;
  402210:	e7ec      	b.n	4021ec <nm_bus_ioctl+0x88>
  402212:	bf00      	nop
  402214:	400e1400 	.word	0x400e1400
  402218:	40008000 	.word	0x40008000
  40221c:	0040c48c 	.word	0x0040c48c
  402220:	0040c49c 	.word	0x0040c49c
  402224:	00406085 	.word	0x00406085
  402228:	0040c4b0 	.word	0x0040c4b0
  40222c:	0040c4c8 	.word	0x0040c4c8
  402230:	00405217 	.word	0x00405217
  402234:	004051e7 	.word	0x004051e7

00402238 <nm_bus_deinit>:
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  402238:	2202      	movs	r2, #2
  40223a:	4b0e      	ldr	r3, [pc, #56]	; (402274 <nm_bus_deinit+0x3c>)
  40223c:	601a      	str	r2, [r3, #0]
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40223e:	f503 2359 	add.w	r3, r3, #888832	; 0xd9000
  402242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  402246:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40224a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40224c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  402254:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402256:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40225a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40225e:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  402260:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  402268:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40226a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(CONF_WINC_SPI_MOSI_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_MISO_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CLK_GPIO, IOPORT_DIR_INPUT);
	ioport_set_pin_dir(CONF_WINC_SPI_CS_GPIO, IOPORT_DIR_INPUT);
	return M2M_SUCCESS;
}
  40226e:	2000      	movs	r0, #0
  402270:	4770      	bx	lr
  402272:	bf00      	nop
  402274:	40008000 	.word	0x40008000

00402278 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
  402278:	b13a      	cbz	r2, 40228a <m2m_memcpy+0x12>
  40227a:	3901      	subs	r1, #1
  40227c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
  40227e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402282:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
  402286:	4290      	cmp	r0, r2
  402288:	d1f9      	bne.n	40227e <m2m_memcpy+0x6>
  40228a:	4770      	bx	lr

0040228c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
  40228c:	b122      	cbz	r2, 402298 <m2m_memset+0xc>
  40228e:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
  402290:	f800 1b01 	strb.w	r1, [r0], #1
		pBuf++;
	}while(--sz);
  402294:	4290      	cmp	r0, r2
  402296:	d1fb      	bne.n	402290 <m2m_memset+0x4>
  402298:	4770      	bx	lr

0040229a <m2m_strlen>:
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
  40229a:	7803      	ldrb	r3, [r0, #0]
  40229c:	b143      	cbz	r3, 4022b0 <m2m_strlen+0x16>
  40229e:	2300      	movs	r3, #0
	{
		u16StrLen ++;
  4022a0:	3301      	adds	r3, #1
  4022a2:	b29b      	uxth	r3, r3
	while(*pcStr)
  4022a4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
  4022a8:	2a00      	cmp	r2, #0
  4022aa:	d1f9      	bne.n	4022a0 <m2m_strlen+0x6>
		pcStr++;
	}
	return u16StrLen;
}
  4022ac:	4618      	mov	r0, r3
  4022ae:	4770      	bx	lr
	uint16	u16StrLen = 0;
  4022b0:	2300      	movs	r3, #0
  4022b2:	e7fb      	b.n	4022ac <m2m_strlen+0x12>

004022b4 <isr>:
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
  4022b4:	4a02      	ldr	r2, [pc, #8]	; (4022c0 <isr+0xc>)
  4022b6:	7813      	ldrb	r3, [r2, #0]
  4022b8:	3301      	adds	r3, #1
  4022ba:	b2db      	uxtb	r3, r3
  4022bc:	7013      	strb	r3, [r2, #0]
  4022be:	4770      	bx	lr
  4022c0:	2040c333 	.word	0x2040c333

004022c4 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  4022c4:	4770      	bx	lr
	...

004022c8 <hif_set_rx_done>:
{
  4022c8:	b500      	push	{lr}
  4022ca:	b083      	sub	sp, #12
	nm_bsp_interrupt_ctrl(1);
  4022cc:	2001      	movs	r0, #1
  4022ce:	4b0b      	ldr	r3, [pc, #44]	; (4022fc <hif_set_rx_done+0x34>)
  4022d0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  4022d2:	a901      	add	r1, sp, #4
  4022d4:	f241 0070 	movw	r0, #4208	; 0x1070
  4022d8:	4b09      	ldr	r3, [pc, #36]	; (402300 <hif_set_rx_done+0x38>)
  4022da:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  4022dc:	4603      	mov	r3, r0
  4022de:	b118      	cbz	r0, 4022e8 <hif_set_rx_done+0x20>
}
  4022e0:	4618      	mov	r0, r3
  4022e2:	b003      	add	sp, #12
  4022e4:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= (1<<1);
  4022e8:	9901      	ldr	r1, [sp, #4]
  4022ea:	f041 0102 	orr.w	r1, r1, #2
  4022ee:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  4022f0:	f241 0070 	movw	r0, #4208	; 0x1070
  4022f4:	4b03      	ldr	r3, [pc, #12]	; (402304 <hif_set_rx_done+0x3c>)
  4022f6:	4798      	blx	r3
  4022f8:	4603      	mov	r3, r0
  4022fa:	e7f1      	b.n	4022e0 <hif_set_rx_done+0x18>
  4022fc:	00402021 	.word	0x00402021
  402300:	004035b5 	.word	0x004035b5
  402304:	004035c1 	.word	0x004035c1

00402308 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
  402308:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
  40230a:	4b12      	ldr	r3, [pc, #72]	; (402354 <hif_chip_wake+0x4c>)
  40230c:	781b      	ldrb	r3, [r3, #0]
  40230e:	b94b      	cbnz	r3, 402324 <hif_chip_wake+0x1c>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  402310:	4b11      	ldr	r3, [pc, #68]	; (402358 <hif_chip_wake+0x50>)
  402312:	781b      	ldrb	r3, [r3, #0]
  402314:	b2db      	uxtb	r3, r3
  402316:	2b03      	cmp	r3, #3
  402318:	d00c      	beq.n	402334 <hif_chip_wake+0x2c>
  40231a:	4b0f      	ldr	r3, [pc, #60]	; (402358 <hif_chip_wake+0x50>)
  40231c:	781b      	ldrb	r3, [r3, #0]
  40231e:	b2db      	uxtb	r3, r3
  402320:	2b04      	cmp	r3, #4
  402322:	d007      	beq.n	402334 <hif_chip_wake+0x2c>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
  402324:	4a0b      	ldr	r2, [pc, #44]	; (402354 <hif_chip_wake+0x4c>)
  402326:	7813      	ldrb	r3, [r2, #0]
  402328:	3301      	adds	r3, #1
  40232a:	b2db      	uxtb	r3, r3
  40232c:	7013      	strb	r3, [r2, #0]
  40232e:	2300      	movs	r3, #0
ERR1:
	return ret;
}
  402330:	4618      	mov	r0, r3
  402332:	bd08      	pop	{r3, pc}
			ret = nm_clkless_wake();
  402334:	4b09      	ldr	r3, [pc, #36]	; (40235c <hif_chip_wake+0x54>)
  402336:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  402338:	4603      	mov	r3, r0
  40233a:	2800      	cmp	r0, #0
  40233c:	d1f8      	bne.n	402330 <hif_chip_wake+0x28>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
  40233e:	f245 6178 	movw	r1, #22136	; 0x5678
  402342:	f241 0074 	movw	r0, #4212	; 0x1074
  402346:	4b06      	ldr	r3, [pc, #24]	; (402360 <hif_chip_wake+0x58>)
  402348:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  40234a:	4603      	mov	r3, r0
  40234c:	2800      	cmp	r0, #0
  40234e:	d0e9      	beq.n	402324 <hif_chip_wake+0x1c>
  402350:	e7ee      	b.n	402330 <hif_chip_wake+0x28>
  402352:	bf00      	nop
  402354:	2040c331 	.word	0x2040c331
  402358:	2040c330 	.word	0x2040c330
  40235c:	00403125 	.word	0x00403125
  402360:	004035c1 	.word	0x004035c1

00402364 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
  402364:	4b1e      	ldr	r3, [pc, #120]	; (4023e0 <hif_chip_sleep+0x7c>)
  402366:	781b      	ldrb	r3, [r3, #0]
  402368:	b123      	cbz	r3, 402374 <hif_chip_sleep+0x10>
	{
		gu8ChipSleep--;
  40236a:	4a1d      	ldr	r2, [pc, #116]	; (4023e0 <hif_chip_sleep+0x7c>)
  40236c:	7813      	ldrb	r3, [r2, #0]
  40236e:	3b01      	subs	r3, #1
  402370:	b2db      	uxtb	r3, r3
  402372:	7013      	strb	r3, [r2, #0]
	}
	
	if(gu8ChipSleep == 0)
  402374:	4b1a      	ldr	r3, [pc, #104]	; (4023e0 <hif_chip_sleep+0x7c>)
  402376:	781b      	ldrb	r3, [r3, #0]
  402378:	2b00      	cmp	r3, #0
  40237a:	d12e      	bne.n	4023da <hif_chip_sleep+0x76>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
  40237c:	4b19      	ldr	r3, [pc, #100]	; (4023e4 <hif_chip_sleep+0x80>)
  40237e:	781b      	ldrb	r3, [r3, #0]
  402380:	b2db      	uxtb	r3, r3
  402382:	2b03      	cmp	r3, #3
  402384:	d006      	beq.n	402394 <hif_chip_sleep+0x30>
  402386:	4b17      	ldr	r3, [pc, #92]	; (4023e4 <hif_chip_sleep+0x80>)
  402388:	781b      	ldrb	r3, [r3, #0]
  40238a:	b2db      	uxtb	r3, r3
  40238c:	2b04      	cmp	r3, #4
  40238e:	d001      	beq.n	402394 <hif_chip_sleep+0x30>
	sint8 ret = M2M_SUCCESS;
  402390:	2300      	movs	r3, #0
  402392:	e023      	b.n	4023dc <hif_chip_sleep+0x78>
{
  402394:	b500      	push	{lr}
  402396:	b083      	sub	sp, #12
		{
			uint32 reg = 0;
  402398:	2300      	movs	r3, #0
  40239a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
  40239c:	f244 3121 	movw	r1, #17185	; 0x4321
  4023a0:	f241 0074 	movw	r0, #4212	; 0x1074
  4023a4:	4b10      	ldr	r3, [pc, #64]	; (4023e8 <hif_chip_sleep+0x84>)
  4023a6:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4023a8:	4603      	mov	r3, r0
  4023aa:	b118      	cbz	r0, 4023b4 <hif_chip_sleep+0x50>
		{
		}
	}
ERR1:
	return ret;
}
  4023ac:	4618      	mov	r0, r3
  4023ae:	b003      	add	sp, #12
  4023b0:	f85d fb04 	ldr.w	pc, [sp], #4
			ret = nm_read_reg_with_ret(0x1, &reg);
  4023b4:	a901      	add	r1, sp, #4
  4023b6:	2001      	movs	r0, #1
  4023b8:	4b0c      	ldr	r3, [pc, #48]	; (4023ec <hif_chip_sleep+0x88>)
  4023ba:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
  4023bc:	4603      	mov	r3, r0
  4023be:	2800      	cmp	r0, #0
  4023c0:	d1f4      	bne.n	4023ac <hif_chip_sleep+0x48>
			if(reg&0x2)
  4023c2:	9901      	ldr	r1, [sp, #4]
  4023c4:	f011 0f02 	tst.w	r1, #2
  4023c8:	d0f0      	beq.n	4023ac <hif_chip_sleep+0x48>
				reg &=~(1 << 1);
  4023ca:	f021 0102 	bic.w	r1, r1, #2
  4023ce:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
  4023d0:	2001      	movs	r0, #1
  4023d2:	4b05      	ldr	r3, [pc, #20]	; (4023e8 <hif_chip_sleep+0x84>)
  4023d4:	4798      	blx	r3
  4023d6:	4603      	mov	r3, r0
  4023d8:	e7e8      	b.n	4023ac <hif_chip_sleep+0x48>
	sint8 ret = M2M_SUCCESS;
  4023da:	2300      	movs	r3, #0
}
  4023dc:	4618      	mov	r0, r3
  4023de:	4770      	bx	lr
  4023e0:	2040c331 	.word	0x2040c331
  4023e4:	2040c330 	.word	0x2040c330
  4023e8:	004035c1 	.word	0x004035c1
  4023ec:	004035b5 	.word	0x004035b5

004023f0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
  4023f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4023f4:	b087      	sub	sp, #28
  4023f6:	4607      	mov	r7, r0
  4023f8:	4688      	mov	r8, r1
  4023fa:	4692      	mov	sl, r2
  4023fc:	4699      	mov	r9, r3
  4023fe:	9c10      	ldr	r4, [sp, #64]	; 0x40
  402400:	f8bd 6044 	ldrh.w	r6, [sp, #68]	; 0x44
  402404:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
  402408:	f001 037f 	and.w	r3, r1, #127	; 0x7f
  40240c:	f88d 3015 	strb.w	r3, [sp, #21]
	strHif.u8Gid		= u8Gid;
  402410:	f88d 0014 	strb.w	r0, [sp, #20]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
  402414:	2308      	movs	r3, #8
  402416:	f8ad 3016 	strh.w	r3, [sp, #22]
	if(pu8DataBuf != NULL)
  40241a:	2c00      	cmp	r4, #0
  40241c:	f000 809f 	beq.w	40255e <hif_send+0x16e>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
  402420:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402424:	fa16 f383 	uxtah	r3, r6, r3
  402428:	442b      	add	r3, r5
  40242a:	b29b      	uxth	r3, r3
  40242c:	f8ad 3016 	strh.w	r3, [sp, #22]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
  402430:	4b5c      	ldr	r3, [pc, #368]	; (4025a4 <hif_send+0x1b4>)
  402432:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
  402434:	4683      	mov	fp, r0
  402436:	2800      	cmp	r0, #0
  402438:	f040 80a2 	bne.w	402580 <hif_send+0x190>
	{
		volatile uint32 reg, dma_addr = 0;
  40243c:	2300      	movs	r3, #0
  40243e:	9303      	str	r3, [sp, #12]
		volatile uint16 cnt = 0;
  402440:	f8ad 3006 	strh.w	r3, [sp, #6]

		reg = 0UL;
  402444:	9302      	str	r3, [sp, #8]
		reg |= (uint32)u8Gid;
  402446:	9b02      	ldr	r3, [sp, #8]
  402448:	431f      	orrs	r7, r3
  40244a:	9702      	str	r7, [sp, #8]
		reg |= ((uint32)u8Opcode<<8);
  40244c:	9b02      	ldr	r3, [sp, #8]
  40244e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
  402452:	9302      	str	r3, [sp, #8]
		reg |= ((uint32)strHif.u16Length<<16);
  402454:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  402458:	9b02      	ldr	r3, [sp, #8]
  40245a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40245e:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(NMI_STATE_REG,reg);
  402460:	9902      	ldr	r1, [sp, #8]
  402462:	f241 008c 	movw	r0, #4236	; 0x108c
  402466:	4b50      	ldr	r3, [pc, #320]	; (4025a8 <hif_send+0x1b8>)
  402468:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  40246a:	4683      	mov	fp, r0
  40246c:	2800      	cmp	r0, #0
  40246e:	f040 8091 	bne.w	402594 <hif_send+0x1a4>


		reg = 0;
  402472:	2300      	movs	r3, #0
  402474:	9302      	str	r3, [sp, #8]
		reg |= (1<<1);
  402476:	9b02      	ldr	r3, [sp, #8]
  402478:	f043 0302 	orr.w	r3, r3, #2
  40247c:	9302      	str	r3, [sp, #8]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
  40247e:	9902      	ldr	r1, [sp, #8]
  402480:	f241 0078 	movw	r0, #4216	; 0x1078
  402484:	4b48      	ldr	r3, [pc, #288]	; (4025a8 <hif_send+0x1b8>)
  402486:	4798      	blx	r3
		if(M2M_SUCCESS != ret) goto ERR1;
  402488:	4683      	mov	fp, r0
  40248a:	2800      	cmp	r0, #0
  40248c:	f040 8082 	bne.w	402594 <hif_send+0x1a4>
		dma_addr = 0;
  402490:	2300      	movs	r3, #0
  402492:	9303      	str	r3, [sp, #12]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
  402494:	f8ad 3006 	strh.w	r3, [sp, #6]
  402498:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40249c:	b29b      	uxth	r3, r3
  40249e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4024a2:	d216      	bcs.n	4024d2 <hif_send+0xe2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
  4024a4:	f241 0878 	movw	r8, #4216	; 0x1078
  4024a8:	4f40      	ldr	r7, [pc, #256]	; (4025ac <hif_send+0x1bc>)
  4024aa:	a902      	add	r1, sp, #8
  4024ac:	4640      	mov	r0, r8
  4024ae:	47b8      	blx	r7
			if(ret != M2M_SUCCESS) break;
  4024b0:	b978      	cbnz	r0, 4024d2 <hif_send+0xe2>
			if (!(reg & 0x2))
  4024b2:	9b02      	ldr	r3, [sp, #8]
  4024b4:	f013 0f02 	tst.w	r3, #2
  4024b8:	d059      	beq.n	40256e <hif_send+0x17e>
		for(cnt = 0; cnt < 1000; cnt ++)
  4024ba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4024be:	3301      	adds	r3, #1
  4024c0:	b29b      	uxth	r3, r3
  4024c2:	f8ad 3006 	strh.w	r3, [sp, #6]
  4024c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4024ca:	b29b      	uxth	r3, r3
  4024cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4024d0:	d3eb      	bcc.n	4024aa <hif_send+0xba>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
  4024d2:	9b03      	ldr	r3, [sp, #12]
  4024d4:	2b00      	cmp	r3, #0
  4024d6:	d061      	beq.n	40259c <hif_send+0x1ac>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
  4024d8:	9b03      	ldr	r3, [sp, #12]
  4024da:	9304      	str	r3, [sp, #16]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
  4024dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4024e0:	b29b      	uxth	r3, r3
  4024e2:	f8ad 3016 	strh.w	r3, [sp, #22]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
  4024e6:	9804      	ldr	r0, [sp, #16]
  4024e8:	2208      	movs	r2, #8
  4024ea:	a905      	add	r1, sp, #20
  4024ec:	4b30      	ldr	r3, [pc, #192]	; (4025b0 <hif_send+0x1c0>)
  4024ee:	4798      	blx	r3
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
  4024f0:	4683      	mov	fp, r0
  4024f2:	2800      	cmp	r0, #0
  4024f4:	d14e      	bne.n	402594 <hif_send+0x1a4>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
  4024f6:	9b04      	ldr	r3, [sp, #16]
  4024f8:	3308      	adds	r3, #8
  4024fa:	9304      	str	r3, [sp, #16]
			if(pu8CtrlBuf != NULL)
  4024fc:	f1ba 0f00 	cmp.w	sl, #0
  402500:	d00a      	beq.n	402518 <hif_send+0x128>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
  402502:	9804      	ldr	r0, [sp, #16]
  402504:	464a      	mov	r2, r9
  402506:	4651      	mov	r1, sl
  402508:	4b29      	ldr	r3, [pc, #164]	; (4025b0 <hif_send+0x1c0>)
  40250a:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40250c:	4683      	mov	fp, r0
  40250e:	2800      	cmp	r0, #0
  402510:	d140      	bne.n	402594 <hif_send+0x1a4>
				u32CurrAddr += u16CtrlBufSize;
  402512:	9b04      	ldr	r3, [sp, #16]
  402514:	444b      	add	r3, r9
  402516:	9304      	str	r3, [sp, #16]
			}
			if(pu8DataBuf != NULL)
  402518:	b17c      	cbz	r4, 40253a <hif_send+0x14a>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
  40251a:	9b04      	ldr	r3, [sp, #16]
  40251c:	eba5 0509 	sub.w	r5, r5, r9
  402520:	441d      	add	r5, r3
  402522:	9504      	str	r5, [sp, #16]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
  402524:	9804      	ldr	r0, [sp, #16]
  402526:	4632      	mov	r2, r6
  402528:	4621      	mov	r1, r4
  40252a:	4b21      	ldr	r3, [pc, #132]	; (4025b0 <hif_send+0x1c0>)
  40252c:	4798      	blx	r3
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
  40252e:	4683      	mov	fp, r0
  402530:	2800      	cmp	r0, #0
  402532:	d12f      	bne.n	402594 <hif_send+0x1a4>
				u32CurrAddr += u16DataSize;
  402534:	9b04      	ldr	r3, [sp, #16]
  402536:	441e      	add	r6, r3
  402538:	9604      	str	r6, [sp, #16]
			}

			reg = dma_addr << 2;
  40253a:	9b03      	ldr	r3, [sp, #12]
  40253c:	009b      	lsls	r3, r3, #2
  40253e:	9302      	str	r3, [sp, #8]
			reg |= (1 << 1);
  402540:	9b02      	ldr	r3, [sp, #8]
  402542:	f043 0302 	orr.w	r3, r3, #2
  402546:	9302      	str	r3, [sp, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
  402548:	9902      	ldr	r1, [sp, #8]
  40254a:	f241 006c 	movw	r0, #4204	; 0x106c
  40254e:	4b16      	ldr	r3, [pc, #88]	; (4025a8 <hif_send+0x1b8>)
  402550:	4798      	blx	r3
			if(M2M_SUCCESS != ret) goto ERR1;
  402552:	4683      	mov	fp, r0
  402554:	b9f0      	cbnz	r0, 402594 <hif_send+0x1a4>
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
		goto ERR1;
	}
	ret = hif_chip_sleep();
  402556:	4b17      	ldr	r3, [pc, #92]	; (4025b4 <hif_send+0x1c4>)
  402558:	4798      	blx	r3
  40255a:	4683      	mov	fp, r0
  40255c:	e01a      	b.n	402594 <hif_send+0x1a4>
		strHif.u16Length += u16CtrlBufSize;
  40255e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  402562:	fa19 f383 	uxtah	r3, r9, r3
  402566:	b29b      	uxth	r3, r3
  402568:	f8ad 3016 	strh.w	r3, [sp, #22]
  40256c:	e760      	b.n	402430 <hif_send+0x40>
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
  40256e:	a903      	add	r1, sp, #12
  402570:	4811      	ldr	r0, [pc, #68]	; (4025b8 <hif_send+0x1c8>)
  402572:	4b0e      	ldr	r3, [pc, #56]	; (4025ac <hif_send+0x1bc>)
  402574:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  402576:	2800      	cmp	r0, #0
  402578:	d0ab      	beq.n	4024d2 <hif_send+0xe2>
					dma_addr = 0;
  40257a:	2300      	movs	r3, #0
  40257c:	9303      	str	r3, [sp, #12]
  40257e:	e7a8      	b.n	4024d2 <hif_send+0xe2>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
  402580:	f240 129f 	movw	r2, #415	; 0x19f
  402584:	490d      	ldr	r1, [pc, #52]	; (4025bc <hif_send+0x1cc>)
  402586:	480e      	ldr	r0, [pc, #56]	; (4025c0 <hif_send+0x1d0>)
  402588:	4c0e      	ldr	r4, [pc, #56]	; (4025c4 <hif_send+0x1d4>)
  40258a:	47a0      	blx	r4
  40258c:	480e      	ldr	r0, [pc, #56]	; (4025c8 <hif_send+0x1d8>)
  40258e:	47a0      	blx	r4
  402590:	480e      	ldr	r0, [pc, #56]	; (4025cc <hif_send+0x1dc>)
  402592:	47a0      	blx	r4

ERR1:
	return ret;
}
  402594:	4658      	mov	r0, fp
  402596:	b007      	add	sp, #28
  402598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret =  M2M_ERR_MEM_ALLOC;
  40259c:	f06f 0b02 	mvn.w	fp, #2
  4025a0:	e7f8      	b.n	402594 <hif_send+0x1a4>
  4025a2:	bf00      	nop
  4025a4:	00402309 	.word	0x00402309
  4025a8:	004035c1 	.word	0x004035c1
  4025ac:	004035b5 	.word	0x004035b5
  4025b0:	00403629 	.word	0x00403629
  4025b4:	00402365 	.word	0x00402365
  4025b8:	00150400 	.word	0x00150400
  4025bc:	0040c4cc 	.word	0x0040c4cc
  4025c0:	0040c49c 	.word	0x0040c49c
  4025c4:	00406085 	.word	0x00406085
  4025c8:	0040c720 	.word	0x0040c720
  4025cc:	0040c4c8 	.word	0x0040c4c8

004025d0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
  4025d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4025d4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
  4025d6:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 4028d0 <hif_handle_isr+0x300>
	ret = hif_chip_wake();
  4025da:	4fa2      	ldr	r7, [pc, #648]	; (402864 <hif_handle_isr+0x294>)
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4025dc:	4ea2      	ldr	r6, [pc, #648]	; (402868 <hif_handle_isr+0x298>)
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4025de:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 4028d4 <hif_handle_isr+0x304>
	while (gu8Interrupt) {
  4025e2:	e0d5      	b.n	402790 <hif_handle_isr+0x1c0>
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
  4025e4:	2204      	movs	r2, #4
  4025e6:	a904      	add	r1, sp, #16
  4025e8:	9805      	ldr	r0, [sp, #20]
  4025ea:	4ba0      	ldr	r3, [pc, #640]	; (40286c <hif_handle_isr+0x29c>)
  4025ec:	4798      	blx	r3
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
  4025ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4025f2:	b29b      	uxth	r3, r3
  4025f4:	f8ad 3012 	strh.w	r3, [sp, #18]
					if(M2M_SUCCESS != ret)
  4025f8:	4604      	mov	r4, r0
  4025fa:	2800      	cmp	r0, #0
  4025fc:	d130      	bne.n	402660 <hif_handle_isr+0x90>
					if(strHif.u16Length != size)
  4025fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  402602:	b29b      	uxth	r3, r3
  402604:	429d      	cmp	r5, r3
  402606:	d005      	beq.n	402614 <hif_handle_isr+0x44>
						if((size - strHif.u16Length) > 4)
  402608:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40260c:	b29b      	uxth	r3, r3
  40260e:	1aeb      	subs	r3, r5, r3
  402610:	2b04      	cmp	r3, #4
  402612:	dc33      	bgt.n	40267c <hif_handle_isr+0xac>
					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
  402614:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402618:	b2db      	uxtb	r3, r3
  40261a:	2b01      	cmp	r3, #1
  40261c:	d047      	beq.n	4026ae <hif_handle_isr+0xde>
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
  40261e:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402622:	b2db      	uxtb	r3, r3
  402624:	2b02      	cmp	r3, #2
  402626:	d05f      	beq.n	4026e8 <hif_handle_isr+0x118>
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
  402628:	f89d 3010 	ldrb.w	r3, [sp, #16]
  40262c:	b2db      	uxtb	r3, r3
  40262e:	2b04      	cmp	r3, #4
  402630:	d068      	beq.n	402704 <hif_handle_isr+0x134>
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
  402632:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402636:	b2db      	uxtb	r3, r3
  402638:	2b06      	cmp	r3, #6
  40263a:	d071      	beq.n	402720 <hif_handle_isr+0x150>
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
  40263c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402640:	b2db      	uxtb	r3, r3
  402642:	2b07      	cmp	r3, #7
  402644:	d07a      	beq.n	40273c <hif_handle_isr+0x16c>
						M2M_ERR("(hif) invalid group ID\n");
  402646:	f240 2202 	movw	r2, #514	; 0x202
  40264a:	4641      	mov	r1, r8
  40264c:	4630      	mov	r0, r6
  40264e:	4c88      	ldr	r4, [pc, #544]	; (402870 <hif_handle_isr+0x2a0>)
  402650:	47a0      	blx	r4
  402652:	4888      	ldr	r0, [pc, #544]	; (402874 <hif_handle_isr+0x2a4>)
  402654:	47a0      	blx	r4
  402656:	4888      	ldr	r0, [pc, #544]	; (402878 <hif_handle_isr+0x2a8>)
  402658:	47a0      	blx	r4
						ret = M2M_ERR_BUS_FAIL;
  40265a:	f06f 0405 	mvn.w	r4, #5
  40265e:	e096      	b.n	40278e <hif_handle_isr+0x1be>
						M2M_ERR("(hif) address bus fail\n");
  402660:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
  402664:	4641      	mov	r1, r8
  402666:	4630      	mov	r0, r6
  402668:	4d81      	ldr	r5, [pc, #516]	; (402870 <hif_handle_isr+0x2a0>)
  40266a:	47a8      	blx	r5
  40266c:	4883      	ldr	r0, [pc, #524]	; (40287c <hif_handle_isr+0x2ac>)
  40266e:	47a8      	blx	r5
  402670:	4881      	ldr	r0, [pc, #516]	; (402878 <hif_handle_isr+0x2a8>)
  402672:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  402674:	2001      	movs	r0, #1
  402676:	4b82      	ldr	r3, [pc, #520]	; (402880 <hif_handle_isr+0x2b0>)
  402678:	4798      	blx	r3
  40267a:	e088      	b.n	40278e <hif_handle_isr+0x1be>
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
  40267c:	f240 12df 	movw	r2, #479	; 0x1df
  402680:	4641      	mov	r1, r8
  402682:	4630      	mov	r0, r6
  402684:	4c7a      	ldr	r4, [pc, #488]	; (402870 <hif_handle_isr+0x2a0>)
  402686:	47a0      	blx	r4
  402688:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40268c:	f89d 3010 	ldrb.w	r3, [sp, #16]
  402690:	f89d 1011 	ldrb.w	r1, [sp, #17]
  402694:	9100      	str	r1, [sp, #0]
  402696:	b292      	uxth	r2, r2
  402698:	4629      	mov	r1, r5
  40269a:	487a      	ldr	r0, [pc, #488]	; (402884 <hif_handle_isr+0x2b4>)
  40269c:	47a0      	blx	r4
  40269e:	4876      	ldr	r0, [pc, #472]	; (402878 <hif_handle_isr+0x2a8>)
  4026a0:	47a0      	blx	r4
							nm_bsp_interrupt_ctrl(1);
  4026a2:	2001      	movs	r0, #1
  4026a4:	4b76      	ldr	r3, [pc, #472]	; (402880 <hif_handle_isr+0x2b0>)
  4026a6:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
  4026a8:	f06f 0405 	mvn.w	r4, #5
  4026ac:	e06f      	b.n	40278e <hif_handle_isr+0x1be>
						if(pfWifiCb)
  4026ae:	4b76      	ldr	r3, [pc, #472]	; (402888 <hif_handle_isr+0x2b8>)
  4026b0:	681b      	ldr	r3, [r3, #0]
  4026b2:	b143      	cbz	r3, 4026c6 <hif_handle_isr+0xf6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4026b4:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4026b8:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4026bc:	3908      	subs	r1, #8
  4026be:	9a05      	ldr	r2, [sp, #20]
  4026c0:	3208      	adds	r2, #8
  4026c2:	b289      	uxth	r1, r1
  4026c4:	4798      	blx	r3
					if(!gu8HifSizeDone)
  4026c6:	4b71      	ldr	r3, [pc, #452]	; (40288c <hif_handle_isr+0x2bc>)
  4026c8:	781b      	ldrb	r3, [r3, #0]
  4026ca:	2b00      	cmp	r3, #0
  4026cc:	d15c      	bne.n	402788 <hif_handle_isr+0x1b8>
						M2M_ERR("(hif) host app didn't set RX Done\n");
  4026ce:	f240 2209 	movw	r2, #521	; 0x209
  4026d2:	4641      	mov	r1, r8
  4026d4:	4630      	mov	r0, r6
  4026d6:	4c66      	ldr	r4, [pc, #408]	; (402870 <hif_handle_isr+0x2a0>)
  4026d8:	47a0      	blx	r4
  4026da:	486d      	ldr	r0, [pc, #436]	; (402890 <hif_handle_isr+0x2c0>)
  4026dc:	47a0      	blx	r4
  4026de:	4866      	ldr	r0, [pc, #408]	; (402878 <hif_handle_isr+0x2a8>)
  4026e0:	47a0      	blx	r4
						ret = hif_set_rx_done();
  4026e2:	4b6c      	ldr	r3, [pc, #432]	; (402894 <hif_handle_isr+0x2c4>)
  4026e4:	4798      	blx	r3
  4026e6:	e04f      	b.n	402788 <hif_handle_isr+0x1b8>
						if(pfIpCb)
  4026e8:	4b6b      	ldr	r3, [pc, #428]	; (402898 <hif_handle_isr+0x2c8>)
  4026ea:	681b      	ldr	r3, [r3, #0]
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d0ea      	beq.n	4026c6 <hif_handle_isr+0xf6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  4026f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
  4026f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  4026f8:	3908      	subs	r1, #8
  4026fa:	9a05      	ldr	r2, [sp, #20]
  4026fc:	3208      	adds	r2, #8
  4026fe:	b289      	uxth	r1, r1
  402700:	4798      	blx	r3
  402702:	e7e0      	b.n	4026c6 <hif_handle_isr+0xf6>
						if(pfOtaCb)
  402704:	4b65      	ldr	r3, [pc, #404]	; (40289c <hif_handle_isr+0x2cc>)
  402706:	681b      	ldr	r3, [r3, #0]
  402708:	2b00      	cmp	r3, #0
  40270a:	d0dc      	beq.n	4026c6 <hif_handle_isr+0xf6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  40270c:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402710:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402714:	3908      	subs	r1, #8
  402716:	9a05      	ldr	r2, [sp, #20]
  402718:	3208      	adds	r2, #8
  40271a:	b289      	uxth	r1, r1
  40271c:	4798      	blx	r3
  40271e:	e7d2      	b.n	4026c6 <hif_handle_isr+0xf6>
						if(pfCryptoCb)
  402720:	4b5f      	ldr	r3, [pc, #380]	; (4028a0 <hif_handle_isr+0x2d0>)
  402722:	681b      	ldr	r3, [r3, #0]
  402724:	2b00      	cmp	r3, #0
  402726:	d0ce      	beq.n	4026c6 <hif_handle_isr+0xf6>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402728:	f89d 0011 	ldrb.w	r0, [sp, #17]
  40272c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  402730:	3908      	subs	r1, #8
  402732:	9a05      	ldr	r2, [sp, #20]
  402734:	3208      	adds	r2, #8
  402736:	b289      	uxth	r1, r1
  402738:	4798      	blx	r3
  40273a:	e7c4      	b.n	4026c6 <hif_handle_isr+0xf6>
						if(pfSigmaCb)
  40273c:	4b59      	ldr	r3, [pc, #356]	; (4028a4 <hif_handle_isr+0x2d4>)
  40273e:	681b      	ldr	r3, [r3, #0]
  402740:	2b00      	cmp	r3, #0
  402742:	d0c0      	beq.n	4026c6 <hif_handle_isr+0xf6>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
  402744:	f89d 0011 	ldrb.w	r0, [sp, #17]
  402748:	f8bd 1012 	ldrh.w	r1, [sp, #18]
  40274c:	3908      	subs	r1, #8
  40274e:	9a05      	ldr	r2, [sp, #20]
  402750:	3208      	adds	r2, #8
  402752:	b289      	uxth	r1, r1
  402754:	4798      	blx	r3
  402756:	e7b6      	b.n	4026c6 <hif_handle_isr+0xf6>
					M2M_ERR("(hif) Wrong Size\n");
  402758:	f240 2211 	movw	r2, #529	; 0x211
  40275c:	4641      	mov	r1, r8
  40275e:	4630      	mov	r0, r6
  402760:	4c43      	ldr	r4, [pc, #268]	; (402870 <hif_handle_isr+0x2a0>)
  402762:	47a0      	blx	r4
  402764:	4850      	ldr	r0, [pc, #320]	; (4028a8 <hif_handle_isr+0x2d8>)
  402766:	47a0      	blx	r4
  402768:	4843      	ldr	r0, [pc, #268]	; (402878 <hif_handle_isr+0x2a8>)
  40276a:	47a0      	blx	r4
					ret = M2M_ERR_RCV;
  40276c:	f06f 0401 	mvn.w	r4, #1
  402770:	e02f      	b.n	4027d2 <hif_handle_isr+0x202>
				M2M_ERR("(hif) False interrupt %lx",reg);
  402772:	f44f 7206 	mov.w	r2, #536	; 0x218
  402776:	4641      	mov	r1, r8
  402778:	4630      	mov	r0, r6
  40277a:	4c3d      	ldr	r4, [pc, #244]	; (402870 <hif_handle_isr+0x2a0>)
  40277c:	47a0      	blx	r4
  40277e:	9903      	ldr	r1, [sp, #12]
  402780:	484a      	ldr	r0, [pc, #296]	; (4028ac <hif_handle_isr+0x2dc>)
  402782:	47a0      	blx	r4
  402784:	483c      	ldr	r0, [pc, #240]	; (402878 <hif_handle_isr+0x2a8>)
  402786:	47a0      	blx	r4
	ret = hif_chip_sleep();
  402788:	4b49      	ldr	r3, [pc, #292]	; (4028b0 <hif_handle_isr+0x2e0>)
  40278a:	4798      	blx	r3
  40278c:	4604      	mov	r4, r0
			if(ret == M2M_SUCCESS) {
  40278e:	bb04      	cbnz	r4, 4027d2 <hif_handle_isr+0x202>
	while (gu8Interrupt) {
  402790:	f899 3000 	ldrb.w	r3, [r9]
  402794:	2b00      	cmp	r3, #0
  402796:	f000 809f 	beq.w	4028d8 <hif_handle_isr+0x308>
		gu8Interrupt--;
  40279a:	f899 3000 	ldrb.w	r3, [r9]
  40279e:	3b01      	subs	r3, #1
  4027a0:	b2db      	uxtb	r3, r3
  4027a2:	f889 3000 	strb.w	r3, [r9]
  4027a6:	e01f      	b.n	4027e8 <hif_handle_isr+0x218>
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
  4027a8:	f240 221e 	movw	r2, #542	; 0x21e
  4027ac:	4641      	mov	r1, r8
  4027ae:	4630      	mov	r0, r6
  4027b0:	4d2f      	ldr	r5, [pc, #188]	; (402870 <hif_handle_isr+0x2a0>)
  4027b2:	47a8      	blx	r5
  4027b4:	483f      	ldr	r0, [pc, #252]	; (4028b4 <hif_handle_isr+0x2e4>)
  4027b6:	47a8      	blx	r5
  4027b8:	482f      	ldr	r0, [pc, #188]	; (402878 <hif_handle_isr+0x2a8>)
  4027ba:	47a8      	blx	r5
  4027bc:	e009      	b.n	4027d2 <hif_handle_isr+0x202>
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
  4027be:	f44f 7209 	mov.w	r2, #548	; 0x224
  4027c2:	4641      	mov	r1, r8
  4027c4:	4630      	mov	r0, r6
  4027c6:	4d2a      	ldr	r5, [pc, #168]	; (402870 <hif_handle_isr+0x2a0>)
  4027c8:	47a8      	blx	r5
  4027ca:	483b      	ldr	r0, [pc, #236]	; (4028b8 <hif_handle_isr+0x2e8>)
  4027cc:	47a8      	blx	r5
  4027ce:	482a      	ldr	r0, [pc, #168]	; (402878 <hif_handle_isr+0x2a8>)
  4027d0:	47a8      	blx	r5
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
  4027d2:	f240 2243 	movw	r2, #579	; 0x243
  4027d6:	4939      	ldr	r1, [pc, #228]	; (4028bc <hif_handle_isr+0x2ec>)
  4027d8:	4630      	mov	r0, r6
  4027da:	4d25      	ldr	r5, [pc, #148]	; (402870 <hif_handle_isr+0x2a0>)
  4027dc:	47a8      	blx	r5
  4027de:	4621      	mov	r1, r4
  4027e0:	4837      	ldr	r0, [pc, #220]	; (4028c0 <hif_handle_isr+0x2f0>)
  4027e2:	47a8      	blx	r5
  4027e4:	4824      	ldr	r0, [pc, #144]	; (402878 <hif_handle_isr+0x2a8>)
  4027e6:	47a8      	blx	r5
	ret = hif_chip_wake();
  4027e8:	47b8      	blx	r7
	if(ret == M2M_SUCCESS)
  4027ea:	4604      	mov	r4, r0
  4027ec:	2800      	cmp	r0, #0
  4027ee:	d1e6      	bne.n	4027be <hif_handle_isr+0x1ee>
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
  4027f0:	a903      	add	r1, sp, #12
  4027f2:	f241 0070 	movw	r0, #4208	; 0x1070
  4027f6:	4b33      	ldr	r3, [pc, #204]	; (4028c4 <hif_handle_isr+0x2f4>)
  4027f8:	4798      	blx	r3
		if(M2M_SUCCESS == ret)
  4027fa:	4604      	mov	r4, r0
  4027fc:	2800      	cmp	r0, #0
  4027fe:	d1d3      	bne.n	4027a8 <hif_handle_isr+0x1d8>
			if(reg & 0x1)	/* New interrupt has been received */
  402800:	9b03      	ldr	r3, [sp, #12]
  402802:	f013 0f01 	tst.w	r3, #1
  402806:	d0b4      	beq.n	402772 <hif_handle_isr+0x1a2>
				nm_bsp_interrupt_ctrl(0);
  402808:	4b1d      	ldr	r3, [pc, #116]	; (402880 <hif_handle_isr+0x2b0>)
  40280a:	4798      	blx	r3
				reg &= ~(1<<0);
  40280c:	9903      	ldr	r1, [sp, #12]
  40280e:	f021 0101 	bic.w	r1, r1, #1
  402812:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
  402814:	f241 0070 	movw	r0, #4208	; 0x1070
  402818:	4b2b      	ldr	r3, [pc, #172]	; (4028c8 <hif_handle_isr+0x2f8>)
  40281a:	4798      	blx	r3
				if(ret != M2M_SUCCESS)goto ERR1;
  40281c:	4604      	mov	r4, r0
  40281e:	2800      	cmp	r0, #0
  402820:	d1d7      	bne.n	4027d2 <hif_handle_isr+0x202>
				gu8HifSizeDone = 0;
  402822:	2200      	movs	r2, #0
  402824:	4b19      	ldr	r3, [pc, #100]	; (40288c <hif_handle_isr+0x2bc>)
  402826:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
  402828:	9d03      	ldr	r5, [sp, #12]
  40282a:	f3c5 058b 	ubfx	r5, r5, #2, #12
				if (size > 0) {
  40282e:	2d00      	cmp	r5, #0
  402830:	d092      	beq.n	402758 <hif_handle_isr+0x188>
					uint32 address = 0;
  402832:	a906      	add	r1, sp, #24
  402834:	f841 2d04 	str.w	r2, [r1, #-4]!
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
  402838:	f241 0084 	movw	r0, #4228	; 0x1084
  40283c:	4b21      	ldr	r3, [pc, #132]	; (4028c4 <hif_handle_isr+0x2f4>)
  40283e:	4798      	blx	r3
					if(M2M_SUCCESS != ret)
  402840:	4604      	mov	r4, r0
  402842:	2800      	cmp	r0, #0
  402844:	f43f aece 	beq.w	4025e4 <hif_handle_isr+0x14>
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
  402848:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
  40284c:	4641      	mov	r1, r8
  40284e:	4630      	mov	r0, r6
  402850:	4d07      	ldr	r5, [pc, #28]	; (402870 <hif_handle_isr+0x2a0>)
  402852:	47a8      	blx	r5
  402854:	481d      	ldr	r0, [pc, #116]	; (4028cc <hif_handle_isr+0x2fc>)
  402856:	47a8      	blx	r5
  402858:	4807      	ldr	r0, [pc, #28]	; (402878 <hif_handle_isr+0x2a8>)
  40285a:	47a8      	blx	r5
						nm_bsp_interrupt_ctrl(1);
  40285c:	2001      	movs	r0, #1
  40285e:	4b08      	ldr	r3, [pc, #32]	; (402880 <hif_handle_isr+0x2b0>)
  402860:	4798      	blx	r3
  402862:	e794      	b.n	40278e <hif_handle_isr+0x1be>
  402864:	00402309 	.word	0x00402309
  402868:	0040c49c 	.word	0x0040c49c
  40286c:	004035cd 	.word	0x004035cd
  402870:	00406085 	.word	0x00406085
  402874:	0040c58c 	.word	0x0040c58c
  402878:	0040c4c8 	.word	0x0040c4c8
  40287c:	0040c534 	.word	0x0040c534
  402880:	00402021 	.word	0x00402021
  402884:	0040c54c 	.word	0x0040c54c
  402888:	2040c348 	.word	0x2040c348
  40288c:	2040c332 	.word	0x2040c332
  402890:	0040c5a4 	.word	0x0040c5a4
  402894:	004022c9 	.word	0x004022c9
  402898:	2040c33c 	.word	0x2040c33c
  40289c:	2040c340 	.word	0x2040c340
  4028a0:	2040c334 	.word	0x2040c334
  4028a4:	2040c344 	.word	0x2040c344
  4028a8:	0040c5c8 	.word	0x0040c5c8
  4028ac:	0040c5dc 	.word	0x0040c5dc
  4028b0:	00402365 	.word	0x00402365
  4028b4:	0040c5f8 	.word	0x0040c5f8
  4028b8:	0040c61c 	.word	0x0040c61c
  4028bc:	0040c4e0 	.word	0x0040c4e0
  4028c0:	0040c63c 	.word	0x0040c63c
  4028c4:	004035b5 	.word	0x004035b5
  4028c8:	004035c1 	.word	0x004035c1
  4028cc:	0040c50c 	.word	0x0040c50c
  4028d0:	2040c333 	.word	0x2040c333
  4028d4:	0040c4d8 	.word	0x0040c4d8
			}
		}
	}

	return ret;
}
  4028d8:	2000      	movs	r0, #0
  4028da:	b007      	add	sp, #28
  4028dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

004028e0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
  4028e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4028e4:	b083      	sub	sp, #12
  4028e6:	461c      	mov	r4, r3
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
  4028e8:	2a00      	cmp	r2, #0
  4028ea:	bf18      	it	ne
  4028ec:	2900      	cmpne	r1, #0
  4028ee:	d003      	beq.n	4028f8 <hif_receive+0x18>
  4028f0:	4605      	mov	r5, r0
  4028f2:	460f      	mov	r7, r1
  4028f4:	4616      	mov	r6, r2
  4028f6:	b9b8      	cbnz	r0, 402928 <hif_receive+0x48>
	{
		if(isDone)
  4028f8:	b14c      	cbz	r4, 40290e <hif_receive+0x2e>
		{
			gu8HifSizeDone = 1;
  4028fa:	2201      	movs	r2, #1
  4028fc:	4b32      	ldr	r3, [pc, #200]	; (4029c8 <hif_receive+0xe8>)
  4028fe:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
  402900:	4b32      	ldr	r3, [pc, #200]	; (4029cc <hif_receive+0xec>)
  402902:	4798      	blx	r3
  402904:	4603      	mov	r3, r0



ERR1:
	return ret;
}
  402906:	4618      	mov	r0, r3
  402908:	b003      	add	sp, #12
  40290a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
  40290e:	f240 2269 	movw	r2, #617	; 0x269
  402912:	492f      	ldr	r1, [pc, #188]	; (4029d0 <hif_receive+0xf0>)
  402914:	482f      	ldr	r0, [pc, #188]	; (4029d4 <hif_receive+0xf4>)
  402916:	4c30      	ldr	r4, [pc, #192]	; (4029d8 <hif_receive+0xf8>)
  402918:	47a0      	blx	r4
  40291a:	4830      	ldr	r0, [pc, #192]	; (4029dc <hif_receive+0xfc>)
  40291c:	47a0      	blx	r4
  40291e:	4830      	ldr	r0, [pc, #192]	; (4029e0 <hif_receive+0x100>)
  402920:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402922:	f06f 030b 	mvn.w	r3, #11
  402926:	e7ee      	b.n	402906 <hif_receive+0x26>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
  402928:	4669      	mov	r1, sp
  40292a:	f241 0070 	movw	r0, #4208	; 0x1070
  40292e:	4b2d      	ldr	r3, [pc, #180]	; (4029e4 <hif_receive+0x104>)
  402930:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402932:	4603      	mov	r3, r0
  402934:	2800      	cmp	r0, #0
  402936:	d1e6      	bne.n	402906 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  402938:	f8dd 8000 	ldr.w	r8, [sp]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
  40293c:	a901      	add	r1, sp, #4
  40293e:	f241 0084 	movw	r0, #4228	; 0x1084
  402942:	4b28      	ldr	r3, [pc, #160]	; (4029e4 <hif_receive+0x104>)
  402944:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  402946:	4603      	mov	r3, r0
  402948:	2800      	cmp	r0, #0
  40294a:	d1dc      	bne.n	402906 <hif_receive+0x26>
	size = (uint16)((reg >> 2) & 0xfff);
  40294c:	f3c8 088b 	ubfx	r8, r8, #2, #12
	if(u16Sz > size)
  402950:	4546      	cmp	r6, r8
  402952:	d81c      	bhi.n	40298e <hif_receive+0xae>
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
  402954:	9b01      	ldr	r3, [sp, #4]
  402956:	429d      	cmp	r5, r3
  402958:	d328      	bcc.n	4029ac <hif_receive+0xcc>
  40295a:	eb05 0906 	add.w	r9, r5, r6
  40295e:	4443      	add	r3, r8
  402960:	4599      	cmp	r9, r3
  402962:	d823      	bhi.n	4029ac <hif_receive+0xcc>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
  402964:	4632      	mov	r2, r6
  402966:	4639      	mov	r1, r7
  402968:	4628      	mov	r0, r5
  40296a:	4b1f      	ldr	r3, [pc, #124]	; (4029e8 <hif_receive+0x108>)
  40296c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
  40296e:	4603      	mov	r3, r0
  402970:	2800      	cmp	r0, #0
  402972:	d1c8      	bne.n	402906 <hif_receive+0x26>
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
  402974:	9a01      	ldr	r2, [sp, #4]
  402976:	4490      	add	r8, r2
  402978:	45c8      	cmp	r8, r9
  40297a:	d001      	beq.n	402980 <hif_receive+0xa0>
  40297c:	2c00      	cmp	r4, #0
  40297e:	d0c2      	beq.n	402906 <hif_receive+0x26>
		gu8HifSizeDone = 1;
  402980:	2201      	movs	r2, #1
  402982:	4b11      	ldr	r3, [pc, #68]	; (4029c8 <hif_receive+0xe8>)
  402984:	701a      	strb	r2, [r3, #0]
		ret = hif_set_rx_done();
  402986:	4b11      	ldr	r3, [pc, #68]	; (4029cc <hif_receive+0xec>)
  402988:	4798      	blx	r3
  40298a:	4603      	mov	r3, r0
  40298c:	e7bb      	b.n	402906 <hif_receive+0x26>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
  40298e:	f240 227a 	movw	r2, #634	; 0x27a
  402992:	490f      	ldr	r1, [pc, #60]	; (4029d0 <hif_receive+0xf0>)
  402994:	480f      	ldr	r0, [pc, #60]	; (4029d4 <hif_receive+0xf4>)
  402996:	4c10      	ldr	r4, [pc, #64]	; (4029d8 <hif_receive+0xf8>)
  402998:	47a0      	blx	r4
  40299a:	4642      	mov	r2, r8
  40299c:	4631      	mov	r1, r6
  40299e:	4813      	ldr	r0, [pc, #76]	; (4029ec <hif_receive+0x10c>)
  4029a0:	47a0      	blx	r4
  4029a2:	480f      	ldr	r0, [pc, #60]	; (4029e0 <hif_receive+0x100>)
  4029a4:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4029a6:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  4029aa:	e7ac      	b.n	402906 <hif_receive+0x26>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
  4029ac:	f44f 7220 	mov.w	r2, #640	; 0x280
  4029b0:	4907      	ldr	r1, [pc, #28]	; (4029d0 <hif_receive+0xf0>)
  4029b2:	4808      	ldr	r0, [pc, #32]	; (4029d4 <hif_receive+0xf4>)
  4029b4:	4c08      	ldr	r4, [pc, #32]	; (4029d8 <hif_receive+0xf8>)
  4029b6:	47a0      	blx	r4
  4029b8:	480d      	ldr	r0, [pc, #52]	; (4029f0 <hif_receive+0x110>)
  4029ba:	47a0      	blx	r4
  4029bc:	4808      	ldr	r0, [pc, #32]	; (4029e0 <hif_receive+0x100>)
  4029be:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  4029c0:	f06f 030b 	mvn.w	r3, #11
		goto ERR1;
  4029c4:	e79f      	b.n	402906 <hif_receive+0x26>
  4029c6:	bf00      	nop
  4029c8:	2040c332 	.word	0x2040c332
  4029cc:	004022c9 	.word	0x004022c9
  4029d0:	0040c4f0 	.word	0x0040c4f0
  4029d4:	0040c49c 	.word	0x0040c49c
  4029d8:	00406085 	.word	0x00406085
  4029dc:	0040c66c 	.word	0x0040c66c
  4029e0:	0040c4c8 	.word	0x0040c4c8
  4029e4:	004035b5 	.word	0x004035b5
  4029e8:	004035cd 	.word	0x004035cd
  4029ec:	0040c68c 	.word	0x0040c68c
  4029f0:	0040c6d0 	.word	0x0040c6d0

004029f4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
  4029f4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
  4029f6:	1e43      	subs	r3, r0, #1
  4029f8:	2b06      	cmp	r3, #6
  4029fa:	d81d      	bhi.n	402a38 <hif_register_cb+0x44>
  4029fc:	e8df f003 	tbb	[pc, r3]
  402a00:	0c100408 	.word	0x0c100408
  402a04:	141c      	.short	0x141c
  402a06:	18          	.byte	0x18
  402a07:	00          	.byte	0x00
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
  402a08:	4b13      	ldr	r3, [pc, #76]	; (402a58 <hif_register_cb+0x64>)
  402a0a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a0c:	2000      	movs	r0, #0
			break;
  402a0e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
  402a10:	4b12      	ldr	r3, [pc, #72]	; (402a5c <hif_register_cb+0x68>)
  402a12:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a14:	2000      	movs	r0, #0
			break;
  402a16:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
  402a18:	4b11      	ldr	r3, [pc, #68]	; (402a60 <hif_register_cb+0x6c>)
  402a1a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a1c:	2000      	movs	r0, #0
			break;
  402a1e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
  402a20:	4b10      	ldr	r3, [pc, #64]	; (402a64 <hif_register_cb+0x70>)
  402a22:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a24:	2000      	movs	r0, #0
			break;
  402a26:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
  402a28:	4b0f      	ldr	r3, [pc, #60]	; (402a68 <hif_register_cb+0x74>)
  402a2a:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a2c:	2000      	movs	r0, #0
			break;
  402a2e:	bd38      	pop	{r3, r4, r5, pc}
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
  402a30:	4b0e      	ldr	r3, [pc, #56]	; (402a6c <hif_register_cb+0x78>)
  402a32:	6019      	str	r1, [r3, #0]
	sint8 ret = M2M_SUCCESS;
  402a34:	2000      	movs	r0, #0
			break;
  402a36:	bd38      	pop	{r3, r4, r5, pc}
  402a38:	4604      	mov	r4, r0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
  402a3a:	f240 22b9 	movw	r2, #697	; 0x2b9
  402a3e:	490c      	ldr	r1, [pc, #48]	; (402a70 <hif_register_cb+0x7c>)
  402a40:	480c      	ldr	r0, [pc, #48]	; (402a74 <hif_register_cb+0x80>)
  402a42:	4d0d      	ldr	r5, [pc, #52]	; (402a78 <hif_register_cb+0x84>)
  402a44:	47a8      	blx	r5
  402a46:	4621      	mov	r1, r4
  402a48:	480c      	ldr	r0, [pc, #48]	; (402a7c <hif_register_cb+0x88>)
  402a4a:	47a8      	blx	r5
  402a4c:	480c      	ldr	r0, [pc, #48]	; (402a80 <hif_register_cb+0x8c>)
  402a4e:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
  402a50:	f06f 000b 	mvn.w	r0, #11
			break;
	}
	return ret;
}
  402a54:	bd38      	pop	{r3, r4, r5, pc}
  402a56:	bf00      	nop
  402a58:	2040c33c 	.word	0x2040c33c
  402a5c:	2040c348 	.word	0x2040c348
  402a60:	2040c340 	.word	0x2040c340
  402a64:	2040c338 	.word	0x2040c338
  402a68:	2040c334 	.word	0x2040c334
  402a6c:	2040c344 	.word	0x2040c344
  402a70:	0040c4fc 	.word	0x0040c4fc
  402a74:	0040c49c 	.word	0x0040c49c
  402a78:	00406085 	.word	0x00406085
  402a7c:	0040c714 	.word	0x0040c714
  402a80:	0040c4c8 	.word	0x0040c4c8

00402a84 <hif_init>:
{
  402a84:	b510      	push	{r4, lr}
	pfWifiCb = NULL;
  402a86:	2400      	movs	r4, #0
  402a88:	4b09      	ldr	r3, [pc, #36]	; (402ab0 <hif_init+0x2c>)
  402a8a:	601c      	str	r4, [r3, #0]
	pfIpCb = NULL;
  402a8c:	4b09      	ldr	r3, [pc, #36]	; (402ab4 <hif_init+0x30>)
  402a8e:	601c      	str	r4, [r3, #0]
	gu8ChipSleep = 0;
  402a90:	4b09      	ldr	r3, [pc, #36]	; (402ab8 <hif_init+0x34>)
  402a92:	701c      	strb	r4, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
  402a94:	4b09      	ldr	r3, [pc, #36]	; (402abc <hif_init+0x38>)
  402a96:	701c      	strb	r4, [r3, #0]
	gu8Interrupt = 0;
  402a98:	4b09      	ldr	r3, [pc, #36]	; (402ac0 <hif_init+0x3c>)
  402a9a:	701c      	strb	r4, [r3, #0]
	nm_bsp_register_isr(isr);
  402a9c:	4809      	ldr	r0, [pc, #36]	; (402ac4 <hif_init+0x40>)
  402a9e:	4b0a      	ldr	r3, [pc, #40]	; (402ac8 <hif_init+0x44>)
  402aa0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
  402aa2:	490a      	ldr	r1, [pc, #40]	; (402acc <hif_init+0x48>)
  402aa4:	2003      	movs	r0, #3
  402aa6:	4b0a      	ldr	r3, [pc, #40]	; (402ad0 <hif_init+0x4c>)
  402aa8:	4798      	blx	r3
}
  402aaa:	4620      	mov	r0, r4
  402aac:	bd10      	pop	{r4, pc}
  402aae:	bf00      	nop
  402ab0:	2040c348 	.word	0x2040c348
  402ab4:	2040c33c 	.word	0x2040c33c
  402ab8:	2040c331 	.word	0x2040c331
  402abc:	2040c330 	.word	0x2040c330
  402ac0:	2040c333 	.word	0x2040c333
  402ac4:	004022b5 	.word	0x004022b5
  402ac8:	00401fa1 	.word	0x00401fa1
  402acc:	004022c5 	.word	0x004022c5
  402ad0:	004029f5 	.word	0x004029f5

00402ad4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
  402ad4:	b530      	push	{r4, r5, lr}
  402ad6:	b09f      	sub	sp, #124	; 0x7c
  402ad8:	4615      	mov	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
  402ada:	282c      	cmp	r0, #44	; 0x2c
  402adc:	d02e      	beq.n	402b3c <m2m_wifi_cb+0x68>
  402ade:	4604      	mov	r4, r0
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
  402ae0:	281b      	cmp	r0, #27
  402ae2:	d03b      	beq.n	402b5c <m2m_wifi_cb+0x88>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
  402ae4:	2806      	cmp	r0, #6
  402ae6:	d049      	beq.n	402b7c <m2m_wifi_cb+0xa8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
  402ae8:	280e      	cmp	r0, #14
  402aea:	d025      	beq.n	402b38 <m2m_wifi_cb+0x64>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
  402aec:	2832      	cmp	r0, #50	; 0x32
  402aee:	d055      	beq.n	402b9c <m2m_wifi_cb+0xc8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
  402af0:	282f      	cmp	r0, #47	; 0x2f
  402af2:	d063      	beq.n	402bbc <m2m_wifi_cb+0xe8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
  402af4:	2834      	cmp	r0, #52	; 0x34
  402af6:	d076      	beq.n	402be6 <m2m_wifi_cb+0x112>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
  402af8:	2811      	cmp	r0, #17
  402afa:	f000 8093 	beq.w	402c24 <m2m_wifi_cb+0x150>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
  402afe:	2813      	cmp	r0, #19
  402b00:	f000 80a8 	beq.w	402c54 <m2m_wifi_cb+0x180>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
  402b04:	2804      	cmp	r0, #4
  402b06:	f000 80b7 	beq.w	402c78 <m2m_wifi_cb+0x1a4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
  402b0a:	2865      	cmp	r0, #101	; 0x65
  402b0c:	f000 80c6 	beq.w	402c9c <m2m_wifi_cb+0x1c8>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
  402b10:	2809      	cmp	r0, #9
  402b12:	f000 80d5 	beq.w	402cc0 <m2m_wifi_cb+0x1ec>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
  402b16:	282a      	cmp	r0, #42	; 0x2a
  402b18:	f000 80e4 	beq.w	402ce4 <m2m_wifi_cb+0x210>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
  402b1c:	2820      	cmp	r0, #32
  402b1e:	f000 80f3 	beq.w	402d08 <m2m_wifi_cb+0x234>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
  402b22:	f44f 7295 	mov.w	r2, #298	; 0x12a
  402b26:	4986      	ldr	r1, [pc, #536]	; (402d40 <m2m_wifi_cb+0x26c>)
  402b28:	4886      	ldr	r0, [pc, #536]	; (402d44 <m2m_wifi_cb+0x270>)
  402b2a:	4d87      	ldr	r5, [pc, #540]	; (402d48 <m2m_wifi_cb+0x274>)
  402b2c:	47a8      	blx	r5
  402b2e:	4621      	mov	r1, r4
  402b30:	4886      	ldr	r0, [pc, #536]	; (402d4c <m2m_wifi_cb+0x278>)
  402b32:	47a8      	blx	r5
  402b34:	4886      	ldr	r0, [pc, #536]	; (402d50 <m2m_wifi_cb+0x27c>)
  402b36:	47a8      	blx	r5
	}
}
  402b38:	b01f      	add	sp, #124	; 0x7c
  402b3a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
  402b3c:	2300      	movs	r3, #0
  402b3e:	2204      	movs	r2, #4
  402b40:	a903      	add	r1, sp, #12
  402b42:	4628      	mov	r0, r5
  402b44:	4c83      	ldr	r4, [pc, #524]	; (402d54 <m2m_wifi_cb+0x280>)
  402b46:	47a0      	blx	r4
  402b48:	2800      	cmp	r0, #0
  402b4a:	d1f5      	bne.n	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b4c:	4b82      	ldr	r3, [pc, #520]	; (402d58 <m2m_wifi_cb+0x284>)
  402b4e:	681b      	ldr	r3, [r3, #0]
  402b50:	2b00      	cmp	r3, #0
  402b52:	d0f1      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
  402b54:	a903      	add	r1, sp, #12
  402b56:	202c      	movs	r0, #44	; 0x2c
  402b58:	4798      	blx	r3
  402b5a:	e7ed      	b.n	402b38 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
  402b5c:	2300      	movs	r3, #0
  402b5e:	2208      	movs	r2, #8
  402b60:	a903      	add	r1, sp, #12
  402b62:	4628      	mov	r0, r5
  402b64:	4c7b      	ldr	r4, [pc, #492]	; (402d54 <m2m_wifi_cb+0x280>)
  402b66:	47a0      	blx	r4
  402b68:	2800      	cmp	r0, #0
  402b6a:	d1e5      	bne.n	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402b6c:	4b7a      	ldr	r3, [pc, #488]	; (402d58 <m2m_wifi_cb+0x284>)
  402b6e:	681b      	ldr	r3, [r3, #0]
  402b70:	2b00      	cmp	r3, #0
  402b72:	d0e1      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
  402b74:	a903      	add	r1, sp, #12
  402b76:	201b      	movs	r0, #27
  402b78:	4798      	blx	r3
  402b7a:	e7dd      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
  402b7c:	2301      	movs	r3, #1
  402b7e:	2230      	movs	r2, #48	; 0x30
  402b80:	a903      	add	r1, sp, #12
  402b82:	4628      	mov	r0, r5
  402b84:	4c73      	ldr	r4, [pc, #460]	; (402d54 <m2m_wifi_cb+0x280>)
  402b86:	47a0      	blx	r4
  402b88:	2800      	cmp	r0, #0
  402b8a:	d1d5      	bne.n	402b38 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402b8c:	4b72      	ldr	r3, [pc, #456]	; (402d58 <m2m_wifi_cb+0x284>)
  402b8e:	681b      	ldr	r3, [r3, #0]
  402b90:	2b00      	cmp	r3, #0
  402b92:	d0d1      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
  402b94:	a903      	add	r1, sp, #12
  402b96:	2006      	movs	r0, #6
  402b98:	4798      	blx	r3
  402b9a:	e7cd      	b.n	402b38 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
  402b9c:	2300      	movs	r3, #0
  402b9e:	2210      	movs	r2, #16
  402ba0:	a903      	add	r1, sp, #12
  402ba2:	4628      	mov	r0, r5
  402ba4:	4c6b      	ldr	r4, [pc, #428]	; (402d54 <m2m_wifi_cb+0x280>)
  402ba6:	47a0      	blx	r4
  402ba8:	2800      	cmp	r0, #0
  402baa:	d1c5      	bne.n	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402bac:	4b6a      	ldr	r3, [pc, #424]	; (402d58 <m2m_wifi_cb+0x284>)
  402bae:	681b      	ldr	r3, [r3, #0]
  402bb0:	2b00      	cmp	r3, #0
  402bb2:	d0c1      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
  402bb4:	a903      	add	r1, sp, #12
  402bb6:	2032      	movs	r0, #50	; 0x32
  402bb8:	4798      	blx	r3
  402bba:	e7bd      	b.n	402b38 <m2m_wifi_cb+0x64>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
  402bbc:	2264      	movs	r2, #100	; 0x64
  402bbe:	2100      	movs	r1, #0
  402bc0:	a803      	add	r0, sp, #12
  402bc2:	4b66      	ldr	r3, [pc, #408]	; (402d5c <m2m_wifi_cb+0x288>)
  402bc4:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
  402bc6:	2300      	movs	r3, #0
  402bc8:	2264      	movs	r2, #100	; 0x64
  402bca:	a903      	add	r1, sp, #12
  402bcc:	4628      	mov	r0, r5
  402bce:	4c61      	ldr	r4, [pc, #388]	; (402d54 <m2m_wifi_cb+0x280>)
  402bd0:	47a0      	blx	r4
  402bd2:	2800      	cmp	r0, #0
  402bd4:	d1b0      	bne.n	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402bd6:	4b60      	ldr	r3, [pc, #384]	; (402d58 <m2m_wifi_cb+0x284>)
  402bd8:	681b      	ldr	r3, [r3, #0]
  402bda:	2b00      	cmp	r3, #0
  402bdc:	d0ac      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
  402bde:	a903      	add	r1, sp, #12
  402be0:	202f      	movs	r0, #47	; 0x2f
  402be2:	4798      	blx	r3
  402be4:	e7a8      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
  402be6:	2300      	movs	r3, #0
  402be8:	2204      	movs	r2, #4
  402bea:	a903      	add	r1, sp, #12
  402bec:	4628      	mov	r0, r5
  402bee:	4c59      	ldr	r4, [pc, #356]	; (402d54 <m2m_wifi_cb+0x280>)
  402bf0:	47a0      	blx	r4
  402bf2:	2800      	cmp	r0, #0
  402bf4:	d1a0      	bne.n	402b38 <m2m_wifi_cb+0x64>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
  402bf6:	485a      	ldr	r0, [pc, #360]	; (402d60 <m2m_wifi_cb+0x28c>)
  402bf8:	4c53      	ldr	r4, [pc, #332]	; (402d48 <m2m_wifi_cb+0x274>)
  402bfa:	47a0      	blx	r4
  402bfc:	9903      	ldr	r1, [sp, #12]
  402bfe:	b2cb      	uxtb	r3, r1
  402c00:	9300      	str	r3, [sp, #0]
  402c02:	f3c1 2307 	ubfx	r3, r1, #8, #8
  402c06:	f3c1 4207 	ubfx	r2, r1, #16, #8
  402c0a:	0e09      	lsrs	r1, r1, #24
  402c0c:	4855      	ldr	r0, [pc, #340]	; (402d64 <m2m_wifi_cb+0x290>)
  402c0e:	47a0      	blx	r4
  402c10:	484f      	ldr	r0, [pc, #316]	; (402d50 <m2m_wifi_cb+0x27c>)
  402c12:	47a0      	blx	r4
			if (gpfAppWifiCb)
  402c14:	4b50      	ldr	r3, [pc, #320]	; (402d58 <m2m_wifi_cb+0x284>)
  402c16:	681b      	ldr	r3, [r3, #0]
  402c18:	2b00      	cmp	r3, #0
  402c1a:	d08d      	beq.n	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
  402c1c:	2100      	movs	r1, #0
  402c1e:	2034      	movs	r0, #52	; 0x34
  402c20:	4798      	blx	r3
  402c22:	e789      	b.n	402b38 <m2m_wifi_cb+0x64>
		gu8scanInProgress = 0;
  402c24:	2300      	movs	r3, #0
  402c26:	4a50      	ldr	r2, [pc, #320]	; (402d68 <m2m_wifi_cb+0x294>)
  402c28:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
  402c2a:	2204      	movs	r2, #4
  402c2c:	a903      	add	r1, sp, #12
  402c2e:	4628      	mov	r0, r5
  402c30:	4c48      	ldr	r4, [pc, #288]	; (402d54 <m2m_wifi_cb+0x280>)
  402c32:	47a0      	blx	r4
  402c34:	2800      	cmp	r0, #0
  402c36:	f47f af7f 	bne.w	402b38 <m2m_wifi_cb+0x64>
			gu8ChNum = strState.u8NumofCh;
  402c3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
  402c3e:	4b4b      	ldr	r3, [pc, #300]	; (402d6c <m2m_wifi_cb+0x298>)
  402c40:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
  402c42:	4b45      	ldr	r3, [pc, #276]	; (402d58 <m2m_wifi_cb+0x284>)
  402c44:	681b      	ldr	r3, [r3, #0]
  402c46:	2b00      	cmp	r3, #0
  402c48:	f43f af76 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
  402c4c:	a903      	add	r1, sp, #12
  402c4e:	2011      	movs	r0, #17
  402c50:	4798      	blx	r3
  402c52:	e771      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
  402c54:	2300      	movs	r3, #0
  402c56:	222c      	movs	r2, #44	; 0x2c
  402c58:	a903      	add	r1, sp, #12
  402c5a:	4628      	mov	r0, r5
  402c5c:	4c3d      	ldr	r4, [pc, #244]	; (402d54 <m2m_wifi_cb+0x280>)
  402c5e:	47a0      	blx	r4
  402c60:	2800      	cmp	r0, #0
  402c62:	f47f af69 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402c66:	4b3c      	ldr	r3, [pc, #240]	; (402d58 <m2m_wifi_cb+0x284>)
  402c68:	681b      	ldr	r3, [r3, #0]
  402c6a:	2b00      	cmp	r3, #0
  402c6c:	f43f af64 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
  402c70:	a903      	add	r1, sp, #12
  402c72:	2013      	movs	r0, #19
  402c74:	4798      	blx	r3
  402c76:	e75f      	b.n	402b38 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402c78:	2300      	movs	r3, #0
  402c7a:	2204      	movs	r2, #4
  402c7c:	a91c      	add	r1, sp, #112	; 0x70
  402c7e:	4628      	mov	r0, r5
  402c80:	4c34      	ldr	r4, [pc, #208]	; (402d54 <m2m_wifi_cb+0x280>)
  402c82:	47a0      	blx	r4
  402c84:	2800      	cmp	r0, #0
  402c86:	f47f af57 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402c8a:	4b33      	ldr	r3, [pc, #204]	; (402d58 <m2m_wifi_cb+0x284>)
  402c8c:	681b      	ldr	r3, [r3, #0]
  402c8e:	2b00      	cmp	r3, #0
  402c90:	f43f af52 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
  402c94:	a91c      	add	r1, sp, #112	; 0x70
  402c96:	2004      	movs	r0, #4
  402c98:	4798      	blx	r3
  402c9a:	e74d      	b.n	402b38 <m2m_wifi_cb+0x64>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
  402c9c:	2300      	movs	r3, #0
  402c9e:	2204      	movs	r2, #4
  402ca0:	a91c      	add	r1, sp, #112	; 0x70
  402ca2:	4628      	mov	r0, r5
  402ca4:	4c2b      	ldr	r4, [pc, #172]	; (402d54 <m2m_wifi_cb+0x280>)
  402ca6:	47a0      	blx	r4
  402ca8:	2800      	cmp	r0, #0
  402caa:	f47f af45 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if (gpfAppWifiCb)
  402cae:	4b2a      	ldr	r3, [pc, #168]	; (402d58 <m2m_wifi_cb+0x284>)
  402cb0:	681b      	ldr	r3, [r3, #0]
  402cb2:	2b00      	cmp	r3, #0
  402cb4:	f43f af40 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
  402cb8:	a91c      	add	r1, sp, #112	; 0x70
  402cba:	2065      	movs	r0, #101	; 0x65
  402cbc:	4798      	blx	r3
  402cbe:	e73b      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
  402cc0:	2301      	movs	r3, #1
  402cc2:	2264      	movs	r2, #100	; 0x64
  402cc4:	a903      	add	r1, sp, #12
  402cc6:	4628      	mov	r0, r5
  402cc8:	4c22      	ldr	r4, [pc, #136]	; (402d54 <m2m_wifi_cb+0x280>)
  402cca:	47a0      	blx	r4
  402ccc:	2800      	cmp	r0, #0
  402cce:	f47f af33 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402cd2:	4b21      	ldr	r3, [pc, #132]	; (402d58 <m2m_wifi_cb+0x284>)
  402cd4:	681b      	ldr	r3, [r3, #0]
  402cd6:	2b00      	cmp	r3, #0
  402cd8:	f43f af2e 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
  402cdc:	a903      	add	r1, sp, #12
  402cde:	2009      	movs	r0, #9
  402ce0:	4798      	blx	r3
  402ce2:	e729      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
  402ce4:	2301      	movs	r3, #1
  402ce6:	2204      	movs	r2, #4
  402ce8:	a903      	add	r1, sp, #12
  402cea:	4628      	mov	r0, r5
  402cec:	4c19      	ldr	r4, [pc, #100]	; (402d54 <m2m_wifi_cb+0x280>)
  402cee:	47a0      	blx	r4
  402cf0:	2800      	cmp	r0, #0
  402cf2:	f47f af21 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if(gpfAppWifiCb)
  402cf6:	4b18      	ldr	r3, [pc, #96]	; (402d58 <m2m_wifi_cb+0x284>)
  402cf8:	681b      	ldr	r3, [r3, #0]
  402cfa:	2b00      	cmp	r3, #0
  402cfc:	f43f af1c 	beq.w	402b38 <m2m_wifi_cb+0x64>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
  402d00:	a903      	add	r1, sp, #12
  402d02:	202a      	movs	r0, #42	; 0x2a
  402d04:	4798      	blx	r3
  402d06:	e717      	b.n	402b38 <m2m_wifi_cb+0x64>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
  402d08:	2300      	movs	r3, #0
  402d0a:	2208      	movs	r2, #8
  402d0c:	a903      	add	r1, sp, #12
  402d0e:	4628      	mov	r0, r5
  402d10:	4c10      	ldr	r4, [pc, #64]	; (402d54 <m2m_wifi_cb+0x280>)
  402d12:	47a0      	blx	r4
  402d14:	2800      	cmp	r0, #0
  402d16:	f47f af0f 	bne.w	402b38 <m2m_wifi_cb+0x64>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
  402d1a:	2301      	movs	r3, #1
  402d1c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  402d20:	9903      	ldr	r1, [sp, #12]
  402d22:	f105 0008 	add.w	r0, r5, #8
  402d26:	47a0      	blx	r4
  402d28:	2800      	cmp	r0, #0
  402d2a:	f47f af05 	bne.w	402b38 <m2m_wifi_cb+0x64>
				if(gpfAppWifiCb)
  402d2e:	4b0a      	ldr	r3, [pc, #40]	; (402d58 <m2m_wifi_cb+0x284>)
  402d30:	681b      	ldr	r3, [r3, #0]
  402d32:	2b00      	cmp	r3, #0
  402d34:	f43f af00 	beq.w	402b38 <m2m_wifi_cb+0x64>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
  402d38:	a903      	add	r1, sp, #12
  402d3a:	2020      	movs	r0, #32
  402d3c:	4798      	blx	r3
  402d3e:	e6fb      	b.n	402b38 <m2m_wifi_cb+0x64>
  402d40:	0040c740 	.word	0x0040c740
  402d44:	0040c49c 	.word	0x0040c49c
  402d48:	00406085 	.word	0x00406085
  402d4c:	0040c79c 	.word	0x0040c79c
  402d50:	0040c4c8 	.word	0x0040c4c8
  402d54:	004028e1 	.word	0x004028e1
  402d58:	2040c34c 	.word	0x2040c34c
  402d5c:	0040228d 	.word	0x0040228d
  402d60:	0040c770 	.word	0x0040c770
  402d64:	0040c77c 	.word	0x0040c77c
  402d68:	2040c351 	.word	0x2040c351
  402d6c:	2040c350 	.word	0x2040c350

00402d70 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
  402d70:	b5f0      	push	{r4, r5, r6, r7, lr}
  402d72:	b08b      	sub	sp, #44	; 0x2c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
  402d74:	2301      	movs	r3, #1
  402d76:	f88d 3007 	strb.w	r3, [sp, #7]
	
	if(param == NULL) {
  402d7a:	2800      	cmp	r0, #0
  402d7c:	d050      	beq.n	402e20 <m2m_wifi_init+0xb0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
  402d7e:	6802      	ldr	r2, [r0, #0]
  402d80:	4b29      	ldr	r3, [pc, #164]	; (402e28 <m2m_wifi_init+0xb8>)
  402d82:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
  402d84:	2200      	movs	r2, #0
  402d86:	4b29      	ldr	r3, [pc, #164]	; (402e2c <m2m_wifi_init+0xbc>)
  402d88:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
  402d8a:	f10d 0007 	add.w	r0, sp, #7
  402d8e:	4b28      	ldr	r3, [pc, #160]	; (402e30 <m2m_wifi_init+0xc0>)
  402d90:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
  402d92:	4604      	mov	r4, r0
  402d94:	b110      	cbz	r0, 402d9c <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
  402d96:	4620      	mov	r0, r4
  402d98:	b00b      	add	sp, #44	; 0x2c
  402d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
  402d9c:	4b25      	ldr	r3, [pc, #148]	; (402e34 <m2m_wifi_init+0xc4>)
  402d9e:	4798      	blx	r3
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
  402da0:	4604      	mov	r4, r0
  402da2:	2800      	cmp	r0, #0
  402da4:	d138      	bne.n	402e18 <m2m_wifi_init+0xa8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
  402da6:	4924      	ldr	r1, [pc, #144]	; (402e38 <m2m_wifi_init+0xc8>)
  402da8:	2001      	movs	r0, #1
  402daa:	4b24      	ldr	r3, [pc, #144]	; (402e3c <m2m_wifi_init+0xcc>)
  402dac:	4798      	blx	r3
	ret = nm_get_firmware_info(&strtmp);
  402dae:	a802      	add	r0, sp, #8
  402db0:	4b23      	ldr	r3, [pc, #140]	; (402e40 <m2m_wifi_init+0xd0>)
  402db2:	4798      	blx	r3
  402db4:	4604      	mov	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
  402db6:	4f23      	ldr	r7, [pc, #140]	; (402e44 <m2m_wifi_init+0xd4>)
  402db8:	4638      	mov	r0, r7
  402dba:	4d23      	ldr	r5, [pc, #140]	; (402e48 <m2m_wifi_init+0xd8>)
  402dbc:	47a8      	blx	r5
  402dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
  402dc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
  402dc6:	f89d 100c 	ldrb.w	r1, [sp, #12]
  402dca:	4820      	ldr	r0, [pc, #128]	; (402e4c <m2m_wifi_init+0xdc>)
  402dcc:	47a8      	blx	r5
  402dce:	4e20      	ldr	r6, [pc, #128]	; (402e50 <m2m_wifi_init+0xe0>)
  402dd0:	4630      	mov	r0, r6
  402dd2:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
  402dd4:	4638      	mov	r0, r7
  402dd6:	47a8      	blx	r5
  402dd8:	f89d 3011 	ldrb.w	r3, [sp, #17]
  402ddc:	f89d 2010 	ldrb.w	r2, [sp, #16]
  402de0:	f89d 100f 	ldrb.w	r1, [sp, #15]
  402de4:	481b      	ldr	r0, [pc, #108]	; (402e54 <m2m_wifi_init+0xe4>)
  402de6:	47a8      	blx	r5
  402de8:	4630      	mov	r0, r6
  402dea:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
  402dec:	4638      	mov	r0, r7
  402dee:	47a8      	blx	r5
  402df0:	2300      	movs	r3, #0
  402df2:	2203      	movs	r2, #3
  402df4:	2113      	movs	r1, #19
  402df6:	4818      	ldr	r0, [pc, #96]	; (402e58 <m2m_wifi_init+0xe8>)
  402df8:	47a8      	blx	r5
  402dfa:	4630      	mov	r0, r6
  402dfc:	47a8      	blx	r5
	if(M2M_ERR_FW_VER_MISMATCH == ret)
  402dfe:	f114 0f0d 	cmn.w	r4, #13
  402e02:	d1c8      	bne.n	402d96 <m2m_wifi_init+0x26>
		M2M_ERR("Mismatch Firmawre Version\n");
  402e04:	f240 12d5 	movw	r2, #469	; 0x1d5
  402e08:	4914      	ldr	r1, [pc, #80]	; (402e5c <m2m_wifi_init+0xec>)
  402e0a:	4815      	ldr	r0, [pc, #84]	; (402e60 <m2m_wifi_init+0xf0>)
  402e0c:	47a8      	blx	r5
  402e0e:	4815      	ldr	r0, [pc, #84]	; (402e64 <m2m_wifi_init+0xf4>)
  402e10:	47a8      	blx	r5
  402e12:	4630      	mov	r0, r6
  402e14:	47a8      	blx	r5
  402e16:	e7be      	b.n	402d96 <m2m_wifi_init+0x26>
	nm_drv_deinit(NULL);
  402e18:	2000      	movs	r0, #0
  402e1a:	4b13      	ldr	r3, [pc, #76]	; (402e68 <m2m_wifi_init+0xf8>)
  402e1c:	4798      	blx	r3
  402e1e:	e7ba      	b.n	402d96 <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
  402e20:	f06f 040b 	mvn.w	r4, #11
  402e24:	e7b7      	b.n	402d96 <m2m_wifi_init+0x26>
  402e26:	bf00      	nop
  402e28:	2040c34c 	.word	0x2040c34c
  402e2c:	2040c351 	.word	0x2040c351
  402e30:	00403735 	.word	0x00403735
  402e34:	00402a85 	.word	0x00402a85
  402e38:	00402ad5 	.word	0x00402ad5
  402e3c:	004029f5 	.word	0x004029f5
  402e40:	00403685 	.word	0x00403685
  402e44:	0040c770 	.word	0x0040c770
  402e48:	00406085 	.word	0x00406085
  402e4c:	0040c85c 	.word	0x0040c85c
  402e50:	0040c4c8 	.word	0x0040c4c8
  402e54:	0040c878 	.word	0x0040c878
  402e58:	0040c894 	.word	0x0040c894
  402e5c:	0040c74c 	.word	0x0040c74c
  402e60:	0040c49c 	.word	0x0040c49c
  402e64:	0040c8b0 	.word	0x0040c8b0
  402e68:	00403801 	.word	0x00403801

00402e6c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
  402e6c:	b508      	push	{r3, lr}
	return hif_handle_isr();
  402e6e:	4b01      	ldr	r3, [pc, #4]	; (402e74 <m2m_wifi_handle_events+0x8>)
  402e70:	4798      	blx	r3
}
  402e72:	bd08      	pop	{r3, pc}
  402e74:	004025d1 	.word	0x004025d1

00402e78 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
  402e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e7c:	b0a0      	sub	sp, #128	; 0x80
  402e7e:	4680      	mov	r8, r0
  402e80:	460d      	mov	r5, r1
  402e82:	4614      	mov	r4, r2
  402e84:	461e      	mov	r6, r3
  402e86:	f8bd 7098 	ldrh.w	r7, [sp, #152]	; 0x98
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
  402e8a:	2a01      	cmp	r2, #1
  402e8c:	d003      	beq.n	402e96 <m2m_wifi_connect_sc+0x1e>
	{
		if(pvAuthInfo == NULL)
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d037      	beq.n	402f02 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402e92:	2a02      	cmp	r2, #2
  402e94:	d042      	beq.n	402f1c <m2m_wifi_connect_sc+0xa4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
  402e96:	1e6b      	subs	r3, r5, #1
  402e98:	b2db      	uxtb	r3, r3
  402e9a:	2b1f      	cmp	r3, #31
  402e9c:	d875      	bhi.n	402f8a <m2m_wifi_connect_sc+0x112>
		goto ERR1;
	}

	if(u16Ch>M2M_WIFI_CH_14)
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
  402e9e:	2fff      	cmp	r7, #255	; 0xff
  402ea0:	d001      	beq.n	402ea6 <m2m_wifi_connect_sc+0x2e>
  402ea2:	2f0d      	cmp	r7, #13
  402ea4:	d87e      	bhi.n	402fa4 <m2m_wifi_connect_sc+0x12c>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
  402ea6:	462a      	mov	r2, r5
  402ea8:	4641      	mov	r1, r8
  402eaa:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
  402eae:	4b77      	ldr	r3, [pc, #476]	; (40308c <m2m_wifi_connect_sc+0x214>)
  402eb0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
  402eb2:	ab20      	add	r3, sp, #128	; 0x80
  402eb4:	441d      	add	r5, r3
  402eb6:	2300      	movs	r3, #0
  402eb8:	f805 3c26 	strb.w	r3, [r5, #-38]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
  402ebc:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
  402ec0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  402ec4:	3300      	adds	r3, #0
  402ec6:	bf18      	it	ne
  402ec8:	2301      	movne	r3, #1
  402eca:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
  402ece:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55

	if(u8SecType == M2M_WIFI_SEC_WEP)
  402ed2:	2c03      	cmp	r4, #3
  402ed4:	d073      	beq.n	402fbe <m2m_wifi_connect_sc+0x146>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
  402ed6:	2c02      	cmp	r4, #2
  402ed8:	f000 80aa 	beq.w	403030 <m2m_wifi_connect_sc+0x1b8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
  402edc:	2c04      	cmp	r4, #4
  402ede:	f000 80c1 	beq.w	403064 <m2m_wifi_connect_sc+0x1ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
  402ee2:	2c01      	cmp	r4, #1
  402ee4:	f040 80c4 	bne.w	403070 <m2m_wifi_connect_sc+0x1f8>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
  402ee8:	2300      	movs	r3, #0
  402eea:	9302      	str	r3, [sp, #8]
  402eec:	9301      	str	r3, [sp, #4]
  402eee:	9300      	str	r3, [sp, #0]
  402ef0:	236c      	movs	r3, #108	; 0x6c
  402ef2:	aa05      	add	r2, sp, #20
  402ef4:	2128      	movs	r1, #40	; 0x28
  402ef6:	2001      	movs	r0, #1
  402ef8:	4c65      	ldr	r4, [pc, #404]	; (403090 <m2m_wifi_connect_sc+0x218>)
  402efa:	47a0      	blx	r4

ERR1:
	return ret;
}
  402efc:	b020      	add	sp, #128	; 0x80
  402efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			M2M_ERR("Key is not valid\n");
  402f02:	f240 2203 	movw	r2, #515	; 0x203
  402f06:	4963      	ldr	r1, [pc, #396]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  402f08:	4863      	ldr	r0, [pc, #396]	; (403098 <m2m_wifi_connect_sc+0x220>)
  402f0a:	4c64      	ldr	r4, [pc, #400]	; (40309c <m2m_wifi_connect_sc+0x224>)
  402f0c:	47a0      	blx	r4
  402f0e:	4864      	ldr	r0, [pc, #400]	; (4030a0 <m2m_wifi_connect_sc+0x228>)
  402f10:	47a0      	blx	r4
  402f12:	4864      	ldr	r0, [pc, #400]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  402f14:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402f16:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402f1a:	e7ef      	b.n	402efc <m2m_wifi_connect_sc+0x84>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
  402f1c:	4618      	mov	r0, r3
  402f1e:	4b62      	ldr	r3, [pc, #392]	; (4030a8 <m2m_wifi_connect_sc+0x230>)
  402f20:	4798      	blx	r3
  402f22:	2840      	cmp	r0, #64	; 0x40
  402f24:	d1b7      	bne.n	402e96 <m2m_wifi_connect_sc+0x1e>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
  402f26:	7833      	ldrb	r3, [r6, #0]
  402f28:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402f2c:	b2d2      	uxtb	r2, r2
  402f2e:	2a06      	cmp	r2, #6
  402f30:	d91e      	bls.n	402f70 <m2m_wifi_connect_sc+0xf8>
  402f32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f36:	b2d2      	uxtb	r2, r2
  402f38:	2a36      	cmp	r2, #54	; 0x36
  402f3a:	d819      	bhi.n	402f70 <m2m_wifi_connect_sc+0xf8>
  402f3c:	3b47      	subs	r3, #71	; 0x47
  402f3e:	b2db      	uxtb	r3, r3
  402f40:	2b19      	cmp	r3, #25
  402f42:	d915      	bls.n	402f70 <m2m_wifi_connect_sc+0xf8>
  402f44:	4631      	mov	r1, r6
  402f46:	f106 003f 	add.w	r0, r6, #63	; 0x3f
  402f4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  402f4e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
  402f52:	b2d2      	uxtb	r2, r2
  402f54:	2a06      	cmp	r2, #6
  402f56:	d90b      	bls.n	402f70 <m2m_wifi_connect_sc+0xf8>
  402f58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
  402f5c:	b2d2      	uxtb	r2, r2
  402f5e:	2a36      	cmp	r2, #54	; 0x36
  402f60:	d806      	bhi.n	402f70 <m2m_wifi_connect_sc+0xf8>
  402f62:	3b47      	subs	r3, #71	; 0x47
  402f64:	b2db      	uxtb	r3, r3
  402f66:	2b19      	cmp	r3, #25
  402f68:	d902      	bls.n	402f70 <m2m_wifi_connect_sc+0xf8>
			while(i < (M2M_MAX_PSK_LEN-1))
  402f6a:	4288      	cmp	r0, r1
  402f6c:	d1ed      	bne.n	402f4a <m2m_wifi_connect_sc+0xd2>
  402f6e:	e792      	b.n	402e96 <m2m_wifi_connect_sc+0x1e>
					M2M_ERR("Invalid Key\n");
  402f70:	f240 220f 	movw	r2, #527	; 0x20f
  402f74:	4947      	ldr	r1, [pc, #284]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  402f76:	4848      	ldr	r0, [pc, #288]	; (403098 <m2m_wifi_connect_sc+0x220>)
  402f78:	4c48      	ldr	r4, [pc, #288]	; (40309c <m2m_wifi_connect_sc+0x224>)
  402f7a:	47a0      	blx	r4
  402f7c:	484b      	ldr	r0, [pc, #300]	; (4030ac <m2m_wifi_connect_sc+0x234>)
  402f7e:	47a0      	blx	r4
  402f80:	4848      	ldr	r0, [pc, #288]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  402f82:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
  402f84:	f06f 000b 	mvn.w	r0, #11
					goto ERR1;
  402f88:	e7b8      	b.n	402efc <m2m_wifi_connect_sc+0x84>
		M2M_ERR("SSID LEN INVALID\n");
  402f8a:	f240 2219 	movw	r2, #537	; 0x219
  402f8e:	4941      	ldr	r1, [pc, #260]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  402f90:	4841      	ldr	r0, [pc, #260]	; (403098 <m2m_wifi_connect_sc+0x220>)
  402f92:	4c42      	ldr	r4, [pc, #264]	; (40309c <m2m_wifi_connect_sc+0x224>)
  402f94:	47a0      	blx	r4
  402f96:	4846      	ldr	r0, [pc, #280]	; (4030b0 <m2m_wifi_connect_sc+0x238>)
  402f98:	47a0      	blx	r4
  402f9a:	4842      	ldr	r0, [pc, #264]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  402f9c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  402f9e:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  402fa2:	e7ab      	b.n	402efc <m2m_wifi_connect_sc+0x84>
			M2M_ERR("CH INVALID\n");
  402fa4:	f240 2222 	movw	r2, #546	; 0x222
  402fa8:	493a      	ldr	r1, [pc, #232]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  402faa:	483b      	ldr	r0, [pc, #236]	; (403098 <m2m_wifi_connect_sc+0x220>)
  402fac:	4c3b      	ldr	r4, [pc, #236]	; (40309c <m2m_wifi_connect_sc+0x224>)
  402fae:	47a0      	blx	r4
  402fb0:	4840      	ldr	r0, [pc, #256]	; (4030b4 <m2m_wifi_connect_sc+0x23c>)
  402fb2:	47a0      	blx	r4
  402fb4:	483b      	ldr	r0, [pc, #236]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  402fb6:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  402fb8:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  402fbc:	e79e      	b.n	402efc <m2m_wifi_connect_sc+0x84>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
  402fbe:	7833      	ldrb	r3, [r6, #0]
  402fc0:	3b01      	subs	r3, #1
  402fc2:	b2db      	uxtb	r3, r3
  402fc4:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
  402fc8:	2b03      	cmp	r3, #3
  402fca:	d813      	bhi.n	402ff4 <m2m_wifi_connect_sc+0x17c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
  402fcc:	7872      	ldrb	r2, [r6, #1]
  402fce:	1e53      	subs	r3, r2, #1
  402fd0:	f88d 3015 	strb.w	r3, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
  402fd4:	f002 03ef 	and.w	r3, r2, #239	; 0xef
  402fd8:	2b0b      	cmp	r3, #11
  402fda:	d11a      	bne.n	403012 <m2m_wifi_connect_sc+0x19a>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
  402fdc:	1cb1      	adds	r1, r6, #2
  402fde:	f10d 0016 	add.w	r0, sp, #22
  402fe2:	4b2a      	ldr	r3, [pc, #168]	; (40308c <m2m_wifi_connect_sc+0x214>)
  402fe4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
  402fe6:	7873      	ldrb	r3, [r6, #1]
  402fe8:	aa20      	add	r2, sp, #128	; 0x80
  402fea:	4413      	add	r3, r2
  402fec:	2200      	movs	r2, #0
  402fee:	f803 2c6a 	strb.w	r2, [r3, #-106]
  402ff2:	e779      	b.n	402ee8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
  402ff4:	f240 2239 	movw	r2, #569	; 0x239
  402ff8:	4926      	ldr	r1, [pc, #152]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  402ffa:	4827      	ldr	r0, [pc, #156]	; (403098 <m2m_wifi_connect_sc+0x220>)
  402ffc:	4c27      	ldr	r4, [pc, #156]	; (40309c <m2m_wifi_connect_sc+0x224>)
  402ffe:	47a0      	blx	r4
  403000:	f89d 1014 	ldrb.w	r1, [sp, #20]
  403004:	482c      	ldr	r0, [pc, #176]	; (4030b8 <m2m_wifi_connect_sc+0x240>)
  403006:	47a0      	blx	r4
  403008:	4826      	ldr	r0, [pc, #152]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  40300a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40300c:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403010:	e774      	b.n	402efc <m2m_wifi_connect_sc+0x84>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
  403012:	f44f 7210 	mov.w	r2, #576	; 0x240
  403016:	491f      	ldr	r1, [pc, #124]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  403018:	481f      	ldr	r0, [pc, #124]	; (403098 <m2m_wifi_connect_sc+0x220>)
  40301a:	4c20      	ldr	r4, [pc, #128]	; (40309c <m2m_wifi_connect_sc+0x224>)
  40301c:	47a0      	blx	r4
  40301e:	f89d 1015 	ldrb.w	r1, [sp, #21]
  403022:	4826      	ldr	r0, [pc, #152]	; (4030bc <m2m_wifi_connect_sc+0x244>)
  403024:	47a0      	blx	r4
  403026:	481f      	ldr	r0, [pc, #124]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  403028:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40302a:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  40302e:	e765      	b.n	402efc <m2m_wifi_connect_sc+0x84>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
  403030:	4630      	mov	r0, r6
  403032:	4b1d      	ldr	r3, [pc, #116]	; (4030a8 <m2m_wifi_connect_sc+0x230>)
  403034:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
  403036:	1e43      	subs	r3, r0, #1
  403038:	b29b      	uxth	r3, r3
  40303a:	2b3f      	cmp	r3, #63	; 0x3f
  40303c:	d805      	bhi.n	40304a <m2m_wifi_connect_sc+0x1d2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
  40303e:	1c42      	adds	r2, r0, #1
  403040:	4631      	mov	r1, r6
  403042:	a805      	add	r0, sp, #20
  403044:	4b11      	ldr	r3, [pc, #68]	; (40308c <m2m_wifi_connect_sc+0x214>)
  403046:	4798      	blx	r3
  403048:	e74e      	b.n	402ee8 <m2m_wifi_connect_sc+0x70>
			M2M_ERR("Incorrect PSK key length\n");
  40304a:	f240 224f 	movw	r2, #591	; 0x24f
  40304e:	4911      	ldr	r1, [pc, #68]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  403050:	4811      	ldr	r0, [pc, #68]	; (403098 <m2m_wifi_connect_sc+0x220>)
  403052:	4c12      	ldr	r4, [pc, #72]	; (40309c <m2m_wifi_connect_sc+0x224>)
  403054:	47a0      	blx	r4
  403056:	481a      	ldr	r0, [pc, #104]	; (4030c0 <m2m_wifi_connect_sc+0x248>)
  403058:	47a0      	blx	r4
  40305a:	4812      	ldr	r0, [pc, #72]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  40305c:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
  40305e:	f06f 000b 	mvn.w	r0, #11
			goto ERR1;
  403062:	e74b      	b.n	402efc <m2m_wifi_connect_sc+0x84>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
  403064:	223e      	movs	r2, #62	; 0x3e
  403066:	4631      	mov	r1, r6
  403068:	a805      	add	r0, sp, #20
  40306a:	4b08      	ldr	r3, [pc, #32]	; (40308c <m2m_wifi_connect_sc+0x214>)
  40306c:	4798      	blx	r3
  40306e:	e73b      	b.n	402ee8 <m2m_wifi_connect_sc+0x70>
		M2M_ERR("undefined sec type\n");
  403070:	f240 225f 	movw	r2, #607	; 0x25f
  403074:	4907      	ldr	r1, [pc, #28]	; (403094 <m2m_wifi_connect_sc+0x21c>)
  403076:	4808      	ldr	r0, [pc, #32]	; (403098 <m2m_wifi_connect_sc+0x220>)
  403078:	4c08      	ldr	r4, [pc, #32]	; (40309c <m2m_wifi_connect_sc+0x224>)
  40307a:	47a0      	blx	r4
  40307c:	4811      	ldr	r0, [pc, #68]	; (4030c4 <m2m_wifi_connect_sc+0x24c>)
  40307e:	47a0      	blx	r4
  403080:	4808      	ldr	r0, [pc, #32]	; (4030a4 <m2m_wifi_connect_sc+0x22c>)
  403082:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
  403084:	f06f 000b 	mvn.w	r0, #11
		goto ERR1;
  403088:	e738      	b.n	402efc <m2m_wifi_connect_sc+0x84>
  40308a:	bf00      	nop
  40308c:	00402279 	.word	0x00402279
  403090:	004023f1 	.word	0x004023f1
  403094:	0040c75c 	.word	0x0040c75c
  403098:	0040c49c 	.word	0x0040c49c
  40309c:	00406085 	.word	0x00406085
  4030a0:	0040c7b0 	.word	0x0040c7b0
  4030a4:	0040c4c8 	.word	0x0040c4c8
  4030a8:	0040229b 	.word	0x0040229b
  4030ac:	0040c7c4 	.word	0x0040c7c4
  4030b0:	0040c7d4 	.word	0x0040c7d4
  4030b4:	0040c7e8 	.word	0x0040c7e8
  4030b8:	0040c7f4 	.word	0x0040c7f4
  4030bc:	0040c810 	.word	0x0040c810
  4030c0:	0040c82c 	.word	0x0040c82c
  4030c4:	0040c848 	.word	0x0040c848

004030c8 <m2m_wifi_connect>:
{
  4030c8:	b510      	push	{r4, lr}
  4030ca:	b082      	sub	sp, #8
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
  4030cc:	2400      	movs	r4, #0
  4030ce:	9401      	str	r4, [sp, #4]
  4030d0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  4030d4:	9400      	str	r4, [sp, #0]
  4030d6:	4c02      	ldr	r4, [pc, #8]	; (4030e0 <m2m_wifi_connect+0x18>)
  4030d8:	47a0      	blx	r4
}
  4030da:	b002      	add	sp, #8
  4030dc:	bd10      	pop	{r4, pc}
  4030de:	bf00      	nop
  4030e0:	00402e79 	.word	0x00402e79

004030e4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
  4030e4:	2000      	movs	r0, #0
  4030e6:	4770      	bx	lr

004030e8 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
  4030e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4030ea:	b083      	sub	sp, #12
  4030ec:	4604      	mov	r4, r0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
  4030ee:	f44f 55a5 	mov.w	r5, #5280	; 0x14a0
  4030f2:	4e0a      	ldr	r6, [pc, #40]	; (40311c <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  4030f4:	4f0a      	ldr	r7, [pc, #40]	; (403120 <chip_apply_conf+0x38>)
		nm_write_reg(rNMI_GP_REG_1, val32);
  4030f6:	4621      	mov	r1, r4
  4030f8:	4628      	mov	r0, r5
  4030fa:	47b0      	blx	r6
		if(val32 != 0) {		
  4030fc:	b154      	cbz	r4, 403114 <chip_apply_conf+0x2c>
			uint32 reg = 0;
  4030fe:	a902      	add	r1, sp, #8
  403100:	2300      	movs	r3, #0
  403102:	f841 3d04 	str.w	r3, [r1, #-4]!
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
  403106:	4628      	mov	r0, r5
  403108:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
  40310a:	2800      	cmp	r0, #0
  40310c:	d1f3      	bne.n	4030f6 <chip_apply_conf+0xe>
				if(reg == val32)
  40310e:	9b01      	ldr	r3, [sp, #4]
  403110:	429c      	cmp	r4, r3
  403112:	d1f0      	bne.n	4030f6 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
  403114:	2000      	movs	r0, #0
  403116:	b003      	add	sp, #12
  403118:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40311a:	bf00      	nop
  40311c:	004035c1 	.word	0x004035c1
  403120:	004035b5 	.word	0x004035b5

00403124 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
  403124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403128:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
  40312a:	2001      	movs	r0, #1
  40312c:	4b3c      	ldr	r3, [pc, #240]	; (403220 <nm_clkless_wake+0xfc>)
  40312e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
  403130:	a901      	add	r1, sp, #4
  403132:	2001      	movs	r0, #1
  403134:	4b3b      	ldr	r3, [pc, #236]	; (403224 <nm_clkless_wake+0x100>)
  403136:	4798      	blx	r3
	if(ret != M2M_SUCCESS) {
  403138:	4682      	mov	sl, r0
  40313a:	b938      	cbnz	r0, 40314c <nm_clkless_wake+0x28>
  40313c:	2400      	movs	r4, #0
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
  40313e:	f04f 0801 	mov.w	r8, #1
  403142:	f8df 9108 	ldr.w	r9, [pc, #264]	; 40324c <nm_clkless_wake+0x128>
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
  403146:	4d36      	ldr	r5, [pc, #216]	; (403220 <nm_clkless_wake+0xfc>)
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  403148:	4f37      	ldr	r7, [pc, #220]	; (403228 <nm_clkless_wake+0x104>)
  40314a:	e020      	b.n	40318e <nm_clkless_wake+0x6a>
		M2M_ERR("Bus error (1). Wake up failed\n");
  40314c:	2272      	movs	r2, #114	; 0x72
  40314e:	4937      	ldr	r1, [pc, #220]	; (40322c <nm_clkless_wake+0x108>)
  403150:	4837      	ldr	r0, [pc, #220]	; (403230 <nm_clkless_wake+0x10c>)
  403152:	4c38      	ldr	r4, [pc, #224]	; (403234 <nm_clkless_wake+0x110>)
  403154:	47a0      	blx	r4
  403156:	4838      	ldr	r0, [pc, #224]	; (403238 <nm_clkless_wake+0x114>)
  403158:	47a0      	blx	r4
  40315a:	4838      	ldr	r0, [pc, #224]	; (40323c <nm_clkless_wake+0x118>)
  40315c:	47a0      	blx	r4
		goto _WAKE_EXIT;
  40315e:	e009      	b.n	403174 <nm_clkless_wake+0x50>
					M2M_ERR("Bus error (2). Wake up failed\n");
  403160:	2296      	movs	r2, #150	; 0x96
  403162:	4932      	ldr	r1, [pc, #200]	; (40322c <nm_clkless_wake+0x108>)
  403164:	4832      	ldr	r0, [pc, #200]	; (403230 <nm_clkless_wake+0x10c>)
  403166:	4c33      	ldr	r4, [pc, #204]	; (403234 <nm_clkless_wake+0x110>)
  403168:	47a0      	blx	r4
  40316a:	4835      	ldr	r0, [pc, #212]	; (403240 <nm_clkless_wake+0x11c>)
  40316c:	47a0      	blx	r4
  40316e:	4833      	ldr	r0, [pc, #204]	; (40323c <nm_clkless_wake+0x118>)
  403170:	47a0      	blx	r4
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  403172:	46b2      	mov	sl, r6
		}
	} while((clk_status_reg & 0x4) == 0);

_WAKE_EXIT:
	return ret;
}
  403174:	4650      	mov	r0, sl
  403176:	b003      	add	sp, #12
  403178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nm_write_reg(0x1, reg | (1 << 1));
  40317c:	9901      	ldr	r1, [sp, #4]
  40317e:	f041 0102 	orr.w	r1, r1, #2
  403182:	4640      	mov	r0, r8
  403184:	47c8      	blx	r9
	} while((clk_status_reg & 0x4) == 0);
  403186:	9b00      	ldr	r3, [sp, #0]
  403188:	f013 0f04 	tst.w	r3, #4
  40318c:	d1f2      	bne.n	403174 <nm_clkless_wake+0x50>
		nm_write_reg(0x1, reg | (1 << 1));
  40318e:	9901      	ldr	r1, [sp, #4]
  403190:	f041 0102 	orr.w	r1, r1, #2
  403194:	4640      	mov	r0, r8
  403196:	47c8      	blx	r9
		nm_bsp_sleep(1);
  403198:	4640      	mov	r0, r8
  40319a:	47a8      	blx	r5
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  40319c:	4669      	mov	r1, sp
  40319e:	4b29      	ldr	r3, [pc, #164]	; (403244 <nm_clkless_wake+0x120>)
  4031a0:	6818      	ldr	r0, [r3, #0]
  4031a2:	4b20      	ldr	r3, [pc, #128]	; (403224 <nm_clkless_wake+0x100>)
  4031a4:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4031a6:	b908      	cbnz	r0, 4031ac <nm_clkless_wake+0x88>
  4031a8:	9b00      	ldr	r3, [sp, #0]
  4031aa:	b9bb      	cbnz	r3, 4031dc <nm_clkless_wake+0xb8>
			clk_status_reg_adr = 0xe;
  4031ac:	4e25      	ldr	r6, [pc, #148]	; (403244 <nm_clkless_wake+0x120>)
  4031ae:	230e      	movs	r3, #14
  4031b0:	6033      	str	r3, [r6, #0]
			nm_bsp_sleep(1);
  4031b2:	4640      	mov	r0, r8
  4031b4:	47a8      	blx	r5
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4031b6:	4669      	mov	r1, sp
  4031b8:	6830      	ldr	r0, [r6, #0]
  4031ba:	4b1a      	ldr	r3, [pc, #104]	; (403224 <nm_clkless_wake+0x100>)
  4031bc:	4798      	blx	r3
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
  4031be:	b908      	cbnz	r0, 4031c4 <nm_clkless_wake+0xa0>
  4031c0:	9b00      	ldr	r3, [sp, #0]
  4031c2:	b95b      	cbnz	r3, 4031dc <nm_clkless_wake+0xb8>
				clk_status_reg_adr = 0x13;
  4031c4:	4e1f      	ldr	r6, [pc, #124]	; (403244 <nm_clkless_wake+0x120>)
  4031c6:	2313      	movs	r3, #19
  4031c8:	6033      	str	r3, [r6, #0]
				nm_bsp_sleep(1);
  4031ca:	4640      	mov	r0, r8
  4031cc:	47a8      	blx	r5
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4031ce:	4669      	mov	r1, sp
  4031d0:	6830      	ldr	r0, [r6, #0]
  4031d2:	4b14      	ldr	r3, [pc, #80]	; (403224 <nm_clkless_wake+0x100>)
  4031d4:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
  4031d6:	4606      	mov	r6, r0
  4031d8:	2800      	cmp	r0, #0
  4031da:	d1c1      	bne.n	403160 <nm_clkless_wake+0x3c>
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4031dc:	4e19      	ldr	r6, [pc, #100]	; (403244 <nm_clkless_wake+0x120>)
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
  4031de:	9b00      	ldr	r3, [sp, #0]
  4031e0:	f013 0f04 	tst.w	r3, #4
  4031e4:	d1c6      	bne.n	403174 <nm_clkless_wake+0x50>
  4031e6:	3401      	adds	r4, #1
  4031e8:	fba7 2304 	umull	r2, r3, r7, r4
  4031ec:	085b      	lsrs	r3, r3, #1
  4031ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4031f2:	429c      	cmp	r4, r3
  4031f4:	d1c2      	bne.n	40317c <nm_clkless_wake+0x58>
			nm_bsp_sleep(2);
  4031f6:	2002      	movs	r0, #2
  4031f8:	47a8      	blx	r5
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
  4031fa:	4669      	mov	r1, sp
  4031fc:	6830      	ldr	r0, [r6, #0]
  4031fe:	4b09      	ldr	r3, [pc, #36]	; (403224 <nm_clkless_wake+0x100>)
  403200:	4798      	blx	r3
			if((clk_status_reg & 0x4) == 0)
  403202:	9b00      	ldr	r3, [sp, #0]
  403204:	f013 0f04 	tst.w	r3, #4
  403208:	d1e9      	bne.n	4031de <nm_clkless_wake+0xba>
				M2M_ERR("clocks still OFF. Wake up failed\n");
  40320a:	22aa      	movs	r2, #170	; 0xaa
  40320c:	4907      	ldr	r1, [pc, #28]	; (40322c <nm_clkless_wake+0x108>)
  40320e:	4808      	ldr	r0, [pc, #32]	; (403230 <nm_clkless_wake+0x10c>)
  403210:	f8df b020 	ldr.w	fp, [pc, #32]	; 403234 <nm_clkless_wake+0x110>
  403214:	47d8      	blx	fp
  403216:	480c      	ldr	r0, [pc, #48]	; (403248 <nm_clkless_wake+0x124>)
  403218:	47d8      	blx	fp
  40321a:	4808      	ldr	r0, [pc, #32]	; (40323c <nm_clkless_wake+0x118>)
  40321c:	47d8      	blx	fp
  40321e:	e7de      	b.n	4031de <nm_clkless_wake+0xba>
  403220:	00401ed5 	.word	0x00401ed5
  403224:	004035b5 	.word	0x004035b5
  403228:	aaaaaaab 	.word	0xaaaaaaab
  40322c:	0040c8cc 	.word	0x0040c8cc
  403230:	0040c49c 	.word	0x0040c49c
  403234:	00406085 	.word	0x00406085
  403238:	0040c93c 	.word	0x0040c93c
  40323c:	0040c4c8 	.word	0x0040c4c8
  403240:	0040c95c 	.word	0x0040c95c
  403244:	20400014 	.word	0x20400014
  403248:	0040c97c 	.word	0x0040c97c
  40324c:	004035c1 	.word	0x004035c1

00403250 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
  403250:	b500      	push	{lr}
  403252:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
  403254:	a901      	add	r1, sp, #4
  403256:	f241 4008 	movw	r0, #5128	; 0x1408
  40325a:	4b15      	ldr	r3, [pc, #84]	; (4032b0 <enable_interrupts+0x60>)
  40325c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40325e:	b9e8      	cbnz	r0, 40329c <enable_interrupts+0x4c>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
  403260:	9901      	ldr	r1, [sp, #4]
  403262:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403266:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
  403268:	f241 4008 	movw	r0, #5128	; 0x1408
  40326c:	4b11      	ldr	r3, [pc, #68]	; (4032b4 <enable_interrupts+0x64>)
  40326e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403270:	b9b8      	cbnz	r0, 4032a2 <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
  403272:	a901      	add	r1, sp, #4
  403274:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  403278:	4b0d      	ldr	r3, [pc, #52]	; (4032b0 <enable_interrupts+0x60>)
  40327a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40327c:	b9a0      	cbnz	r0, 4032a8 <enable_interrupts+0x58>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
  40327e:	9901      	ldr	r1, [sp, #4]
  403280:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403284:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
  403286:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
  40328a:	4b0a      	ldr	r3, [pc, #40]	; (4032b4 <enable_interrupts+0x64>)
  40328c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40328e:	2800      	cmp	r0, #0
		return M2M_ERR_BUS_FAIL;
  403290:	bf18      	it	ne
  403292:	f06f 0005 	mvnne.w	r0, #5
	}
	return M2M_SUCCESS;
}
  403296:	b003      	add	sp, #12
  403298:	f85d fb04 	ldr.w	pc, [sp], #4
		return M2M_ERR_BUS_FAIL;
  40329c:	f06f 0005 	mvn.w	r0, #5
  4032a0:	e7f9      	b.n	403296 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  4032a2:	f06f 0005 	mvn.w	r0, #5
  4032a6:	e7f6      	b.n	403296 <enable_interrupts+0x46>
		return M2M_ERR_BUS_FAIL;
  4032a8:	f06f 0005 	mvn.w	r0, #5
  4032ac:	e7f3      	b.n	403296 <enable_interrupts+0x46>
  4032ae:	bf00      	nop
  4032b0:	004035b5 	.word	0x004035b5
  4032b4:	004035c1 	.word	0x004035c1

004032b8 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
  4032b8:	b510      	push	{r4, lr}
  4032ba:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
  4032bc:	4b25      	ldr	r3, [pc, #148]	; (403354 <nmi_get_chipid+0x9c>)
  4032be:	681c      	ldr	r4, [r3, #0]
  4032c0:	b124      	cbz	r4, 4032cc <nmi_get_chipid+0x14>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
  4032c2:	4b24      	ldr	r3, [pc, #144]	; (403354 <nmi_get_chipid+0x9c>)
  4032c4:	681c      	ldr	r4, [r3, #0]
}
  4032c6:	4620      	mov	r0, r4
  4032c8:	b002      	add	sp, #8
  4032ca:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
  4032cc:	4619      	mov	r1, r3
  4032ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4032d2:	4b21      	ldr	r3, [pc, #132]	; (403358 <nmi_get_chipid+0xa0>)
  4032d4:	4798      	blx	r3
  4032d6:	b118      	cbz	r0, 4032e0 <nmi_get_chipid+0x28>
			chipid = 0;
  4032d8:	2200      	movs	r2, #0
  4032da:	4b1e      	ldr	r3, [pc, #120]	; (403354 <nmi_get_chipid+0x9c>)
  4032dc:	601a      	str	r2, [r3, #0]
			return 0;
  4032de:	e7f2      	b.n	4032c6 <nmi_get_chipid+0xe>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
  4032e0:	a901      	add	r1, sp, #4
  4032e2:	f241 30f4 	movw	r0, #5108	; 0x13f4
  4032e6:	4b1c      	ldr	r3, [pc, #112]	; (403358 <nmi_get_chipid+0xa0>)
  4032e8:	4798      	blx	r3
  4032ea:	b118      	cbz	r0, 4032f4 <nmi_get_chipid+0x3c>
			chipid = 0;
  4032ec:	2200      	movs	r2, #0
  4032ee:	4b19      	ldr	r3, [pc, #100]	; (403354 <nmi_get_chipid+0x9c>)
  4032f0:	601a      	str	r2, [r3, #0]
			return 0;
  4032f2:	e7e8      	b.n	4032c6 <nmi_get_chipid+0xe>
		if (chipid == 0x1002a0)  {
  4032f4:	4b17      	ldr	r3, [pc, #92]	; (403354 <nmi_get_chipid+0x9c>)
  4032f6:	681b      	ldr	r3, [r3, #0]
  4032f8:	4a18      	ldr	r2, [pc, #96]	; (40335c <nmi_get_chipid+0xa4>)
  4032fa:	4293      	cmp	r3, r2
  4032fc:	d00d      	beq.n	40331a <nmi_get_chipid+0x62>
		} else if(chipid == 0x1002b0) {
  4032fe:	4a18      	ldr	r2, [pc, #96]	; (403360 <nmi_get_chipid+0xa8>)
  403300:	4293      	cmp	r3, r2
  403302:	d011      	beq.n	403328 <nmi_get_chipid+0x70>
		} else if(chipid == 0x1000F0) { 
  403304:	4a17      	ldr	r2, [pc, #92]	; (403364 <nmi_get_chipid+0xac>)
  403306:	4293      	cmp	r3, r2
  403308:	d018      	beq.n	40333c <nmi_get_chipid+0x84>
		chipid |= 0x050000;
  40330a:	4a12      	ldr	r2, [pc, #72]	; (403354 <nmi_get_chipid+0x9c>)
		chipid &= ~(0x0f0000);
  40330c:	6813      	ldr	r3, [r2, #0]
  40330e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
  403312:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  403316:	6013      	str	r3, [r2, #0]
  403318:	e7d3      	b.n	4032c2 <nmi_get_chipid+0xa>
			if (rfrevid == 0x1) { /* 1002A0 */
  40331a:	9b01      	ldr	r3, [sp, #4]
  40331c:	2b01      	cmp	r3, #1
  40331e:	d0f4      	beq.n	40330a <nmi_get_chipid+0x52>
				chipid = 0x1002a1;
  403320:	3201      	adds	r2, #1
  403322:	4b0c      	ldr	r3, [pc, #48]	; (403354 <nmi_get_chipid+0x9c>)
  403324:	601a      	str	r2, [r3, #0]
  403326:	e7f0      	b.n	40330a <nmi_get_chipid+0x52>
			if(rfrevid == 3) { /* 1002B0 */
  403328:	9b01      	ldr	r3, [sp, #4]
  40332a:	2b03      	cmp	r3, #3
  40332c:	d0ed      	beq.n	40330a <nmi_get_chipid+0x52>
			} else if(rfrevid == 4) { /* 1002B1 */
  40332e:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
  403330:	bf0c      	ite	eq
  403332:	3201      	addeq	r2, #1
				chipid = 0x1002b2;
  403334:	4a0c      	ldrne	r2, [pc, #48]	; (403368 <nmi_get_chipid+0xb0>)
  403336:	4b07      	ldr	r3, [pc, #28]	; (403354 <nmi_get_chipid+0x9c>)
  403338:	601a      	str	r2, [r3, #0]
  40333a:	e7e6      	b.n	40330a <nmi_get_chipid+0x52>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
  40333c:	4905      	ldr	r1, [pc, #20]	; (403354 <nmi_get_chipid+0x9c>)
  40333e:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
  403342:	4b05      	ldr	r3, [pc, #20]	; (403358 <nmi_get_chipid+0xa0>)
  403344:	4798      	blx	r3
  403346:	2800      	cmp	r0, #0
  403348:	d0df      	beq.n	40330a <nmi_get_chipid+0x52>
			chipid = 0;
  40334a:	2200      	movs	r2, #0
  40334c:	4b01      	ldr	r3, [pc, #4]	; (403354 <nmi_get_chipid+0x9c>)
  40334e:	601a      	str	r2, [r3, #0]
			return 0;
  403350:	e7b9      	b.n	4032c6 <nmi_get_chipid+0xe>
  403352:	bf00      	nop
  403354:	2040c354 	.word	0x2040c354
  403358:	004035b5 	.word	0x004035b5
  40335c:	001002a0 	.word	0x001002a0
  403360:	001002b0 	.word	0x001002b0
  403364:	001000f0 	.word	0x001000f0
  403368:	001002b2 	.word	0x001002b2

0040336c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
  40336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403370:	4607      	mov	r7, r0
	uint32 reg = 0, cnt = 0;
	uint32 u32GpReg1 = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403372:	f241 0514 	movw	r5, #4116	; 0x1014
  403376:	4c28      	ldr	r4, [pc, #160]	; (403418 <wait_for_bootrom+0xac>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403378:	4e28      	ldr	r6, [pc, #160]	; (40341c <wait_for_bootrom+0xb0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  40337a:	4628      	mov	r0, r5
  40337c:	47a0      	blx	r4
		if (reg & 0x80000000) {
  40337e:	2800      	cmp	r0, #0
  403380:	db02      	blt.n	403388 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
  403382:	2001      	movs	r0, #1
  403384:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
  403386:	e7f8      	b.n	40337a <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
  403388:	4825      	ldr	r0, [pc, #148]	; (403420 <wait_for_bootrom+0xb4>)
  40338a:	4b23      	ldr	r3, [pc, #140]	; (403418 <wait_for_bootrom+0xac>)
  40338c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
  40338e:	f010 0f01 	tst.w	r0, #1
  403392:	d110      	bne.n	4033b6 <wait_for_bootrom+0x4a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
  403394:	f8df 8084 	ldr.w	r8, [pc, #132]	; 40341c <wait_for_bootrom+0xb0>
			reg = nm_read_reg(BOOTROM_REG);
  403398:	4e1f      	ldr	r6, [pc, #124]	; (403418 <wait_for_bootrom+0xac>)

			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  40339a:	4d22      	ldr	r5, [pc, #136]	; (403424 <wait_for_bootrom+0xb8>)
			nm_bsp_sleep(1);
  40339c:	2001      	movs	r0, #1
  40339e:	47c0      	blx	r8
			reg = nm_read_reg(BOOTROM_REG);
  4033a0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4033a4:	47b0      	blx	r6
  4033a6:	4604      	mov	r4, r0
			printf("reg:%x / %x \n",reg, M2M_FINISH_BOOT_ROM );
  4033a8:	462a      	mov	r2, r5
  4033aa:	4601      	mov	r1, r0
  4033ac:	481e      	ldr	r0, [pc, #120]	; (403428 <wait_for_bootrom+0xbc>)
  4033ae:	4b1f      	ldr	r3, [pc, #124]	; (40342c <wait_for_bootrom+0xc0>)
  4033b0:	4798      	blx	r3
		while(reg != M2M_FINISH_BOOT_ROM)
  4033b2:	42ac      	cmp	r4, r5
  4033b4:	d1f2      	bne.n	40339c <wait_for_bootrom+0x30>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
  4033b6:	2f02      	cmp	r7, #2
  4033b8:	d019      	beq.n	4033ee <wait_for_bootrom+0x82>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
  4033ba:	2f03      	cmp	r7, #3
  4033bc:	d022      	beq.n	403404 <wait_for_bootrom+0x98>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
  4033be:	2f04      	cmp	r7, #4
  4033c0:	bf14      	ite	ne
  4033c2:	2400      	movne	r4, #0
  4033c4:	2480      	moveq	r4, #128	; 0x80
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
  4033c6:	4b1a      	ldr	r3, [pc, #104]	; (403430 <wait_for_bootrom+0xc4>)
  4033c8:	4798      	blx	r3
  4033ca:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4033ce:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
  4033d2:	bf0c      	ite	eq
  4033d4:	f044 0002 	orreq.w	r0, r4, #2
	}
	else
	{
		chip_apply_conf(u32GpReg1);
  4033d8:	4620      	movne	r0, r4
  4033da:	4b16      	ldr	r3, [pc, #88]	; (403434 <wait_for_bootrom+0xc8>)
  4033dc:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
  4033de:	4916      	ldr	r1, [pc, #88]	; (403438 <wait_for_bootrom+0xcc>)
  4033e0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
  4033e4:	4b15      	ldr	r3, [pc, #84]	; (40343c <wait_for_bootrom+0xd0>)
  4033e6:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
  4033e8:	2000      	movs	r0, #0
  4033ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  4033ee:	4914      	ldr	r1, [pc, #80]	; (403440 <wait_for_bootrom+0xd4>)
  4033f0:	4814      	ldr	r0, [pc, #80]	; (403444 <wait_for_bootrom+0xd8>)
  4033f2:	4c12      	ldr	r4, [pc, #72]	; (40343c <wait_for_bootrom+0xd0>)
  4033f4:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
  4033f6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  4033fa:	f241 008c 	movw	r0, #4236	; 0x108c
  4033fe:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403400:	2400      	movs	r4, #0
  403402:	e7e0      	b.n	4033c6 <wait_for_bootrom+0x5a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
  403404:	490e      	ldr	r1, [pc, #56]	; (403440 <wait_for_bootrom+0xd4>)
  403406:	480f      	ldr	r0, [pc, #60]	; (403444 <wait_for_bootrom+0xd8>)
  403408:	4c0c      	ldr	r4, [pc, #48]	; (40343c <wait_for_bootrom+0xd0>)
  40340a:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
  40340c:	2100      	movs	r1, #0
  40340e:	f241 008c 	movw	r0, #4236	; 0x108c
  403412:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
  403414:	2400      	movs	r4, #0
  403416:	e7d6      	b.n	4033c6 <wait_for_bootrom+0x5a>
  403418:	004035a9 	.word	0x004035a9
  40341c:	00401ed5 	.word	0x00401ed5
  403420:	000207bc 	.word	0x000207bc
  403424:	10add09e 	.word	0x10add09e
  403428:	0040c9a0 	.word	0x0040c9a0
  40342c:	00406085 	.word	0x00406085
  403430:	004032b9 	.word	0x004032b9
  403434:	004030e9 	.word	0x004030e9
  403438:	ef522f61 	.word	0xef522f61
  40343c:	004035c1 	.word	0x004035c1
  403440:	3c1cd57d 	.word	0x3c1cd57d
  403444:	000207ac 	.word	0x000207ac

00403448 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
  403448:	b5f0      	push	{r4, r5, r6, r7, lr}
  40344a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
  40344c:	f241 038c 	movw	r3, #4236	; 0x108c
  403450:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
  403452:	4b18      	ldr	r3, [pc, #96]	; (4034b4 <wait_for_firmware_start+0x6c>)
  403454:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
  403456:	3802      	subs	r0, #2
  403458:	b2c0      	uxtb	r0, r0
  40345a:	2801      	cmp	r0, #1
  40345c:	d911      	bls.n	403482 <wait_for_firmware_start+0x3a>
{
  40345e:	f04f 34ff 	mov.w	r4, #4294967295
  403462:	2000      	movs	r0, #0
	
	
	while (checkValue != reg)
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403464:	2702      	movs	r7, #2
  403466:	4e14      	ldr	r6, [pc, #80]	; (4034b8 <wait_for_firmware_start+0x70>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
  403468:	4d14      	ldr	r5, [pc, #80]	; (4034bc <wait_for_firmware_start+0x74>)
	while (checkValue != reg)
  40346a:	9b00      	ldr	r3, [sp, #0]
  40346c:	4298      	cmp	r0, r3
  40346e:	d012      	beq.n	403496 <wait_for_firmware_start+0x4e>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
  403470:	4638      	mov	r0, r7
  403472:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
  403474:	9801      	ldr	r0, [sp, #4]
  403476:	47a8      	blx	r5
		if(++cnt >= u32Timeout)
  403478:	3c01      	subs	r4, #1
  40347a:	d1f6      	bne.n	40346a <wait_for_firmware_start+0x22>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
  40347c:	f06f 0004 	mvn.w	r0, #4
  403480:	e00e      	b.n	4034a0 <wait_for_firmware_start+0x58>
		regAddress = NMI_REV_REG;
  403482:	4b0f      	ldr	r3, [pc, #60]	; (4034c0 <wait_for_firmware_start+0x78>)
  403484:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
  403486:	f1a3 5322 	sub.w	r3, r3, #679477248	; 0x28800000
  40348a:	f5a3 1311 	sub.w	r3, r3, #2375680	; 0x244000
  40348e:	f2a3 53e9 	subw	r3, r3, #1513	; 0x5e9
  403492:	9300      	str	r3, [sp, #0]
  403494:	e7e3      	b.n	40345e <wait_for_firmware_start+0x16>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
  403496:	9a00      	ldr	r2, [sp, #0]
  403498:	4b06      	ldr	r3, [pc, #24]	; (4034b4 <wait_for_firmware_start+0x6c>)
  40349a:	429a      	cmp	r2, r3
  40349c:	d002      	beq.n	4034a4 <wait_for_firmware_start+0x5c>
	sint8 ret = M2M_SUCCESS;
  40349e:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
  4034a0:	b003      	add	sp, #12
  4034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_STATE_REG, 0);
  4034a4:	2100      	movs	r1, #0
  4034a6:	f241 008c 	movw	r0, #4236	; 0x108c
  4034aa:	4b06      	ldr	r3, [pc, #24]	; (4034c4 <wait_for_firmware_start+0x7c>)
  4034ac:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
  4034ae:	2000      	movs	r0, #0
  4034b0:	e7f6      	b.n	4034a0 <wait_for_firmware_start+0x58>
  4034b2:	bf00      	nop
  4034b4:	02532636 	.word	0x02532636
  4034b8:	00401ed5 	.word	0x00401ed5
  4034bc:	004035a9 	.word	0x004035a9
  4034c0:	000207ac 	.word	0x000207ac
  4034c4:	004035c1 	.word	0x004035c1

004034c8 <chip_deinit>:

sint8 chip_deinit(void)
{
  4034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034ca:	b083      	sub	sp, #12
	uint32 reg = 0;
  4034cc:	a902      	add	r1, sp, #8
  4034ce:	2300      	movs	r3, #0
  4034d0:	f841 3d04 	str.w	r3, [r1, #-4]!
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4034d4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4034d8:	4b24      	ldr	r3, [pc, #144]	; (40356c <chip_deinit+0xa4>)
  4034da:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
  4034dc:	bb20      	cbnz	r0, 403528 <chip_deinit+0x60>
		M2M_ERR("failed to de-initialize\n");
	}
	reg &= ~(1 << 10);
  4034de:	9901      	ldr	r1, [sp, #4]
  4034e0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  4034e4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4034e6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4034ea:	4b21      	ldr	r3, [pc, #132]	; (403570 <chip_deinit+0xa8>)
  4034ec:	4798      	blx	r3

	if (ret != M2M_SUCCESS) {
  4034ee:	4605      	mov	r5, r0
  4034f0:	bb28      	cbnz	r0, 40353e <chip_deinit+0x76>
  4034f2:	240a      	movs	r4, #10
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4034f4:	4e1d      	ldr	r6, [pc, #116]	; (40356c <chip_deinit+0xa4>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  4034f6:	4f1e      	ldr	r7, [pc, #120]	; (403570 <chip_deinit+0xa8>)
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
  4034f8:	a901      	add	r1, sp, #4
  4034fa:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  4034fe:	47b0      	blx	r6
		if (ret != M2M_SUCCESS) {
  403500:	4605      	mov	r5, r0
  403502:	bb38      	cbnz	r0, 403554 <chip_deinit+0x8c>
		if ((reg & (1 << 10))) {
  403504:	9901      	ldr	r1, [sp, #4]
  403506:	f411 6f80 	tst.w	r1, #1024	; 0x400
  40350a:	d00a      	beq.n	403522 <chip_deinit+0x5a>
			reg &= ~(1 << 10);
  40350c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  403510:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
  403512:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
  403516:	47b8      	blx	r7
  403518:	4605      	mov	r5, r0
  40351a:	1e63      	subs	r3, r4, #1
			timeout--;
		} else {
			break;
		}

	} while (timeout);
  40351c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  403520:	d1ea      	bne.n	4034f8 <chip_deinit+0x30>

	return ret;
}
  403522:	4628      	mov	r0, r5
  403524:	b003      	add	sp, #12
  403526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("failed to de-initialize\n");
  403528:	f240 2231 	movw	r2, #561	; 0x231
  40352c:	4911      	ldr	r1, [pc, #68]	; (403574 <chip_deinit+0xac>)
  40352e:	4812      	ldr	r0, [pc, #72]	; (403578 <chip_deinit+0xb0>)
  403530:	4c12      	ldr	r4, [pc, #72]	; (40357c <chip_deinit+0xb4>)
  403532:	47a0      	blx	r4
  403534:	4812      	ldr	r0, [pc, #72]	; (403580 <chip_deinit+0xb8>)
  403536:	47a0      	blx	r4
  403538:	4812      	ldr	r0, [pc, #72]	; (403584 <chip_deinit+0xbc>)
  40353a:	47a0      	blx	r4
  40353c:	e7cf      	b.n	4034de <chip_deinit+0x16>
		M2M_ERR("Error while writing reg\n");
  40353e:	f240 2237 	movw	r2, #567	; 0x237
  403542:	490c      	ldr	r1, [pc, #48]	; (403574 <chip_deinit+0xac>)
  403544:	480c      	ldr	r0, [pc, #48]	; (403578 <chip_deinit+0xb0>)
  403546:	4c0d      	ldr	r4, [pc, #52]	; (40357c <chip_deinit+0xb4>)
  403548:	47a0      	blx	r4
  40354a:	480f      	ldr	r0, [pc, #60]	; (403588 <chip_deinit+0xc0>)
  40354c:	47a0      	blx	r4
  40354e:	480d      	ldr	r0, [pc, #52]	; (403584 <chip_deinit+0xbc>)
  403550:	47a0      	blx	r4
		return ret;
  403552:	e7e6      	b.n	403522 <chip_deinit+0x5a>
			M2M_ERR("Error while reading reg\n");
  403554:	f240 223e 	movw	r2, #574	; 0x23e
  403558:	4906      	ldr	r1, [pc, #24]	; (403574 <chip_deinit+0xac>)
  40355a:	4807      	ldr	r0, [pc, #28]	; (403578 <chip_deinit+0xb0>)
  40355c:	4c07      	ldr	r4, [pc, #28]	; (40357c <chip_deinit+0xb4>)
  40355e:	47a0      	blx	r4
  403560:	480a      	ldr	r0, [pc, #40]	; (40358c <chip_deinit+0xc4>)
  403562:	47a0      	blx	r4
  403564:	4807      	ldr	r0, [pc, #28]	; (403584 <chip_deinit+0xbc>)
  403566:	47a0      	blx	r4
			return ret;
  403568:	e7db      	b.n	403522 <chip_deinit+0x5a>
  40356a:	bf00      	nop
  40356c:	004035b5 	.word	0x004035b5
  403570:	004035c1 	.word	0x004035c1
  403574:	0040c8dc 	.word	0x0040c8dc
  403578:	0040c49c 	.word	0x0040c49c
  40357c:	00406085 	.word	0x00406085
  403580:	0040c8e8 	.word	0x0040c8e8
  403584:	0040c4c8 	.word	0x0040c4c8
  403588:	0040c904 	.word	0x0040c904
  40358c:	0040c920 	.word	0x0040c920

00403590 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
  403590:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
  403592:	4b01      	ldr	r3, [pc, #4]	; (403598 <nm_bus_iface_init+0x8>)
  403594:	4798      	blx	r3

	return ret;
}
  403596:	bd08      	pop	{r3, pc}
  403598:	00402049 	.word	0x00402049

0040359c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
  40359c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
  40359e:	4b01      	ldr	r3, [pc, #4]	; (4035a4 <nm_bus_iface_deinit+0x8>)
  4035a0:	4798      	blx	r3

	return ret;
}
  4035a2:	bd08      	pop	{r3, pc}
  4035a4:	00402239 	.word	0x00402239

004035a8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
  4035a8:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
  4035aa:	4b01      	ldr	r3, [pc, #4]	; (4035b0 <nm_read_reg+0x8>)
  4035ac:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
  4035ae:	bd08      	pop	{r3, pc}
  4035b0:	00403dfd 	.word	0x00403dfd

004035b4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  4035b4:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
  4035b6:	4b01      	ldr	r3, [pc, #4]	; (4035bc <nm_read_reg_with_ret+0x8>)
  4035b8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
  4035ba:	bd08      	pop	{r3, pc}
  4035bc:	00403e15 	.word	0x00403e15

004035c0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
  4035c0:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
  4035c2:	4b01      	ldr	r3, [pc, #4]	; (4035c8 <nm_write_reg+0x8>)
  4035c4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
  4035c6:	bd08      	pop	{r3, pc}
  4035c8:	00403e2d 	.word	0x00403e2d

004035cc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  4035cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035d0:	4607      	mov	r7, r0
  4035d2:	4689      	mov	r9, r1
  4035d4:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  4035d6:	4b12      	ldr	r3, [pc, #72]	; (403620 <nm_read_block+0x54>)
  4035d8:	f8b3 8000 	ldrh.w	r8, [r3]
  4035dc:	f1a8 0808 	sub.w	r8, r8, #8
  4035e0:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  4035e4:	4542      	cmp	r2, r8
  4035e6:	d919      	bls.n	40361c <nm_read_block+0x50>
  4035e8:	4644      	mov	r4, r8
  4035ea:	2600      	movs	r6, #0
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  4035ec:	f8df a034 	ldr.w	sl, [pc, #52]	; 403624 <nm_read_block+0x58>
  4035f0:	4642      	mov	r2, r8
  4035f2:	eb09 0106 	add.w	r1, r9, r6
  4035f6:	4638      	mov	r0, r7
  4035f8:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  4035fa:	4603      	mov	r3, r0
  4035fc:	b958      	cbnz	r0, 403616 <nm_read_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  4035fe:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  403600:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  403602:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403604:	42a5      	cmp	r5, r4
  403606:	d8f3      	bhi.n	4035f0 <nm_read_block+0x24>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
  403608:	b2aa      	uxth	r2, r5
  40360a:	eb09 0106 	add.w	r1, r9, r6
  40360e:	4638      	mov	r0, r7
  403610:	4b04      	ldr	r3, [pc, #16]	; (403624 <nm_read_block+0x58>)
  403612:	4798      	blx	r3
  403614:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403616:	4618      	mov	r0, r3
  403618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  40361c:	2600      	movs	r6, #0
  40361e:	e7f3      	b.n	403608 <nm_read_block+0x3c>
  403620:	20400010 	.word	0x20400010
  403624:	00403f59 	.word	0x00403f59

00403628 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
  403628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40362c:	4607      	mov	r7, r0
  40362e:	4689      	mov	r9, r1
  403630:	4615      	mov	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
  403632:	4b12      	ldr	r3, [pc, #72]	; (40367c <nm_write_block+0x54>)
  403634:	f8b3 8000 	ldrh.w	r8, [r3]
  403638:	f1a8 0808 	sub.w	r8, r8, #8
  40363c:	fa1f f888 	uxth.w	r8, r8
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
  403640:	4542      	cmp	r2, r8
  403642:	d919      	bls.n	403678 <nm_write_block+0x50>
  403644:	4644      	mov	r4, r8
  403646:	2600      	movs	r6, #0
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403648:	f8df a034 	ldr.w	sl, [pc, #52]	; 403680 <nm_write_block+0x58>
  40364c:	4642      	mov	r2, r8
  40364e:	eb09 0106 	add.w	r1, r9, r6
  403652:	4638      	mov	r0, r7
  403654:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
  403656:	4603      	mov	r3, r0
  403658:	b958      	cbnz	r0, 403672 <nm_write_block+0x4a>
			u32Sz -= u16MaxTrxSz;
  40365a:	1b2d      	subs	r5, r5, r4
			off += u16MaxTrxSz;
  40365c:	4426      	add	r6, r4
			u32Addr += u16MaxTrxSz;
  40365e:	4427      	add	r7, r4
		if(u32Sz <= u16MaxTrxSz)
  403660:	42a5      	cmp	r5, r4
  403662:	d8f3      	bhi.n	40364c <nm_write_block+0x24>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
  403664:	b2aa      	uxth	r2, r5
  403666:	eb09 0106 	add.w	r1, r9, r6
  40366a:	4638      	mov	r0, r7
  40366c:	4b04      	ldr	r3, [pc, #16]	; (403680 <nm_write_block+0x58>)
  40366e:	4798      	blx	r3
  403670:	4603      	mov	r3, r0
		}
	}

	return s8Ret;
}
  403672:	4618      	mov	r0, r3
  403674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32 off = 0;
  403678:	2600      	movs	r6, #0
  40367a:	e7f3      	b.n	403664 <nm_write_block+0x3c>
  40367c:	20400010 	.word	0x20400010
  403680:	00404021 	.word	0x00404021

00403684 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
  403684:	b530      	push	{r4, r5, lr}
  403686:	b083      	sub	sp, #12
  403688:	4604      	mov	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
  40368a:	a902      	add	r1, sp, #8
  40368c:	2300      	movs	r3, #0
  40368e:	f841 3d04 	str.w	r3, [r1, #-4]!
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
  403692:	4824      	ldr	r0, [pc, #144]	; (403724 <nm_get_firmware_info+0xa0>)
  403694:	4b24      	ldr	r3, [pc, #144]	; (403728 <nm_get_firmware_info+0xa4>)
  403696:	4798      	blx	r3
  403698:	4605      	mov	r5, r0
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
  40369a:	9a01      	ldr	r2, [sp, #4]
  40369c:	4b23      	ldr	r3, [pc, #140]	; (40372c <nm_get_firmware_info+0xa8>)
  40369e:	429a      	cmp	r2, r3
  4036a0:	d039      	beq.n	403716 <nm_get_firmware_info+0x92>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
  4036a2:	9b01      	ldr	r3, [sp, #4]
  4036a4:	0c1a      	lsrs	r2, r3, #16
  4036a6:	b291      	uxth	r1, r2
  4036a8:	0a08      	lsrs	r0, r1, #8
  4036aa:	71e0      	strb	r0, [r4, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
  4036ac:	f3c1 1103 	ubfx	r1, r1, #4, #4
  4036b0:	7221      	strb	r1, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
  4036b2:	f002 020f 	and.w	r2, r2, #15
  4036b6:	7262      	strb	r2, [r4, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
  4036b8:	b29a      	uxth	r2, r3
  4036ba:	0a11      	lsrs	r1, r2, #8
  4036bc:	7121      	strb	r1, [r4, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
  4036be:	f3c2 1203 	ubfx	r2, r2, #4, #4
  4036c2:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
  4036c4:	f003 030f 	and.w	r3, r3, #15
  4036c8:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
  4036ca:	4b19      	ldr	r3, [pc, #100]	; (403730 <nm_get_firmware_info+0xac>)
  4036cc:	4798      	blx	r3
  4036ce:	6020      	str	r0, [r4, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
  4036d0:	7922      	ldrb	r2, [r4, #4]
  4036d2:	79a3      	ldrb	r3, [r4, #6]
  4036d4:	f003 030f 	and.w	r3, r3, #15
  4036d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4036dc:	7962      	ldrb	r2, [r4, #5]
  4036de:	0112      	lsls	r2, r2, #4
  4036e0:	b2d2      	uxtb	r2, r2
  4036e2:	4313      	orrs	r3, r2
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
  4036e4:	79e1      	ldrb	r1, [r4, #7]
  4036e6:	7a62      	ldrb	r2, [r4, #9]
  4036e8:	f002 020f 	and.w	r2, r2, #15
  4036ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  4036f0:	7a21      	ldrb	r1, [r4, #8]
  4036f2:	0109      	lsls	r1, r1, #4
  4036f4:	b2c9      	uxtb	r1, r1
	if(curr_drv_ver <  min_req_drv_ver) {
  4036f6:	430a      	orrs	r2, r1
  4036f8:	f241 3130 	movw	r1, #4912	; 0x1330
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
  4036fc:	428a      	cmp	r2, r1
  4036fe:	bf88      	it	hi
  403700:	f06f 050c 	mvnhi.w	r5, #12
	}
	if(curr_drv_ver >  curr_firm_ver) {
  403704:	f241 322f 	movw	r2, #4911	; 0x132f
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
  403708:	4293      	cmp	r3, r2
	}
	return ret;
}
  40370a:	bf8c      	ite	hi
  40370c:	4628      	movhi	r0, r5
  40370e:	f06f 000c 	mvnls.w	r0, #12
  403712:	b003      	add	sp, #12
  403714:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
  403716:	a901      	add	r1, sp, #4
  403718:	f241 0048 	movw	r0, #4168	; 0x1048
  40371c:	4b02      	ldr	r3, [pc, #8]	; (403728 <nm_get_firmware_info+0xa4>)
  40371e:	4798      	blx	r3
  403720:	4605      	mov	r5, r0
  403722:	e7be      	b.n	4036a2 <nm_get_firmware_info+0x1e>
  403724:	000207ac 	.word	0x000207ac
  403728:	004035b5 	.word	0x004035b5
  40372c:	d75dc1c3 	.word	0xd75dc1c3
  403730:	004032b9 	.word	0x004032b9

00403734 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
  403734:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
  403736:	2800      	cmp	r0, #0
  403738:	d037      	beq.n	4037aa <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
  40373a:	7804      	ldrb	r4, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
  40373c:	1e63      	subs	r3, r4, #1
  40373e:	b2db      	uxtb	r3, r3
			u8Mode = M2M_WIFI_MODE_NORMAL;
  403740:	2b04      	cmp	r3, #4
  403742:	bf28      	it	cs
  403744:	2401      	movcs	r4, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
  403746:	2000      	movs	r0, #0
  403748:	4b1e      	ldr	r3, [pc, #120]	; (4037c4 <nm_drv_init+0x90>)
  40374a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40374c:	4605      	mov	r5, r0
  40374e:	2800      	cmp	r0, #0
  403750:	d12d      	bne.n	4037ae <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
  403752:	481d      	ldr	r0, [pc, #116]	; (4037c8 <nm_drv_init+0x94>)
  403754:	4d1d      	ldr	r5, [pc, #116]	; (4037cc <nm_drv_init+0x98>)
  403756:	47a8      	blx	r5
  403758:	4b1d      	ldr	r3, [pc, #116]	; (4037d0 <nm_drv_init+0x9c>)
  40375a:	4798      	blx	r3
  40375c:	4601      	mov	r1, r0
  40375e:	481d      	ldr	r0, [pc, #116]	; (4037d4 <nm_drv_init+0xa0>)
  403760:	47a8      	blx	r5
  403762:	481d      	ldr	r0, [pc, #116]	; (4037d8 <nm_drv_init+0xa4>)
  403764:	47a8      	blx	r5
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
  403766:	4b1d      	ldr	r3, [pc, #116]	; (4037dc <nm_drv_init+0xa8>)
  403768:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
  40376a:	4620      	mov	r0, r4
  40376c:	4b1c      	ldr	r3, [pc, #112]	; (4037e0 <nm_drv_init+0xac>)
  40376e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403770:	4605      	mov	r5, r0
  403772:	b9b0      	cbnz	r0, 4037a2 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
  403774:	4620      	mov	r0, r4
  403776:	4b1b      	ldr	r3, [pc, #108]	; (4037e4 <nm_drv_init+0xb0>)
  403778:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40377a:	4605      	mov	r5, r0
  40377c:	b988      	cbnz	r0, 4037a2 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
  40377e:	3c02      	subs	r4, #2
  403780:	b2e4      	uxtb	r4, r4
  403782:	2c01      	cmp	r4, #1
  403784:	d90f      	bls.n	4037a6 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
  403786:	4b18      	ldr	r3, [pc, #96]	; (4037e8 <nm_drv_init+0xb4>)
  403788:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40378a:	4605      	mov	r5, r0
  40378c:	b158      	cbz	r0, 4037a6 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
  40378e:	f44f 72ae 	mov.w	r2, #348	; 0x15c
  403792:	4916      	ldr	r1, [pc, #88]	; (4037ec <nm_drv_init+0xb8>)
  403794:	4816      	ldr	r0, [pc, #88]	; (4037f0 <nm_drv_init+0xbc>)
  403796:	4c0d      	ldr	r4, [pc, #52]	; (4037cc <nm_drv_init+0x98>)
  403798:	47a0      	blx	r4
  40379a:	4816      	ldr	r0, [pc, #88]	; (4037f4 <nm_drv_init+0xc0>)
  40379c:	47a0      	blx	r4
  40379e:	480e      	ldr	r0, [pc, #56]	; (4037d8 <nm_drv_init+0xa4>)
  4037a0:	47a0      	blx	r4
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
  4037a2:	4b15      	ldr	r3, [pc, #84]	; (4037f8 <nm_drv_init+0xc4>)
  4037a4:	4798      	blx	r3
ERR1:
	return ret;
}
  4037a6:	4628      	mov	r0, r5
  4037a8:	bd38      	pop	{r3, r4, r5, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
  4037aa:	2401      	movs	r4, #1
  4037ac:	e7cb      	b.n	403746 <nm_drv_init+0x12>
		M2M_ERR("[nmi start]: fail init bus\n");
  4037ae:	f44f 7292 	mov.w	r2, #292	; 0x124
  4037b2:	490e      	ldr	r1, [pc, #56]	; (4037ec <nm_drv_init+0xb8>)
  4037b4:	480e      	ldr	r0, [pc, #56]	; (4037f0 <nm_drv_init+0xbc>)
  4037b6:	4c05      	ldr	r4, [pc, #20]	; (4037cc <nm_drv_init+0x98>)
  4037b8:	47a0      	blx	r4
  4037ba:	4810      	ldr	r0, [pc, #64]	; (4037fc <nm_drv_init+0xc8>)
  4037bc:	47a0      	blx	r4
  4037be:	4806      	ldr	r0, [pc, #24]	; (4037d8 <nm_drv_init+0xa4>)
  4037c0:	47a0      	blx	r4
		goto ERR1;
  4037c2:	e7f0      	b.n	4037a6 <nm_drv_init+0x72>
  4037c4:	00403591 	.word	0x00403591
  4037c8:	0040c770 	.word	0x0040c770
  4037cc:	00406085 	.word	0x00406085
  4037d0:	004032b9 	.word	0x004032b9
  4037d4:	0040ca68 	.word	0x0040ca68
  4037d8:	0040c4c8 	.word	0x0040c4c8
  4037dc:	00403e45 	.word	0x00403e45
  4037e0:	0040336d 	.word	0x0040336d
  4037e4:	00403449 	.word	0x00403449
  4037e8:	00403251 	.word	0x00403251
  4037ec:	0040c9b0 	.word	0x0040c9b0
  4037f0:	0040c49c 	.word	0x0040c49c
  4037f4:	0040ca2c 	.word	0x0040ca2c
  4037f8:	0040359d 	.word	0x0040359d
  4037fc:	0040ca4c 	.word	0x0040ca4c

00403800 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
  403800:	b538      	push	{r3, r4, r5, lr}
	sint8 ret;

	ret = chip_deinit();
  403802:	4b19      	ldr	r3, [pc, #100]	; (403868 <nm_drv_deinit+0x68>)
  403804:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403806:	b958      	cbnz	r0, 403820 <nm_drv_deinit+0x20>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
  403808:	2000      	movs	r0, #0
  40380a:	4b18      	ldr	r3, [pc, #96]	; (40386c <nm_drv_deinit+0x6c>)
  40380c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  40380e:	4604      	mov	r4, r0
  403810:	b998      	cbnz	r0, 40383a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
  403812:	4b17      	ldr	r3, [pc, #92]	; (403870 <nm_drv_deinit+0x70>)
  403814:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  403816:	4604      	mov	r4, r0
  403818:	b9d0      	cbnz	r0, 403850 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
  40381a:	4b16      	ldr	r3, [pc, #88]	; (403874 <nm_drv_deinit+0x74>)
  40381c:	4798      	blx	r3
  40381e:	e00a      	b.n	403836 <nm_drv_deinit+0x36>
  403820:	4604      	mov	r4, r0
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
  403822:	f44f 72ba 	mov.w	r2, #372	; 0x174
  403826:	4914      	ldr	r1, [pc, #80]	; (403878 <nm_drv_deinit+0x78>)
  403828:	4814      	ldr	r0, [pc, #80]	; (40387c <nm_drv_deinit+0x7c>)
  40382a:	4d15      	ldr	r5, [pc, #84]	; (403880 <nm_drv_deinit+0x80>)
  40382c:	47a8      	blx	r5
  40382e:	4815      	ldr	r0, [pc, #84]	; (403884 <nm_drv_deinit+0x84>)
  403830:	47a8      	blx	r5
  403832:	4815      	ldr	r0, [pc, #84]	; (403888 <nm_drv_deinit+0x88>)
  403834:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
  403836:	4620      	mov	r0, r4
  403838:	bd38      	pop	{r3, r4, r5, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
  40383a:	f240 127b 	movw	r2, #379	; 0x17b
  40383e:	490e      	ldr	r1, [pc, #56]	; (403878 <nm_drv_deinit+0x78>)
  403840:	480e      	ldr	r0, [pc, #56]	; (40387c <nm_drv_deinit+0x7c>)
  403842:	4d0f      	ldr	r5, [pc, #60]	; (403880 <nm_drv_deinit+0x80>)
  403844:	47a8      	blx	r5
  403846:	4811      	ldr	r0, [pc, #68]	; (40388c <nm_drv_deinit+0x8c>)
  403848:	47a8      	blx	r5
  40384a:	480f      	ldr	r0, [pc, #60]	; (403888 <nm_drv_deinit+0x88>)
  40384c:	47a8      	blx	r5
		goto ERR1;
  40384e:	e7f2      	b.n	403836 <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
  403850:	f240 1281 	movw	r2, #385	; 0x181
  403854:	4908      	ldr	r1, [pc, #32]	; (403878 <nm_drv_deinit+0x78>)
  403856:	4809      	ldr	r0, [pc, #36]	; (40387c <nm_drv_deinit+0x7c>)
  403858:	4d09      	ldr	r5, [pc, #36]	; (403880 <nm_drv_deinit+0x80>)
  40385a:	47a8      	blx	r5
  40385c:	480c      	ldr	r0, [pc, #48]	; (403890 <nm_drv_deinit+0x90>)
  40385e:	47a8      	blx	r5
  403860:	4809      	ldr	r0, [pc, #36]	; (403888 <nm_drv_deinit+0x88>)
  403862:	47a8      	blx	r5
		goto ERR1;
  403864:	e7e7      	b.n	403836 <nm_drv_deinit+0x36>
  403866:	bf00      	nop
  403868:	004034c9 	.word	0x004034c9
  40386c:	004048a5 	.word	0x004048a5
  403870:	0040359d 	.word	0x0040359d
  403874:	00403df1 	.word	0x00403df1
  403878:	0040c9bc 	.word	0x0040c9bc
  40387c:	0040c49c 	.word	0x0040c49c
  403880:	00406085 	.word	0x00406085
  403884:	0040c9cc 	.word	0x0040c9cc
  403888:	0040c4c8 	.word	0x0040c4c8
  40388c:	0040c9ec 	.word	0x0040c9ec
  403890:	0040ca10 	.word	0x0040ca10

00403894 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
  403894:	b500      	push	{lr}
  403896:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
  403898:	2300      	movs	r3, #0
  40389a:	9301      	str	r3, [sp, #4]
	spi.pu8OutBuf = b;
  40389c:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
  40389e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  4038a2:	a901      	add	r1, sp, #4
  4038a4:	2003      	movs	r0, #3
  4038a6:	4b02      	ldr	r3, [pc, #8]	; (4038b0 <nmi_spi_read+0x1c>)
  4038a8:	4798      	blx	r3
}
  4038aa:	b005      	add	sp, #20
  4038ac:	f85d fb04 	ldr.w	pc, [sp], #4
  4038b0:	00402165 	.word	0x00402165

004038b4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
  4038b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038b8:	b082      	sub	sp, #8
  4038ba:	4605      	mov	r5, r0

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
  4038bc:	f100 033b 	add.w	r3, r0, #59	; 0x3b
  4038c0:	b2db      	uxtb	r3, r3
  4038c2:	2b01      	cmp	r3, #1
  4038c4:	d927      	bls.n	403916 <spi_cmd_rsp+0x62>
  4038c6:	28cf      	cmp	r0, #207	; 0xcf
  4038c8:	d025      	beq.n	403916 <spi_cmd_rsp+0x62>
{
  4038ca:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4038cc:	f04f 0801 	mov.w	r8, #1
  4038d0:	4f23      	ldr	r7, [pc, #140]	; (403960 <spi_cmd_rsp+0xac>)
  4038d2:	4641      	mov	r1, r8
  4038d4:	f10d 0007 	add.w	r0, sp, #7
  4038d8:	47b8      	blx	r7
  4038da:	4606      	mov	r6, r0
  4038dc:	bb20      	cbnz	r0, 403928 <spi_cmd_rsp+0x74>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
  4038de:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4038e2:	42ab      	cmp	r3, r5
  4038e4:	d02c      	beq.n	403940 <spi_cmd_rsp+0x8c>
  4038e6:	1e63      	subs	r3, r4, #1
  4038e8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  4038ec:	d1f1      	bne.n	4038d2 <spi_cmd_rsp+0x1e>
  4038ee:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4038f0:	2701      	movs	r7, #1
  4038f2:	4d1b      	ldr	r5, [pc, #108]	; (403960 <spi_cmd_rsp+0xac>)
  4038f4:	4639      	mov	r1, r7
  4038f6:	f10d 0007 	add.w	r0, sp, #7
  4038fa:	47a8      	blx	r5
  4038fc:	bb10      	cbnz	r0, 403944 <spi_cmd_rsp+0x90>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
  4038fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
  403902:	b353      	cbz	r3, 40395a <spi_cmd_rsp+0xa6>
  403904:	1e63      	subs	r3, r4, #1
  403906:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
  40390a:	d1f3      	bne.n	4038f4 <spi_cmd_rsp+0x40>
	sint8 result = N_OK;
  40390c:	2601      	movs	r6, #1

_fail_:

	return result;
}
  40390e:	4630      	mov	r0, r6
  403910:	b002      	add	sp, #8
  403912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403916:	2101      	movs	r1, #1
  403918:	f10d 0007 	add.w	r0, sp, #7
  40391c:	4b10      	ldr	r3, [pc, #64]	; (403960 <spi_cmd_rsp+0xac>)
  40391e:	4798      	blx	r3
  403920:	2800      	cmp	r0, #0
  403922:	d0d2      	beq.n	4038ca <spi_cmd_rsp+0x16>
			result = N_FAIL;
  403924:	2600      	movs	r6, #0
  403926:	e7f2      	b.n	40390e <spi_cmd_rsp+0x5a>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403928:	f240 1227 	movw	r2, #295	; 0x127
  40392c:	490d      	ldr	r1, [pc, #52]	; (403964 <spi_cmd_rsp+0xb0>)
  40392e:	480e      	ldr	r0, [pc, #56]	; (403968 <spi_cmd_rsp+0xb4>)
  403930:	4c0e      	ldr	r4, [pc, #56]	; (40396c <spi_cmd_rsp+0xb8>)
  403932:	47a0      	blx	r4
  403934:	480e      	ldr	r0, [pc, #56]	; (403970 <spi_cmd_rsp+0xbc>)
  403936:	47a0      	blx	r4
  403938:	480e      	ldr	r0, [pc, #56]	; (403974 <spi_cmd_rsp+0xc0>)
  40393a:	47a0      	blx	r4
			result = N_FAIL;
  40393c:	2600      	movs	r6, #0
			goto _fail_;
  40393e:	e7e6      	b.n	40390e <spi_cmd_rsp+0x5a>
  403940:	240b      	movs	r4, #11
  403942:	e7d5      	b.n	4038f0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
  403944:	f240 1235 	movw	r2, #309	; 0x135
  403948:	4906      	ldr	r1, [pc, #24]	; (403964 <spi_cmd_rsp+0xb0>)
  40394a:	4807      	ldr	r0, [pc, #28]	; (403968 <spi_cmd_rsp+0xb4>)
  40394c:	4c07      	ldr	r4, [pc, #28]	; (40396c <spi_cmd_rsp+0xb8>)
  40394e:	47a0      	blx	r4
  403950:	4807      	ldr	r0, [pc, #28]	; (403970 <spi_cmd_rsp+0xbc>)
  403952:	47a0      	blx	r4
  403954:	4807      	ldr	r0, [pc, #28]	; (403974 <spi_cmd_rsp+0xc0>)
  403956:	47a0      	blx	r4
			goto _fail_;
  403958:	e7d9      	b.n	40390e <spi_cmd_rsp+0x5a>
	sint8 result = N_OK;
  40395a:	2601      	movs	r6, #1
  40395c:	e7d7      	b.n	40390e <spi_cmd_rsp+0x5a>
  40395e:	bf00      	nop
  403960:	00403895 	.word	0x00403895
  403964:	0040ca80 	.word	0x0040ca80
  403968:	0040c49c 	.word	0x0040c49c
  40396c:	00406085 	.word	0x00406085
  403970:	0040cec0 	.word	0x0040cec0
  403974:	0040c4c8 	.word	0x0040c4c8

00403978 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
  403978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40397c:	b085      	sub	sp, #20
  40397e:	4683      	mov	fp, r0
  403980:	468a      	mov	sl, r1
  403982:	4617      	mov	r7, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
  403984:	f04f 0900 	mov.w	r9, #0
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  403988:	4d37      	ldr	r5, [pc, #220]	; (403a68 <spi_data_read+0xf0>)
  40398a:	e027      	b.n	4039dc <spi_data_read+0x64>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
  40398c:	f240 1257 	movw	r2, #343	; 0x157
  403990:	4936      	ldr	r1, [pc, #216]	; (403a6c <spi_data_read+0xf4>)
  403992:	4837      	ldr	r0, [pc, #220]	; (403a70 <spi_data_read+0xf8>)
  403994:	4c37      	ldr	r4, [pc, #220]	; (403a74 <spi_data_read+0xfc>)
  403996:	47a0      	blx	r4
  403998:	4837      	ldr	r0, [pc, #220]	; (403a78 <spi_data_read+0x100>)
  40399a:	47a0      	blx	r4
  40399c:	4837      	ldr	r0, [pc, #220]	; (403a7c <spi_data_read+0x104>)
  40399e:	47a0      	blx	r4
  4039a0:	2300      	movs	r3, #0
  4039a2:	9301      	str	r3, [sp, #4]
		sz -= nbytes;

	} while (sz);

	return result;
}
  4039a4:	9801      	ldr	r0, [sp, #4]
  4039a6:	b005      	add	sp, #20
  4039a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
  4039ac:	2c00      	cmp	r4, #0
  4039ae:	dd2e      	ble.n	403a0e <spi_data_read+0x96>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
  4039b0:	4641      	mov	r1, r8
  4039b2:	eb0b 0009 	add.w	r0, fp, r9
  4039b6:	47a8      	blx	r5
  4039b8:	4604      	mov	r4, r0
  4039ba:	2800      	cmp	r0, #0
  4039bc:	d134      	bne.n	403a28 <spi_data_read+0xb0>
		if(!clockless)
  4039be:	b91f      	cbnz	r7, 4039c8 <spi_data_read+0x50>
			if (!gu8Crc_off) {
  4039c0:	4b2f      	ldr	r3, [pc, #188]	; (403a80 <spi_data_read+0x108>)
  4039c2:	781b      	ldrb	r3, [r3, #0]
  4039c4:	2b00      	cmp	r3, #0
  4039c6:	d03a      	beq.n	403a3e <spi_data_read+0xc6>
		ix += nbytes;
  4039c8:	44c1      	add	r9, r8
  4039ca:	fa0f f989 	sxth.w	r9, r9
		sz -= nbytes;
  4039ce:	ebaa 0a08 	sub.w	sl, sl, r8
  4039d2:	fa1f fa8a 	uxth.w	sl, sl
	} while (sz);
  4039d6:	f1ba 0f00 	cmp.w	sl, #0
  4039da:	d041      	beq.n	403a60 <spi_data_read+0xe8>
  4039dc:	46d0      	mov	r8, sl
  4039de:	f5ba 5f00 	cmp.w	sl, #8192	; 0x2000
  4039e2:	bf28      	it	cs
  4039e4:	f44f 5800 	movcs.w	r8, #8192	; 0x2000
		retry = 10;
  4039e8:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
  4039ea:	2601      	movs	r6, #1
  4039ec:	4631      	mov	r1, r6
  4039ee:	f10d 000b 	add.w	r0, sp, #11
  4039f2:	47a8      	blx	r5
  4039f4:	9001      	str	r0, [sp, #4]
  4039f6:	2800      	cmp	r0, #0
  4039f8:	d1c8      	bne.n	40398c <spi_data_read+0x14>
			if (((rsp >> 4) & 0xf) == 0xf)
  4039fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
  4039fe:	091b      	lsrs	r3, r3, #4
  403a00:	2b0f      	cmp	r3, #15
  403a02:	d0d3      	beq.n	4039ac <spi_data_read+0x34>
  403a04:	3c01      	subs	r4, #1
  403a06:	b224      	sxth	r4, r4
		} while (retry--);
  403a08:	f1b4 3fff 	cmp.w	r4, #4294967295
  403a0c:	d1ee      	bne.n	4039ec <spi_data_read+0x74>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
  403a0e:	f240 1263 	movw	r2, #355	; 0x163
  403a12:	4916      	ldr	r1, [pc, #88]	; (403a6c <spi_data_read+0xf4>)
  403a14:	4816      	ldr	r0, [pc, #88]	; (403a70 <spi_data_read+0xf8>)
  403a16:	4c17      	ldr	r4, [pc, #92]	; (403a74 <spi_data_read+0xfc>)
  403a18:	47a0      	blx	r4
  403a1a:	f89d 100b 	ldrb.w	r1, [sp, #11]
  403a1e:	4819      	ldr	r0, [pc, #100]	; (403a84 <spi_data_read+0x10c>)
  403a20:	47a0      	blx	r4
  403a22:	4816      	ldr	r0, [pc, #88]	; (403a7c <spi_data_read+0x104>)
  403a24:	47a0      	blx	r4
			break;
  403a26:	e7bd      	b.n	4039a4 <spi_data_read+0x2c>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
  403a28:	f44f 72b6 	mov.w	r2, #364	; 0x16c
  403a2c:	490f      	ldr	r1, [pc, #60]	; (403a6c <spi_data_read+0xf4>)
  403a2e:	4810      	ldr	r0, [pc, #64]	; (403a70 <spi_data_read+0xf8>)
  403a30:	4c10      	ldr	r4, [pc, #64]	; (403a74 <spi_data_read+0xfc>)
  403a32:	47a0      	blx	r4
  403a34:	4814      	ldr	r0, [pc, #80]	; (403a88 <spi_data_read+0x110>)
  403a36:	47a0      	blx	r4
  403a38:	4810      	ldr	r0, [pc, #64]	; (403a7c <spi_data_read+0x104>)
  403a3a:	47a0      	blx	r4
			break;
  403a3c:	e7b2      	b.n	4039a4 <spi_data_read+0x2c>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
  403a3e:	2102      	movs	r1, #2
  403a40:	a803      	add	r0, sp, #12
  403a42:	47a8      	blx	r5
  403a44:	2800      	cmp	r0, #0
  403a46:	d0bf      	beq.n	4039c8 <spi_data_read+0x50>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
  403a48:	f240 1277 	movw	r2, #375	; 0x177
  403a4c:	4907      	ldr	r1, [pc, #28]	; (403a6c <spi_data_read+0xf4>)
  403a4e:	4808      	ldr	r0, [pc, #32]	; (403a70 <spi_data_read+0xf8>)
  403a50:	4d08      	ldr	r5, [pc, #32]	; (403a74 <spi_data_read+0xfc>)
  403a52:	47a8      	blx	r5
  403a54:	480d      	ldr	r0, [pc, #52]	; (403a8c <spi_data_read+0x114>)
  403a56:	47a8      	blx	r5
  403a58:	4808      	ldr	r0, [pc, #32]	; (403a7c <spi_data_read+0x104>)
  403a5a:	47a8      	blx	r5
					result = N_FAIL;
  403a5c:	9401      	str	r4, [sp, #4]
					break;
  403a5e:	e7a1      	b.n	4039a4 <spi_data_read+0x2c>
  403a60:	2301      	movs	r3, #1
  403a62:	9301      	str	r3, [sp, #4]
  403a64:	e79e      	b.n	4039a4 <spi_data_read+0x2c>
  403a66:	bf00      	nop
  403a68:	00403895 	.word	0x00403895
  403a6c:	0040ca8c 	.word	0x0040ca8c
  403a70:	0040c49c 	.word	0x0040c49c
  403a74:	00406085 	.word	0x00406085
  403a78:	0040cef4 	.word	0x0040cef4
  403a7c:	0040c4c8 	.word	0x0040c4c8
  403a80:	2040c358 	.word	0x2040c358
  403a84:	0040cf28 	.word	0x0040cf28
  403a88:	0040cf58 	.word	0x0040cf58
  403a8c:	0040cf8c 	.word	0x0040cf8c

00403a90 <nmi_spi_write>:
{
  403a90:	b500      	push	{lr}
  403a92:	b085      	sub	sp, #20
	spi.pu8InBuf = b;
  403a94:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
  403a96:	2300      	movs	r3, #0
  403a98:	9302      	str	r3, [sp, #8]
	spi.u16Sz = sz;
  403a9a:	f8ad 100c 	strh.w	r1, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
  403a9e:	a901      	add	r1, sp, #4
  403aa0:	2003      	movs	r0, #3
  403aa2:	4b02      	ldr	r3, [pc, #8]	; (403aac <nmi_spi_write+0x1c>)
  403aa4:	4798      	blx	r3
}
  403aa6:	b005      	add	sp, #20
  403aa8:	f85d fb04 	ldr.w	pc, [sp], #4
  403aac:	00402165 	.word	0x00402165

00403ab0 <spi_cmd>:
{
  403ab0:	b570      	push	{r4, r5, r6, lr}
  403ab2:	b084      	sub	sp, #16
  403ab4:	f89d 4020 	ldrb.w	r4, [sp, #32]
	bc[0] = cmd;
  403ab8:	f88d 0004 	strb.w	r0, [sp, #4]
	switch (cmd) {
  403abc:	38c1      	subs	r0, #193	; 0xc1
  403abe:	280e      	cmp	r0, #14
  403ac0:	f200 80a2 	bhi.w	403c08 <spi_cmd+0x158>
  403ac4:	e8df f000 	tbb	[pc, r0]
  403ac8:	19664545 	.word	0x19664545
  403acc:	5454332a 	.word	0x5454332a
  403ad0:	a0a0087f 	.word	0xa0a0087f
  403ad4:	a0a0      	.short	0xa0a0
  403ad6:	3c          	.byte	0x3c
  403ad7:	00          	.byte	0x00
		bc[1] = (uint8)(adr >> 16);
  403ad8:	0c0b      	lsrs	r3, r1, #16
  403ada:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403ade:	0a0b      	lsrs	r3, r1, #8
  403ae0:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)adr;
  403ae4:	f88d 1007 	strb.w	r1, [sp, #7]
		len = 5;
  403ae8:	2105      	movs	r1, #5
		if (!gu8Crc_off)
  403aea:	4b55      	ldr	r3, [pc, #340]	; (403c40 <spi_cmd+0x190>)
  403aec:	781b      	ldrb	r3, [r3, #0]
  403aee:	2b00      	cmp	r3, #0
  403af0:	f000 808c 	beq.w	403c0c <spi_cmd+0x15c>
			len-=1;
  403af4:	3901      	subs	r1, #1
  403af6:	b2c9      	uxtb	r1, r1
  403af8:	e09a      	b.n	403c30 <spi_cmd+0x180>
		bc[1] = (uint8)(adr >> 8);
  403afa:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403afe:	b944      	cbnz	r4, 403b12 <spi_cmd+0x62>
		bc[1] = (uint8)(adr >> 8);
  403b00:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)adr;
  403b04:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = 0x00;
  403b08:	2300      	movs	r3, #0
  403b0a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403b0e:	2105      	movs	r1, #5
		break;
  403b10:	e7eb      	b.n	403aea <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403b16:	f88d 3005 	strb.w	r3, [sp, #5]
  403b1a:	e7f3      	b.n	403b04 <spi_cmd+0x54>
		bc[1] = 0x00;
  403b1c:	2300      	movs	r3, #0
  403b1e:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403b22:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403b26:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403b2a:	2105      	movs	r1, #5
		break;
  403b2c:	e7dd      	b.n	403aea <spi_cmd+0x3a>
		bc[1] = 0x00;
  403b2e:	2300      	movs	r3, #0
  403b30:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0x00;
  403b34:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0x00;
  403b38:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403b3c:	2105      	movs	r1, #5
		break;
  403b3e:	e7d4      	b.n	403aea <spi_cmd+0x3a>
		bc[1] = 0xff;
  403b40:	23ff      	movs	r3, #255	; 0xff
  403b42:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = 0xff;
  403b46:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = 0xff;
  403b4a:	f88d 3007 	strb.w	r3, [sp, #7]
		len = 5;
  403b4e:	2105      	movs	r1, #5
		break;
  403b50:	e7cb      	b.n	403aea <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403b52:	0c0a      	lsrs	r2, r1, #16
  403b54:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403b58:	0a0a      	lsrs	r2, r1, #8
  403b5a:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403b5e:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 8);
  403b62:	0a1a      	lsrs	r2, r3, #8
  403b64:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz);
  403b68:	f88d 3009 	strb.w	r3, [sp, #9]
		len = 7;
  403b6c:	2107      	movs	r1, #7
		break;
  403b6e:	e7bc      	b.n	403aea <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 16);
  403b70:	0c0a      	lsrs	r2, r1, #16
  403b72:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403b76:	0a0a      	lsrs	r2, r1, #8
  403b78:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)adr;
  403b7c:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(sz >> 16);
  403b80:	0c1a      	lsrs	r2, r3, #16
  403b82:	f88d 2008 	strb.w	r2, [sp, #8]
		bc[5] = (uint8)(sz >> 8);
  403b86:	0a1a      	lsrs	r2, r3, #8
  403b88:	f88d 2009 	strb.w	r2, [sp, #9]
		bc[6] = (uint8)(sz);
  403b8c:	f88d 300a 	strb.w	r3, [sp, #10]
		len = 8;
  403b90:	2108      	movs	r1, #8
		break;
  403b92:	e7aa      	b.n	403aea <spi_cmd+0x3a>
		bc[1] = (uint8)(adr >> 8);
  403b94:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
  403b98:	b984      	cbnz	r4, 403bbc <spi_cmd+0x10c>
		bc[1] = (uint8)(adr >> 8);
  403b9a:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr);
  403b9e:	f88d 1006 	strb.w	r1, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
  403ba2:	0e13      	lsrs	r3, r2, #24
  403ba4:	f88d 3007 	strb.w	r3, [sp, #7]
		bc[4] = (uint8)(u32data >> 16);
  403ba8:	0c13      	lsrs	r3, r2, #16
  403baa:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 8);
  403bae:	0a13      	lsrs	r3, r2, #8
  403bb0:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data);
  403bb4:	f88d 200a 	strb.w	r2, [sp, #10]
		len = 8;
  403bb8:	2108      	movs	r1, #8
		break;
  403bba:	e796      	b.n	403aea <spi_cmd+0x3a>
		if(clockless)  bc[1] |= (1 << 7);
  403bbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  403bc0:	f88d 3005 	strb.w	r3, [sp, #5]
  403bc4:	e7eb      	b.n	403b9e <spi_cmd+0xee>
		bc[1] = (uint8)(adr >> 16);
  403bc6:	0c0b      	lsrs	r3, r1, #16
  403bc8:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[2] = (uint8)(adr >> 8);
  403bcc:	0a0b      	lsrs	r3, r1, #8
  403bce:	f88d 3006 	strb.w	r3, [sp, #6]
		bc[3] = (uint8)(adr);
  403bd2:	f88d 1007 	strb.w	r1, [sp, #7]
		bc[4] = (uint8)(u32data >> 24);
  403bd6:	0e13      	lsrs	r3, r2, #24
  403bd8:	f88d 3008 	strb.w	r3, [sp, #8]
		bc[5] = (uint8)(u32data >> 16);
  403bdc:	0c13      	lsrs	r3, r2, #16
  403bde:	f88d 3009 	strb.w	r3, [sp, #9]
		bc[6] = (uint8)(u32data >> 8);
  403be2:	0a13      	lsrs	r3, r2, #8
  403be4:	f88d 300a 	strb.w	r3, [sp, #10]
		bc[7] = (uint8)(u32data);
  403be8:	f88d 200b 	strb.w	r2, [sp, #11]
		len = 9;
  403bec:	2109      	movs	r1, #9
		break;
  403bee:	e77c      	b.n	403aea <spi_cmd+0x3a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
  403bf0:	f44f 7284 	mov.w	r2, #264	; 0x108
  403bf4:	4913      	ldr	r1, [pc, #76]	; (403c44 <spi_cmd+0x194>)
  403bf6:	4814      	ldr	r0, [pc, #80]	; (403c48 <spi_cmd+0x198>)
  403bf8:	4c14      	ldr	r4, [pc, #80]	; (403c4c <spi_cmd+0x19c>)
  403bfa:	47a0      	blx	r4
  403bfc:	4814      	ldr	r0, [pc, #80]	; (403c50 <spi_cmd+0x1a0>)
  403bfe:	47a0      	blx	r4
  403c00:	4814      	ldr	r0, [pc, #80]	; (403c54 <spi_cmd+0x1a4>)
  403c02:	47a0      	blx	r4
			result = N_FAIL;
  403c04:	2000      	movs	r0, #0
  403c06:	e019      	b.n	403c3c <spi_cmd+0x18c>
	switch (cmd) {
  403c08:	2000      	movs	r0, #0
  403c0a:	e017      	b.n	403c3c <spi_cmd+0x18c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403c0c:	1e4e      	subs	r6, r1, #1
  403c0e:	ab01      	add	r3, sp, #4
  403c10:	199d      	adds	r5, r3, r6
  403c12:	207f      	movs	r0, #127	; 0x7f
  403c14:	461a      	mov	r2, r3
	return crc7_syndrome_table[(crc << 1) ^ data];
  403c16:	4c10      	ldr	r4, [pc, #64]	; (403c58 <spi_cmd+0x1a8>)
  403c18:	f812 3b01 	ldrb.w	r3, [r2], #1
  403c1c:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
  403c20:	5ce0      	ldrb	r0, [r4, r3]
	while (len--)
  403c22:	4295      	cmp	r5, r2
  403c24:	d1f8      	bne.n	403c18 <spi_cmd+0x168>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
  403c26:	ab04      	add	r3, sp, #16
  403c28:	441e      	add	r6, r3
  403c2a:	0043      	lsls	r3, r0, #1
  403c2c:	f806 3c0c 	strb.w	r3, [r6, #-12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
  403c30:	a801      	add	r0, sp, #4
  403c32:	4b0a      	ldr	r3, [pc, #40]	; (403c5c <spi_cmd+0x1ac>)
  403c34:	4798      	blx	r3
  403c36:	2800      	cmp	r0, #0
  403c38:	d1da      	bne.n	403bf0 <spi_cmd+0x140>
  403c3a:	2001      	movs	r0, #1
}
  403c3c:	b004      	add	sp, #16
  403c3e:	bd70      	pop	{r4, r5, r6, pc}
  403c40:	2040c358 	.word	0x2040c358
  403c44:	0040ca78 	.word	0x0040ca78
  403c48:	0040c49c 	.word	0x0040c49c
  403c4c:	00406085 	.word	0x00406085
  403c50:	0040ce94 	.word	0x0040ce94
  403c54:	0040c4c8 	.word	0x0040c4c8
  403c58:	0040caf4 	.word	0x0040caf4
  403c5c:	00403a91 	.word	0x00403a91

00403c60 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
  403c60:	b570      	push	{r4, r5, r6, lr}
  403c62:	b082      	sub	sp, #8
  403c64:	4604      	mov	r4, r0
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
  403c66:	2831      	cmp	r0, #49	; 0x31
  403c68:	bf35      	itete	cc
  403c6a:	2301      	movcc	r3, #1
  403c6c:	2300      	movcs	r3, #0
  403c6e:	25c3      	movcc	r5, #195	; 0xc3
  403c70:	25c9      	movcs	r5, #201	; 0xc9
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
  403c72:	9300      	str	r3, [sp, #0]
  403c74:	2304      	movs	r3, #4
  403c76:	460a      	mov	r2, r1
  403c78:	4601      	mov	r1, r0
  403c7a:	4628      	mov	r0, r5
  403c7c:	4e15      	ldr	r6, [pc, #84]	; (403cd4 <spi_write_reg+0x74>)
  403c7e:	47b0      	blx	r6
	if (result != N_OK) {
  403c80:	2801      	cmp	r0, #1
  403c82:	d00d      	beq.n	403ca0 <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
  403c84:	f240 12eb 	movw	r2, #491	; 0x1eb
  403c88:	4913      	ldr	r1, [pc, #76]	; (403cd8 <spi_write_reg+0x78>)
  403c8a:	4814      	ldr	r0, [pc, #80]	; (403cdc <spi_write_reg+0x7c>)
  403c8c:	4d14      	ldr	r5, [pc, #80]	; (403ce0 <spi_write_reg+0x80>)
  403c8e:	47a8      	blx	r5
  403c90:	4621      	mov	r1, r4
  403c92:	4814      	ldr	r0, [pc, #80]	; (403ce4 <spi_write_reg+0x84>)
  403c94:	47a8      	blx	r5
  403c96:	4814      	ldr	r0, [pc, #80]	; (403ce8 <spi_write_reg+0x88>)
  403c98:	47a8      	blx	r5
		return N_FAIL;
  403c9a:	2000      	movs	r0, #0
	}

	return result;

#endif
}
  403c9c:	b002      	add	sp, #8
  403c9e:	bd70      	pop	{r4, r5, r6, pc}
	result = spi_cmd_rsp(cmd);
  403ca0:	4628      	mov	r0, r5
  403ca2:	4b12      	ldr	r3, [pc, #72]	; (403cec <spi_write_reg+0x8c>)
  403ca4:	4798      	blx	r3
	if (result != N_OK) {
  403ca6:	2801      	cmp	r0, #1
  403ca8:	d0f8      	beq.n	403c9c <spi_write_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
  403caa:	f240 12f1 	movw	r2, #497	; 0x1f1
  403cae:	490a      	ldr	r1, [pc, #40]	; (403cd8 <spi_write_reg+0x78>)
  403cb0:	480a      	ldr	r0, [pc, #40]	; (403cdc <spi_write_reg+0x7c>)
  403cb2:	4d0b      	ldr	r5, [pc, #44]	; (403ce0 <spi_write_reg+0x80>)
  403cb4:	47a8      	blx	r5
  403cb6:	4621      	mov	r1, r4
  403cb8:	480d      	ldr	r0, [pc, #52]	; (403cf0 <spi_write_reg+0x90>)
  403cba:	47a8      	blx	r5
  403cbc:	480a      	ldr	r0, [pc, #40]	; (403ce8 <spi_write_reg+0x88>)
  403cbe:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403cc0:	2400      	movs	r4, #0
  403cc2:	9400      	str	r4, [sp, #0]
  403cc4:	4623      	mov	r3, r4
  403cc6:	4622      	mov	r2, r4
  403cc8:	4621      	mov	r1, r4
  403cca:	20cf      	movs	r0, #207	; 0xcf
  403ccc:	4d01      	ldr	r5, [pc, #4]	; (403cd4 <spi_write_reg+0x74>)
  403cce:	47a8      	blx	r5
		return N_FAIL;
  403cd0:	4620      	mov	r0, r4
  403cd2:	e7e3      	b.n	403c9c <spi_write_reg+0x3c>
  403cd4:	00403ab1 	.word	0x00403ab1
  403cd8:	0040caac 	.word	0x0040caac
  403cdc:	0040c49c 	.word	0x0040c49c
  403ce0:	00406085 	.word	0x00406085
  403ce4:	0040d044 	.word	0x0040d044
  403ce8:	0040c4c8 	.word	0x0040c4c8
  403cec:	004038b5 	.word	0x004038b5
  403cf0:	0040d070 	.word	0x0040d070

00403cf4 <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
  403cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cf8:	b084      	sub	sp, #16
  403cfa:	4604      	mov	r4, r0
  403cfc:	4688      	mov	r8, r1
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
  403cfe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  403d02:	bf35      	itete	cc
  403d04:	2601      	movcc	r6, #1
  403d06:	2600      	movcs	r6, #0
  403d08:	25c4      	movcc	r5, #196	; 0xc4
  403d0a:	25ca      	movcs	r5, #202	; 0xca
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
  403d0c:	9600      	str	r6, [sp, #0]
  403d0e:	2304      	movs	r3, #4
  403d10:	2200      	movs	r2, #0
  403d12:	4601      	mov	r1, r0
  403d14:	4628      	mov	r0, r5
  403d16:	4f2c      	ldr	r7, [pc, #176]	; (403dc8 <spi_read_reg+0xd4>)
  403d18:	47b8      	blx	r7
	if (result != N_OK) {
  403d1a:	2801      	cmp	r0, #1
  403d1c:	d00e      	beq.n	403d3c <spi_read_reg+0x48>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
  403d1e:	f240 2245 	movw	r2, #581	; 0x245
  403d22:	492a      	ldr	r1, [pc, #168]	; (403dcc <spi_read_reg+0xd8>)
  403d24:	482a      	ldr	r0, [pc, #168]	; (403dd0 <spi_read_reg+0xdc>)
  403d26:	4d2b      	ldr	r5, [pc, #172]	; (403dd4 <spi_read_reg+0xe0>)
  403d28:	47a8      	blx	r5
  403d2a:	4621      	mov	r1, r4
  403d2c:	482a      	ldr	r0, [pc, #168]	; (403dd8 <spi_read_reg+0xe4>)
  403d2e:	47a8      	blx	r5
  403d30:	482a      	ldr	r0, [pc, #168]	; (403ddc <spi_read_reg+0xe8>)
  403d32:	47a8      	blx	r5
		return N_FAIL;
  403d34:	2000      	movs	r0, #0
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
}
  403d36:	b004      	add	sp, #16
  403d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = spi_cmd_rsp(cmd);
  403d3c:	4628      	mov	r0, r5
  403d3e:	4b28      	ldr	r3, [pc, #160]	; (403de0 <spi_read_reg+0xec>)
  403d40:	4798      	blx	r3
	if (result != N_OK) {
  403d42:	2801      	cmp	r0, #1
  403d44:	d014      	beq.n	403d70 <spi_read_reg+0x7c>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
  403d46:	f240 224b 	movw	r2, #587	; 0x24b
  403d4a:	4920      	ldr	r1, [pc, #128]	; (403dcc <spi_read_reg+0xd8>)
  403d4c:	4820      	ldr	r0, [pc, #128]	; (403dd0 <spi_read_reg+0xdc>)
  403d4e:	4d21      	ldr	r5, [pc, #132]	; (403dd4 <spi_read_reg+0xe0>)
  403d50:	47a8      	blx	r5
  403d52:	4621      	mov	r1, r4
  403d54:	4823      	ldr	r0, [pc, #140]	; (403de4 <spi_read_reg+0xf0>)
  403d56:	47a8      	blx	r5
  403d58:	4820      	ldr	r0, [pc, #128]	; (403ddc <spi_read_reg+0xe8>)
  403d5a:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403d5c:	2400      	movs	r4, #0
  403d5e:	9400      	str	r4, [sp, #0]
  403d60:	4623      	mov	r3, r4
  403d62:	4622      	mov	r2, r4
  403d64:	4621      	mov	r1, r4
  403d66:	20cf      	movs	r0, #207	; 0xcf
  403d68:	4d17      	ldr	r5, [pc, #92]	; (403dc8 <spi_read_reg+0xd4>)
  403d6a:	47a8      	blx	r5
		return N_FAIL;
  403d6c:	4620      	mov	r0, r4
  403d6e:	e7e2      	b.n	403d36 <spi_read_reg+0x42>
	result = spi_data_read(&tmp[0], 4, clockless);
  403d70:	4632      	mov	r2, r6
  403d72:	2104      	movs	r1, #4
  403d74:	a803      	add	r0, sp, #12
  403d76:	4b1c      	ldr	r3, [pc, #112]	; (403de8 <spi_read_reg+0xf4>)
  403d78:	4798      	blx	r3
	if (result != N_OK) {
  403d7a:	2801      	cmp	r0, #1
  403d7c:	d110      	bne.n	403da0 <spi_read_reg+0xac>
		((uint32)tmp[1] << 8) |
  403d7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
		((uint32)tmp[2] << 16) |
  403d82:	f89d 300e 	ldrb.w	r3, [sp, #14]
  403d86:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
  403d88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	*u32data = tmp[0] |
  403d8c:	f89d 200c 	ldrb.w	r2, [sp, #12]
		((uint32)tmp[1] << 8) |
  403d90:	4313      	orrs	r3, r2
		((uint32)tmp[3] << 24);
  403d92:	f89d 200f 	ldrb.w	r2, [sp, #15]
		((uint32)tmp[2] << 16) |
  403d96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	*u32data = tmp[0] |
  403d9a:	f8c8 3000 	str.w	r3, [r8]
	return N_OK;
  403d9e:	e7ca      	b.n	403d36 <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed data read...\n");
  403da0:	f240 2253 	movw	r2, #595	; 0x253
  403da4:	4909      	ldr	r1, [pc, #36]	; (403dcc <spi_read_reg+0xd8>)
  403da6:	480a      	ldr	r0, [pc, #40]	; (403dd0 <spi_read_reg+0xdc>)
  403da8:	4c0a      	ldr	r4, [pc, #40]	; (403dd4 <spi_read_reg+0xe0>)
  403daa:	47a0      	blx	r4
  403dac:	480f      	ldr	r0, [pc, #60]	; (403dec <spi_read_reg+0xf8>)
  403dae:	47a0      	blx	r4
  403db0:	480a      	ldr	r0, [pc, #40]	; (403ddc <spi_read_reg+0xe8>)
  403db2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403db4:	2400      	movs	r4, #0
  403db6:	9400      	str	r4, [sp, #0]
  403db8:	4623      	mov	r3, r4
  403dba:	4622      	mov	r2, r4
  403dbc:	4621      	mov	r1, r4
  403dbe:	20cf      	movs	r0, #207	; 0xcf
  403dc0:	4d01      	ldr	r5, [pc, #4]	; (403dc8 <spi_read_reg+0xd4>)
  403dc2:	47a8      	blx	r5
		return N_FAIL;
  403dc4:	4620      	mov	r0, r4
  403dc6:	e7b6      	b.n	403d36 <spi_read_reg+0x42>
  403dc8:	00403ab1 	.word	0x00403ab1
  403dcc:	0040cacc 	.word	0x0040cacc
  403dd0:	0040c49c 	.word	0x0040c49c
  403dd4:	00406085 	.word	0x00406085
  403dd8:	0040cfc4 	.word	0x0040cfc4
  403ddc:	0040c4c8 	.word	0x0040c4c8
  403de0:	004038b5 	.word	0x004038b5
  403de4:	0040cff0 	.word	0x0040cff0
  403de8:	00403979 	.word	0x00403979
  403dec:	0040d024 	.word	0x0040d024

00403df0 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
  403df0:	2000      	movs	r0, #0
  403df2:	4b01      	ldr	r3, [pc, #4]	; (403df8 <nm_spi_deinit+0x8>)
  403df4:	7018      	strb	r0, [r3, #0]
	return M2M_SUCCESS;
}
  403df6:	4770      	bx	lr
  403df8:	2040c358 	.word	0x2040c358

00403dfc <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
  403dfc:	b500      	push	{lr}
  403dfe:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
  403e00:	a901      	add	r1, sp, #4
  403e02:	4b03      	ldr	r3, [pc, #12]	; (403e10 <nm_spi_read_reg+0x14>)
  403e04:	4798      	blx	r3

	return u32Val;
}
  403e06:	9801      	ldr	r0, [sp, #4]
  403e08:	b003      	add	sp, #12
  403e0a:	f85d fb04 	ldr.w	pc, [sp], #4
  403e0e:	bf00      	nop
  403e10:	00403cf5 	.word	0x00403cf5

00403e14 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
  403e14:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
  403e16:	4b04      	ldr	r3, [pc, #16]	; (403e28 <nm_spi_read_reg_with_ret+0x14>)
  403e18:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e1a:	2801      	cmp	r0, #1

	return s8Ret;
}
  403e1c:	bf0c      	ite	eq
  403e1e:	2000      	moveq	r0, #0
  403e20:	f06f 0005 	mvnne.w	r0, #5
  403e24:	bd08      	pop	{r3, pc}
  403e26:	bf00      	nop
  403e28:	00403cf5 	.word	0x00403cf5

00403e2c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
  403e2c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
  403e2e:	4b04      	ldr	r3, [pc, #16]	; (403e40 <nm_spi_write_reg+0x14>)
  403e30:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403e32:	2801      	cmp	r0, #1

	return s8Ret;
}
  403e34:	bf0c      	ite	eq
  403e36:	2000      	moveq	r0, #0
  403e38:	f06f 0005 	mvnne.w	r0, #5
  403e3c:	bd08      	pop	{r3, pc}
  403e3e:	bf00      	nop
  403e40:	00403c61 	.word	0x00403c61

00403e44 <nm_spi_init>:
{
  403e44:	b530      	push	{r4, r5, lr}
  403e46:	b083      	sub	sp, #12
	uint32 reg =0;
  403e48:	2300      	movs	r3, #0
  403e4a:	a902      	add	r1, sp, #8
  403e4c:	f841 3d08 	str.w	r3, [r1, #-8]!
	gu8Crc_off = 0;
  403e50:	4a34      	ldr	r2, [pc, #208]	; (403f24 <nm_spi_init+0xe0>)
  403e52:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
  403e54:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e58:	4b33      	ldr	r3, [pc, #204]	; (403f28 <nm_spi_init+0xe4>)
  403e5a:	4798      	blx	r3
  403e5c:	b348      	cbz	r0, 403eb2 <nm_spi_init+0x6e>
	if(gu8Crc_off == 0)
  403e5e:	4b31      	ldr	r3, [pc, #196]	; (403f24 <nm_spi_init+0xe0>)
  403e60:	781b      	ldrb	r3, [r3, #0]
  403e62:	b97b      	cbnz	r3, 403e84 <nm_spi_init+0x40>
		reg &= ~0x70;
  403e64:	9900      	ldr	r1, [sp, #0]
  403e66:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
  403e6a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403e6e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
  403e70:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e74:	4b2d      	ldr	r3, [pc, #180]	; (403f2c <nm_spi_init+0xe8>)
  403e76:	4798      	blx	r3
  403e78:	4604      	mov	r4, r0
  403e7a:	2800      	cmp	r0, #0
  403e7c:	d039      	beq.n	403ef2 <nm_spi_init+0xae>
		gu8Crc_off = 1;
  403e7e:	2201      	movs	r2, #1
  403e80:	4b28      	ldr	r3, [pc, #160]	; (403f24 <nm_spi_init+0xe0>)
  403e82:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
  403e84:	a901      	add	r1, sp, #4
  403e86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  403e8a:	4b27      	ldr	r3, [pc, #156]	; (403f28 <nm_spi_init+0xe4>)
  403e8c:	4798      	blx	r3
  403e8e:	2800      	cmp	r0, #0
  403e90:	d03a      	beq.n	403f08 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
  403e92:	f64e 0024 	movw	r0, #59428	; 0xe824
  403e96:	4b26      	ldr	r3, [pc, #152]	; (403f30 <nm_spi_init+0xec>)
  403e98:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
  403e9a:	f020 0170 	bic.w	r1, r0, #112	; 0x70
	nm_spi_write_reg(SPI_BASE+0x24, val32);
  403e9e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
  403ea2:	f64e 0024 	movw	r0, #59428	; 0xe824
  403ea6:	4b23      	ldr	r3, [pc, #140]	; (403f34 <nm_spi_init+0xf0>)
  403ea8:	4798      	blx	r3
	return M2M_SUCCESS;
  403eaa:	2400      	movs	r4, #0
}
  403eac:	4620      	mov	r0, r4
  403eae:	b003      	add	sp, #12
  403eb0:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
  403eb2:	2201      	movs	r2, #1
  403eb4:	4b1b      	ldr	r3, [pc, #108]	; (403f24 <nm_spi_init+0xe0>)
  403eb6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
  403eb8:	f240 22c5 	movw	r2, #709	; 0x2c5
  403ebc:	491e      	ldr	r1, [pc, #120]	; (403f38 <nm_spi_init+0xf4>)
  403ebe:	481f      	ldr	r0, [pc, #124]	; (403f3c <nm_spi_init+0xf8>)
  403ec0:	4c1f      	ldr	r4, [pc, #124]	; (403f40 <nm_spi_init+0xfc>)
  403ec2:	47a0      	blx	r4
  403ec4:	481f      	ldr	r0, [pc, #124]	; (403f44 <nm_spi_init+0x100>)
  403ec6:	47a0      	blx	r4
  403ec8:	481f      	ldr	r0, [pc, #124]	; (403f48 <nm_spi_init+0x104>)
  403eca:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
  403ecc:	4669      	mov	r1, sp
  403ece:	f64e 0024 	movw	r0, #59428	; 0xe824
  403ed2:	4b15      	ldr	r3, [pc, #84]	; (403f28 <nm_spi_init+0xe4>)
  403ed4:	4798      	blx	r3
  403ed6:	4604      	mov	r4, r0
  403ed8:	2800      	cmp	r0, #0
  403eda:	d1c0      	bne.n	403e5e <nm_spi_init+0x1a>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
  403edc:	f44f 7232 	mov.w	r2, #712	; 0x2c8
  403ee0:	4915      	ldr	r1, [pc, #84]	; (403f38 <nm_spi_init+0xf4>)
  403ee2:	4816      	ldr	r0, [pc, #88]	; (403f3c <nm_spi_init+0xf8>)
  403ee4:	4d16      	ldr	r5, [pc, #88]	; (403f40 <nm_spi_init+0xfc>)
  403ee6:	47a8      	blx	r5
  403ee8:	4818      	ldr	r0, [pc, #96]	; (403f4c <nm_spi_init+0x108>)
  403eea:	47a8      	blx	r5
  403eec:	4816      	ldr	r0, [pc, #88]	; (403f48 <nm_spi_init+0x104>)
  403eee:	47a8      	blx	r5
			return 0;
  403ef0:	e7dc      	b.n	403eac <nm_spi_init+0x68>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
  403ef2:	f240 22d2 	movw	r2, #722	; 0x2d2
  403ef6:	4910      	ldr	r1, [pc, #64]	; (403f38 <nm_spi_init+0xf4>)
  403ef8:	4810      	ldr	r0, [pc, #64]	; (403f3c <nm_spi_init+0xf8>)
  403efa:	4d11      	ldr	r5, [pc, #68]	; (403f40 <nm_spi_init+0xfc>)
  403efc:	47a8      	blx	r5
  403efe:	4814      	ldr	r0, [pc, #80]	; (403f50 <nm_spi_init+0x10c>)
  403f00:	47a8      	blx	r5
  403f02:	4811      	ldr	r0, [pc, #68]	; (403f48 <nm_spi_init+0x104>)
  403f04:	47a8      	blx	r5
			return 0;
  403f06:	e7d1      	b.n	403eac <nm_spi_init+0x68>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
  403f08:	f44f 7237 	mov.w	r2, #732	; 0x2dc
  403f0c:	490a      	ldr	r1, [pc, #40]	; (403f38 <nm_spi_init+0xf4>)
  403f0e:	480b      	ldr	r0, [pc, #44]	; (403f3c <nm_spi_init+0xf8>)
  403f10:	4c0b      	ldr	r4, [pc, #44]	; (403f40 <nm_spi_init+0xfc>)
  403f12:	47a0      	blx	r4
  403f14:	480f      	ldr	r0, [pc, #60]	; (403f54 <nm_spi_init+0x110>)
  403f16:	47a0      	blx	r4
  403f18:	480b      	ldr	r0, [pc, #44]	; (403f48 <nm_spi_init+0x104>)
  403f1a:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
  403f1c:	f06f 0405 	mvn.w	r4, #5
  403f20:	e7c4      	b.n	403eac <nm_spi_init+0x68>
  403f22:	bf00      	nop
  403f24:	2040c358 	.word	0x2040c358
  403f28:	00403cf5 	.word	0x00403cf5
  403f2c:	00403c61 	.word	0x00403c61
  403f30:	00403dfd 	.word	0x00403dfd
  403f34:	00403e2d 	.word	0x00403e2d
  403f38:	0040cae8 	.word	0x0040cae8
  403f3c:	0040c49c 	.word	0x0040c49c
  403f40:	00406085 	.word	0x00406085
  403f44:	0040cbf4 	.word	0x0040cbf4
  403f48:	0040c4c8 	.word	0x0040c4c8
  403f4c:	0040cc44 	.word	0x0040cc44
  403f50:	0040cc74 	.word	0x0040cc74
  403f54:	0040cca8 	.word	0x0040cca8

00403f58 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  403f58:	b5f0      	push	{r4, r5, r6, r7, lr}
  403f5a:	b083      	sub	sp, #12
  403f5c:	4604      	mov	r4, r0
  403f5e:	460f      	mov	r7, r1
  403f60:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  403f62:	2200      	movs	r2, #0
  403f64:	9200      	str	r2, [sp, #0]
  403f66:	462b      	mov	r3, r5
  403f68:	4601      	mov	r1, r0
  403f6a:	20c8      	movs	r0, #200	; 0xc8
  403f6c:	4e22      	ldr	r6, [pc, #136]	; (403ff8 <nm_spi_read_block+0xa0>)
  403f6e:	47b0      	blx	r6
	if (result != N_OK) {
  403f70:	2801      	cmp	r0, #1
  403f72:	d00e      	beq.n	403f92 <nm_spi_read_block+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
  403f74:	f44f 721d 	mov.w	r2, #628	; 0x274
  403f78:	4920      	ldr	r1, [pc, #128]	; (403ffc <nm_spi_read_block+0xa4>)
  403f7a:	4821      	ldr	r0, [pc, #132]	; (404000 <nm_spi_read_block+0xa8>)
  403f7c:	4d21      	ldr	r5, [pc, #132]	; (404004 <nm_spi_read_block+0xac>)
  403f7e:	47a8      	blx	r5
  403f80:	4621      	mov	r1, r4
  403f82:	4821      	ldr	r0, [pc, #132]	; (404008 <nm_spi_read_block+0xb0>)
  403f84:	47a8      	blx	r5
  403f86:	4821      	ldr	r0, [pc, #132]	; (40400c <nm_spi_read_block+0xb4>)
  403f88:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  403f8a:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  403f8e:	b003      	add	sp, #12
  403f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = spi_cmd_rsp(cmd);
  403f92:	20c8      	movs	r0, #200	; 0xc8
  403f94:	4b1e      	ldr	r3, [pc, #120]	; (404010 <nm_spi_read_block+0xb8>)
  403f96:	4798      	blx	r3
	if (result != N_OK) {
  403f98:	2801      	cmp	r0, #1
  403f9a:	d012      	beq.n	403fc2 <nm_spi_read_block+0x6a>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
  403f9c:	f240 227a 	movw	r2, #634	; 0x27a
  403fa0:	4916      	ldr	r1, [pc, #88]	; (403ffc <nm_spi_read_block+0xa4>)
  403fa2:	4817      	ldr	r0, [pc, #92]	; (404000 <nm_spi_read_block+0xa8>)
  403fa4:	4d17      	ldr	r5, [pc, #92]	; (404004 <nm_spi_read_block+0xac>)
  403fa6:	47a8      	blx	r5
  403fa8:	4621      	mov	r1, r4
  403faa:	481a      	ldr	r0, [pc, #104]	; (404014 <nm_spi_read_block+0xbc>)
  403fac:	47a8      	blx	r5
  403fae:	4817      	ldr	r0, [pc, #92]	; (40400c <nm_spi_read_block+0xb4>)
  403fb0:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403fb2:	2100      	movs	r1, #0
  403fb4:	9100      	str	r1, [sp, #0]
  403fb6:	460b      	mov	r3, r1
  403fb8:	460a      	mov	r2, r1
  403fba:	20cf      	movs	r0, #207	; 0xcf
  403fbc:	4c0e      	ldr	r4, [pc, #56]	; (403ff8 <nm_spi_read_block+0xa0>)
  403fbe:	47a0      	blx	r4
  403fc0:	e7e3      	b.n	403f8a <nm_spi_read_block+0x32>
	result = spi_data_read(buf, size,0);
  403fc2:	2200      	movs	r2, #0
  403fc4:	4629      	mov	r1, r5
  403fc6:	4638      	mov	r0, r7
  403fc8:	4b13      	ldr	r3, [pc, #76]	; (404018 <nm_spi_read_block+0xc0>)
  403fca:	4798      	blx	r3
	if (result != N_OK) {
  403fcc:	2801      	cmp	r0, #1
  403fce:	d011      	beq.n	403ff4 <nm_spi_read_block+0x9c>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
  403fd0:	f44f 7221 	mov.w	r2, #644	; 0x284
  403fd4:	4909      	ldr	r1, [pc, #36]	; (403ffc <nm_spi_read_block+0xa4>)
  403fd6:	480a      	ldr	r0, [pc, #40]	; (404000 <nm_spi_read_block+0xa8>)
  403fd8:	4c0a      	ldr	r4, [pc, #40]	; (404004 <nm_spi_read_block+0xac>)
  403fda:	47a0      	blx	r4
  403fdc:	480f      	ldr	r0, [pc, #60]	; (40401c <nm_spi_read_block+0xc4>)
  403fde:	47a0      	blx	r4
  403fe0:	480a      	ldr	r0, [pc, #40]	; (40400c <nm_spi_read_block+0xb4>)
  403fe2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  403fe4:	2100      	movs	r1, #0
  403fe6:	9100      	str	r1, [sp, #0]
  403fe8:	460b      	mov	r3, r1
  403fea:	460a      	mov	r2, r1
  403fec:	20cf      	movs	r0, #207	; 0xcf
  403fee:	4c02      	ldr	r4, [pc, #8]	; (403ff8 <nm_spi_read_block+0xa0>)
  403ff0:	47a0      	blx	r4
  403ff2:	e7ca      	b.n	403f8a <nm_spi_read_block+0x32>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  403ff4:	2000      	movs	r0, #0
  403ff6:	e7ca      	b.n	403f8e <nm_spi_read_block+0x36>
  403ff8:	00403ab1 	.word	0x00403ab1
  403ffc:	0040cadc 	.word	0x0040cadc
  404000:	0040c49c 	.word	0x0040c49c
  404004:	00406085 	.word	0x00406085
  404008:	0040ccd0 	.word	0x0040ccd0
  40400c:	0040c4c8 	.word	0x0040c4c8
  404010:	004038b5 	.word	0x004038b5
  404014:	0040cd00 	.word	0x0040cd00
  404018:	00403979 	.word	0x00403979
  40401c:	0040cd38 	.word	0x0040cd38

00404020 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
  404020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404024:	b085      	sub	sp, #20
  404026:	4604      	mov	r4, r0
  404028:	4688      	mov	r8, r1
  40402a:	4615      	mov	r5, r2
	result = spi_cmd(cmd, addr, 0, size,0);
  40402c:	2200      	movs	r2, #0
  40402e:	9200      	str	r2, [sp, #0]
  404030:	462b      	mov	r3, r5
  404032:	4601      	mov	r1, r0
  404034:	20c7      	movs	r0, #199	; 0xc7
  404036:	4e4d      	ldr	r6, [pc, #308]	; (40416c <nm_spi_write_block+0x14c>)
  404038:	47b0      	blx	r6
	if (result != N_OK) {
  40403a:	2801      	cmp	r0, #1
  40403c:	d00f      	beq.n	40405e <nm_spi_write_block+0x3e>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
  40403e:	f240 220f 	movw	r2, #527	; 0x20f
  404042:	494b      	ldr	r1, [pc, #300]	; (404170 <nm_spi_write_block+0x150>)
  404044:	484b      	ldr	r0, [pc, #300]	; (404174 <nm_spi_write_block+0x154>)
  404046:	4d4c      	ldr	r5, [pc, #304]	; (404178 <nm_spi_write_block+0x158>)
  404048:	47a8      	blx	r5
  40404a:	4621      	mov	r1, r4
  40404c:	484b      	ldr	r0, [pc, #300]	; (40417c <nm_spi_write_block+0x15c>)
  40404e:	47a8      	blx	r5
  404050:	484b      	ldr	r0, [pc, #300]	; (404180 <nm_spi_write_block+0x160>)
  404052:	47a8      	blx	r5
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
  404054:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
  404058:	b005      	add	sp, #20
  40405a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	result = spi_cmd_rsp(cmd);
  40405e:	20c7      	movs	r0, #199	; 0xc7
  404060:	4b48      	ldr	r3, [pc, #288]	; (404184 <nm_spi_write_block+0x164>)
  404062:	4798      	blx	r3
	if (result != N_OK) {
  404064:	2801      	cmp	r0, #1
  404066:	d012      	beq.n	40408e <nm_spi_write_block+0x6e>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
  404068:	f240 2215 	movw	r2, #533	; 0x215
  40406c:	4940      	ldr	r1, [pc, #256]	; (404170 <nm_spi_write_block+0x150>)
  40406e:	4841      	ldr	r0, [pc, #260]	; (404174 <nm_spi_write_block+0x154>)
  404070:	4d41      	ldr	r5, [pc, #260]	; (404178 <nm_spi_write_block+0x158>)
  404072:	47a8      	blx	r5
  404074:	4621      	mov	r1, r4
  404076:	4844      	ldr	r0, [pc, #272]	; (404188 <nm_spi_write_block+0x168>)
  404078:	47a8      	blx	r5
  40407a:	4841      	ldr	r0, [pc, #260]	; (404180 <nm_spi_write_block+0x160>)
  40407c:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40407e:	2100      	movs	r1, #0
  404080:	9100      	str	r1, [sp, #0]
  404082:	460b      	mov	r3, r1
  404084:	460a      	mov	r2, r1
  404086:	20cf      	movs	r0, #207	; 0xcf
  404088:	4c38      	ldr	r4, [pc, #224]	; (40416c <nm_spi_write_block+0x14c>)
  40408a:	47a0      	blx	r4
  40408c:	e7e2      	b.n	404054 <nm_spi_write_block+0x34>
	uint8 cmd, order, crc[2] = {0};
  40408e:	2400      	movs	r4, #0
  404090:	f8ad 400c 	strh.w	r4, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  404094:	4f3d      	ldr	r7, [pc, #244]	; (40418c <nm_spi_write_block+0x16c>)
		if (!gu8Crc_off) {
  404096:	f8df 910c 	ldr.w	r9, [pc, #268]	; 4041a4 <nm_spi_write_block+0x184>
  40409a:	e01d      	b.n	4040d8 <nm_spi_write_block+0xb8>
				order = 0x2;
  40409c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4040a0:	bf94      	ite	ls
  4040a2:	2303      	movls	r3, #3
  4040a4:	2302      	movhi	r3, #2
		cmd |= order;
  4040a6:	f063 030f 	orn	r3, r3, #15
  4040aa:	f88d 300b 	strb.w	r3, [sp, #11]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
  4040ae:	2101      	movs	r1, #1
  4040b0:	f10d 000b 	add.w	r0, sp, #11
  4040b4:	47b8      	blx	r7
  4040b6:	b9e8      	cbnz	r0, 4040f4 <nm_spi_write_block+0xd4>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
  4040b8:	4631      	mov	r1, r6
  4040ba:	eb08 0004 	add.w	r0, r8, r4
  4040be:	47b8      	blx	r7
  4040c0:	2800      	cmp	r0, #0
  4040c2:	d135      	bne.n	404130 <nm_spi_write_block+0x110>
		if (!gu8Crc_off) {
  4040c4:	f899 3000 	ldrb.w	r3, [r9]
  4040c8:	2b00      	cmp	r3, #0
  4040ca:	d03c      	beq.n	404146 <nm_spi_write_block+0x126>
		ix += nbytes;
  4040cc:	4434      	add	r4, r6
  4040ce:	b224      	sxth	r4, r4
		sz -= nbytes;
  4040d0:	1bad      	subs	r5, r5, r6
  4040d2:	b2ad      	uxth	r5, r5
	} while (sz);
  4040d4:	2d00      	cmp	r5, #0
  4040d6:	d046      	beq.n	404166 <nm_spi_write_block+0x146>
  4040d8:	462e      	mov	r6, r5
  4040da:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4040de:	bf28      	it	cs
  4040e0:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
		if (ix == 0)  {
  4040e4:	2c00      	cmp	r4, #0
  4040e6:	d1d9      	bne.n	40409c <nm_spi_write_block+0x7c>
				order = 0x1;
  4040e8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
  4040ec:	bf94      	ite	ls
  4040ee:	2303      	movls	r3, #3
  4040f0:	2301      	movhi	r3, #1
  4040f2:	e7d8      	b.n	4040a6 <nm_spi_write_block+0x86>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
  4040f4:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
  4040f8:	4925      	ldr	r1, [pc, #148]	; (404190 <nm_spi_write_block+0x170>)
  4040fa:	481e      	ldr	r0, [pc, #120]	; (404174 <nm_spi_write_block+0x154>)
  4040fc:	4c1e      	ldr	r4, [pc, #120]	; (404178 <nm_spi_write_block+0x158>)
  4040fe:	47a0      	blx	r4
  404100:	4824      	ldr	r0, [pc, #144]	; (404194 <nm_spi_write_block+0x174>)
  404102:	47a0      	blx	r4
  404104:	481e      	ldr	r0, [pc, #120]	; (404180 <nm_spi_write_block+0x160>)
  404106:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
  404108:	f240 2226 	movw	r2, #550	; 0x226
  40410c:	4918      	ldr	r1, [pc, #96]	; (404170 <nm_spi_write_block+0x150>)
  40410e:	4819      	ldr	r0, [pc, #100]	; (404174 <nm_spi_write_block+0x154>)
  404110:	4c19      	ldr	r4, [pc, #100]	; (404178 <nm_spi_write_block+0x158>)
  404112:	47a0      	blx	r4
  404114:	4820      	ldr	r0, [pc, #128]	; (404198 <nm_spi_write_block+0x178>)
  404116:	47a0      	blx	r4
  404118:	4819      	ldr	r0, [pc, #100]	; (404180 <nm_spi_write_block+0x160>)
  40411a:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
  40411c:	2400      	movs	r4, #0
  40411e:	9400      	str	r4, [sp, #0]
  404120:	4623      	mov	r3, r4
  404122:	4622      	mov	r2, r4
  404124:	4621      	mov	r1, r4
  404126:	20cf      	movs	r0, #207	; 0xcf
  404128:	4d10      	ldr	r5, [pc, #64]	; (40416c <nm_spi_write_block+0x14c>)
  40412a:	47a8      	blx	r5
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  40412c:	4620      	mov	r0, r4
  40412e:	e793      	b.n	404058 <nm_spi_write_block+0x38>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
  404130:	f240 12b1 	movw	r2, #433	; 0x1b1
  404134:	4916      	ldr	r1, [pc, #88]	; (404190 <nm_spi_write_block+0x170>)
  404136:	480f      	ldr	r0, [pc, #60]	; (404174 <nm_spi_write_block+0x154>)
  404138:	4c0f      	ldr	r4, [pc, #60]	; (404178 <nm_spi_write_block+0x158>)
  40413a:	47a0      	blx	r4
  40413c:	4817      	ldr	r0, [pc, #92]	; (40419c <nm_spi_write_block+0x17c>)
  40413e:	47a0      	blx	r4
  404140:	480f      	ldr	r0, [pc, #60]	; (404180 <nm_spi_write_block+0x160>)
  404142:	47a0      	blx	r4
  404144:	e7e0      	b.n	404108 <nm_spi_write_block+0xe8>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
  404146:	2102      	movs	r1, #2
  404148:	a803      	add	r0, sp, #12
  40414a:	47b8      	blx	r7
  40414c:	2800      	cmp	r0, #0
  40414e:	d0bd      	beq.n	4040cc <nm_spi_write_block+0xac>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
  404150:	f240 12bb 	movw	r2, #443	; 0x1bb
  404154:	490e      	ldr	r1, [pc, #56]	; (404190 <nm_spi_write_block+0x170>)
  404156:	4807      	ldr	r0, [pc, #28]	; (404174 <nm_spi_write_block+0x154>)
  404158:	4c07      	ldr	r4, [pc, #28]	; (404178 <nm_spi_write_block+0x158>)
  40415a:	47a0      	blx	r4
  40415c:	4810      	ldr	r0, [pc, #64]	; (4041a0 <nm_spi_write_block+0x180>)
  40415e:	47a0      	blx	r4
  404160:	4807      	ldr	r0, [pc, #28]	; (404180 <nm_spi_write_block+0x160>)
  404162:	47a0      	blx	r4
  404164:	e7d0      	b.n	404108 <nm_spi_write_block+0xe8>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
  404166:	2000      	movs	r0, #0
  404168:	e776      	b.n	404058 <nm_spi_write_block+0x38>
  40416a:	bf00      	nop
  40416c:	00403ab1 	.word	0x00403ab1
  404170:	0040cabc 	.word	0x0040cabc
  404174:	0040c49c 	.word	0x0040c49c
  404178:	00406085 	.word	0x00406085
  40417c:	0040cd60 	.word	0x0040cd60
  404180:	0040c4c8 	.word	0x0040c4c8
  404184:	004038b5 	.word	0x004038b5
  404188:	0040cd90 	.word	0x0040cd90
  40418c:	00403a91 	.word	0x00403a91
  404190:	0040ca9c 	.word	0x0040ca9c
  404194:	0040cdc8 	.word	0x0040cdc8
  404198:	0040ce6c 	.word	0x0040ce6c
  40419c:	0040ce00 	.word	0x0040ce00
  4041a0:	0040ce34 	.word	0x0040ce34
  4041a4:	2040c358 	.word	0x2040c358

004041a8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
  4041a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4041ac:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
  4041b0:	b194      	cbz	r4, 4041d8 <Socket_ReadSocketData+0x30>
  4041b2:	4681      	mov	r9, r0
  4041b4:	460e      	mov	r6, r1
  4041b6:	4692      	mov	sl, r2
  4041b8:	4698      	mov	r8, r3
  4041ba:	0103      	lsls	r3, r0, #4
  4041bc:	4922      	ldr	r1, [pc, #136]	; (404248 <Socket_ReadSocketData+0xa0>)
  4041be:	58cb      	ldr	r3, [r1, r3]
  4041c0:	b153      	cbz	r3, 4041d8 <Socket_ReadSocketData+0x30>
  4041c2:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4041c6:	889b      	ldrh	r3, [r3, #4]
  4041c8:	b29b      	uxth	r3, r3
  4041ca:	b12b      	cbz	r3, 4041d8 <Socket_ReadSocketData+0x30>
  4041cc:	eb01 1300 	add.w	r3, r1, r0, lsl #4
  4041d0:	7a9b      	ldrb	r3, [r3, #10]
  4041d2:	b2db      	uxtb	r3, r3
  4041d4:	2b01      	cmp	r3, #1
  4041d6:	d001      	beq.n	4041dc <Socket_ReadSocketData+0x34>
  4041d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
  4041dc:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4041de:	eb01 1700 	add.w	r7, r1, r0, lsl #4
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  4041e2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 404260 <Socket_ReadSocketData+0xb8>
  4041e6:	e006      	b.n	4041f6 <Socket_ReadSocketData+0x4e>
  4041e8:	4625      	mov	r5, r4
			u8SetRxDone = 1;
  4041ea:	2301      	movs	r3, #1
  4041ec:	e00b      	b.n	404206 <Socket_ReadSocketData+0x5e>
				pstrRecv->u16RemainingSize	-= u16Read;

				if (gpfAppSocketCb)
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
  4041ee:	1b64      	subs	r4, r4, r5
  4041f0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
  4041f2:	44a8      	add	r8, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
  4041f4:	b1ec      	cbz	r4, 404232 <Socket_ReadSocketData+0x8a>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
  4041f6:	88bb      	ldrh	r3, [r7, #4]
  4041f8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
  4041fa:	b21b      	sxth	r3, r3
  4041fc:	2b00      	cmp	r3, #0
  4041fe:	ddf3      	ble.n	4041e8 <Socket_ReadSocketData+0x40>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
  404200:	88bd      	ldrh	r5, [r7, #4]
  404202:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
  404204:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
  404206:	6839      	ldr	r1, [r7, #0]
  404208:	462a      	mov	r2, r5
  40420a:	4640      	mov	r0, r8
  40420c:	47d8      	blx	fp
  40420e:	b990      	cbnz	r0, 404236 <Socket_ReadSocketData+0x8e>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
  404210:	683b      	ldr	r3, [r7, #0]
  404212:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
  404214:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
  404216:	88f3      	ldrh	r3, [r6, #6]
  404218:	1b5b      	subs	r3, r3, r5
  40421a:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
  40421c:	4b0b      	ldr	r3, [pc, #44]	; (40424c <Socket_ReadSocketData+0xa4>)
  40421e:	681b      	ldr	r3, [r3, #0]
  404220:	2b00      	cmp	r3, #0
  404222:	d0e4      	beq.n	4041ee <Socket_ReadSocketData+0x46>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
  404224:	4b09      	ldr	r3, [pc, #36]	; (40424c <Socket_ReadSocketData+0xa4>)
  404226:	681b      	ldr	r3, [r3, #0]
  404228:	4632      	mov	r2, r6
  40422a:	4651      	mov	r1, sl
  40422c:	4648      	mov	r0, r9
  40422e:	4798      	blx	r3
  404230:	e7dd      	b.n	4041ee <Socket_ReadSocketData+0x46>
  404232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
  404236:	4806      	ldr	r0, [pc, #24]	; (404250 <Socket_ReadSocketData+0xa8>)
  404238:	4d06      	ldr	r5, [pc, #24]	; (404254 <Socket_ReadSocketData+0xac>)
  40423a:	47a8      	blx	r5
  40423c:	4621      	mov	r1, r4
  40423e:	4806      	ldr	r0, [pc, #24]	; (404258 <Socket_ReadSocketData+0xb0>)
  404240:	47a8      	blx	r5
  404242:	4806      	ldr	r0, [pc, #24]	; (40425c <Socket_ReadSocketData+0xb4>)
  404244:	47a8      	blx	r5
	}
}
  404246:	e7c7      	b.n	4041d8 <Socket_ReadSocketData+0x30>
  404248:	2040ca64 	.word	0x2040ca64
  40424c:	2040cb14 	.word	0x2040cb14
  404250:	0040c770 	.word	0x0040c770
  404254:	00406085 	.word	0x00406085
  404258:	0040d0a8 	.word	0x0040d0a8
  40425c:	0040c4c8 	.word	0x0040c4c8
  404260:	004028e1 	.word	0x004028e1

00404264 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
  404264:	b5f0      	push	{r4, r5, r6, r7, lr}
  404266:	b099      	sub	sp, #100	; 0x64
  404268:	4614      	mov	r4, r2
	if(u8OpCode == SOCKET_CMD_BIND)
  40426a:	2841      	cmp	r0, #65	; 0x41
  40426c:	d049      	beq.n	404302 <m2m_ip_cb+0x9e>
  40426e:	460d      	mov	r5, r1
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
  404270:	2842      	cmp	r0, #66	; 0x42
  404272:	d05f      	beq.n	404334 <m2m_ip_cb+0xd0>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
  404274:	2843      	cmp	r0, #67	; 0x43
  404276:	d075      	beq.n	404364 <m2m_ip_cb+0x100>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
  404278:	2844      	cmp	r0, #68	; 0x44
  40427a:	f000 80b0 	beq.w	4043de <m2m_ip_cb+0x17a>
  40427e:	284b      	cmp	r0, #75	; 0x4b
  404280:	f000 80ad 	beq.w	4043de <m2m_ip_cb+0x17a>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
  404284:	284a      	cmp	r0, #74	; 0x4a
  404286:	f000 80cc 	beq.w	404422 <m2m_ip_cb+0x1be>
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
  40428a:	f1a0 0346 	sub.w	r3, r0, #70	; 0x46
  40428e:	b2db      	uxtb	r3, r3
  404290:	2b07      	cmp	r3, #7
  404292:	f200 80f4 	bhi.w	40447e <m2m_ip_cb+0x21a>
  404296:	2285      	movs	r2, #133	; 0x85
  404298:	fa22 f303 	lsr.w	r3, r2, r3
  40429c:	f013 0f01 	tst.w	r3, #1
  4042a0:	f000 80ed 	beq.w	40447e <m2m_ip_cb+0x21a>
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
  4042a4:	2848      	cmp	r0, #72	; 0x48
  4042a6:	bf14      	ite	ne
  4042a8:	2706      	movne	r7, #6
  4042aa:	2709      	moveq	r7, #9

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
  4042ac:	2300      	movs	r3, #0
  4042ae:	2210      	movs	r2, #16
  4042b0:	a903      	add	r1, sp, #12
  4042b2:	4620      	mov	r0, r4
  4042b4:	4e93      	ldr	r6, [pc, #588]	; (404504 <m2m_ip_cb+0x2a0>)
  4042b6:	47b0      	blx	r6
  4042b8:	2800      	cmp	r0, #0
  4042ba:	f040 80b0 	bne.w	40441e <m2m_ip_cb+0x1ba>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
  4042be:	f99d 0018 	ldrsb.w	r0, [sp, #24]
			u16SessionID = strRecvReply.u16SessionID;
  4042c2:	f8bd 101a 	ldrh.w	r1, [sp, #26]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
  4042c6:	4a90      	ldr	r2, [pc, #576]	; (404508 <m2m_ip_cb+0x2a4>)
  4042c8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  4042cc:	2300      	movs	r3, #0
  4042ce:	7313      	strb	r3, [r2, #12]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
  4042d0:	f9bd e014 	ldrsh.w	lr, [sp, #20]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
  4042d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
  4042d8:	f8bd 600e 	ldrh.w	r6, [sp, #14]
  4042dc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
  4042e0:	9e04      	ldr	r6, [sp, #16]
  4042e2:	960a      	str	r6, [sp, #40]	; 0x28

			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4042e4:	88d2      	ldrh	r2, [r2, #6]
  4042e6:	b292      	uxth	r2, r2
  4042e8:	4291      	cmp	r1, r2
  4042ea:	f000 80ac 	beq.w	404446 <m2m_ip_cb+0x1e2>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
  4042ee:	2d10      	cmp	r5, #16
  4042f0:	f240 8095 	bls.w	40441e <m2m_ip_cb+0x1ba>
					hif_receive(0, NULL, 0, 1);
  4042f4:	2301      	movs	r3, #1
  4042f6:	2200      	movs	r2, #0
  4042f8:	4611      	mov	r1, r2
  4042fa:	4610      	mov	r0, r2
  4042fc:	4c81      	ldr	r4, [pc, #516]	; (404504 <m2m_ip_cb+0x2a0>)
  4042fe:	47a0      	blx	r4
	{
  404300:	e08d      	b.n	40441e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
  404302:	2300      	movs	r3, #0
  404304:	2204      	movs	r2, #4
  404306:	a907      	add	r1, sp, #28
  404308:	4620      	mov	r0, r4
  40430a:	4c7e      	ldr	r4, [pc, #504]	; (404504 <m2m_ip_cb+0x2a0>)
  40430c:	47a0      	blx	r4
  40430e:	2800      	cmp	r0, #0
  404310:	f040 8085 	bne.w	40441e <m2m_ip_cb+0x1ba>
			strBind.status = strBindReply.s8Status;
  404314:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404318:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40431c:	4b7b      	ldr	r3, [pc, #492]	; (40450c <m2m_ip_cb+0x2a8>)
  40431e:	681b      	ldr	r3, [r3, #0]
  404320:	2b00      	cmp	r3, #0
  404322:	d07c      	beq.n	40441e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
  404324:	4b79      	ldr	r3, [pc, #484]	; (40450c <m2m_ip_cb+0x2a8>)
  404326:	681b      	ldr	r3, [r3, #0]
  404328:	aa03      	add	r2, sp, #12
  40432a:	2101      	movs	r1, #1
  40432c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404330:	4798      	blx	r3
  404332:	e074      	b.n	40441e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
  404334:	2300      	movs	r3, #0
  404336:	2204      	movs	r2, #4
  404338:	a907      	add	r1, sp, #28
  40433a:	4620      	mov	r0, r4
  40433c:	4c71      	ldr	r4, [pc, #452]	; (404504 <m2m_ip_cb+0x2a0>)
  40433e:	47a0      	blx	r4
  404340:	2800      	cmp	r0, #0
  404342:	d16c      	bne.n	40441e <m2m_ip_cb+0x1ba>
			strListen.status = strListenReply.s8Status;
  404344:	f89d 301d 	ldrb.w	r3, [sp, #29]
  404348:	f88d 300c 	strb.w	r3, [sp, #12]
			if(gpfAppSocketCb)
  40434c:	4b6f      	ldr	r3, [pc, #444]	; (40450c <m2m_ip_cb+0x2a8>)
  40434e:	681b      	ldr	r3, [r3, #0]
  404350:	2b00      	cmp	r3, #0
  404352:	d064      	beq.n	40441e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
  404354:	4b6d      	ldr	r3, [pc, #436]	; (40450c <m2m_ip_cb+0x2a8>)
  404356:	681b      	ldr	r3, [r3, #0]
  404358:	aa03      	add	r2, sp, #12
  40435a:	2102      	movs	r1, #2
  40435c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  404360:	4798      	blx	r3
  404362:	e05c      	b.n	40441e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
  404364:	2300      	movs	r3, #0
  404366:	220c      	movs	r2, #12
  404368:	eb0d 0102 	add.w	r1, sp, r2
  40436c:	4620      	mov	r0, r4
  40436e:	4c65      	ldr	r4, [pc, #404]	; (404504 <m2m_ip_cb+0x2a0>)
  404370:	47a0      	blx	r4
  404372:	2800      	cmp	r0, #0
  404374:	d153      	bne.n	40441e <m2m_ip_cb+0x1ba>
			if(strAcceptReply.sConnectedSock >= 0)
  404376:	f99d 3015 	ldrsb.w	r3, [sp, #21]
  40437a:	2b00      	cmp	r3, #0
  40437c:	db19      	blt.n	4043b2 <m2m_ip_cb+0x14e>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
  40437e:	4a62      	ldr	r2, [pc, #392]	; (404508 <m2m_ip_cb+0x2a4>)
  404380:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  404384:	2100      	movs	r1, #0
  404386:	72d1      	strb	r1, [r2, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
  404388:	2101      	movs	r1, #1
  40438a:	7291      	strb	r1, [r2, #10]
				++gu16SessionID;
  40438c:	4960      	ldr	r1, [pc, #384]	; (404510 <m2m_ip_cb+0x2ac>)
  40438e:	880a      	ldrh	r2, [r1, #0]
  404390:	3201      	adds	r2, #1
  404392:	b292      	uxth	r2, r2
  404394:	800a      	strh	r2, [r1, #0]
				if(gu16SessionID == 0)
  404396:	880a      	ldrh	r2, [r1, #0]
  404398:	b292      	uxth	r2, r2
  40439a:	b91a      	cbnz	r2, 4043a4 <m2m_ip_cb+0x140>
					++gu16SessionID;
  40439c:	880a      	ldrh	r2, [r1, #0]
  40439e:	3201      	adds	r2, #1
  4043a0:	b292      	uxth	r2, r2
  4043a2:	800a      	strh	r2, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
  4043a4:	4a5a      	ldr	r2, [pc, #360]	; (404510 <m2m_ip_cb+0x2ac>)
  4043a6:	8811      	ldrh	r1, [r2, #0]
  4043a8:	b289      	uxth	r1, r1
  4043aa:	4a57      	ldr	r2, [pc, #348]	; (404508 <m2m_ip_cb+0x2a4>)
  4043ac:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  4043b0:	80d1      	strh	r1, [r2, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
  4043b2:	f88d 301c 	strb.w	r3, [sp, #28]
			strAccept.strAddr.sin_family		= AF_INET;
  4043b6:	2302      	movs	r3, #2
  4043b8:	f8ad 3020 	strh.w	r3, [sp, #32]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
  4043bc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4043c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
  4043c4:	9b04      	ldr	r3, [sp, #16]
  4043c6:	9309      	str	r3, [sp, #36]	; 0x24
			if(gpfAppSocketCb)
  4043c8:	4b50      	ldr	r3, [pc, #320]	; (40450c <m2m_ip_cb+0x2a8>)
  4043ca:	681b      	ldr	r3, [r3, #0]
  4043cc:	b33b      	cbz	r3, 40441e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
  4043ce:	4b4f      	ldr	r3, [pc, #316]	; (40450c <m2m_ip_cb+0x2a8>)
  4043d0:	681b      	ldr	r3, [r3, #0]
  4043d2:	aa07      	add	r2, sp, #28
  4043d4:	2104      	movs	r1, #4
  4043d6:	f99d 0014 	ldrsb.w	r0, [sp, #20]
  4043da:	4798      	blx	r3
  4043dc:	e01f      	b.n	40441e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
  4043de:	2300      	movs	r3, #0
  4043e0:	2204      	movs	r2, #4
  4043e2:	a907      	add	r1, sp, #28
  4043e4:	4620      	mov	r0, r4
  4043e6:	4c47      	ldr	r4, [pc, #284]	; (404504 <m2m_ip_cb+0x2a0>)
  4043e8:	47a0      	blx	r4
  4043ea:	b9c0      	cbnz	r0, 40441e <m2m_ip_cb+0x1ba>
			strConnMsg.sock		= strConnectReply.sock;
  4043ec:	f99d 001c 	ldrsb.w	r0, [sp, #28]
  4043f0:	f88d 000c 	strb.w	r0, [sp, #12]
			strConnMsg.s8Error	= strConnectReply.s8Error;
  4043f4:	f99d 301d 	ldrsb.w	r3, [sp, #29]
  4043f8:	f88d 300d 	strb.w	r3, [sp, #13]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
  4043fc:	b93b      	cbnz	r3, 40440e <m2m_ip_cb+0x1aa>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
  4043fe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  404402:	3b08      	subs	r3, #8
  404404:	b29b      	uxth	r3, r3
  404406:	4a40      	ldr	r2, [pc, #256]	; (404508 <m2m_ip_cb+0x2a4>)
  404408:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40440c:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
  40440e:	4b3f      	ldr	r3, [pc, #252]	; (40450c <m2m_ip_cb+0x2a8>)
  404410:	681b      	ldr	r3, [r3, #0]
  404412:	b123      	cbz	r3, 40441e <m2m_ip_cb+0x1ba>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
  404414:	4b3d      	ldr	r3, [pc, #244]	; (40450c <m2m_ip_cb+0x2a8>)
  404416:	681b      	ldr	r3, [r3, #0]
  404418:	aa03      	add	r2, sp, #12
  40441a:	2105      	movs	r1, #5
  40441c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
  40441e:	b019      	add	sp, #100	; 0x64
  404420:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
  404422:	2300      	movs	r3, #0
  404424:	2244      	movs	r2, #68	; 0x44
  404426:	a907      	add	r1, sp, #28
  404428:	4620      	mov	r0, r4
  40442a:	4c36      	ldr	r4, [pc, #216]	; (404504 <m2m_ip_cb+0x2a0>)
  40442c:	47a0      	blx	r4
  40442e:	2800      	cmp	r0, #0
  404430:	d1f5      	bne.n	40441e <m2m_ip_cb+0x1ba>
			if(gpfAppResolveCb)
  404432:	4b38      	ldr	r3, [pc, #224]	; (404514 <m2m_ip_cb+0x2b0>)
  404434:	681b      	ldr	r3, [r3, #0]
  404436:	2b00      	cmp	r3, #0
  404438:	d0f1      	beq.n	40441e <m2m_ip_cb+0x1ba>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
  40443a:	4b36      	ldr	r3, [pc, #216]	; (404514 <m2m_ip_cb+0x2b0>)
  40443c:	681b      	ldr	r3, [r3, #0]
  40443e:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404440:	a807      	add	r0, sp, #28
  404442:	4798      	blx	r3
  404444:	e7eb      	b.n	40441e <m2m_ip_cb+0x1ba>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
  404446:	f1be 0f00 	cmp.w	lr, #0
  40444a:	dd01      	ble.n	404450 <m2m_ip_cb+0x1ec>
  40444c:	45ae      	cmp	lr, r5
  40444e:	db0d      	blt.n	40446c <m2m_ip_cb+0x208>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
  404450:	f8ad e020 	strh.w	lr, [sp, #32]
					strRecvMsg.pu8Buffer		= NULL;
  404454:	2300      	movs	r3, #0
  404456:	9307      	str	r3, [sp, #28]
					if(gpfAppSocketCb)
  404458:	4b2c      	ldr	r3, [pc, #176]	; (40450c <m2m_ip_cb+0x2a8>)
  40445a:	681b      	ldr	r3, [r3, #0]
  40445c:	2b00      	cmp	r3, #0
  40445e:	d0de      	beq.n	40441e <m2m_ip_cb+0x1ba>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
  404460:	4b2a      	ldr	r3, [pc, #168]	; (40450c <m2m_ip_cb+0x2a8>)
  404462:	681b      	ldr	r3, [r3, #0]
  404464:	aa07      	add	r2, sp, #28
  404466:	4639      	mov	r1, r7
  404468:	4798      	blx	r3
  40446a:	e7d8      	b.n	40441e <m2m_ip_cb+0x1ba>
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
  40446c:	fa1f f28e 	uxth.w	r2, lr
  404470:	9200      	str	r2, [sp, #0]
  404472:	4423      	add	r3, r4
  404474:	463a      	mov	r2, r7
  404476:	a907      	add	r1, sp, #28
  404478:	4c27      	ldr	r4, [pc, #156]	; (404518 <m2m_ip_cb+0x2b4>)
  40447a:	47a0      	blx	r4
  40447c:	e7cf      	b.n	40441e <m2m_ip_cb+0x1ba>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
  40447e:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
  404482:	2b45      	cmp	r3, #69	; 0x45
  404484:	d019      	beq.n	4044ba <m2m_ip_cb+0x256>
  404486:	284c      	cmp	r0, #76	; 0x4c
  404488:	d017      	beq.n	4044ba <m2m_ip_cb+0x256>
	else if(u8OpCode == SOCKET_CMD_PING)
  40448a:	2852      	cmp	r0, #82	; 0x52
  40448c:	d1c7      	bne.n	40441e <m2m_ip_cb+0x1ba>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
  40448e:	2301      	movs	r3, #1
  404490:	2214      	movs	r2, #20
  404492:	a907      	add	r1, sp, #28
  404494:	4620      	mov	r0, r4
  404496:	4c1b      	ldr	r4, [pc, #108]	; (404504 <m2m_ip_cb+0x2a0>)
  404498:	47a0      	blx	r4
  40449a:	2800      	cmp	r0, #0
  40449c:	d1bf      	bne.n	40441e <m2m_ip_cb+0x1ba>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
  40449e:	4b1f      	ldr	r3, [pc, #124]	; (40451c <m2m_ip_cb+0x2b8>)
  4044a0:	9a08      	ldr	r2, [sp, #32]
  4044a2:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
  4044a4:	681b      	ldr	r3, [r3, #0]
  4044a6:	2b00      	cmp	r3, #0
  4044a8:	d0b9      	beq.n	40441e <m2m_ip_cb+0x1ba>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
  4044aa:	4b1c      	ldr	r3, [pc, #112]	; (40451c <m2m_ip_cb+0x2b8>)
  4044ac:	681b      	ldr	r3, [r3, #0]
  4044ae:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
  4044b2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4044b4:	9807      	ldr	r0, [sp, #28]
  4044b6:	4798      	blx	r3
}
  4044b8:	e7b1      	b.n	40441e <m2m_ip_cb+0x1ba>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
  4044ba:	2847      	cmp	r0, #71	; 0x47
  4044bc:	bf14      	ite	ne
  4044be:	2507      	movne	r5, #7
  4044c0:	2508      	moveq	r5, #8
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
  4044c2:	2300      	movs	r3, #0
  4044c4:	2208      	movs	r2, #8
  4044c6:	a907      	add	r1, sp, #28
  4044c8:	4620      	mov	r0, r4
  4044ca:	4c0e      	ldr	r4, [pc, #56]	; (404504 <m2m_ip_cb+0x2a0>)
  4044cc:	47a0      	blx	r4
  4044ce:	2800      	cmp	r0, #0
  4044d0:	d1a5      	bne.n	40441e <m2m_ip_cb+0x1ba>
			sock = strReply.sock;
  4044d2:	f99d 001c 	ldrsb.w	r0, [sp, #28]
			u16SessionID = strReply.u16SessionID;
  4044d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
  4044da:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  4044de:	f8ad 300c 	strh.w	r3, [sp, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
  4044e2:	4b09      	ldr	r3, [pc, #36]	; (404508 <m2m_ip_cb+0x2a4>)
  4044e4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  4044e8:	88db      	ldrh	r3, [r3, #6]
  4044ea:	b29b      	uxth	r3, r3
  4044ec:	429a      	cmp	r2, r3
  4044ee:	d196      	bne.n	40441e <m2m_ip_cb+0x1ba>
				if(gpfAppSocketCb)
  4044f0:	4b06      	ldr	r3, [pc, #24]	; (40450c <m2m_ip_cb+0x2a8>)
  4044f2:	681b      	ldr	r3, [r3, #0]
  4044f4:	2b00      	cmp	r3, #0
  4044f6:	d092      	beq.n	40441e <m2m_ip_cb+0x1ba>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
  4044f8:	4b04      	ldr	r3, [pc, #16]	; (40450c <m2m_ip_cb+0x2a8>)
  4044fa:	681b      	ldr	r3, [r3, #0]
  4044fc:	aa03      	add	r2, sp, #12
  4044fe:	4629      	mov	r1, r5
  404500:	4798      	blx	r3
	{
  404502:	e78c      	b.n	40441e <m2m_ip_cb+0x1ba>
  404504:	004028e1 	.word	0x004028e1
  404508:	2040ca64 	.word	0x2040ca64
  40450c:	2040cb14 	.word	0x2040cb14
  404510:	2040c35a 	.word	0x2040c35a
  404514:	2040cb1c 	.word	0x2040cb1c
  404518:	004041a9 	.word	0x004041a9
  40451c:	2040cb18 	.word	0x2040cb18

00404520 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
  404520:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
  404522:	4b0a      	ldr	r3, [pc, #40]	; (40454c <socketInit+0x2c>)
  404524:	781b      	ldrb	r3, [r3, #0]
  404526:	b103      	cbz	r3, 40452a <socketInit+0xa>
  404528:	bd08      	pop	{r3, pc}
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
  40452a:	22b0      	movs	r2, #176	; 0xb0
  40452c:	2100      	movs	r1, #0
  40452e:	4808      	ldr	r0, [pc, #32]	; (404550 <socketInit+0x30>)
  404530:	4b08      	ldr	r3, [pc, #32]	; (404554 <socketInit+0x34>)
  404532:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
  404534:	4908      	ldr	r1, [pc, #32]	; (404558 <socketInit+0x38>)
  404536:	2002      	movs	r0, #2
  404538:	4b08      	ldr	r3, [pc, #32]	; (40455c <socketInit+0x3c>)
  40453a:	4798      	blx	r3
		gbSocketInit=1;
  40453c:	2201      	movs	r2, #1
  40453e:	4b03      	ldr	r3, [pc, #12]	; (40454c <socketInit+0x2c>)
  404540:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
  404542:	2200      	movs	r2, #0
  404544:	4b06      	ldr	r3, [pc, #24]	; (404560 <socketInit+0x40>)
  404546:	801a      	strh	r2, [r3, #0]
	}
}
  404548:	e7ee      	b.n	404528 <socketInit+0x8>
  40454a:	bf00      	nop
  40454c:	2040c359 	.word	0x2040c359
  404550:	2040ca64 	.word	0x2040ca64
  404554:	0040228d 	.word	0x0040228d
  404558:	00404265 	.word	0x00404265
  40455c:	004029f5 	.word	0x004029f5
  404560:	2040c35a 	.word	0x2040c35a

00404564 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
  404564:	4b02      	ldr	r3, [pc, #8]	; (404570 <registerSocketCallback+0xc>)
  404566:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
  404568:	4b02      	ldr	r3, [pc, #8]	; (404574 <registerSocketCallback+0x10>)
  40456a:	6019      	str	r1, [r3, #0]
  40456c:	4770      	bx	lr
  40456e:	bf00      	nop
  404570:	2040cb14 	.word	0x2040cb14
  404574:	2040cb1c 	.word	0x2040cb1c

00404578 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
  404578:	b5f0      	push	{r4, r5, r6, r7, lr}
  40457a:	b087      	sub	sp, #28
	SOCKET		sock = -1;
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
  40457c:	2802      	cmp	r0, #2
  40457e:	d158      	bne.n	404632 <socket+0xba>
	{
		if(u8Type == SOCK_STREAM)
  404580:	2901      	cmp	r1, #1
  404582:	d059      	beq.n	404638 <socket+0xc0>
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
  404584:	2902      	cmp	r1, #2
  404586:	d116      	bne.n	4045b6 <socket+0x3e>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
  404588:	260b      	movs	r6, #11
			u8Count = TCP_SOCK_MAX;
  40458a:	2407      	movs	r4, #7
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
  40458c:	4625      	mov	r5, r4
			if(pstrSock->bIsUsed == 0)
  40458e:	4b2e      	ldr	r3, [pc, #184]	; (404648 <socket+0xd0>)
  404590:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404594:	7a9b      	ldrb	r3, [r3, #10]
  404596:	2b00      	cmp	r3, #0
  404598:	d051      	beq.n	40463e <socket+0xc6>
  40459a:	1c63      	adds	r3, r4, #1
  40459c:	b2db      	uxtb	r3, r3
  40459e:	4f2a      	ldr	r7, [pc, #168]	; (404648 <socket+0xd0>)
		for(;u8Count < u8SocketCount; u8Count ++)
  4045a0:	b2dc      	uxtb	r4, r3
  4045a2:	42b4      	cmp	r4, r6
  4045a4:	d240      	bcs.n	404628 <socket+0xb0>
			pstrSock = &gastrSockets[u8Count];
  4045a6:	461d      	mov	r5, r3
			if(pstrSock->bIsUsed == 0)
  4045a8:	eb07 1103 	add.w	r1, r7, r3, lsl #4
  4045ac:	7a89      	ldrb	r1, [r1, #10]
  4045ae:	1c58      	adds	r0, r3, #1
  4045b0:	b121      	cbz	r1, 4045bc <socket+0x44>
  4045b2:	4603      	mov	r3, r0
  4045b4:	e7f4      	b.n	4045a0 <socket+0x28>
			return sock;
  4045b6:	f04f 34ff 	mov.w	r4, #4294967295
  4045ba:	e037      	b.n	40462c <socket+0xb4>
			pstrSock = &gastrSockets[u8Count];
  4045bc:	4822      	ldr	r0, [pc, #136]	; (404648 <socket+0xd0>)
  4045be:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4045c2:	4616      	mov	r6, r2
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
  4045c4:	2210      	movs	r2, #16
  4045c6:	2100      	movs	r1, #0
  4045c8:	4b20      	ldr	r3, [pc, #128]	; (40464c <socket+0xd4>)
  4045ca:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
  4045cc:	4b1e      	ldr	r3, [pc, #120]	; (404648 <socket+0xd0>)
  4045ce:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4045d2:	2201      	movs	r2, #1
  4045d4:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
  4045d6:	4a1e      	ldr	r2, [pc, #120]	; (404650 <socket+0xd8>)
  4045d8:	8813      	ldrh	r3, [r2, #0]
  4045da:	3301      	adds	r3, #1
  4045dc:	b29b      	uxth	r3, r3
  4045de:	8013      	strh	r3, [r2, #0]
				if(gu16SessionID == 0)
  4045e0:	8813      	ldrh	r3, [r2, #0]
  4045e2:	b29b      	uxth	r3, r3
  4045e4:	b91b      	cbnz	r3, 4045ee <socket+0x76>
					++gu16SessionID;
  4045e6:	8813      	ldrh	r3, [r2, #0]
  4045e8:	3301      	adds	r3, #1
  4045ea:	b29b      	uxth	r3, r3
  4045ec:	8013      	strh	r3, [r2, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
  4045ee:	4b18      	ldr	r3, [pc, #96]	; (404650 <socket+0xd8>)
  4045f0:	881a      	ldrh	r2, [r3, #0]
  4045f2:	b292      	uxth	r2, r2
  4045f4:	4b14      	ldr	r3, [pc, #80]	; (404648 <socket+0xd0>)
  4045f6:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  4045fa:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
  4045fc:	b264      	sxtb	r4, r4

				if(u8Flags & SOCKET_FLAGS_SSL)
  4045fe:	f016 0f01 	tst.w	r6, #1
  404602:	d013      	beq.n	40462c <socket+0xb4>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
  404604:	aa06      	add	r2, sp, #24
  404606:	f802 4d04 	strb.w	r4, [r2, #-4]!
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
  40460a:	4b0f      	ldr	r3, [pc, #60]	; (404648 <socket+0xd0>)
  40460c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
  404610:	2321      	movs	r3, #33	; 0x21
  404612:	72eb      	strb	r3, [r5, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
  404614:	2300      	movs	r3, #0
  404616:	9302      	str	r3, [sp, #8]
  404618:	9301      	str	r3, [sp, #4]
  40461a:	9300      	str	r3, [sp, #0]
  40461c:	2304      	movs	r3, #4
  40461e:	2150      	movs	r1, #80	; 0x50
  404620:	2002      	movs	r0, #2
  404622:	4d0c      	ldr	r5, [pc, #48]	; (404654 <socket+0xdc>)
  404624:	47a8      	blx	r5
  404626:	e001      	b.n	40462c <socket+0xb4>
	SOCKET		sock = -1;
  404628:	f04f 34ff 	mov.w	r4, #4294967295
				break;
			}
		}
	}
	return sock;
}
  40462c:	4620      	mov	r0, r4
  40462e:	b007      	add	sp, #28
  404630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SOCKET		sock = -1;
  404632:	f04f 34ff 	mov.w	r4, #4294967295
  404636:	e7f9      	b.n	40462c <socket+0xb4>
			u8SocketCount = TCP_SOCK_MAX;
  404638:	2607      	movs	r6, #7
			u8Count = 0;
  40463a:	2400      	movs	r4, #0
  40463c:	e7a6      	b.n	40458c <socket+0x14>
			pstrSock = &gastrSockets[u8Count];
  40463e:	4802      	ldr	r0, [pc, #8]	; (404648 <socket+0xd0>)
  404640:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404644:	e7bd      	b.n	4045c2 <socket+0x4a>
  404646:	bf00      	nop
  404648:	2040ca64 	.word	0x2040ca64
  40464c:	0040228d 	.word	0x0040228d
  404650:	2040c35a 	.word	0x2040c35a
  404654:	004023f1 	.word	0x004023f1

00404658 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
  404658:	b530      	push	{r4, r5, lr}
  40465a:	b089      	sub	sp, #36	; 0x24
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
  40465c:	1e04      	subs	r4, r0, #0
  40465e:	db36      	blt.n	4046ce <connect+0x76>
  404660:	2900      	cmp	r1, #0
  404662:	d034      	beq.n	4046ce <connect+0x76>
  404664:	4b1d      	ldr	r3, [pc, #116]	; (4046dc <connect+0x84>)
  404666:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40466a:	7a9b      	ldrb	r3, [r3, #10]
  40466c:	b2db      	uxtb	r3, r3
  40466e:	2a00      	cmp	r2, #0
  404670:	d030      	beq.n	4046d4 <connect+0x7c>
  404672:	2b01      	cmp	r3, #1
  404674:	d12e      	bne.n	4046d4 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
  404676:	4b19      	ldr	r3, [pc, #100]	; (4046dc <connect+0x84>)
  404678:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40467c:	7adb      	ldrb	r3, [r3, #11]
  40467e:	f013 0f01 	tst.w	r3, #1
  404682:	d022      	beq.n	4046ca <connect+0x72>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
  404684:	4b15      	ldr	r3, [pc, #84]	; (4046dc <connect+0x84>)
  404686:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  40468a:	7adb      	ldrb	r3, [r3, #11]
  40468c:	f88d 301d 	strb.w	r3, [sp, #29]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
  404690:	254b      	movs	r5, #75	; 0x4b
		}
		strConnect.sock = sock;
  404692:	f88d 401c 	strb.w	r4, [sp, #28]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
  404696:	2208      	movs	r2, #8
  404698:	a805      	add	r0, sp, #20
  40469a:	4b11      	ldr	r3, [pc, #68]	; (4046e0 <connect+0x88>)
  40469c:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
  40469e:	480f      	ldr	r0, [pc, #60]	; (4046dc <connect+0x84>)
  4046a0:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  4046a4:	88c3      	ldrh	r3, [r0, #6]
  4046a6:	f8ad 301e 	strh.w	r3, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
  4046aa:	2300      	movs	r3, #0
  4046ac:	9302      	str	r3, [sp, #8]
  4046ae:	9301      	str	r3, [sp, #4]
  4046b0:	9300      	str	r3, [sp, #0]
  4046b2:	230c      	movs	r3, #12
  4046b4:	aa05      	add	r2, sp, #20
  4046b6:	4629      	mov	r1, r5
  4046b8:	2002      	movs	r0, #2
  4046ba:	4c0a      	ldr	r4, [pc, #40]	; (4046e4 <connect+0x8c>)
  4046bc:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
  4046be:	2800      	cmp	r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  4046c0:	bf18      	it	ne
  4046c2:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
  4046c6:	b009      	add	sp, #36	; 0x24
  4046c8:	bd30      	pop	{r4, r5, pc}
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
  4046ca:	2544      	movs	r5, #68	; 0x44
  4046cc:	e7e1      	b.n	404692 <connect+0x3a>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  4046ce:	f06f 0005 	mvn.w	r0, #5
  4046d2:	e7f8      	b.n	4046c6 <connect+0x6e>
  4046d4:	f06f 0005 	mvn.w	r0, #5
  4046d8:	e7f5      	b.n	4046c6 <connect+0x6e>
  4046da:	bf00      	nop
  4046dc:	2040ca64 	.word	0x2040ca64
  4046e0:	00402279 	.word	0x00402279
  4046e4:	004023f1 	.word	0x004023f1

004046e8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
  4046e8:	b530      	push	{r4, r5, lr}
  4046ea:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
  4046ec:	460c      	mov	r4, r1
  4046ee:	3100      	adds	r1, #0
  4046f0:	bf18      	it	ne
  4046f2:	2101      	movne	r1, #1
  4046f4:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
  4046f8:	bf88      	it	hi
  4046fa:	2100      	movhi	r1, #0
  4046fc:	2900      	cmp	r1, #0
  4046fe:	d037      	beq.n	404770 <send+0x88>
  404700:	2800      	cmp	r0, #0
  404702:	db35      	blt.n	404770 <send+0x88>
  404704:	4b1d      	ldr	r3, [pc, #116]	; (40477c <send+0x94>)
  404706:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  40470a:	7a9b      	ldrb	r3, [r3, #10]
  40470c:	b2db      	uxtb	r3, r3
  40470e:	2b01      	cmp	r3, #1
  404710:	d131      	bne.n	404776 <send+0x8e>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
  404712:	f88d 0010 	strb.w	r0, [sp, #16]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
  404716:	f8ad 2012 	strh.w	r2, [sp, #18]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
  40471a:	4b18      	ldr	r3, [pc, #96]	; (40477c <send+0x94>)
  40471c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404720:	88db      	ldrh	r3, [r3, #6]
  404722:	f8ad 301c 	strh.w	r3, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
  404726:	2807      	cmp	r0, #7
  404728:	bfb4      	ite	lt
  40472a:	2550      	movlt	r5, #80	; 0x50
  40472c:	2544      	movge	r5, #68	; 0x44
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  40472e:	4b13      	ldr	r3, [pc, #76]	; (40477c <send+0x94>)
  404730:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  404734:	7adb      	ldrb	r3, [r3, #11]
  404736:	f013 0f01 	tst.w	r3, #1
  40473a:	d017      	beq.n	40476c <send+0x84>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
  40473c:	4b0f      	ldr	r3, [pc, #60]	; (40477c <send+0x94>)
  40473e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  404742:	8905      	ldrh	r5, [r0, #8]
  404744:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
  404746:	214c      	movs	r1, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
  404748:	9502      	str	r5, [sp, #8]
  40474a:	9201      	str	r2, [sp, #4]
  40474c:	9400      	str	r4, [sp, #0]
  40474e:	2310      	movs	r3, #16
  404750:	eb0d 0203 	add.w	r2, sp, r3
  404754:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  404758:	2002      	movs	r0, #2
  40475a:	4c09      	ldr	r4, [pc, #36]	; (404780 <send+0x98>)
  40475c:	47a0      	blx	r4
		if(s16Ret != SOCK_ERR_NO_ERROR)
  40475e:	2800      	cmp	r0, #0
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
  404760:	bf0c      	ite	eq
  404762:	2000      	moveq	r0, #0
  404764:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
  404768:	b009      	add	sp, #36	; 0x24
  40476a:	bd30      	pop	{r4, r5, pc}
		u8Cmd			= SOCKET_CMD_SEND;
  40476c:	2145      	movs	r1, #69	; 0x45
  40476e:	e7eb      	b.n	404748 <send+0x60>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404770:	f06f 0005 	mvn.w	r0, #5
  404774:	e7f8      	b.n	404768 <send+0x80>
  404776:	f06f 0005 	mvn.w	r0, #5
  40477a:	e7f5      	b.n	404768 <send+0x80>
  40477c:	2040ca64 	.word	0x2040ca64
  404780:	004023f1 	.word	0x004023f1

00404784 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404784:	2900      	cmp	r1, #0
  404786:	bf18      	it	ne
  404788:	2a00      	cmpne	r2, #0
  40478a:	d044      	beq.n	404816 <recv+0x92>
{
  40478c:	b570      	push	{r4, r5, r6, lr}
  40478e:	b086      	sub	sp, #24
  404790:	460e      	mov	r6, r1
  404792:	4615      	mov	r5, r2
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
  404794:	2800      	cmp	r0, #0
  404796:	db36      	blt.n	404806 <recv+0x82>
  404798:	4a20      	ldr	r2, [pc, #128]	; (40481c <recv+0x98>)
  40479a:	eb02 1200 	add.w	r2, r2, r0, lsl #4
  40479e:	7a92      	ldrb	r2, [r2, #10]
  4047a0:	b2d2      	uxtb	r2, r2
  4047a2:	2a01      	cmp	r2, #1
  4047a4:	d132      	bne.n	40480c <recv+0x88>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
  4047a6:	4c1d      	ldr	r4, [pc, #116]	; (40481c <recv+0x98>)
  4047a8:	0101      	lsls	r1, r0, #4
  4047aa:	1862      	adds	r2, r4, r1
  4047ac:	5066      	str	r6, [r4, r1]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
  4047ae:	8095      	strh	r5, [r2, #4]

		if(!gastrSockets[sock].bIsRecvPending)
  4047b0:	7b12      	ldrb	r2, [r2, #12]
  4047b2:	2a00      	cmp	r2, #0
  4047b4:	d12d      	bne.n	404812 <recv+0x8e>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
  4047b6:	eb04 1200 	add.w	r2, r4, r0, lsl #4
  4047ba:	2101      	movs	r1, #1
  4047bc:	7311      	strb	r1, [r2, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  4047be:	7ad2      	ldrb	r2, [r2, #11]
  4047c0:	400a      	ands	r2, r1
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
  4047c2:	2a00      	cmp	r2, #0
  4047c4:	bf0c      	ite	eq
  4047c6:	2146      	moveq	r1, #70	; 0x46
  4047c8:	214d      	movne	r1, #77	; 0x4d
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
  4047ca:	b9d3      	cbnz	r3, 404802 <recv+0x7e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
  4047cc:	f04f 33ff 	mov.w	r3, #4294967295
  4047d0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
  4047d2:	f88d 0014 	strb.w	r0, [sp, #20]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
  4047d6:	4b11      	ldr	r3, [pc, #68]	; (40481c <recv+0x98>)
  4047d8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  4047dc:	88c3      	ldrh	r3, [r0, #6]
  4047de:	f8ad 3016 	strh.w	r3, [sp, #22]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
  4047e2:	2300      	movs	r3, #0
  4047e4:	9302      	str	r3, [sp, #8]
  4047e6:	9301      	str	r3, [sp, #4]
  4047e8:	9300      	str	r3, [sp, #0]
  4047ea:	2308      	movs	r3, #8
  4047ec:	aa04      	add	r2, sp, #16
  4047ee:	2002      	movs	r0, #2
  4047f0:	4c0b      	ldr	r4, [pc, #44]	; (404820 <recv+0x9c>)
  4047f2:	47a0      	blx	r4
			if(s16Ret != SOCK_ERR_NO_ERROR)
  4047f4:	2800      	cmp	r0, #0
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
  4047f6:	bf0c      	ite	eq
  4047f8:	2000      	moveq	r0, #0
  4047fa:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
  4047fe:	b006      	add	sp, #24
  404800:	bd70      	pop	{r4, r5, r6, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
  404802:	9304      	str	r3, [sp, #16]
  404804:	e7e5      	b.n	4047d2 <recv+0x4e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404806:	f06f 0005 	mvn.w	r0, #5
  40480a:	e7f8      	b.n	4047fe <recv+0x7a>
  40480c:	f06f 0005 	mvn.w	r0, #5
  404810:	e7f5      	b.n	4047fe <recv+0x7a>
		s16Ret = SOCK_ERR_NO_ERROR;
  404812:	2000      	movs	r0, #0
  404814:	e7f3      	b.n	4047fe <recv+0x7a>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
  404816:	f06f 0005 	mvn.w	r0, #5
}
  40481a:	4770      	bx	lr
  40481c:	2040ca64 	.word	0x2040ca64
  404820:	004023f1 	.word	0x004023f1

00404824 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
  404824:	b530      	push	{r4, r5, lr}
  404826:	b087      	sub	sp, #28
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
  404828:	1e04      	subs	r4, r0, #0
  40482a:	db2f      	blt.n	40488c <close+0x68>
  40482c:	4b1a      	ldr	r3, [pc, #104]	; (404898 <close+0x74>)
  40482e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404832:	7a9b      	ldrb	r3, [r3, #10]
  404834:	b2db      	uxtb	r3, r3
  404836:	2b01      	cmp	r3, #1
  404838:	d12b      	bne.n	404892 <close+0x6e>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
  40483a:	f88d 4014 	strb.w	r4, [sp, #20]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
  40483e:	4b16      	ldr	r3, [pc, #88]	; (404898 <close+0x74>)
  404840:	eb03 1304 	add.w	r3, r3, r4, lsl #4
  404844:	88da      	ldrh	r2, [r3, #6]
  404846:	f8ad 2016 	strh.w	r2, [sp, #22]
		
		gastrSockets[sock].bIsUsed = 0;
  40484a:	2200      	movs	r2, #0
  40484c:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
  40484e:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
  404850:	7adb      	ldrb	r3, [r3, #11]
  404852:	f003 0301 	and.w	r3, r3, #1
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
  404856:	4293      	cmp	r3, r2
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
  404858:	9202      	str	r2, [sp, #8]
  40485a:	9201      	str	r2, [sp, #4]
  40485c:	9200      	str	r2, [sp, #0]
  40485e:	f04f 0304 	mov.w	r3, #4
  404862:	aa05      	add	r2, sp, #20
  404864:	bf0c      	ite	eq
  404866:	2149      	moveq	r1, #73	; 0x49
  404868:	214e      	movne	r1, #78	; 0x4e
  40486a:	2002      	movs	r0, #2
  40486c:	4d0b      	ldr	r5, [pc, #44]	; (40489c <close+0x78>)
  40486e:	47a8      	blx	r5
		if(s8Ret != SOCK_ERR_NO_ERROR)
  404870:	1e05      	subs	r5, r0, #0
		{
			s8Ret = SOCK_ERR_INVALID;
  404872:	bf18      	it	ne
  404874:	f06f 0508 	mvnne.w	r5, #8
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
  404878:	2210      	movs	r2, #16
  40487a:	2100      	movs	r1, #0
  40487c:	4806      	ldr	r0, [pc, #24]	; (404898 <close+0x74>)
  40487e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  404882:	4b07      	ldr	r3, [pc, #28]	; (4048a0 <close+0x7c>)
  404884:	4798      	blx	r3
	}
	return s8Ret;
}
  404886:	4628      	mov	r0, r5
  404888:	b007      	add	sp, #28
  40488a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
  40488c:	f06f 0505 	mvn.w	r5, #5
  404890:	e7f9      	b.n	404886 <close+0x62>
  404892:	f06f 0505 	mvn.w	r5, #5
  404896:	e7f6      	b.n	404886 <close+0x62>
  404898:	2040ca64 	.word	0x2040ca64
  40489c:	004023f1 	.word	0x004023f1
  4048a0:	0040228d 	.word	0x0040228d

004048a4 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
  4048a4:	b570      	push	{r4, r5, r6, lr}
  4048a6:	b082      	sub	sp, #8
  4048a8:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
  4048aa:	4b2b      	ldr	r3, [pc, #172]	; (404958 <spi_flash_enable+0xb4>)
  4048ac:	4798      	blx	r3
  4048ae:	f3c0 000b 	ubfx	r0, r0, #0, #12
  4048b2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
  4048b6:	d203      	bcs.n	4048c0 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
  4048b8:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
  4048ba:	4620      	mov	r0, r4
  4048bc:	b002      	add	sp, #8
  4048be:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
  4048c0:	a901      	add	r1, sp, #4
  4048c2:	f241 4010 	movw	r0, #5136	; 0x1410
  4048c6:	4b25      	ldr	r3, [pc, #148]	; (40495c <spi_flash_enable+0xb8>)
  4048c8:	4798      	blx	r3
		if(s8Ret != M2M_SUCCESS) {
  4048ca:	4604      	mov	r4, r0
  4048cc:	2800      	cmp	r0, #0
  4048ce:	d1f4      	bne.n	4048ba <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
  4048d0:	4b23      	ldr	r3, [pc, #140]	; (404960 <spi_flash_enable+0xbc>)
  4048d2:	9a01      	ldr	r2, [sp, #4]
  4048d4:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
  4048d6:	4923      	ldr	r1, [pc, #140]	; (404964 <spi_flash_enable+0xc0>)
  4048d8:	4319      	orrs	r1, r3
  4048da:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  4048dc:	f241 4010 	movw	r0, #5136	; 0x1410
  4048e0:	4b21      	ldr	r3, [pc, #132]	; (404968 <spi_flash_enable+0xc4>)
  4048e2:	4798      	blx	r3
		if(enable) {
  4048e4:	b305      	cbz	r5, 404928 <spi_flash_enable+0x84>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  4048e6:	2100      	movs	r1, #0
  4048e8:	4820      	ldr	r0, [pc, #128]	; (40496c <spi_flash_enable+0xc8>)
  4048ea:	4d1f      	ldr	r5, [pc, #124]	; (404968 <spi_flash_enable+0xc4>)
  4048ec:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  4048ee:	21ab      	movs	r1, #171	; 0xab
  4048f0:	481f      	ldr	r0, [pc, #124]	; (404970 <spi_flash_enable+0xcc>)
  4048f2:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  4048f4:	2101      	movs	r1, #1
  4048f6:	481f      	ldr	r0, [pc, #124]	; (404974 <spi_flash_enable+0xd0>)
  4048f8:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  4048fa:	2100      	movs	r1, #0
  4048fc:	481e      	ldr	r0, [pc, #120]	; (404978 <spi_flash_enable+0xd4>)
  4048fe:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
  404900:	2181      	movs	r1, #129	; 0x81
  404902:	481e      	ldr	r0, [pc, #120]	; (40497c <spi_flash_enable+0xd8>)
  404904:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404906:	4e1e      	ldr	r6, [pc, #120]	; (404980 <spi_flash_enable+0xdc>)
  404908:	4d1e      	ldr	r5, [pc, #120]	; (404984 <spi_flash_enable+0xe0>)
  40490a:	4630      	mov	r0, r6
  40490c:	47a8      	blx	r5
  40490e:	2801      	cmp	r0, #1
  404910:	d1fb      	bne.n	40490a <spi_flash_enable+0x66>
		u32Val &= ~((0x7777ul) << 12);
  404912:	4913      	ldr	r1, [pc, #76]	; (404960 <spi_flash_enable+0xbc>)
  404914:	9b01      	ldr	r3, [sp, #4]
  404916:	4019      	ands	r1, r3
		u32Val |= ((0x0010ul) << 12);
  404918:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40491c:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
  40491e:	f241 4010 	movw	r0, #5136	; 0x1410
  404922:	4b11      	ldr	r3, [pc, #68]	; (404968 <spi_flash_enable+0xc4>)
  404924:	4798      	blx	r3
  404926:	e7c8      	b.n	4048ba <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
  404928:	2100      	movs	r1, #0
  40492a:	4810      	ldr	r0, [pc, #64]	; (40496c <spi_flash_enable+0xc8>)
  40492c:	4d0e      	ldr	r5, [pc, #56]	; (404968 <spi_flash_enable+0xc4>)
  40492e:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
  404930:	21b9      	movs	r1, #185	; 0xb9
  404932:	480f      	ldr	r0, [pc, #60]	; (404970 <spi_flash_enable+0xcc>)
  404934:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
  404936:	2101      	movs	r1, #1
  404938:	480e      	ldr	r0, [pc, #56]	; (404974 <spi_flash_enable+0xd0>)
  40493a:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
  40493c:	2100      	movs	r1, #0
  40493e:	480e      	ldr	r0, [pc, #56]	; (404978 <spi_flash_enable+0xd4>)
  404940:	47a8      	blx	r5
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
  404942:	2181      	movs	r1, #129	; 0x81
  404944:	480d      	ldr	r0, [pc, #52]	; (40497c <spi_flash_enable+0xd8>)
  404946:	47a8      	blx	r5
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
  404948:	4e0d      	ldr	r6, [pc, #52]	; (404980 <spi_flash_enable+0xdc>)
  40494a:	4d0e      	ldr	r5, [pc, #56]	; (404984 <spi_flash_enable+0xe0>)
  40494c:	4630      	mov	r0, r6
  40494e:	47a8      	blx	r5
  404950:	2801      	cmp	r0, #1
  404952:	d1fb      	bne.n	40494c <spi_flash_enable+0xa8>
  404954:	e7dd      	b.n	404912 <spi_flash_enable+0x6e>
  404956:	bf00      	nop
  404958:	004032b9 	.word	0x004032b9
  40495c:	004035b5 	.word	0x004035b5
  404960:	f8888fff 	.word	0xf8888fff
  404964:	01111000 	.word	0x01111000
  404968:	004035c1 	.word	0x004035c1
  40496c:	00010208 	.word	0x00010208
  404970:	0001020c 	.word	0x0001020c
  404974:	00010214 	.word	0x00010214
  404978:	0001021c 	.word	0x0001021c
  40497c:	00010204 	.word	0x00010204
  404980:	00010218 	.word	0x00010218
  404984:	004035a9 	.word	0x004035a9

00404988 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  404988:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40498a:	4810      	ldr	r0, [pc, #64]	; (4049cc <sysclk_init+0x44>)
  40498c:	4b10      	ldr	r3, [pc, #64]	; (4049d0 <sysclk_init+0x48>)
  40498e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  404990:	213e      	movs	r1, #62	; 0x3e
  404992:	2000      	movs	r0, #0
  404994:	4b0f      	ldr	r3, [pc, #60]	; (4049d4 <sysclk_init+0x4c>)
  404996:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  404998:	4c0f      	ldr	r4, [pc, #60]	; (4049d8 <sysclk_init+0x50>)
  40499a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40499c:	2800      	cmp	r0, #0
  40499e:	d0fc      	beq.n	40499a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4049a0:	4b0e      	ldr	r3, [pc, #56]	; (4049dc <sysclk_init+0x54>)
  4049a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4049a4:	4a0e      	ldr	r2, [pc, #56]	; (4049e0 <sysclk_init+0x58>)
  4049a6:	4b0f      	ldr	r3, [pc, #60]	; (4049e4 <sysclk_init+0x5c>)
  4049a8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4049aa:	4c0f      	ldr	r4, [pc, #60]	; (4049e8 <sysclk_init+0x60>)
  4049ac:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4049ae:	2800      	cmp	r0, #0
  4049b0:	d0fc      	beq.n	4049ac <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4049b2:	2002      	movs	r0, #2
  4049b4:	4b0d      	ldr	r3, [pc, #52]	; (4049ec <sysclk_init+0x64>)
  4049b6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4049b8:	2000      	movs	r0, #0
  4049ba:	4b0d      	ldr	r3, [pc, #52]	; (4049f0 <sysclk_init+0x68>)
  4049bc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4049be:	4b0d      	ldr	r3, [pc, #52]	; (4049f4 <sysclk_init+0x6c>)
  4049c0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4049c2:	4802      	ldr	r0, [pc, #8]	; (4049cc <sysclk_init+0x44>)
  4049c4:	4b02      	ldr	r3, [pc, #8]	; (4049d0 <sysclk_init+0x48>)
  4049c6:	4798      	blx	r3
  4049c8:	bd10      	pop	{r4, pc}
  4049ca:	bf00      	nop
  4049cc:	11e1a300 	.word	0x11e1a300
  4049d0:	00405605 	.word	0x00405605
  4049d4:	004050cd 	.word	0x004050cd
  4049d8:	00405121 	.word	0x00405121
  4049dc:	00405131 	.word	0x00405131
  4049e0:	20183f01 	.word	0x20183f01
  4049e4:	400e0600 	.word	0x400e0600
  4049e8:	00405141 	.word	0x00405141
  4049ec:	00405031 	.word	0x00405031
  4049f0:	00405069 	.word	0x00405069
  4049f4:	004054f9 	.word	0x004054f9

004049f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4049f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4049fc:	b980      	cbnz	r0, 404a20 <_read+0x28>
  4049fe:	460c      	mov	r4, r1
  404a00:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  404a02:	2a00      	cmp	r2, #0
  404a04:	dd0f      	ble.n	404a26 <_read+0x2e>
  404a06:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  404a08:	4e08      	ldr	r6, [pc, #32]	; (404a2c <_read+0x34>)
  404a0a:	4d09      	ldr	r5, [pc, #36]	; (404a30 <_read+0x38>)
  404a0c:	6830      	ldr	r0, [r6, #0]
  404a0e:	4621      	mov	r1, r4
  404a10:	682b      	ldr	r3, [r5, #0]
  404a12:	4798      	blx	r3
		ptr++;
  404a14:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  404a16:	42bc      	cmp	r4, r7
  404a18:	d1f8      	bne.n	404a0c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  404a1a:	4640      	mov	r0, r8
  404a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404a20:	f04f 38ff 	mov.w	r8, #4294967295
  404a24:	e7f9      	b.n	404a1a <_read+0x22>
	for (; len > 0; --len) {
  404a26:	4680      	mov	r8, r0
  404a28:	e7f7      	b.n	404a1a <_read+0x22>
  404a2a:	bf00      	nop
  404a2c:	2040cb28 	.word	0x2040cb28
  404a30:	2040cb20 	.word	0x2040cb20

00404a34 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  404a34:	3801      	subs	r0, #1
  404a36:	2802      	cmp	r0, #2
  404a38:	d815      	bhi.n	404a66 <_write+0x32>
{
  404a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a3e:	460e      	mov	r6, r1
  404a40:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  404a42:	b19a      	cbz	r2, 404a6c <_write+0x38>
  404a44:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  404a46:	f8df 8038 	ldr.w	r8, [pc, #56]	; 404a80 <_write+0x4c>
  404a4a:	4f0c      	ldr	r7, [pc, #48]	; (404a7c <_write+0x48>)
  404a4c:	f8d8 0000 	ldr.w	r0, [r8]
  404a50:	f815 1b01 	ldrb.w	r1, [r5], #1
  404a54:	683b      	ldr	r3, [r7, #0]
  404a56:	4798      	blx	r3
  404a58:	2800      	cmp	r0, #0
  404a5a:	db0a      	blt.n	404a72 <_write+0x3e>
  404a5c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  404a5e:	3c01      	subs	r4, #1
  404a60:	d1f4      	bne.n	404a4c <_write+0x18>
  404a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  404a66:	f04f 30ff 	mov.w	r0, #4294967295
  404a6a:	4770      	bx	lr
	for (; len != 0; --len) {
  404a6c:	4610      	mov	r0, r2
  404a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  404a72:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  404a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404a7a:	bf00      	nop
  404a7c:	2040cb24 	.word	0x2040cb24
  404a80:	2040cb28 	.word	0x2040cb28

00404a84 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  404a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  404a86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404a8a:	4b5c      	ldr	r3, [pc, #368]	; (404bfc <board_init+0x178>)
  404a8c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  404a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404a92:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  404a96:	4b5a      	ldr	r3, [pc, #360]	; (404c00 <board_init+0x17c>)
  404a98:	2200      	movs	r2, #0
  404a9a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  404a9e:	695a      	ldr	r2, [r3, #20]
  404aa0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  404aa4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  404aa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404aaa:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  404aae:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  404ab2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  404ab6:	f007 0007 	and.w	r0, r7, #7
  404aba:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  404abc:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  404ac0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  404ac4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  404ac8:	f3bf 8f4f 	dsb	sy
  404acc:	f04f 34ff 	mov.w	r4, #4294967295
  404ad0:	fa04 fc00 	lsl.w	ip, r4, r0
  404ad4:	fa06 f000 	lsl.w	r0, r6, r0
  404ad8:	fa04 f40e 	lsl.w	r4, r4, lr
  404adc:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  404ae0:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  404ae2:	463a      	mov	r2, r7
  404ae4:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  404ae6:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  404aea:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  404aee:	3a01      	subs	r2, #1
  404af0:	4423      	add	r3, r4
  404af2:	f1b2 3fff 	cmp.w	r2, #4294967295
  404af6:	d1f6      	bne.n	404ae6 <board_init+0x62>
        } while(sets--);
  404af8:	3e01      	subs	r6, #1
  404afa:	4460      	add	r0, ip
  404afc:	f1b6 3fff 	cmp.w	r6, #4294967295
  404b00:	d1ef      	bne.n	404ae2 <board_init+0x5e>
  404b02:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  404b06:	4b3e      	ldr	r3, [pc, #248]	; (404c00 <board_init+0x17c>)
  404b08:	695a      	ldr	r2, [r3, #20]
  404b0a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  404b0e:	615a      	str	r2, [r3, #20]
  404b10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404b14:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404b18:	4a3a      	ldr	r2, [pc, #232]	; (404c04 <board_init+0x180>)
  404b1a:	493b      	ldr	r1, [pc, #236]	; (404c08 <board_init+0x184>)
  404b1c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  404b1e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  404b22:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  404b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404b28:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  404b2c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  404b30:	f022 0201 	bic.w	r2, r2, #1
  404b34:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  404b38:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  404b3c:	f022 0201 	bic.w	r2, r2, #1
  404b40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  404b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  404b48:	f3bf 8f6f 	isb	sy
  404b4c:	200a      	movs	r0, #10
  404b4e:	4c2f      	ldr	r4, [pc, #188]	; (404c0c <board_init+0x188>)
  404b50:	47a0      	blx	r4
  404b52:	200b      	movs	r0, #11
  404b54:	47a0      	blx	r4
  404b56:	200c      	movs	r0, #12
  404b58:	47a0      	blx	r4
  404b5a:	2010      	movs	r0, #16
  404b5c:	47a0      	blx	r4
  404b5e:	2011      	movs	r0, #17
  404b60:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  404b62:	4b2b      	ldr	r3, [pc, #172]	; (404c10 <board_init+0x18c>)
  404b64:	f44f 7280 	mov.w	r2, #256	; 0x100
  404b68:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404b6a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  404b6e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  404b70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  404b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
  404b78:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  404b7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  404b7e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  404b80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404b84:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  404b86:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  404b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  404b8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404b8e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b92:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404b94:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404b96:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  404b9a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  404b9c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  404ba0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  404ba4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  404ba8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  404bac:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404bb2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404bb4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  404bba:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404bbc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404bc0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  404bc2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404bc4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  404bc8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404bca:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  404bcc:	4a11      	ldr	r2, [pc, #68]	; (404c14 <board_init+0x190>)
  404bce:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  404bd2:	f043 0310 	orr.w	r3, r3, #16
  404bd6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  404bda:	4b0f      	ldr	r3, [pc, #60]	; (404c18 <board_init+0x194>)
  404bdc:	2210      	movs	r2, #16
  404bde:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  404be0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  404be4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  404be6:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  404be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  404bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
  404bee:	4311      	orrs	r1, r2
  404bf0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  404bf2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  404bf4:	4311      	orrs	r1, r2
  404bf6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  404bf8:	605a      	str	r2, [r3, #4]
  404bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404bfc:	400e1850 	.word	0x400e1850
  404c00:	e000ed00 	.word	0xe000ed00
  404c04:	400e0c00 	.word	0x400e0c00
  404c08:	5a00080c 	.word	0x5a00080c
  404c0c:	00405151 	.word	0x00405151
  404c10:	400e1200 	.word	0x400e1200
  404c14:	40088000 	.word	0x40088000
  404c18:	400e1000 	.word	0x400e1000

00404c1c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  404c1c:	b90a      	cbnz	r2, 404c22 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  404c1e:	6601      	str	r1, [r0, #96]	; 0x60
  404c20:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404c22:	6641      	str	r1, [r0, #100]	; 0x64
  404c24:	4770      	bx	lr

00404c26 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  404c26:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  404c28:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  404c2c:	d03a      	beq.n	404ca4 <pio_set_peripheral+0x7e>
  404c2e:	d813      	bhi.n	404c58 <pio_set_peripheral+0x32>
  404c30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  404c34:	d025      	beq.n	404c82 <pio_set_peripheral+0x5c>
  404c36:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  404c3a:	d10a      	bne.n	404c52 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c3c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404c3e:	4313      	orrs	r3, r2
  404c40:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  404c42:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404c44:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404c46:	400b      	ands	r3, r1
  404c48:	ea23 0302 	bic.w	r3, r3, r2
  404c4c:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  404c4e:	6042      	str	r2, [r0, #4]
  404c50:	4770      	bx	lr
	switch (ul_type) {
  404c52:	2900      	cmp	r1, #0
  404c54:	d1fb      	bne.n	404c4e <pio_set_peripheral+0x28>
  404c56:	4770      	bx	lr
  404c58:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  404c5c:	d021      	beq.n	404ca2 <pio_set_peripheral+0x7c>
  404c5e:	d809      	bhi.n	404c74 <pio_set_peripheral+0x4e>
  404c60:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  404c64:	d1f3      	bne.n	404c4e <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c66:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  404c68:	4313      	orrs	r3, r2
  404c6a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c6c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404c6e:	4313      	orrs	r3, r2
  404c70:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404c72:	e7ec      	b.n	404c4e <pio_set_peripheral+0x28>
	switch (ul_type) {
  404c74:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  404c78:	d013      	beq.n	404ca2 <pio_set_peripheral+0x7c>
  404c7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  404c7e:	d010      	beq.n	404ca2 <pio_set_peripheral+0x7c>
  404c80:	e7e5      	b.n	404c4e <pio_set_peripheral+0x28>
{
  404c82:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  404c84:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404c86:	6f04      	ldr	r4, [r0, #112]	; 0x70
  404c88:	43d3      	mvns	r3, r2
  404c8a:	4021      	ands	r1, r4
  404c8c:	461c      	mov	r4, r3
  404c8e:	4019      	ands	r1, r3
  404c90:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404c92:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  404c94:	6f41      	ldr	r1, [r0, #116]	; 0x74
  404c96:	400b      	ands	r3, r1
  404c98:	4023      	ands	r3, r4
  404c9a:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  404c9c:	6042      	str	r2, [r0, #4]
}
  404c9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  404ca2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  404ca4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  404ca6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  404ca8:	400b      	ands	r3, r1
  404caa:	ea23 0302 	bic.w	r3, r3, r2
  404cae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  404cb0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  404cb2:	4313      	orrs	r3, r2
  404cb4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  404cb6:	e7ca      	b.n	404c4e <pio_set_peripheral+0x28>

00404cb8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  404cb8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404cba:	f012 0f01 	tst.w	r2, #1
  404cbe:	d10d      	bne.n	404cdc <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  404cc0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  404cc2:	f012 0f0a 	tst.w	r2, #10
  404cc6:	d00b      	beq.n	404ce0 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  404cc8:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  404cca:	f012 0f02 	tst.w	r2, #2
  404cce:	d109      	bne.n	404ce4 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  404cd0:	f012 0f08 	tst.w	r2, #8
  404cd4:	d008      	beq.n	404ce8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  404cd6:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  404cda:	e005      	b.n	404ce8 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  404cdc:	6641      	str	r1, [r0, #100]	; 0x64
  404cde:	e7f0      	b.n	404cc2 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  404ce0:	6241      	str	r1, [r0, #36]	; 0x24
  404ce2:	e7f2      	b.n	404cca <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  404ce4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  404ce8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  404cea:	6001      	str	r1, [r0, #0]
  404cec:	4770      	bx	lr

00404cee <pio_set_output>:
{
  404cee:	b410      	push	{r4}
  404cf0:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  404cf2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  404cf4:	b94c      	cbnz	r4, 404d0a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  404cf6:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  404cf8:	b14b      	cbz	r3, 404d0e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  404cfa:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  404cfc:	b94a      	cbnz	r2, 404d12 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  404cfe:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  404d00:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  404d02:	6001      	str	r1, [r0, #0]
}
  404d04:	f85d 4b04 	ldr.w	r4, [sp], #4
  404d08:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  404d0a:	6641      	str	r1, [r0, #100]	; 0x64
  404d0c:	e7f4      	b.n	404cf8 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  404d0e:	6541      	str	r1, [r0, #84]	; 0x54
  404d10:	e7f4      	b.n	404cfc <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  404d12:	6301      	str	r1, [r0, #48]	; 0x30
  404d14:	e7f4      	b.n	404d00 <pio_set_output+0x12>

00404d16 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  404d16:	f012 0f10 	tst.w	r2, #16
  404d1a:	d012      	beq.n	404d42 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  404d1c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  404d20:	f012 0f20 	tst.w	r2, #32
  404d24:	d007      	beq.n	404d36 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  404d26:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  404d2a:	f012 0f40 	tst.w	r2, #64	; 0x40
  404d2e:	d005      	beq.n	404d3c <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  404d30:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  404d34:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  404d36:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  404d3a:	e7f6      	b.n	404d2a <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  404d3c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  404d40:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  404d42:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  404d46:	4770      	bx	lr

00404d48 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  404d48:	6401      	str	r1, [r0, #64]	; 0x40
  404d4a:	4770      	bx	lr

00404d4c <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
  404d4c:	6441      	str	r1, [r0, #68]	; 0x44
  404d4e:	4770      	bx	lr

00404d50 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  404d50:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  404d52:	4770      	bx	lr

00404d54 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  404d54:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  404d56:	4770      	bx	lr

00404d58 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  404d58:	b570      	push	{r4, r5, r6, lr}
  404d5a:	b082      	sub	sp, #8
  404d5c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  404d5e:	4c46      	ldr	r4, [pc, #280]	; (404e78 <pio_configure_pin+0x120>)
  404d60:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  404d64:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  404d66:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  404d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  404d6e:	d059      	beq.n	404e24 <pio_configure_pin+0xcc>
  404d70:	d80a      	bhi.n	404d88 <pio_configure_pin+0x30>
  404d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  404d76:	d02f      	beq.n	404dd8 <pio_configure_pin+0x80>
  404d78:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  404d7c:	d03f      	beq.n	404dfe <pio_configure_pin+0xa6>
  404d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  404d82:	d016      	beq.n	404db2 <pio_configure_pin+0x5a>
		return 0;
  404d84:	2000      	movs	r0, #0
  404d86:	e012      	b.n	404dae <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  404d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  404d8c:	d05d      	beq.n	404e4a <pio_configure_pin+0xf2>
  404d8e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  404d92:	d05a      	beq.n	404e4a <pio_configure_pin+0xf2>
  404d94:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  404d98:	d1f4      	bne.n	404d84 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  404d9a:	f000 011f 	and.w	r1, r0, #31
  404d9e:	2601      	movs	r6, #1
  404da0:	462a      	mov	r2, r5
  404da2:	fa06 f101 	lsl.w	r1, r6, r1
  404da6:	4620      	mov	r0, r4
  404da8:	4b34      	ldr	r3, [pc, #208]	; (404e7c <pio_configure_pin+0x124>)
  404daa:	4798      	blx	r3
	return 1;
  404dac:	4630      	mov	r0, r6
}
  404dae:	b002      	add	sp, #8
  404db0:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  404db2:	f000 001f 	and.w	r0, r0, #31
  404db6:	2601      	movs	r6, #1
  404db8:	4086      	lsls	r6, r0
  404dba:	4632      	mov	r2, r6
  404dbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  404dc0:	4620      	mov	r0, r4
  404dc2:	4b2f      	ldr	r3, [pc, #188]	; (404e80 <pio_configure_pin+0x128>)
  404dc4:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404dc6:	f015 0f01 	tst.w	r5, #1
  404dca:	d102      	bne.n	404dd2 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  404dcc:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404dce:	2001      	movs	r0, #1
  404dd0:	e7ed      	b.n	404dae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404dd2:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404dd4:	2001      	movs	r0, #1
  404dd6:	e7ea      	b.n	404dae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  404dd8:	f000 001f 	and.w	r0, r0, #31
  404ddc:	2601      	movs	r6, #1
  404dde:	4086      	lsls	r6, r0
  404de0:	4632      	mov	r2, r6
  404de2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  404de6:	4620      	mov	r0, r4
  404de8:	4b25      	ldr	r3, [pc, #148]	; (404e80 <pio_configure_pin+0x128>)
  404dea:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404dec:	f015 0f01 	tst.w	r5, #1
  404df0:	d102      	bne.n	404df8 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  404df2:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404df4:	2001      	movs	r0, #1
  404df6:	e7da      	b.n	404dae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404df8:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404dfa:	2001      	movs	r0, #1
  404dfc:	e7d7      	b.n	404dae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  404dfe:	f000 001f 	and.w	r0, r0, #31
  404e02:	2601      	movs	r6, #1
  404e04:	4086      	lsls	r6, r0
  404e06:	4632      	mov	r2, r6
  404e08:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  404e0c:	4620      	mov	r0, r4
  404e0e:	4b1c      	ldr	r3, [pc, #112]	; (404e80 <pio_configure_pin+0x128>)
  404e10:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404e12:	f015 0f01 	tst.w	r5, #1
  404e16:	d102      	bne.n	404e1e <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  404e18:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404e1a:	2001      	movs	r0, #1
  404e1c:	e7c7      	b.n	404dae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404e1e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404e20:	2001      	movs	r0, #1
  404e22:	e7c4      	b.n	404dae <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  404e24:	f000 001f 	and.w	r0, r0, #31
  404e28:	2601      	movs	r6, #1
  404e2a:	4086      	lsls	r6, r0
  404e2c:	4632      	mov	r2, r6
  404e2e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  404e32:	4620      	mov	r0, r4
  404e34:	4b12      	ldr	r3, [pc, #72]	; (404e80 <pio_configure_pin+0x128>)
  404e36:	4798      	blx	r3
	if (ul_pull_up_enable) {
  404e38:	f015 0f01 	tst.w	r5, #1
  404e3c:	d102      	bne.n	404e44 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  404e3e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  404e40:	2001      	movs	r0, #1
  404e42:	e7b4      	b.n	404dae <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  404e44:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  404e46:	2001      	movs	r0, #1
  404e48:	e7b1      	b.n	404dae <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  404e4a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  404e4e:	f000 011f 	and.w	r1, r0, #31
  404e52:	2601      	movs	r6, #1
  404e54:	ea05 0306 	and.w	r3, r5, r6
  404e58:	9300      	str	r3, [sp, #0]
  404e5a:	f3c5 0380 	ubfx	r3, r5, #2, #1
  404e5e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  404e62:	bf14      	ite	ne
  404e64:	2200      	movne	r2, #0
  404e66:	2201      	moveq	r2, #1
  404e68:	fa06 f101 	lsl.w	r1, r6, r1
  404e6c:	4620      	mov	r0, r4
  404e6e:	4c05      	ldr	r4, [pc, #20]	; (404e84 <pio_configure_pin+0x12c>)
  404e70:	47a0      	blx	r4
	return 1;
  404e72:	4630      	mov	r0, r6
		break;
  404e74:	e79b      	b.n	404dae <pio_configure_pin+0x56>
  404e76:	bf00      	nop
  404e78:	00200707 	.word	0x00200707
  404e7c:	00404cb9 	.word	0x00404cb9
  404e80:	00404c27 	.word	0x00404c27
  404e84:	00404cef 	.word	0x00404cef

00404e88 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  404e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404e8c:	4604      	mov	r4, r0
  404e8e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  404e90:	4b0e      	ldr	r3, [pc, #56]	; (404ecc <pio_handler_process+0x44>)
  404e92:	4798      	blx	r3
  404e94:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  404e96:	4620      	mov	r0, r4
  404e98:	4b0d      	ldr	r3, [pc, #52]	; (404ed0 <pio_handler_process+0x48>)
  404e9a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  404e9c:	4005      	ands	r5, r0
  404e9e:	d013      	beq.n	404ec8 <pio_handler_process+0x40>
  404ea0:	4c0c      	ldr	r4, [pc, #48]	; (404ed4 <pio_handler_process+0x4c>)
  404ea2:	f104 0660 	add.w	r6, r4, #96	; 0x60
  404ea6:	e003      	b.n	404eb0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  404ea8:	42b4      	cmp	r4, r6
  404eaa:	d00d      	beq.n	404ec8 <pio_handler_process+0x40>
  404eac:	3410      	adds	r4, #16
		while (status != 0) {
  404eae:	b15d      	cbz	r5, 404ec8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  404eb0:	6820      	ldr	r0, [r4, #0]
  404eb2:	4540      	cmp	r0, r8
  404eb4:	d1f8      	bne.n	404ea8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  404eb6:	6861      	ldr	r1, [r4, #4]
  404eb8:	4229      	tst	r1, r5
  404eba:	d0f5      	beq.n	404ea8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  404ebc:	68e3      	ldr	r3, [r4, #12]
  404ebe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  404ec0:	6863      	ldr	r3, [r4, #4]
  404ec2:	ea25 0503 	bic.w	r5, r5, r3
  404ec6:	e7ef      	b.n	404ea8 <pio_handler_process+0x20>
  404ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404ecc:	00404d51 	.word	0x00404d51
  404ed0:	00404d55 	.word	0x00404d55
  404ed4:	2040c35c 	.word	0x2040c35c

00404ed8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  404ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  404eda:	4c18      	ldr	r4, [pc, #96]	; (404f3c <pio_handler_set+0x64>)
  404edc:	6826      	ldr	r6, [r4, #0]
  404ede:	2e06      	cmp	r6, #6
  404ee0:	d82a      	bhi.n	404f38 <pio_handler_set+0x60>
  404ee2:	f04f 0c00 	mov.w	ip, #0
  404ee6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404ee8:	4f15      	ldr	r7, [pc, #84]	; (404f40 <pio_handler_set+0x68>)
  404eea:	e004      	b.n	404ef6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  404eec:	3401      	adds	r4, #1
  404eee:	b2e4      	uxtb	r4, r4
  404ef0:	46a4      	mov	ip, r4
  404ef2:	42a6      	cmp	r6, r4
  404ef4:	d309      	bcc.n	404f0a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  404ef6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  404ef8:	0125      	lsls	r5, r4, #4
  404efa:	597d      	ldr	r5, [r7, r5]
  404efc:	428d      	cmp	r5, r1
  404efe:	d1f5      	bne.n	404eec <pio_handler_set+0x14>
  404f00:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  404f04:	686d      	ldr	r5, [r5, #4]
  404f06:	4295      	cmp	r5, r2
  404f08:	d1f0      	bne.n	404eec <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  404f0a:	4d0d      	ldr	r5, [pc, #52]	; (404f40 <pio_handler_set+0x68>)
  404f0c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  404f10:	eb05 040e 	add.w	r4, r5, lr
  404f14:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  404f18:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  404f1a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  404f1c:	9906      	ldr	r1, [sp, #24]
  404f1e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  404f20:	3601      	adds	r6, #1
  404f22:	4566      	cmp	r6, ip
  404f24:	d005      	beq.n	404f32 <pio_handler_set+0x5a>
  404f26:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  404f28:	461a      	mov	r2, r3
  404f2a:	4b06      	ldr	r3, [pc, #24]	; (404f44 <pio_handler_set+0x6c>)
  404f2c:	4798      	blx	r3

	return 0;
  404f2e:	2000      	movs	r0, #0
  404f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  404f32:	4902      	ldr	r1, [pc, #8]	; (404f3c <pio_handler_set+0x64>)
  404f34:	600e      	str	r6, [r1, #0]
  404f36:	e7f6      	b.n	404f26 <pio_handler_set+0x4e>
		return 1;
  404f38:	2001      	movs	r0, #1
}
  404f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f3c:	2040c3cc 	.word	0x2040c3cc
  404f40:	2040c35c 	.word	0x2040c35c
  404f44:	00404d17 	.word	0x00404d17

00404f48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  404f48:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  404f4a:	210a      	movs	r1, #10
  404f4c:	4801      	ldr	r0, [pc, #4]	; (404f54 <PIOA_Handler+0xc>)
  404f4e:	4b02      	ldr	r3, [pc, #8]	; (404f58 <PIOA_Handler+0x10>)
  404f50:	4798      	blx	r3
  404f52:	bd08      	pop	{r3, pc}
  404f54:	400e0e00 	.word	0x400e0e00
  404f58:	00404e89 	.word	0x00404e89

00404f5c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  404f5c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  404f5e:	210b      	movs	r1, #11
  404f60:	4801      	ldr	r0, [pc, #4]	; (404f68 <PIOB_Handler+0xc>)
  404f62:	4b02      	ldr	r3, [pc, #8]	; (404f6c <PIOB_Handler+0x10>)
  404f64:	4798      	blx	r3
  404f66:	bd08      	pop	{r3, pc}
  404f68:	400e1000 	.word	0x400e1000
  404f6c:	00404e89 	.word	0x00404e89

00404f70 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  404f70:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  404f72:	210c      	movs	r1, #12
  404f74:	4801      	ldr	r0, [pc, #4]	; (404f7c <PIOC_Handler+0xc>)
  404f76:	4b02      	ldr	r3, [pc, #8]	; (404f80 <PIOC_Handler+0x10>)
  404f78:	4798      	blx	r3
  404f7a:	bd08      	pop	{r3, pc}
  404f7c:	400e1200 	.word	0x400e1200
  404f80:	00404e89 	.word	0x00404e89

00404f84 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  404f84:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  404f86:	2110      	movs	r1, #16
  404f88:	4801      	ldr	r0, [pc, #4]	; (404f90 <PIOD_Handler+0xc>)
  404f8a:	4b02      	ldr	r3, [pc, #8]	; (404f94 <PIOD_Handler+0x10>)
  404f8c:	4798      	blx	r3
  404f8e:	bd08      	pop	{r3, pc}
  404f90:	400e1400 	.word	0x400e1400
  404f94:	00404e89 	.word	0x00404e89

00404f98 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  404f98:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  404f9a:	2111      	movs	r1, #17
  404f9c:	4801      	ldr	r0, [pc, #4]	; (404fa4 <PIOE_Handler+0xc>)
  404f9e:	4b02      	ldr	r3, [pc, #8]	; (404fa8 <PIOE_Handler+0x10>)
  404fa0:	4798      	blx	r3
  404fa2:	bd08      	pop	{r3, pc}
  404fa4:	400e1600 	.word	0x400e1600
  404fa8:	00404e89 	.word	0x00404e89

00404fac <pio_handler_set_priority>:
 * \param p_pio PIO controller base address.
 * \param ul_irqn NVIC line number.
 * \param ul_priority PIO controller interrupts priority.
 */
void pio_handler_set_priority(Pio *p_pio, IRQn_Type ul_irqn, uint32_t ul_priority)
{
  404fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fae:	4606      	mov	r6, r0
  404fb0:	460d      	mov	r5, r1
  404fb2:	4614      	mov	r4, r2
	uint32_t bitmask = 0;

	bitmask = pio_get_interrupt_mask(p_pio);
  404fb4:	4b17      	ldr	r3, [pc, #92]	; (405014 <pio_handler_set_priority+0x68>)
  404fb6:	4798      	blx	r3
  404fb8:	4607      	mov	r7, r0
	pio_disable_interrupt(p_pio, 0xFFFFFFFF);
  404fba:	f04f 31ff 	mov.w	r1, #4294967295
  404fbe:	4630      	mov	r0, r6
  404fc0:	4b15      	ldr	r3, [pc, #84]	; (405018 <pio_handler_set_priority+0x6c>)
  404fc2:	4798      	blx	r3
	pio_get_interrupt_status(p_pio);
  404fc4:	4630      	mov	r0, r6
  404fc6:	4b15      	ldr	r3, [pc, #84]	; (40501c <pio_handler_set_priority+0x70>)
  404fc8:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  404fca:	fa5f fe85 	uxtb.w	lr, r5
  404fce:	f00e 031f 	and.w	r3, lr, #31
  404fd2:	2201      	movs	r2, #1
  404fd4:	fa02 f303 	lsl.w	r3, r2, r3
  404fd8:	0968      	lsrs	r0, r5, #5
  404fda:	4911      	ldr	r1, [pc, #68]	; (405020 <pio_handler_set_priority+0x74>)
  404fdc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
  404fe0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  404fe4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
  if(IRQn < 0) {
  404fe8:	2d00      	cmp	r5, #0
  404fea:	db0a      	blt.n	405002 <pio_handler_set_priority+0x56>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  404fec:	0164      	lsls	r4, r4, #5
  404fee:	b2e4      	uxtb	r4, r4
  404ff0:	4a0c      	ldr	r2, [pc, #48]	; (405024 <pio_handler_set_priority+0x78>)
  404ff2:	5554      	strb	r4, [r2, r5]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  404ff4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	NVIC_DisableIRQ(ul_irqn);
	NVIC_ClearPendingIRQ(ul_irqn);
	NVIC_SetPriority(ul_irqn, ul_priority);
	NVIC_EnableIRQ(ul_irqn);
	pio_enable_interrupt(p_pio, bitmask);
  404ff8:	4639      	mov	r1, r7
  404ffa:	4630      	mov	r0, r6
  404ffc:	4b0a      	ldr	r3, [pc, #40]	; (405028 <pio_handler_set_priority+0x7c>)
  404ffe:	4798      	blx	r3
  405000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  405002:	f00e 0e0f 	and.w	lr, lr, #15
  405006:	0164      	lsls	r4, r4, #5
  405008:	b2e4      	uxtb	r4, r4
  40500a:	4a08      	ldr	r2, [pc, #32]	; (40502c <pio_handler_set_priority+0x80>)
  40500c:	f802 400e 	strb.w	r4, [r2, lr]
  405010:	e7f0      	b.n	404ff4 <pio_handler_set_priority+0x48>
  405012:	bf00      	nop
  405014:	00404d55 	.word	0x00404d55
  405018:	00404d4d 	.word	0x00404d4d
  40501c:	00404d51 	.word	0x00404d51
  405020:	e000e100 	.word	0xe000e100
  405024:	e000e400 	.word	0xe000e400
  405028:	00404d49 	.word	0x00404d49
  40502c:	e000ed14 	.word	0xe000ed14

00405030 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  405030:	2803      	cmp	r0, #3
  405032:	d011      	beq.n	405058 <pmc_mck_set_division+0x28>
  405034:	2804      	cmp	r0, #4
  405036:	d012      	beq.n	40505e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  405038:	2802      	cmp	r0, #2
  40503a:	bf0c      	ite	eq
  40503c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  405040:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  405042:	4a08      	ldr	r2, [pc, #32]	; (405064 <pmc_mck_set_division+0x34>)
  405044:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40504a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40504c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40504e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405050:	f013 0f08 	tst.w	r3, #8
  405054:	d0fb      	beq.n	40504e <pmc_mck_set_division+0x1e>
}
  405056:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  405058:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40505c:	e7f1      	b.n	405042 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40505e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  405062:	e7ee      	b.n	405042 <pmc_mck_set_division+0x12>
  405064:	400e0600 	.word	0x400e0600

00405068 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  405068:	4a17      	ldr	r2, [pc, #92]	; (4050c8 <pmc_switch_mck_to_pllack+0x60>)
  40506a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  405070:	4318      	orrs	r0, r3
  405072:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  405074:	6e93      	ldr	r3, [r2, #104]	; 0x68
  405076:	f013 0f08 	tst.w	r3, #8
  40507a:	d10a      	bne.n	405092 <pmc_switch_mck_to_pllack+0x2a>
  40507c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  405080:	4911      	ldr	r1, [pc, #68]	; (4050c8 <pmc_switch_mck_to_pllack+0x60>)
  405082:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  405084:	f012 0f08 	tst.w	r2, #8
  405088:	d103      	bne.n	405092 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40508a:	3b01      	subs	r3, #1
  40508c:	d1f9      	bne.n	405082 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40508e:	2001      	movs	r0, #1
  405090:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  405092:	4a0d      	ldr	r2, [pc, #52]	; (4050c8 <pmc_switch_mck_to_pllack+0x60>)
  405094:	6b13      	ldr	r3, [r2, #48]	; 0x30
  405096:	f023 0303 	bic.w	r3, r3, #3
  40509a:	f043 0302 	orr.w	r3, r3, #2
  40509e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4050a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4050a2:	f013 0f08 	tst.w	r3, #8
  4050a6:	d10a      	bne.n	4050be <pmc_switch_mck_to_pllack+0x56>
  4050a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4050ac:	4906      	ldr	r1, [pc, #24]	; (4050c8 <pmc_switch_mck_to_pllack+0x60>)
  4050ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4050b0:	f012 0f08 	tst.w	r2, #8
  4050b4:	d105      	bne.n	4050c2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4050b6:	3b01      	subs	r3, #1
  4050b8:	d1f9      	bne.n	4050ae <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4050ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4050bc:	4770      	bx	lr
	return 0;
  4050be:	2000      	movs	r0, #0
  4050c0:	4770      	bx	lr
  4050c2:	2000      	movs	r0, #0
  4050c4:	4770      	bx	lr
  4050c6:	bf00      	nop
  4050c8:	400e0600 	.word	0x400e0600

004050cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4050cc:	b9a0      	cbnz	r0, 4050f8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4050ce:	480e      	ldr	r0, [pc, #56]	; (405108 <pmc_switch_mainck_to_xtal+0x3c>)
  4050d0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4050d2:	0209      	lsls	r1, r1, #8
  4050d4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4050d6:	4a0d      	ldr	r2, [pc, #52]	; (40510c <pmc_switch_mainck_to_xtal+0x40>)
  4050d8:	401a      	ands	r2, r3
  4050da:	4b0d      	ldr	r3, [pc, #52]	; (405110 <pmc_switch_mainck_to_xtal+0x44>)
  4050dc:	4313      	orrs	r3, r2
  4050de:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4050e0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4050e2:	4602      	mov	r2, r0
  4050e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4050e6:	f013 0f01 	tst.w	r3, #1
  4050ea:	d0fb      	beq.n	4050e4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4050ec:	4a06      	ldr	r2, [pc, #24]	; (405108 <pmc_switch_mainck_to_xtal+0x3c>)
  4050ee:	6a11      	ldr	r1, [r2, #32]
  4050f0:	4b08      	ldr	r3, [pc, #32]	; (405114 <pmc_switch_mainck_to_xtal+0x48>)
  4050f2:	430b      	orrs	r3, r1
  4050f4:	6213      	str	r3, [r2, #32]
  4050f6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4050f8:	4903      	ldr	r1, [pc, #12]	; (405108 <pmc_switch_mainck_to_xtal+0x3c>)
  4050fa:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4050fc:	4a06      	ldr	r2, [pc, #24]	; (405118 <pmc_switch_mainck_to_xtal+0x4c>)
  4050fe:	401a      	ands	r2, r3
  405100:	4b06      	ldr	r3, [pc, #24]	; (40511c <pmc_switch_mainck_to_xtal+0x50>)
  405102:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  405104:	620b      	str	r3, [r1, #32]
  405106:	4770      	bx	lr
  405108:	400e0600 	.word	0x400e0600
  40510c:	ffc8fffc 	.word	0xffc8fffc
  405110:	00370001 	.word	0x00370001
  405114:	01370000 	.word	0x01370000
  405118:	fec8fffc 	.word	0xfec8fffc
  40511c:	01370002 	.word	0x01370002

00405120 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  405120:	4b02      	ldr	r3, [pc, #8]	; (40512c <pmc_osc_is_ready_mainck+0xc>)
  405122:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405124:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  405128:	4770      	bx	lr
  40512a:	bf00      	nop
  40512c:	400e0600 	.word	0x400e0600

00405130 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  405130:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  405134:	4b01      	ldr	r3, [pc, #4]	; (40513c <pmc_disable_pllack+0xc>)
  405136:	629a      	str	r2, [r3, #40]	; 0x28
  405138:	4770      	bx	lr
  40513a:	bf00      	nop
  40513c:	400e0600 	.word	0x400e0600

00405140 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  405140:	4b02      	ldr	r3, [pc, #8]	; (40514c <pmc_is_locked_pllack+0xc>)
  405142:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  405144:	f000 0002 	and.w	r0, r0, #2
  405148:	4770      	bx	lr
  40514a:	bf00      	nop
  40514c:	400e0600 	.word	0x400e0600

00405150 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  405150:	283f      	cmp	r0, #63	; 0x3f
  405152:	d81e      	bhi.n	405192 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  405154:	281f      	cmp	r0, #31
  405156:	d80c      	bhi.n	405172 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  405158:	4b11      	ldr	r3, [pc, #68]	; (4051a0 <pmc_enable_periph_clk+0x50>)
  40515a:	699a      	ldr	r2, [r3, #24]
  40515c:	2301      	movs	r3, #1
  40515e:	4083      	lsls	r3, r0
  405160:	4393      	bics	r3, r2
  405162:	d018      	beq.n	405196 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  405164:	2301      	movs	r3, #1
  405166:	fa03 f000 	lsl.w	r0, r3, r0
  40516a:	4b0d      	ldr	r3, [pc, #52]	; (4051a0 <pmc_enable_periph_clk+0x50>)
  40516c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40516e:	2000      	movs	r0, #0
  405170:	4770      	bx	lr
		ul_id -= 32;
  405172:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  405174:	4b0a      	ldr	r3, [pc, #40]	; (4051a0 <pmc_enable_periph_clk+0x50>)
  405176:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40517a:	2301      	movs	r3, #1
  40517c:	4083      	lsls	r3, r0
  40517e:	4393      	bics	r3, r2
  405180:	d00b      	beq.n	40519a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  405182:	2301      	movs	r3, #1
  405184:	fa03 f000 	lsl.w	r0, r3, r0
  405188:	4b05      	ldr	r3, [pc, #20]	; (4051a0 <pmc_enable_periph_clk+0x50>)
  40518a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40518e:	2000      	movs	r0, #0
  405190:	4770      	bx	lr
		return 1;
  405192:	2001      	movs	r0, #1
  405194:	4770      	bx	lr
	return 0;
  405196:	2000      	movs	r0, #0
  405198:	4770      	bx	lr
  40519a:	2000      	movs	r0, #0
}
  40519c:	4770      	bx	lr
  40519e:	bf00      	nop
  4051a0:	400e0600 	.word	0x400e0600

004051a4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4051a4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4051a6:	4b07      	ldr	r3, [pc, #28]	; (4051c4 <spi_enable_clock+0x20>)
  4051a8:	4298      	cmp	r0, r3
  4051aa:	d003      	beq.n	4051b4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4051ac:	4b06      	ldr	r3, [pc, #24]	; (4051c8 <spi_enable_clock+0x24>)
  4051ae:	4298      	cmp	r0, r3
  4051b0:	d004      	beq.n	4051bc <spi_enable_clock+0x18>
  4051b2:	bd08      	pop	{r3, pc}
  4051b4:	2015      	movs	r0, #21
  4051b6:	4b05      	ldr	r3, [pc, #20]	; (4051cc <spi_enable_clock+0x28>)
  4051b8:	4798      	blx	r3
  4051ba:	bd08      	pop	{r3, pc}
  4051bc:	202a      	movs	r0, #42	; 0x2a
  4051be:	4b03      	ldr	r3, [pc, #12]	; (4051cc <spi_enable_clock+0x28>)
  4051c0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4051c2:	e7f6      	b.n	4051b2 <spi_enable_clock+0xe>
  4051c4:	40008000 	.word	0x40008000
  4051c8:	40058000 	.word	0x40058000
  4051cc:	00405151 	.word	0x00405151

004051d0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4051d0:	6843      	ldr	r3, [r0, #4]
  4051d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4051d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4051d8:	6843      	ldr	r3, [r0, #4]
  4051da:	0409      	lsls	r1, r1, #16
  4051dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4051e0:	4319      	orrs	r1, r3
  4051e2:	6041      	str	r1, [r0, #4]
  4051e4:	4770      	bx	lr

004051e6 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  4051e6:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  4051e8:	f643 2399 	movw	r3, #15001	; 0x3a99
  4051ec:	6904      	ldr	r4, [r0, #16]
  4051ee:	f014 0f01 	tst.w	r4, #1
  4051f2:	d103      	bne.n	4051fc <spi_read+0x16>
		if (!timeout--) {
  4051f4:	3b01      	subs	r3, #1
  4051f6:	d1f9      	bne.n	4051ec <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  4051f8:	2001      	movs	r0, #1
  4051fa:	e009      	b.n	405210 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  4051fc:	6883      	ldr	r3, [r0, #8]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4051fe:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  405200:	f010 0f02 	tst.w	r0, #2
  405204:	d002      	beq.n	40520c <spi_read+0x26>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  405206:	f3c3 4003 	ubfx	r0, r3, #16, #4
  40520a:	7010      	strb	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  40520c:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  40520e:	2000      	movs	r0, #0
}
  405210:	f85d 4b04 	ldr.w	r4, [sp], #4
  405214:	4770      	bx	lr

00405216 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  405216:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  405218:	f643 2499 	movw	r4, #15001	; 0x3a99
  40521c:	6905      	ldr	r5, [r0, #16]
  40521e:	f015 0f02 	tst.w	r5, #2
  405222:	d103      	bne.n	40522c <spi_write+0x16>
		if (!timeout--) {
  405224:	3c01      	subs	r4, #1
  405226:	d1f9      	bne.n	40521c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  405228:	2001      	movs	r0, #1
  40522a:	e00c      	b.n	405246 <spi_write+0x30>
  40522c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40522e:	f014 0f02 	tst.w	r4, #2
  405232:	d006      	beq.n	405242 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  405234:	0412      	lsls	r2, r2, #16
  405236:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40523a:	4311      	orrs	r1, r2
		if (uc_last) {
  40523c:	b10b      	cbz	r3, 405242 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40523e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  405242:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  405244:	2000      	movs	r0, #0
}
  405246:	bc30      	pop	{r4, r5}
  405248:	4770      	bx	lr

0040524a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40524a:	b932      	cbnz	r2, 40525a <spi_set_clock_polarity+0x10>
  40524c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  405250:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405252:	f023 0301 	bic.w	r3, r3, #1
  405256:	6303      	str	r3, [r0, #48]	; 0x30
  405258:	4770      	bx	lr
  40525a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40525e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405260:	f043 0301 	orr.w	r3, r3, #1
  405264:	6303      	str	r3, [r0, #48]	; 0x30
  405266:	4770      	bx	lr

00405268 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  405268:	b932      	cbnz	r2, 405278 <spi_set_clock_phase+0x10>
  40526a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40526e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  405270:	f023 0302 	bic.w	r3, r3, #2
  405274:	6303      	str	r3, [r0, #48]	; 0x30
  405276:	4770      	bx	lr
  405278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40527c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40527e:	f043 0302 	orr.w	r3, r3, #2
  405282:	6303      	str	r3, [r0, #48]	; 0x30
  405284:	4770      	bx	lr

00405286 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  405286:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40528a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40528c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  405290:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  405292:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  405294:	431a      	orrs	r2, r3
  405296:	630a      	str	r2, [r1, #48]	; 0x30
  405298:	4770      	bx	lr

0040529a <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  40529a:	1e43      	subs	r3, r0, #1
  40529c:	4419      	add	r1, r3
  40529e:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4052a2:	1e43      	subs	r3, r0, #1
  4052a4:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4052a6:	bf94      	ite	ls
  4052a8:	b200      	sxthls	r0, r0
		return -1;
  4052aa:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4052ae:	4770      	bx	lr

004052b0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4052b0:	b17a      	cbz	r2, 4052d2 <spi_set_baudrate_div+0x22>
{
  4052b2:	b410      	push	{r4}
  4052b4:	4614      	mov	r4, r2
  4052b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4052ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4052bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4052c0:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4052c2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4052c4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4052c8:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4052ca:	2000      	movs	r0, #0
}
  4052cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4052d0:	4770      	bx	lr
        return -1;
  4052d2:	f04f 30ff 	mov.w	r0, #4294967295
  4052d6:	4770      	bx	lr

004052d8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4052d8:	b410      	push	{r4}
  4052da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4052de:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4052e0:	b280      	uxth	r0, r0
  4052e2:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  4052e4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  4052e6:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  4052ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4052ee:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  4052f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4052f4:	4770      	bx	lr

004052f6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4052f6:	6943      	ldr	r3, [r0, #20]
  4052f8:	f013 0f02 	tst.w	r3, #2
  4052fc:	d002      	beq.n	405304 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4052fe:	61c1      	str	r1, [r0, #28]
	return 0;
  405300:	2000      	movs	r0, #0
  405302:	4770      	bx	lr
		return 1;
  405304:	2001      	movs	r0, #1
}
  405306:	4770      	bx	lr

00405308 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  405308:	6943      	ldr	r3, [r0, #20]
  40530a:	f013 0f01 	tst.w	r3, #1
  40530e:	d003      	beq.n	405318 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  405310:	6983      	ldr	r3, [r0, #24]
  405312:	700b      	strb	r3, [r1, #0]
	return 0;
  405314:	2000      	movs	r0, #0
  405316:	4770      	bx	lr
		return 1;
  405318:	2001      	movs	r0, #1
}
  40531a:	4770      	bx	lr

0040531c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40531c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40531e:	010b      	lsls	r3, r1, #4
  405320:	4293      	cmp	r3, r2
  405322:	d914      	bls.n	40534e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  405324:	00c9      	lsls	r1, r1, #3
  405326:	084b      	lsrs	r3, r1, #1
  405328:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40532c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  405330:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  405332:	1e5c      	subs	r4, r3, #1
  405334:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405338:	428c      	cmp	r4, r1
  40533a:	d901      	bls.n	405340 <usart_set_async_baudrate+0x24>
		return 1;
  40533c:	2001      	movs	r0, #1
  40533e:	e017      	b.n	405370 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  405340:	6841      	ldr	r1, [r0, #4]
  405342:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  405346:	6041      	str	r1, [r0, #4]
  405348:	e00c      	b.n	405364 <usart_set_async_baudrate+0x48>
		return 1;
  40534a:	2001      	movs	r0, #1
  40534c:	e010      	b.n	405370 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40534e:	0859      	lsrs	r1, r3, #1
  405350:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  405354:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  405358:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40535a:	1e5c      	subs	r4, r3, #1
  40535c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  405360:	428c      	cmp	r4, r1
  405362:	d8f2      	bhi.n	40534a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  405364:	0412      	lsls	r2, r2, #16
  405366:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40536a:	431a      	orrs	r2, r3
  40536c:	6202      	str	r2, [r0, #32]

	return 0;
  40536e:	2000      	movs	r0, #0
}
  405370:	f85d 4b04 	ldr.w	r4, [sp], #4
  405374:	4770      	bx	lr
	...

00405378 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  405378:	4b08      	ldr	r3, [pc, #32]	; (40539c <usart_reset+0x24>)
  40537a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40537e:	2300      	movs	r3, #0
  405380:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  405382:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  405384:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  405386:	2388      	movs	r3, #136	; 0x88
  405388:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40538a:	2324      	movs	r3, #36	; 0x24
  40538c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40538e:	f44f 7380 	mov.w	r3, #256	; 0x100
  405392:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  405394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  405398:	6003      	str	r3, [r0, #0]
  40539a:	4770      	bx	lr
  40539c:	55534100 	.word	0x55534100

004053a0 <usart_init_rs232>:
{
  4053a0:	b570      	push	{r4, r5, r6, lr}
  4053a2:	4605      	mov	r5, r0
  4053a4:	460c      	mov	r4, r1
  4053a6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4053a8:	4b0f      	ldr	r3, [pc, #60]	; (4053e8 <usart_init_rs232+0x48>)
  4053aa:	4798      	blx	r3
	ul_reg_val = 0;
  4053ac:	2200      	movs	r2, #0
  4053ae:	4b0f      	ldr	r3, [pc, #60]	; (4053ec <usart_init_rs232+0x4c>)
  4053b0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4053b2:	b1a4      	cbz	r4, 4053de <usart_init_rs232+0x3e>
  4053b4:	4632      	mov	r2, r6
  4053b6:	6821      	ldr	r1, [r4, #0]
  4053b8:	4628      	mov	r0, r5
  4053ba:	4b0d      	ldr	r3, [pc, #52]	; (4053f0 <usart_init_rs232+0x50>)
  4053bc:	4798      	blx	r3
  4053be:	4602      	mov	r2, r0
  4053c0:	b978      	cbnz	r0, 4053e2 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4053c2:	6863      	ldr	r3, [r4, #4]
  4053c4:	68a1      	ldr	r1, [r4, #8]
  4053c6:	430b      	orrs	r3, r1
  4053c8:	6921      	ldr	r1, [r4, #16]
  4053ca:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4053cc:	68e1      	ldr	r1, [r4, #12]
  4053ce:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4053d0:	4906      	ldr	r1, [pc, #24]	; (4053ec <usart_init_rs232+0x4c>)
  4053d2:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4053d4:	6869      	ldr	r1, [r5, #4]
  4053d6:	430b      	orrs	r3, r1
  4053d8:	606b      	str	r3, [r5, #4]
}
  4053da:	4610      	mov	r0, r2
  4053dc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4053de:	2201      	movs	r2, #1
  4053e0:	e7fb      	b.n	4053da <usart_init_rs232+0x3a>
  4053e2:	2201      	movs	r2, #1
  4053e4:	e7f9      	b.n	4053da <usart_init_rs232+0x3a>
  4053e6:	bf00      	nop
  4053e8:	00405379 	.word	0x00405379
  4053ec:	2040c3d0 	.word	0x2040c3d0
  4053f0:	0040531d 	.word	0x0040531d

004053f4 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4053f4:	2340      	movs	r3, #64	; 0x40
  4053f6:	6003      	str	r3, [r0, #0]
  4053f8:	4770      	bx	lr

004053fa <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4053fa:	2310      	movs	r3, #16
  4053fc:	6003      	str	r3, [r0, #0]
  4053fe:	4770      	bx	lr

00405400 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  405400:	6943      	ldr	r3, [r0, #20]
  405402:	f013 0f02 	tst.w	r3, #2
  405406:	d004      	beq.n	405412 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  405408:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40540c:	61c1      	str	r1, [r0, #28]
	return 0;
  40540e:	2000      	movs	r0, #0
  405410:	4770      	bx	lr
		return 1;
  405412:	2001      	movs	r0, #1
}
  405414:	4770      	bx	lr

00405416 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  405416:	6943      	ldr	r3, [r0, #20]
  405418:	f013 0f01 	tst.w	r3, #1
  40541c:	d005      	beq.n	40542a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40541e:	6983      	ldr	r3, [r0, #24]
  405420:	f3c3 0308 	ubfx	r3, r3, #0, #9
  405424:	600b      	str	r3, [r1, #0]
	return 0;
  405426:	2000      	movs	r0, #0
  405428:	4770      	bx	lr
		return 1;
  40542a:	2001      	movs	r0, #1
}
  40542c:	4770      	bx	lr

0040542e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40542e:	e7fe      	b.n	40542e <Dummy_Handler>

00405430 <Reset_Handler>:
{
  405430:	b500      	push	{lr}
  405432:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  405434:	4b25      	ldr	r3, [pc, #148]	; (4054cc <Reset_Handler+0x9c>)
  405436:	4a26      	ldr	r2, [pc, #152]	; (4054d0 <Reset_Handler+0xa0>)
  405438:	429a      	cmp	r2, r3
  40543a:	d010      	beq.n	40545e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40543c:	4b25      	ldr	r3, [pc, #148]	; (4054d4 <Reset_Handler+0xa4>)
  40543e:	4a23      	ldr	r2, [pc, #140]	; (4054cc <Reset_Handler+0x9c>)
  405440:	429a      	cmp	r2, r3
  405442:	d20c      	bcs.n	40545e <Reset_Handler+0x2e>
  405444:	3b01      	subs	r3, #1
  405446:	1a9b      	subs	r3, r3, r2
  405448:	f023 0303 	bic.w	r3, r3, #3
  40544c:	3304      	adds	r3, #4
  40544e:	4413      	add	r3, r2
  405450:	491f      	ldr	r1, [pc, #124]	; (4054d0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  405452:	f851 0b04 	ldr.w	r0, [r1], #4
  405456:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40545a:	429a      	cmp	r2, r3
  40545c:	d1f9      	bne.n	405452 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40545e:	4b1e      	ldr	r3, [pc, #120]	; (4054d8 <Reset_Handler+0xa8>)
  405460:	4a1e      	ldr	r2, [pc, #120]	; (4054dc <Reset_Handler+0xac>)
  405462:	429a      	cmp	r2, r3
  405464:	d20a      	bcs.n	40547c <Reset_Handler+0x4c>
  405466:	3b01      	subs	r3, #1
  405468:	1a9b      	subs	r3, r3, r2
  40546a:	f023 0303 	bic.w	r3, r3, #3
  40546e:	3304      	adds	r3, #4
  405470:	4413      	add	r3, r2
                *pDest++ = 0;
  405472:	2100      	movs	r1, #0
  405474:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  405478:	4293      	cmp	r3, r2
  40547a:	d1fb      	bne.n	405474 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40547c:	4a18      	ldr	r2, [pc, #96]	; (4054e0 <Reset_Handler+0xb0>)
  40547e:	4b19      	ldr	r3, [pc, #100]	; (4054e4 <Reset_Handler+0xb4>)
  405480:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405484:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  405486:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40548a:	fab3 f383 	clz	r3, r3
  40548e:	095b      	lsrs	r3, r3, #5
  405490:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  405492:	b672      	cpsid	i
  __ASM volatile ("dmb");
  405494:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  405498:	2200      	movs	r2, #0
  40549a:	4b13      	ldr	r3, [pc, #76]	; (4054e8 <Reset_Handler+0xb8>)
  40549c:	701a      	strb	r2, [r3, #0]
	return flags;
  40549e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4054a0:	4a12      	ldr	r2, [pc, #72]	; (4054ec <Reset_Handler+0xbc>)
  4054a2:	6813      	ldr	r3, [r2, #0]
  4054a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4054a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4054aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4054ae:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  4054b2:	b129      	cbz	r1, 4054c0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4054b4:	2201      	movs	r2, #1
  4054b6:	4b0c      	ldr	r3, [pc, #48]	; (4054e8 <Reset_Handler+0xb8>)
  4054b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4054ba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4054be:	b662      	cpsie	i
        __libc_init_array();
  4054c0:	4b0b      	ldr	r3, [pc, #44]	; (4054f0 <Reset_Handler+0xc0>)
  4054c2:	4798      	blx	r3
        main();
  4054c4:	4b0b      	ldr	r3, [pc, #44]	; (4054f4 <Reset_Handler+0xc4>)
  4054c6:	4798      	blx	r3
  4054c8:	e7fe      	b.n	4054c8 <Reset_Handler+0x98>
  4054ca:	bf00      	nop
  4054cc:	20400000 	.word	0x20400000
  4054d0:	0040d6ec 	.word	0x0040d6ec
  4054d4:	204009d0 	.word	0x204009d0
  4054d8:	2040cb54 	.word	0x2040cb54
  4054dc:	204009d0 	.word	0x204009d0
  4054e0:	e000ed00 	.word	0xe000ed00
  4054e4:	00400000 	.word	0x00400000
  4054e8:	20400018 	.word	0x20400018
  4054ec:	e000ed88 	.word	0xe000ed88
  4054f0:	00406035 	.word	0x00406035
  4054f4:	00405ed9 	.word	0x00405ed9

004054f8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4054f8:	4b3b      	ldr	r3, [pc, #236]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  4054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4054fc:	f003 0303 	and.w	r3, r3, #3
  405500:	2b01      	cmp	r3, #1
  405502:	d01d      	beq.n	405540 <SystemCoreClockUpdate+0x48>
  405504:	b183      	cbz	r3, 405528 <SystemCoreClockUpdate+0x30>
  405506:	2b02      	cmp	r3, #2
  405508:	d036      	beq.n	405578 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40550a:	4b37      	ldr	r3, [pc, #220]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  40550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40550e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405512:	2b70      	cmp	r3, #112	; 0x70
  405514:	d05f      	beq.n	4055d6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  405516:	4b34      	ldr	r3, [pc, #208]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  405518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40551a:	4934      	ldr	r1, [pc, #208]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  40551c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  405520:	680b      	ldr	r3, [r1, #0]
  405522:	40d3      	lsrs	r3, r2
  405524:	600b      	str	r3, [r1, #0]
  405526:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  405528:	4b31      	ldr	r3, [pc, #196]	; (4055f0 <SystemCoreClockUpdate+0xf8>)
  40552a:	695b      	ldr	r3, [r3, #20]
  40552c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  405530:	bf14      	ite	ne
  405532:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  405536:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40553a:	4b2c      	ldr	r3, [pc, #176]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  40553c:	601a      	str	r2, [r3, #0]
  40553e:	e7e4      	b.n	40550a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405540:	4b29      	ldr	r3, [pc, #164]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  405542:	6a1b      	ldr	r3, [r3, #32]
  405544:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405548:	d003      	beq.n	405552 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40554a:	4a2a      	ldr	r2, [pc, #168]	; (4055f4 <SystemCoreClockUpdate+0xfc>)
  40554c:	4b27      	ldr	r3, [pc, #156]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  40554e:	601a      	str	r2, [r3, #0]
  405550:	e7db      	b.n	40550a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405552:	4a29      	ldr	r2, [pc, #164]	; (4055f8 <SystemCoreClockUpdate+0x100>)
  405554:	4b25      	ldr	r3, [pc, #148]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  405556:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  405558:	4b23      	ldr	r3, [pc, #140]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  40555a:	6a1b      	ldr	r3, [r3, #32]
  40555c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405560:	2b10      	cmp	r3, #16
  405562:	d005      	beq.n	405570 <SystemCoreClockUpdate+0x78>
  405564:	2b20      	cmp	r3, #32
  405566:	d1d0      	bne.n	40550a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  405568:	4a22      	ldr	r2, [pc, #136]	; (4055f4 <SystemCoreClockUpdate+0xfc>)
  40556a:	4b20      	ldr	r3, [pc, #128]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  40556c:	601a      	str	r2, [r3, #0]
          break;
  40556e:	e7cc      	b.n	40550a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  405570:	4a22      	ldr	r2, [pc, #136]	; (4055fc <SystemCoreClockUpdate+0x104>)
  405572:	4b1e      	ldr	r3, [pc, #120]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  405574:	601a      	str	r2, [r3, #0]
          break;
  405576:	e7c8      	b.n	40550a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  405578:	4b1b      	ldr	r3, [pc, #108]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  40557a:	6a1b      	ldr	r3, [r3, #32]
  40557c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  405580:	d016      	beq.n	4055b0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  405582:	4a1c      	ldr	r2, [pc, #112]	; (4055f4 <SystemCoreClockUpdate+0xfc>)
  405584:	4b19      	ldr	r3, [pc, #100]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  405586:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  405588:	4b17      	ldr	r3, [pc, #92]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  40558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40558c:	f003 0303 	and.w	r3, r3, #3
  405590:	2b02      	cmp	r3, #2
  405592:	d1ba      	bne.n	40550a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405594:	4a14      	ldr	r2, [pc, #80]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  405596:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405598:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40559a:	4814      	ldr	r0, [pc, #80]	; (4055ec <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40559c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4055a0:	6803      	ldr	r3, [r0, #0]
  4055a2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4055a6:	b2d2      	uxtb	r2, r2
  4055a8:	fbb3 f3f2 	udiv	r3, r3, r2
  4055ac:	6003      	str	r3, [r0, #0]
  4055ae:	e7ac      	b.n	40550a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4055b0:	4a11      	ldr	r2, [pc, #68]	; (4055f8 <SystemCoreClockUpdate+0x100>)
  4055b2:	4b0e      	ldr	r3, [pc, #56]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  4055b4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4055b6:	4b0c      	ldr	r3, [pc, #48]	; (4055e8 <SystemCoreClockUpdate+0xf0>)
  4055b8:	6a1b      	ldr	r3, [r3, #32]
  4055ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4055be:	2b10      	cmp	r3, #16
  4055c0:	d005      	beq.n	4055ce <SystemCoreClockUpdate+0xd6>
  4055c2:	2b20      	cmp	r3, #32
  4055c4:	d1e0      	bne.n	405588 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4055c6:	4a0b      	ldr	r2, [pc, #44]	; (4055f4 <SystemCoreClockUpdate+0xfc>)
  4055c8:	4b08      	ldr	r3, [pc, #32]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  4055ca:	601a      	str	r2, [r3, #0]
          break;
  4055cc:	e7dc      	b.n	405588 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4055ce:	4a0b      	ldr	r2, [pc, #44]	; (4055fc <SystemCoreClockUpdate+0x104>)
  4055d0:	4b06      	ldr	r3, [pc, #24]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  4055d2:	601a      	str	r2, [r3, #0]
          break;
  4055d4:	e7d8      	b.n	405588 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4055d6:	4a05      	ldr	r2, [pc, #20]	; (4055ec <SystemCoreClockUpdate+0xf4>)
  4055d8:	6813      	ldr	r3, [r2, #0]
  4055da:	4909      	ldr	r1, [pc, #36]	; (405600 <SystemCoreClockUpdate+0x108>)
  4055dc:	fba1 1303 	umull	r1, r3, r1, r3
  4055e0:	085b      	lsrs	r3, r3, #1
  4055e2:	6013      	str	r3, [r2, #0]
  4055e4:	4770      	bx	lr
  4055e6:	bf00      	nop
  4055e8:	400e0600 	.word	0x400e0600
  4055ec:	2040001c 	.word	0x2040001c
  4055f0:	400e1810 	.word	0x400e1810
  4055f4:	00b71b00 	.word	0x00b71b00
  4055f8:	003d0900 	.word	0x003d0900
  4055fc:	007a1200 	.word	0x007a1200
  405600:	aaaaaaab 	.word	0xaaaaaaab

00405604 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  405604:	4b12      	ldr	r3, [pc, #72]	; (405650 <system_init_flash+0x4c>)
  405606:	4298      	cmp	r0, r3
  405608:	d911      	bls.n	40562e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40560a:	4b12      	ldr	r3, [pc, #72]	; (405654 <system_init_flash+0x50>)
  40560c:	4298      	cmp	r0, r3
  40560e:	d913      	bls.n	405638 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  405610:	4b11      	ldr	r3, [pc, #68]	; (405658 <system_init_flash+0x54>)
  405612:	4298      	cmp	r0, r3
  405614:	d914      	bls.n	405640 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  405616:	4b11      	ldr	r3, [pc, #68]	; (40565c <system_init_flash+0x58>)
  405618:	4298      	cmp	r0, r3
  40561a:	d915      	bls.n	405648 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40561c:	4b10      	ldr	r3, [pc, #64]	; (405660 <system_init_flash+0x5c>)
  40561e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  405620:	bf94      	ite	ls
  405622:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405626:	4a0f      	ldrhi	r2, [pc, #60]	; (405664 <system_init_flash+0x60>)
  405628:	4b0f      	ldr	r3, [pc, #60]	; (405668 <system_init_flash+0x64>)
  40562a:	601a      	str	r2, [r3, #0]
  40562c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40562e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  405632:	4b0d      	ldr	r3, [pc, #52]	; (405668 <system_init_flash+0x64>)
  405634:	601a      	str	r2, [r3, #0]
  405636:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  405638:	4a0c      	ldr	r2, [pc, #48]	; (40566c <system_init_flash+0x68>)
  40563a:	4b0b      	ldr	r3, [pc, #44]	; (405668 <system_init_flash+0x64>)
  40563c:	601a      	str	r2, [r3, #0]
  40563e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  405640:	4a0b      	ldr	r2, [pc, #44]	; (405670 <system_init_flash+0x6c>)
  405642:	4b09      	ldr	r3, [pc, #36]	; (405668 <system_init_flash+0x64>)
  405644:	601a      	str	r2, [r3, #0]
  405646:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  405648:	4a0a      	ldr	r2, [pc, #40]	; (405674 <system_init_flash+0x70>)
  40564a:	4b07      	ldr	r3, [pc, #28]	; (405668 <system_init_flash+0x64>)
  40564c:	601a      	str	r2, [r3, #0]
  40564e:	4770      	bx	lr
  405650:	01312cff 	.word	0x01312cff
  405654:	026259ff 	.word	0x026259ff
  405658:	039386ff 	.word	0x039386ff
  40565c:	04c4b3ff 	.word	0x04c4b3ff
  405660:	05f5e0ff 	.word	0x05f5e0ff
  405664:	04000500 	.word	0x04000500
  405668:	400e0c00 	.word	0x400e0c00
  40566c:	04000100 	.word	0x04000100
  405670:	04000200 	.word	0x04000200
  405674:	04000300 	.word	0x04000300

00405678 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  405678:	4b0a      	ldr	r3, [pc, #40]	; (4056a4 <_sbrk+0x2c>)
  40567a:	681b      	ldr	r3, [r3, #0]
  40567c:	b153      	cbz	r3, 405694 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40567e:	4b09      	ldr	r3, [pc, #36]	; (4056a4 <_sbrk+0x2c>)
  405680:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  405682:	181a      	adds	r2, r3, r0
  405684:	4908      	ldr	r1, [pc, #32]	; (4056a8 <_sbrk+0x30>)
  405686:	4291      	cmp	r1, r2
  405688:	db08      	blt.n	40569c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40568a:	4610      	mov	r0, r2
  40568c:	4a05      	ldr	r2, [pc, #20]	; (4056a4 <_sbrk+0x2c>)
  40568e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  405690:	4618      	mov	r0, r3
  405692:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  405694:	4a05      	ldr	r2, [pc, #20]	; (4056ac <_sbrk+0x34>)
  405696:	4b03      	ldr	r3, [pc, #12]	; (4056a4 <_sbrk+0x2c>)
  405698:	601a      	str	r2, [r3, #0]
  40569a:	e7f0      	b.n	40567e <_sbrk+0x6>
		return (caddr_t) -1;	
  40569c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4056a0:	4770      	bx	lr
  4056a2:	bf00      	nop
  4056a4:	2040c3d4 	.word	0x2040c3d4
  4056a8:	2045fffc 	.word	0x2045fffc
  4056ac:	2040ed58 	.word	0x2040ed58

004056b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4056b0:	f04f 30ff 	mov.w	r0, #4294967295
  4056b4:	4770      	bx	lr

004056b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4056b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4056ba:	604b      	str	r3, [r1, #4]

	return 0;
}
  4056bc:	2000      	movs	r0, #0
  4056be:	4770      	bx	lr

004056c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4056c0:	2001      	movs	r0, #1
  4056c2:	4770      	bx	lr

004056c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4056c4:	2000      	movs	r0, #0
  4056c6:	4770      	bx	lr

004056c8 <digitalInput_callback>:
	}
}


void digitalInput_callback(void){
	send_button = true;
  4056c8:	2201      	movs	r2, #1
  4056ca:	4b04      	ldr	r3, [pc, #16]	; (4056dc <digitalInput_callback+0x14>)
  4056cc:	701a      	strb	r2, [r3, #0]
	button_status = !button_status;
  4056ce:	4a04      	ldr	r2, [pc, #16]	; (4056e0 <digitalInput_callback+0x18>)
  4056d0:	7813      	ldrb	r3, [r2, #0]
  4056d2:	fab3 f383 	clz	r3, r3
  4056d6:	095b      	lsrs	r3, r3, #5
  4056d8:	7013      	strb	r3, [r2, #0]
  4056da:	4770      	bx	lr
  4056dc:	2040c960 	.word	0x2040c960
  4056e0:	2040c3d8 	.word	0x2040c3d8

004056e4 <AFEC_Temp_callback>:
	}

/* AFEC */
static void AFEC_Temp_callback(void)
{
  4056e4:	b508      	push	{r3, lr}
	afec->AFEC_CSELR = afec_ch;
  4056e6:	4b08      	ldr	r3, [pc, #32]	; (405708 <AFEC_Temp_callback+0x24>)
  4056e8:	2200      	movs	r2, #0
  4056ea:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4056ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	g_ul_value = afec_channel_get_value(AFEC0, AFEC_CHANNEL_TEMP_SENSOR);
  4056ee:	4a07      	ldr	r2, [pc, #28]	; (40570c <AFEC_Temp_callback+0x28>)
  4056f0:	6013      	str	r3, [r2, #0]
	g_ul_value = g_ul_value*100/4096; /* AFEC measurement convertion */
  4056f2:	6811      	ldr	r1, [r2, #0]
  4056f4:	2364      	movs	r3, #100	; 0x64
  4056f6:	fb03 f301 	mul.w	r3, r3, r1
  4056fa:	0b1b      	lsrs	r3, r3, #12
  4056fc:	6013      	str	r3, [r2, #0]
	printf("AFEC CAIU AQUI %d \n", g_ul_value);
  4056fe:	6811      	ldr	r1, [r2, #0]
  405700:	4803      	ldr	r0, [pc, #12]	; (405710 <AFEC_Temp_callback+0x2c>)
  405702:	4b04      	ldr	r3, [pc, #16]	; (405714 <AFEC_Temp_callback+0x30>)
  405704:	4798      	blx	r3
  405706:	bd08      	pop	{r3, pc}
  405708:	4003c000 	.word	0x4003c000
  40570c:	2040c3dc 	.word	0x2040c3dc
  405710:	0040d0bc 	.word	0x0040d0bc
  405714:	00406085 	.word	0x00406085

00405718 <resolve_cb>:
{
  405718:	b510      	push	{r4, lr}
  40571a:	b082      	sub	sp, #8
	gu32HostIp = hostIp;
  40571c:	4b07      	ldr	r3, [pc, #28]	; (40573c <resolve_cb+0x24>)
  40571e:	6019      	str	r1, [r3, #0]
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
  405720:	0e0b      	lsrs	r3, r1, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", hostName,
  405722:	9301      	str	r3, [sp, #4]
  405724:	f3c1 4307 	ubfx	r3, r1, #16, #8
  405728:	9300      	str	r3, [sp, #0]
  40572a:	f3c1 2307 	ubfx	r3, r1, #8, #8
  40572e:	b2ca      	uxtb	r2, r1
  405730:	4601      	mov	r1, r0
  405732:	4803      	ldr	r0, [pc, #12]	; (405740 <resolve_cb+0x28>)
  405734:	4c03      	ldr	r4, [pc, #12]	; (405744 <resolve_cb+0x2c>)
  405736:	47a0      	blx	r4
}
  405738:	b002      	add	sp, #8
  40573a:	bd10      	pop	{r4, pc}
  40573c:	2040c95c 	.word	0x2040c95c
  405740:	0040d184 	.word	0x0040d184
  405744:	00406085 	.word	0x00406085

00405748 <task_send>:
	  }
}


/* AFEC  */
void task_send(void){
  405748:	b580      	push	{r7, lr}
  40574a:	b08a      	sub	sp, #40	; 0x28
	afec_enable(AFEC0);
  40574c:	4c1a      	ldr	r4, [pc, #104]	; (4057b8 <task_send+0x70>)
  40574e:	4620      	mov	r0, r4
  405750:	4b1a      	ldr	r3, [pc, #104]	; (4057bc <task_send+0x74>)
  405752:	4798      	blx	r3
	afec_get_config_defaults(&afec_cfg);
  405754:	a804      	add	r0, sp, #16
  405756:	4b1a      	ldr	r3, [pc, #104]	; (4057c0 <task_send+0x78>)
  405758:	4798      	blx	r3
	afec_init(AFEC0, &afec_cfg);
  40575a:	a904      	add	r1, sp, #16
  40575c:	4620      	mov	r0, r4
  40575e:	4b19      	ldr	r3, [pc, #100]	; (4057c4 <task_send+0x7c>)
  405760:	4798      	blx	r3
	reg = afec->AFEC_MR;
  405762:	6863      	ldr	r3, [r4, #4]
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
  405764:	f023 038f 	bic.w	r3, r3, #143	; 0x8f
	afec->AFEC_MR = reg;
  405768:	6063      	str	r3, [r4, #4]
	afec_set_callback(AFEC0, AFEC_INTERRUPT_EOC_0,	AFEC_Temp_callback, 1);
  40576a:	2301      	movs	r3, #1
  40576c:	4a16      	ldr	r2, [pc, #88]	; (4057c8 <task_send+0x80>)
  40576e:	2100      	movs	r1, #0
  405770:	4620      	mov	r0, r4
  405772:	4d16      	ldr	r5, [pc, #88]	; (4057cc <task_send+0x84>)
  405774:	47a8      	blx	r5
	afec_ch_get_config_defaults(&afec_ch_cfg);
  405776:	a801      	add	r0, sp, #4
  405778:	4b15      	ldr	r3, [pc, #84]	; (4057d0 <task_send+0x88>)
  40577a:	4798      	blx	r3
	afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  40577c:	2500      	movs	r5, #0
  40577e:	f88d 5005 	strb.w	r5, [sp, #5]
	afec_ch_set_config(AFEC0, AFEC_CHANNEL_TEMP_SENSOR, &afec_ch_cfg);
  405782:	aa01      	add	r2, sp, #4
  405784:	4629      	mov	r1, r5
  405786:	4620      	mov	r0, r4
  405788:	4b12      	ldr	r3, [pc, #72]	; (4057d4 <task_send+0x8c>)
  40578a:	4798      	blx	r3
	afec->AFEC_CSELR = afec_ch;
  40578c:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40578e:	f44f 7300 	mov.w	r3, #512	; 0x200
  405792:	66e3      	str	r3, [r4, #108]	; 0x6c
	afec_temp_sensor_get_config_defaults(&afec_temp_sensor_cfg);
  405794:	a802      	add	r0, sp, #8
  405796:	4b10      	ldr	r3, [pc, #64]	; (4057d8 <task_send+0x90>)
  405798:	4798      	blx	r3
	afec_temp_sensor_set_config(AFEC0, &afec_temp_sensor_cfg);
  40579a:	a902      	add	r1, sp, #8
  40579c:	4620      	mov	r0, r4
  40579e:	4b0f      	ldr	r3, [pc, #60]	; (4057dc <task_send+0x94>)
  4057a0:	4798      	blx	r3
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4057a2:	2301      	movs	r3, #1
  4057a4:	6163      	str	r3, [r4, #20]
	afec->AFEC_CR = AFEC_CR_START;
  4057a6:	4627      	mov	r7, r4
  4057a8:	2602      	movs	r6, #2
	config_ADC_TEMP();
	
	while (true) {
		
		afec_start_software_conversion(AFEC0);
		vTaskDelay(4000);
  4057aa:	f44f 657a 	mov.w	r5, #4000	; 0xfa0
  4057ae:	4c0c      	ldr	r4, [pc, #48]	; (4057e0 <task_send+0x98>)
  4057b0:	603e      	str	r6, [r7, #0]
  4057b2:	4628      	mov	r0, r5
  4057b4:	47a0      	blx	r4
  4057b6:	e7fb      	b.n	4057b0 <task_send+0x68>
  4057b8:	4003c000 	.word	0x4003c000
  4057bc:	00400449 	.word	0x00400449
  4057c0:	00400279 	.word	0x00400279
  4057c4:	004002c9 	.word	0x004002c9
  4057c8:	004056e5 	.word	0x004056e5
  4057cc:	004003c9 	.word	0x004003c9
  4057d0:	004002a9 	.word	0x004002a9
  4057d4:	00400235 	.word	0x00400235
  4057d8:	004002b3 	.word	0x004002b3
  4057dc:	00400265 	.word	0x00400265
  4057e0:	004015f9 	.word	0x004015f9

004057e4 <socket_cb>:
	if (sock == tcp_client_socket) {
  4057e4:	4b5a      	ldr	r3, [pc, #360]	; (405950 <socket_cb+0x16c>)
  4057e6:	f993 3000 	ldrsb.w	r3, [r3]
  4057ea:	4283      	cmp	r3, r0
  4057ec:	d000      	beq.n	4057f0 <socket_cb+0xc>
  4057ee:	4770      	bx	lr
{
  4057f0:	b570      	push	{r4, r5, r6, lr}
  4057f2:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500
  4057f6:	4614      	mov	r4, r2
		switch (u8Msg) {
  4057f8:	2905      	cmp	r1, #5
  4057fa:	d005      	beq.n	405808 <socket_cb+0x24>
  4057fc:	2906      	cmp	r1, #6
  4057fe:	f000 8082 	beq.w	405906 <socket_cb+0x122>
}
  405802:	f50d 6da0 	add.w	sp, sp, #1280	; 0x500
  405806:	bd70      	pop	{r4, r5, r6, pc}
      printf("socket_msg_connect\n"); 
  405808:	4852      	ldr	r0, [pc, #328]	; (405954 <socket_cb+0x170>)
  40580a:	4b53      	ldr	r3, [pc, #332]	; (405958 <socket_cb+0x174>)
  40580c:	4798      	blx	r3
			if (gbTcpConnection) {
  40580e:	4b53      	ldr	r3, [pc, #332]	; (40595c <socket_cb+0x178>)
  405810:	781b      	ldrb	r3, [r3, #0]
  405812:	2b00      	cmp	r3, #0
  405814:	d0f5      	beq.n	405802 <socket_cb+0x1e>
				rtc_get_time(RTC, &hora, &minuto, &segundo);
  405816:	ab03      	add	r3, sp, #12
  405818:	aa04      	add	r2, sp, #16
  40581a:	a905      	add	r1, sp, #20
  40581c:	4850      	ldr	r0, [pc, #320]	; (405960 <socket_cb+0x17c>)
  40581e:	4d51      	ldr	r5, [pc, #324]	; (405964 <socket_cb+0x180>)
  405820:	47a8      	blx	r5
				sprintf(datetime, "%d:%d:%d", hora, minuto, segundo);
  405822:	9b04      	ldr	r3, [sp, #16]
  405824:	9a05      	ldr	r2, [sp, #20]
  405826:	9903      	ldr	r1, [sp, #12]
  405828:	9100      	str	r1, [sp, #0]
  40582a:	494f      	ldr	r1, [pc, #316]	; (405968 <socket_cb+0x184>)
  40582c:	a806      	add	r0, sp, #24
  40582e:	4d4f      	ldr	r5, [pc, #316]	; (40596c <socket_cb+0x188>)
  405830:	47a8      	blx	r5
				if(send_button){
  405832:	4b4f      	ldr	r3, [pc, #316]	; (405970 <socket_cb+0x18c>)
  405834:	781b      	ldrb	r3, [r3, #0]
  405836:	2b00      	cmp	r3, #0
  405838:	d03b      	beq.n	4058b2 <socket_cb+0xce>
					sprintf(buffer, "name=%s&data=%d&timestamp=%s", "digital", button_status,datetime); //		sprintf(buffer, "valor=%d&timestamp=%s", 99); //
  40583a:	4b4e      	ldr	r3, [pc, #312]	; (405974 <socket_cb+0x190>)
  40583c:	781b      	ldrb	r3, [r3, #0]
  40583e:	aa06      	add	r2, sp, #24
  405840:	9200      	str	r2, [sp, #0]
  405842:	4a4d      	ldr	r2, [pc, #308]	; (405978 <socket_cb+0x194>)
  405844:	494d      	ldr	r1, [pc, #308]	; (40597c <socket_cb+0x198>)
  405846:	a846      	add	r0, sp, #280	; 0x118
  405848:	462e      	mov	r6, r5
  40584a:	47a8      	blx	r5
					sprintf(gau8ReceivedBuffer, "POST /users/register HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\n\r\n%s", strlen(buffer), buffer);
  40584c:	a846      	add	r0, sp, #280	; 0x118
  40584e:	4b4c      	ldr	r3, [pc, #304]	; (405980 <socket_cb+0x19c>)
  405850:	4798      	blx	r3
  405852:	4d4c      	ldr	r5, [pc, #304]	; (405984 <socket_cb+0x1a0>)
  405854:	ab46      	add	r3, sp, #280	; 0x118
  405856:	4602      	mov	r2, r0
  405858:	494b      	ldr	r1, [pc, #300]	; (405988 <socket_cb+0x1a4>)
  40585a:	4628      	mov	r0, r5
  40585c:	47b0      	blx	r6
					printf(gau8ReceivedBuffer);
  40585e:	4628      	mov	r0, r5
  405860:	4b3d      	ldr	r3, [pc, #244]	; (405958 <socket_cb+0x174>)
  405862:	4798      	blx	r3
					send_button = false;		
  405864:	2200      	movs	r2, #0
  405866:	4b42      	ldr	r3, [pc, #264]	; (405970 <socket_cb+0x18c>)
  405868:	701a      	strb	r2, [r3, #0]
				if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
  40586a:	2c00      	cmp	r4, #0
  40586c:	d03d      	beq.n	4058ea <socket_cb+0x106>
  40586e:	f994 3001 	ldrsb.w	r3, [r4, #1]
  405872:	2b00      	cmp	r3, #0
  405874:	db39      	blt.n	4058ea <socket_cb+0x106>
          printf("send \n");
  405876:	4845      	ldr	r0, [pc, #276]	; (40598c <socket_cb+0x1a8>)
  405878:	4b37      	ldr	r3, [pc, #220]	; (405958 <socket_cb+0x174>)
  40587a:	4798      	blx	r3
					send(tcp_client_socket, gau8ReceivedBuffer, strlen((char *)gau8ReceivedBuffer), 0);
  40587c:	4c41      	ldr	r4, [pc, #260]	; (405984 <socket_cb+0x1a0>)
  40587e:	4620      	mov	r0, r4
  405880:	4b3f      	ldr	r3, [pc, #252]	; (405980 <socket_cb+0x19c>)
  405882:	4798      	blx	r3
  405884:	4d32      	ldr	r5, [pc, #200]	; (405950 <socket_cb+0x16c>)
  405886:	2300      	movs	r3, #0
  405888:	b282      	uxth	r2, r0
  40588a:	4621      	mov	r1, r4
  40588c:	f995 0000 	ldrsb.w	r0, [r5]
  405890:	4e3f      	ldr	r6, [pc, #252]	; (405990 <socket_cb+0x1ac>)
  405892:	47b0      	blx	r6
					memset(gau8ReceivedBuffer, 0, MAIN_WIFI_M2M_BUFFER_SIZE);
  405894:	f44f 66af 	mov.w	r6, #1400	; 0x578
  405898:	4632      	mov	r2, r6
  40589a:	2100      	movs	r1, #0
  40589c:	4620      	mov	r0, r4
  40589e:	4b3d      	ldr	r3, [pc, #244]	; (405994 <socket_cb+0x1b0>)
  4058a0:	4798      	blx	r3
					recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  4058a2:	2300      	movs	r3, #0
  4058a4:	4632      	mov	r2, r6
  4058a6:	4621      	mov	r1, r4
  4058a8:	f995 0000 	ldrsb.w	r0, [r5]
  4058ac:	4c3a      	ldr	r4, [pc, #232]	; (405998 <socket_cb+0x1b4>)
  4058ae:	47a0      	blx	r4
  4058b0:	e7a7      	b.n	405802 <socket_cb+0x1e>
					memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  4058b2:	4d34      	ldr	r5, [pc, #208]	; (405984 <socket_cb+0x1a0>)
  4058b4:	f44f 62af 	mov.w	r2, #1400	; 0x578
  4058b8:	2100      	movs	r1, #0
  4058ba:	4628      	mov	r0, r5
  4058bc:	4b35      	ldr	r3, [pc, #212]	; (405994 <socket_cb+0x1b0>)
  4058be:	4798      	blx	r3
					sprintf(buffer, "name=%s&data=%d&timestamp=%s", "analogic", g_ul_value, datetime); //		sprintf(buffer, "valor=%d&timestamp=%s", 99); //
  4058c0:	4b36      	ldr	r3, [pc, #216]	; (40599c <socket_cb+0x1b8>)
  4058c2:	681b      	ldr	r3, [r3, #0]
  4058c4:	aa06      	add	r2, sp, #24
  4058c6:	9200      	str	r2, [sp, #0]
  4058c8:	4a35      	ldr	r2, [pc, #212]	; (4059a0 <socket_cb+0x1bc>)
  4058ca:	492c      	ldr	r1, [pc, #176]	; (40597c <socket_cb+0x198>)
  4058cc:	a846      	add	r0, sp, #280	; 0x118
  4058ce:	4e27      	ldr	r6, [pc, #156]	; (40596c <socket_cb+0x188>)
  4058d0:	47b0      	blx	r6
					sprintf(gau8ReceivedBuffer, "POST /users/register HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\n\r\n%s", strlen(buffer), buffer);
  4058d2:	a846      	add	r0, sp, #280	; 0x118
  4058d4:	4b2a      	ldr	r3, [pc, #168]	; (405980 <socket_cb+0x19c>)
  4058d6:	4798      	blx	r3
  4058d8:	ab46      	add	r3, sp, #280	; 0x118
  4058da:	4602      	mov	r2, r0
  4058dc:	492a      	ldr	r1, [pc, #168]	; (405988 <socket_cb+0x1a4>)
  4058de:	4628      	mov	r0, r5
  4058e0:	47b0      	blx	r6
					printf(gau8ReceivedBuffer);
  4058e2:	4628      	mov	r0, r5
  4058e4:	4b1c      	ldr	r3, [pc, #112]	; (405958 <socket_cb+0x174>)
  4058e6:	4798      	blx	r3
  4058e8:	e7bf      	b.n	40586a <socket_cb+0x86>
					printf("socket_cb: connect error!\r\n");
  4058ea:	482e      	ldr	r0, [pc, #184]	; (4059a4 <socket_cb+0x1c0>)
  4058ec:	4b1a      	ldr	r3, [pc, #104]	; (405958 <socket_cb+0x174>)
  4058ee:	4798      	blx	r3
					gbTcpConnection = false;
  4058f0:	2200      	movs	r2, #0
  4058f2:	4b1a      	ldr	r3, [pc, #104]	; (40595c <socket_cb+0x178>)
  4058f4:	701a      	strb	r2, [r3, #0]
					close(tcp_client_socket);
  4058f6:	4c16      	ldr	r4, [pc, #88]	; (405950 <socket_cb+0x16c>)
  4058f8:	f994 0000 	ldrsb.w	r0, [r4]
  4058fc:	4b2a      	ldr	r3, [pc, #168]	; (4059a8 <socket_cb+0x1c4>)
  4058fe:	4798      	blx	r3
					tcp_client_socket = -1;
  405900:	23ff      	movs	r3, #255	; 0xff
  405902:	7023      	strb	r3, [r4, #0]
  405904:	e77d      	b.n	405802 <socket_cb+0x1e>
			if (pstrRecv && pstrRecv->s16BufferSize > 0) {
  405906:	b11a      	cbz	r2, 405910 <socket_cb+0x12c>
  405908:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  40590c:	2b00      	cmp	r3, #0
  40590e:	dc0a      	bgt.n	405926 <socket_cb+0x142>
				printf("socket_cb: recv error!\r\n");
  405910:	4826      	ldr	r0, [pc, #152]	; (4059ac <socket_cb+0x1c8>)
  405912:	4b11      	ldr	r3, [pc, #68]	; (405958 <socket_cb+0x174>)
  405914:	4798      	blx	r3
				close(tcp_client_socket);
  405916:	4c0e      	ldr	r4, [pc, #56]	; (405950 <socket_cb+0x16c>)
  405918:	f994 0000 	ldrsb.w	r0, [r4]
  40591c:	4b22      	ldr	r3, [pc, #136]	; (4059a8 <socket_cb+0x1c4>)
  40591e:	4798      	blx	r3
				tcp_client_socket = -1;
  405920:	23ff      	movs	r3, #255	; 0xff
  405922:	7023      	strb	r3, [r4, #0]
}
  405924:	e76d      	b.n	405802 <socket_cb+0x1e>
        printf(pstrRecv->pu8Buffer);
  405926:	6810      	ldr	r0, [r2, #0]
  405928:	4b0b      	ldr	r3, [pc, #44]	; (405958 <socket_cb+0x174>)
  40592a:	4798      	blx	r3
				memset(gau8ReceivedBuffer, 0, sizeof(gau8ReceivedBuffer));
  40592c:	4c15      	ldr	r4, [pc, #84]	; (405984 <socket_cb+0x1a0>)
  40592e:	f44f 65af 	mov.w	r5, #1400	; 0x578
  405932:	462a      	mov	r2, r5
  405934:	2100      	movs	r1, #0
  405936:	4620      	mov	r0, r4
  405938:	4b16      	ldr	r3, [pc, #88]	; (405994 <socket_cb+0x1b0>)
  40593a:	4798      	blx	r3
				recv(tcp_client_socket, &gau8ReceivedBuffer[0], MAIN_WIFI_M2M_BUFFER_SIZE, 0);
  40593c:	2300      	movs	r3, #0
  40593e:	462a      	mov	r2, r5
  405940:	4621      	mov	r1, r4
  405942:	4803      	ldr	r0, [pc, #12]	; (405950 <socket_cb+0x16c>)
  405944:	f990 0000 	ldrsb.w	r0, [r0]
  405948:	4c13      	ldr	r4, [pc, #76]	; (405998 <socket_cb+0x1b4>)
  40594a:	47a0      	blx	r4
  40594c:	e759      	b.n	405802 <socket_cb+0x1e>
  40594e:	bf00      	nop
  405950:	20400020 	.word	0x20400020
  405954:	0040d1b4 	.word	0x0040d1b4
  405958:	00406085 	.word	0x00406085
  40595c:	2040c958 	.word	0x2040c958
  405960:	400e1860 	.word	0x400e1860
  405964:	004004c7 	.word	0x004004c7
  405968:	0040d1c8 	.word	0x0040d1c8
  40596c:	0040641d 	.word	0x0040641d
  405970:	2040c960 	.word	0x2040c960
  405974:	2040c3d8 	.word	0x2040c3d8
  405978:	0040d1d4 	.word	0x0040d1d4
  40597c:	0040d1dc 	.word	0x0040d1dc
  405980:	00406481 	.word	0x00406481
  405984:	2040c3e0 	.word	0x2040c3e0
  405988:	0040d1fc 	.word	0x0040d1fc
  40598c:	0040d274 	.word	0x0040d274
  405990:	004046e9 	.word	0x004046e9
  405994:	004061e1 	.word	0x004061e1
  405998:	00404785 	.word	0x00404785
  40599c:	2040c3dc 	.word	0x2040c3dc
  4059a0:	0040d268 	.word	0x0040d268
  4059a4:	0040d27c 	.word	0x0040d27c
  4059a8:	00404825 	.word	0x00404825
  4059ac:	0040d298 	.word	0x0040d298

004059b0 <wifi_cb>:
{
  4059b0:	b510      	push	{r4, lr}
  4059b2:	b082      	sub	sp, #8
	switch (u8MsgType) {
  4059b4:	282c      	cmp	r0, #44	; 0x2c
  4059b6:	d003      	beq.n	4059c0 <wifi_cb+0x10>
  4059b8:	2832      	cmp	r0, #50	; 0x32
  4059ba:	d013      	beq.n	4059e4 <wifi_cb+0x34>
}
  4059bc:	b002      	add	sp, #8
  4059be:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
  4059c0:	780b      	ldrb	r3, [r1, #0]
  4059c2:	2b01      	cmp	r3, #1
  4059c4:	d008      	beq.n	4059d8 <wifi_cb+0x28>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
  4059c6:	2b00      	cmp	r3, #0
  4059c8:	d1f8      	bne.n	4059bc <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
  4059ca:	480d      	ldr	r0, [pc, #52]	; (405a00 <wifi_cb+0x50>)
  4059cc:	4b0d      	ldr	r3, [pc, #52]	; (405a04 <wifi_cb+0x54>)
  4059ce:	4798      	blx	r3
 			wifi_connected = 0;
  4059d0:	2200      	movs	r2, #0
  4059d2:	4b0d      	ldr	r3, [pc, #52]	; (405a08 <wifi_cb+0x58>)
  4059d4:	701a      	strb	r2, [r3, #0]
  4059d6:	e7f1      	b.n	4059bc <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
  4059d8:	480c      	ldr	r0, [pc, #48]	; (405a0c <wifi_cb+0x5c>)
  4059da:	4b0a      	ldr	r3, [pc, #40]	; (405a04 <wifi_cb+0x54>)
  4059dc:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
  4059de:	4b0c      	ldr	r3, [pc, #48]	; (405a10 <wifi_cb+0x60>)
  4059e0:	4798      	blx	r3
  4059e2:	e7eb      	b.n	4059bc <wifi_cb+0xc>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
  4059e4:	788b      	ldrb	r3, [r1, #2]
  4059e6:	784a      	ldrb	r2, [r1, #1]
  4059e8:	7808      	ldrb	r0, [r1, #0]
  4059ea:	78c9      	ldrb	r1, [r1, #3]
  4059ec:	9100      	str	r1, [sp, #0]
  4059ee:	4601      	mov	r1, r0
  4059f0:	4808      	ldr	r0, [pc, #32]	; (405a14 <wifi_cb+0x64>)
  4059f2:	4c04      	ldr	r4, [pc, #16]	; (405a04 <wifi_cb+0x54>)
  4059f4:	47a0      	blx	r4
		wifi_connected = M2M_WIFI_CONNECTED;
  4059f6:	2201      	movs	r2, #1
  4059f8:	4b03      	ldr	r3, [pc, #12]	; (405a08 <wifi_cb+0x58>)
  4059fa:	701a      	strb	r2, [r3, #0]
}
  4059fc:	e7de      	b.n	4059bc <wifi_cb+0xc>
  4059fe:	bf00      	nop
  405a00:	0040d3c8 	.word	0x0040d3c8
  405a04:	00406085 	.word	0x00406085
  405a08:	2040c961 	.word	0x2040c961
  405a0c:	0040d3a8 	.word	0x0040d3a8
  405a10:	004030e5 	.word	0x004030e5
  405a14:	0040d3ec 	.word	0x0040d3ec

00405a18 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  405a18:	b5f0      	push	{r4, r5, r6, r7, lr}
  405a1a:	b083      	sub	sp, #12
  405a1c:	4605      	mov	r5, r0
  405a1e:	460c      	mov	r4, r1
	uint32_t val = 0;
  405a20:	2300      	movs	r3, #0
  405a22:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  405a24:	4b2a      	ldr	r3, [pc, #168]	; (405ad0 <usart_serial_getchar+0xb8>)
  405a26:	4298      	cmp	r0, r3
  405a28:	d013      	beq.n	405a52 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  405a2a:	4b2a      	ldr	r3, [pc, #168]	; (405ad4 <usart_serial_getchar+0xbc>)
  405a2c:	4298      	cmp	r0, r3
  405a2e:	d018      	beq.n	405a62 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  405a30:	4b29      	ldr	r3, [pc, #164]	; (405ad8 <usart_serial_getchar+0xc0>)
  405a32:	4298      	cmp	r0, r3
  405a34:	d01d      	beq.n	405a72 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  405a36:	4b29      	ldr	r3, [pc, #164]	; (405adc <usart_serial_getchar+0xc4>)
  405a38:	429d      	cmp	r5, r3
  405a3a:	d022      	beq.n	405a82 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  405a3c:	4b28      	ldr	r3, [pc, #160]	; (405ae0 <usart_serial_getchar+0xc8>)
  405a3e:	429d      	cmp	r5, r3
  405a40:	d027      	beq.n	405a92 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  405a42:	4b28      	ldr	r3, [pc, #160]	; (405ae4 <usart_serial_getchar+0xcc>)
  405a44:	429d      	cmp	r5, r3
  405a46:	d02e      	beq.n	405aa6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  405a48:	4b27      	ldr	r3, [pc, #156]	; (405ae8 <usart_serial_getchar+0xd0>)
  405a4a:	429d      	cmp	r5, r3
  405a4c:	d035      	beq.n	405aba <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  405a4e:	b003      	add	sp, #12
  405a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  405a52:	461f      	mov	r7, r3
  405a54:	4e25      	ldr	r6, [pc, #148]	; (405aec <usart_serial_getchar+0xd4>)
  405a56:	4621      	mov	r1, r4
  405a58:	4638      	mov	r0, r7
  405a5a:	47b0      	blx	r6
  405a5c:	2800      	cmp	r0, #0
  405a5e:	d1fa      	bne.n	405a56 <usart_serial_getchar+0x3e>
  405a60:	e7e9      	b.n	405a36 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  405a62:	461f      	mov	r7, r3
  405a64:	4e21      	ldr	r6, [pc, #132]	; (405aec <usart_serial_getchar+0xd4>)
  405a66:	4621      	mov	r1, r4
  405a68:	4638      	mov	r0, r7
  405a6a:	47b0      	blx	r6
  405a6c:	2800      	cmp	r0, #0
  405a6e:	d1fa      	bne.n	405a66 <usart_serial_getchar+0x4e>
  405a70:	e7e4      	b.n	405a3c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  405a72:	461f      	mov	r7, r3
  405a74:	4e1d      	ldr	r6, [pc, #116]	; (405aec <usart_serial_getchar+0xd4>)
  405a76:	4621      	mov	r1, r4
  405a78:	4638      	mov	r0, r7
  405a7a:	47b0      	blx	r6
  405a7c:	2800      	cmp	r0, #0
  405a7e:	d1fa      	bne.n	405a76 <usart_serial_getchar+0x5e>
  405a80:	e7df      	b.n	405a42 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  405a82:	461f      	mov	r7, r3
  405a84:	4e19      	ldr	r6, [pc, #100]	; (405aec <usart_serial_getchar+0xd4>)
  405a86:	4621      	mov	r1, r4
  405a88:	4638      	mov	r0, r7
  405a8a:	47b0      	blx	r6
  405a8c:	2800      	cmp	r0, #0
  405a8e:	d1fa      	bne.n	405a86 <usart_serial_getchar+0x6e>
  405a90:	e7da      	b.n	405a48 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  405a92:	461e      	mov	r6, r3
  405a94:	4d16      	ldr	r5, [pc, #88]	; (405af0 <usart_serial_getchar+0xd8>)
  405a96:	a901      	add	r1, sp, #4
  405a98:	4630      	mov	r0, r6
  405a9a:	47a8      	blx	r5
  405a9c:	2800      	cmp	r0, #0
  405a9e:	d1fa      	bne.n	405a96 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  405aa0:	9b01      	ldr	r3, [sp, #4]
  405aa2:	7023      	strb	r3, [r4, #0]
  405aa4:	e7d3      	b.n	405a4e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405aa6:	461e      	mov	r6, r3
  405aa8:	4d11      	ldr	r5, [pc, #68]	; (405af0 <usart_serial_getchar+0xd8>)
  405aaa:	a901      	add	r1, sp, #4
  405aac:	4630      	mov	r0, r6
  405aae:	47a8      	blx	r5
  405ab0:	2800      	cmp	r0, #0
  405ab2:	d1fa      	bne.n	405aaa <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  405ab4:	9b01      	ldr	r3, [sp, #4]
  405ab6:	7023      	strb	r3, [r4, #0]
  405ab8:	e7c9      	b.n	405a4e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  405aba:	461e      	mov	r6, r3
  405abc:	4d0c      	ldr	r5, [pc, #48]	; (405af0 <usart_serial_getchar+0xd8>)
  405abe:	a901      	add	r1, sp, #4
  405ac0:	4630      	mov	r0, r6
  405ac2:	47a8      	blx	r5
  405ac4:	2800      	cmp	r0, #0
  405ac6:	d1fa      	bne.n	405abe <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  405ac8:	9b01      	ldr	r3, [sp, #4]
  405aca:	7023      	strb	r3, [r4, #0]
}
  405acc:	e7bf      	b.n	405a4e <usart_serial_getchar+0x36>
  405ace:	bf00      	nop
  405ad0:	400e0800 	.word	0x400e0800
  405ad4:	400e0a00 	.word	0x400e0a00
  405ad8:	400e1a00 	.word	0x400e1a00
  405adc:	400e1c00 	.word	0x400e1c00
  405ae0:	40024000 	.word	0x40024000
  405ae4:	40028000 	.word	0x40028000
  405ae8:	4002c000 	.word	0x4002c000
  405aec:	00405309 	.word	0x00405309
  405af0:	00405417 	.word	0x00405417

00405af4 <usart_serial_putchar>:
{
  405af4:	b570      	push	{r4, r5, r6, lr}
  405af6:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  405af8:	4b2a      	ldr	r3, [pc, #168]	; (405ba4 <usart_serial_putchar+0xb0>)
  405afa:	4298      	cmp	r0, r3
  405afc:	d013      	beq.n	405b26 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  405afe:	4b2a      	ldr	r3, [pc, #168]	; (405ba8 <usart_serial_putchar+0xb4>)
  405b00:	4298      	cmp	r0, r3
  405b02:	d019      	beq.n	405b38 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  405b04:	4b29      	ldr	r3, [pc, #164]	; (405bac <usart_serial_putchar+0xb8>)
  405b06:	4298      	cmp	r0, r3
  405b08:	d01f      	beq.n	405b4a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  405b0a:	4b29      	ldr	r3, [pc, #164]	; (405bb0 <usart_serial_putchar+0xbc>)
  405b0c:	4298      	cmp	r0, r3
  405b0e:	d025      	beq.n	405b5c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  405b10:	4b28      	ldr	r3, [pc, #160]	; (405bb4 <usart_serial_putchar+0xc0>)
  405b12:	4298      	cmp	r0, r3
  405b14:	d02b      	beq.n	405b6e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  405b16:	4b28      	ldr	r3, [pc, #160]	; (405bb8 <usart_serial_putchar+0xc4>)
  405b18:	4298      	cmp	r0, r3
  405b1a:	d031      	beq.n	405b80 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  405b1c:	4b27      	ldr	r3, [pc, #156]	; (405bbc <usart_serial_putchar+0xc8>)
  405b1e:	4298      	cmp	r0, r3
  405b20:	d037      	beq.n	405b92 <usart_serial_putchar+0x9e>
	return 0;
  405b22:	2000      	movs	r0, #0
}
  405b24:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405b26:	461e      	mov	r6, r3
  405b28:	4d25      	ldr	r5, [pc, #148]	; (405bc0 <usart_serial_putchar+0xcc>)
  405b2a:	4621      	mov	r1, r4
  405b2c:	4630      	mov	r0, r6
  405b2e:	47a8      	blx	r5
  405b30:	2800      	cmp	r0, #0
  405b32:	d1fa      	bne.n	405b2a <usart_serial_putchar+0x36>
		return 1;
  405b34:	2001      	movs	r0, #1
  405b36:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405b38:	461e      	mov	r6, r3
  405b3a:	4d21      	ldr	r5, [pc, #132]	; (405bc0 <usart_serial_putchar+0xcc>)
  405b3c:	4621      	mov	r1, r4
  405b3e:	4630      	mov	r0, r6
  405b40:	47a8      	blx	r5
  405b42:	2800      	cmp	r0, #0
  405b44:	d1fa      	bne.n	405b3c <usart_serial_putchar+0x48>
		return 1;
  405b46:	2001      	movs	r0, #1
  405b48:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405b4a:	461e      	mov	r6, r3
  405b4c:	4d1c      	ldr	r5, [pc, #112]	; (405bc0 <usart_serial_putchar+0xcc>)
  405b4e:	4621      	mov	r1, r4
  405b50:	4630      	mov	r0, r6
  405b52:	47a8      	blx	r5
  405b54:	2800      	cmp	r0, #0
  405b56:	d1fa      	bne.n	405b4e <usart_serial_putchar+0x5a>
		return 1;
  405b58:	2001      	movs	r0, #1
  405b5a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  405b5c:	461e      	mov	r6, r3
  405b5e:	4d18      	ldr	r5, [pc, #96]	; (405bc0 <usart_serial_putchar+0xcc>)
  405b60:	4621      	mov	r1, r4
  405b62:	4630      	mov	r0, r6
  405b64:	47a8      	blx	r5
  405b66:	2800      	cmp	r0, #0
  405b68:	d1fa      	bne.n	405b60 <usart_serial_putchar+0x6c>
		return 1;
  405b6a:	2001      	movs	r0, #1
  405b6c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405b6e:	461e      	mov	r6, r3
  405b70:	4d14      	ldr	r5, [pc, #80]	; (405bc4 <usart_serial_putchar+0xd0>)
  405b72:	4621      	mov	r1, r4
  405b74:	4630      	mov	r0, r6
  405b76:	47a8      	blx	r5
  405b78:	2800      	cmp	r0, #0
  405b7a:	d1fa      	bne.n	405b72 <usart_serial_putchar+0x7e>
		return 1;
  405b7c:	2001      	movs	r0, #1
  405b7e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405b80:	461e      	mov	r6, r3
  405b82:	4d10      	ldr	r5, [pc, #64]	; (405bc4 <usart_serial_putchar+0xd0>)
  405b84:	4621      	mov	r1, r4
  405b86:	4630      	mov	r0, r6
  405b88:	47a8      	blx	r5
  405b8a:	2800      	cmp	r0, #0
  405b8c:	d1fa      	bne.n	405b84 <usart_serial_putchar+0x90>
		return 1;
  405b8e:	2001      	movs	r0, #1
  405b90:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  405b92:	461e      	mov	r6, r3
  405b94:	4d0b      	ldr	r5, [pc, #44]	; (405bc4 <usart_serial_putchar+0xd0>)
  405b96:	4621      	mov	r1, r4
  405b98:	4630      	mov	r0, r6
  405b9a:	47a8      	blx	r5
  405b9c:	2800      	cmp	r0, #0
  405b9e:	d1fa      	bne.n	405b96 <usart_serial_putchar+0xa2>
		return 1;
  405ba0:	2001      	movs	r0, #1
  405ba2:	bd70      	pop	{r4, r5, r6, pc}
  405ba4:	400e0800 	.word	0x400e0800
  405ba8:	400e0a00 	.word	0x400e0a00
  405bac:	400e1a00 	.word	0x400e1a00
  405bb0:	400e1c00 	.word	0x400e1c00
  405bb4:	40024000 	.word	0x40024000
  405bb8:	40028000 	.word	0x40028000
  405bbc:	4002c000 	.word	0x4002c000
  405bc0:	004052f7 	.word	0x004052f7
  405bc4:	00405401 	.word	0x00405401

00405bc8 <vApplicationStackOverflowHook>:
{
  405bc8:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  405bca:	460a      	mov	r2, r1
  405bcc:	4601      	mov	r1, r0
  405bce:	4802      	ldr	r0, [pc, #8]	; (405bd8 <vApplicationStackOverflowHook+0x10>)
  405bd0:	4b02      	ldr	r3, [pc, #8]	; (405bdc <vApplicationStackOverflowHook+0x14>)
  405bd2:	4798      	blx	r3
  405bd4:	e7fe      	b.n	405bd4 <vApplicationStackOverflowHook+0xc>
  405bd6:	bf00      	nop
  405bd8:	0040d390 	.word	0x0040d390
  405bdc:	00406085 	.word	0x00406085

00405be0 <vApplicationTickHook>:
{
  405be0:	4770      	bx	lr

00405be2 <vApplicationMallocFailedHook>:
{
  405be2:	4770      	bx	lr

00405be4 <inet_aton>:
{
  405be4:	b4f0      	push	{r4, r5, r6, r7}
  405be6:	3801      	subs	r0, #1
  register u_long acc = 0, addr = 0;
  405be8:	2400      	movs	r4, #0
  405bea:	4622      	mov	r2, r4
  int dots = 0;
  405bec:	4625      	mov	r5, r4
	        acc = 0;
  405bee:	4626      	mov	r6, r4
  405bf0:	e011      	b.n	405c16 <inet_aton+0x32>
	  switch (cc) {
  405bf2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
  405bf6:	2f09      	cmp	r7, #9
  405bf8:	d814      	bhi.n	405c24 <inet_aton+0x40>
	        acc = acc * 10 + (cc - '0');
  405bfa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  405bfe:	eb07 0242 	add.w	r2, r7, r2, lsl #1
	        break;
  405c02:	e007      	b.n	405c14 <inet_aton+0x30>
	        if (++dots > 3) {
  405c04:	3501      	adds	r5, #1
  405c06:	2d03      	cmp	r5, #3
  405c08:	dc24      	bgt.n	405c54 <inet_aton+0x70>
	        if (acc > 255) {
  405c0a:	2aff      	cmp	r2, #255	; 0xff
  405c0c:	d824      	bhi.n	405c58 <inet_aton+0x74>
	        addr = addr << 8 | acc;
  405c0e:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	        acc = 0;
  405c12:	4632      	mov	r2, r6
  } while (*cp++) ;
  405c14:	b14b      	cbz	r3, 405c2a <inet_aton+0x46>
	  register char cc = *cp;
  405c16:	f810 3f01 	ldrb.w	r3, [r0, #1]!
	  switch (cc) {
  405c1a:	2b2e      	cmp	r3, #46	; 0x2e
  405c1c:	d0f2      	beq.n	405c04 <inet_aton+0x20>
  405c1e:	d8e8      	bhi.n	405bf2 <inet_aton+0xe>
  405c20:	2b00      	cmp	r3, #0
  405c22:	d0f2      	beq.n	405c0a <inet_aton+0x26>
	        return 0;
  405c24:	2000      	movs	r0, #0
}
  405c26:	bcf0      	pop	{r4, r5, r6, r7}
  405c28:	4770      	bx	lr
  if (dots < 3) {
  405c2a:	2d02      	cmp	r5, #2
  405c2c:	dc03      	bgt.n	405c36 <inet_aton+0x52>
	  addr <<= 8 * (3 - dots) ;
  405c2e:	f1c5 0303 	rsb	r3, r5, #3
  405c32:	00db      	lsls	r3, r3, #3
  405c34:	409c      	lsls	r4, r3
  if (ap) {
  405c36:	b189      	cbz	r1, 405c5c <inet_aton+0x78>
	  ap->s_addr = _htonl(addr);
  405c38:	0e23      	lsrs	r3, r4, #24
  405c3a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  405c3e:	0222      	lsls	r2, r4, #8
  405c40:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
  405c44:	431a      	orrs	r2, r3
  405c46:	0a23      	lsrs	r3, r4, #8
  405c48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  405c4c:	4313      	orrs	r3, r2
  405c4e:	600b      	str	r3, [r1, #0]
  return 1;    
  405c50:	2001      	movs	r0, #1
  405c52:	e7e8      	b.n	405c26 <inet_aton+0x42>
		    return 0;
  405c54:	2000      	movs	r0, #0
  405c56:	e7e6      	b.n	405c26 <inet_aton+0x42>
		    return 0;
  405c58:	2000      	movs	r0, #0
  405c5a:	e7e4      	b.n	405c26 <inet_aton+0x42>
  return 1;    
  405c5c:	2001      	movs	r0, #1
  405c5e:	e7e2      	b.n	405c26 <inet_aton+0x42>

00405c60 <task_wifi>:
static void task_wifi(void *pvParameters) {
  405c60:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c62:	b08d      	sub	sp, #52	; 0x34
	nm_bsp_init();
  405c64:	4b36      	ldr	r3, [pc, #216]	; (405d40 <task_wifi+0xe0>)
  405c66:	4798      	blx	r3
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
  405c68:	2300      	movs	r3, #0
  405c6a:	9307      	str	r3, [sp, #28]
  405c6c:	9308      	str	r3, [sp, #32]
  405c6e:	9309      	str	r3, [sp, #36]	; 0x24
  405c70:	930a      	str	r3, [sp, #40]	; 0x28
  405c72:	930b      	str	r3, [sp, #44]	; 0x2c
	param.pfAppWifiCb = wifi_cb;
  405c74:	4b33      	ldr	r3, [pc, #204]	; (405d44 <task_wifi+0xe4>)
  405c76:	9306      	str	r3, [sp, #24]
	ret = m2m_wifi_init(&param);
  405c78:	a806      	add	r0, sp, #24
  405c7a:	4b33      	ldr	r3, [pc, #204]	; (405d48 <task_wifi+0xe8>)
  405c7c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
  405c7e:	b120      	cbz	r0, 405c8a <task_wifi+0x2a>
  405c80:	4601      	mov	r1, r0
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
  405c82:	4832      	ldr	r0, [pc, #200]	; (405d4c <task_wifi+0xec>)
  405c84:	4b32      	ldr	r3, [pc, #200]	; (405d50 <task_wifi+0xf0>)
  405c86:	4798      	blx	r3
  405c88:	e7fe      	b.n	405c88 <task_wifi+0x28>
	socketInit();
  405c8a:	4b32      	ldr	r3, [pc, #200]	; (405d54 <task_wifi+0xf4>)
  405c8c:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
  405c8e:	4932      	ldr	r1, [pc, #200]	; (405d58 <task_wifi+0xf8>)
  405c90:	4832      	ldr	r0, [pc, #200]	; (405d5c <task_wifi+0xfc>)
  405c92:	4b33      	ldr	r3, [pc, #204]	; (405d60 <task_wifi+0x100>)
  405c94:	4798      	blx	r3
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
  405c96:	4d33      	ldr	r5, [pc, #204]	; (405d64 <task_wifi+0x104>)
  405c98:	4629      	mov	r1, r5
  405c9a:	4833      	ldr	r0, [pc, #204]	; (405d68 <task_wifi+0x108>)
  405c9c:	4c2c      	ldr	r4, [pc, #176]	; (405d50 <task_wifi+0xf0>)
  405c9e:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
  405ca0:	23ff      	movs	r3, #255	; 0xff
  405ca2:	9300      	str	r3, [sp, #0]
  405ca4:	4b31      	ldr	r3, [pc, #196]	; (405d6c <task_wifi+0x10c>)
  405ca6:	2202      	movs	r2, #2
  405ca8:	4611      	mov	r1, r2
  405caa:	4628      	mov	r0, r5
  405cac:	4d30      	ldr	r5, [pc, #192]	; (405d70 <task_wifi+0x110>)
  405cae:	47a8      	blx	r5
	addr_in.sin_family = AF_INET;
  405cb0:	2302      	movs	r3, #2
  405cb2:	f8ad 3008 	strh.w	r3, [sp, #8]
	addr_in.sin_port = _htons(MAIN_SERVER_PORT);
  405cb6:	f648 0313 	movw	r3, #34835	; 0x8813
  405cba:	f8ad 300a 	strh.w	r3, [sp, #10]
	inet_aton(MAIN_SERVER_NAME, &addr_in.sin_addr);
  405cbe:	a903      	add	r1, sp, #12
  405cc0:	482c      	ldr	r0, [pc, #176]	; (405d74 <task_wifi+0x114>)
  405cc2:	4b2d      	ldr	r3, [pc, #180]	; (405d78 <task_wifi+0x118>)
  405cc4:	4798      	blx	r3
	printf("Inet aton : %d", addr_in.sin_addr);
  405cc6:	9903      	ldr	r1, [sp, #12]
  405cc8:	482c      	ldr	r0, [pc, #176]	; (405d7c <task_wifi+0x11c>)
  405cca:	47a0      	blx	r4
	  m2m_wifi_handle_events(NULL);
  405ccc:	4d2c      	ldr	r5, [pc, #176]	; (405d80 <task_wifi+0x120>)
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405cce:	4c2d      	ldr	r4, [pc, #180]	; (405d84 <task_wifi+0x124>)
	  vTaskDelay(100);
  405cd0:	4e2d      	ldr	r6, [pc, #180]	; (405d88 <task_wifi+0x128>)
  405cd2:	e00f      	b.n	405cf4 <task_wifi+0x94>
				  printf("main: failed to create TCP client socket error!\r\n");
  405cd4:	482d      	ldr	r0, [pc, #180]	; (405d8c <task_wifi+0x12c>)
  405cd6:	4b1e      	ldr	r3, [pc, #120]	; (405d50 <task_wifi+0xf0>)
  405cd8:	4798      	blx	r3
				  continue;
  405cda:	e00b      	b.n	405cf4 <task_wifi+0x94>
				  close(tcp_client_socket);
  405cdc:	4f2c      	ldr	r7, [pc, #176]	; (405d90 <task_wifi+0x130>)
  405cde:	f997 0000 	ldrsb.w	r0, [r7]
  405ce2:	4b2c      	ldr	r3, [pc, #176]	; (405d94 <task_wifi+0x134>)
  405ce4:	4798      	blx	r3
				  tcp_client_socket = -1;
  405ce6:	23ff      	movs	r3, #255	; 0xff
  405ce8:	703b      	strb	r3, [r7, #0]
				  printf("error\n");
  405cea:	482b      	ldr	r0, [pc, #172]	; (405d98 <task_wifi+0x138>)
  405cec:	4b18      	ldr	r3, [pc, #96]	; (405d50 <task_wifi+0xf0>)
  405cee:	4798      	blx	r3
	  vTaskDelay(100);
  405cf0:	2064      	movs	r0, #100	; 0x64
  405cf2:	47b0      	blx	r6
	  m2m_wifi_handle_events(NULL);
  405cf4:	2000      	movs	r0, #0
  405cf6:	47a8      	blx	r5
	  if (wifi_connected == M2M_WIFI_CONNECTED) {
  405cf8:	7823      	ldrb	r3, [r4, #0]
  405cfa:	2b01      	cmp	r3, #1
  405cfc:	d1f8      	bne.n	405cf0 <task_wifi+0x90>
		  if (tcp_client_socket < 0) {
  405cfe:	4b24      	ldr	r3, [pc, #144]	; (405d90 <task_wifi+0x130>)
  405d00:	f993 3000 	ldrsb.w	r3, [r3]
  405d04:	2b00      	cmp	r3, #0
  405d06:	daf3      	bge.n	405cf0 <task_wifi+0x90>
			  printf("socket init \n");
  405d08:	4824      	ldr	r0, [pc, #144]	; (405d9c <task_wifi+0x13c>)
  405d0a:	4b11      	ldr	r3, [pc, #68]	; (405d50 <task_wifi+0xf0>)
  405d0c:	4798      	blx	r3
			  if ((tcp_client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
  405d0e:	2200      	movs	r2, #0
  405d10:	2101      	movs	r1, #1
  405d12:	2002      	movs	r0, #2
  405d14:	4b22      	ldr	r3, [pc, #136]	; (405da0 <task_wifi+0x140>)
  405d16:	4798      	blx	r3
  405d18:	4b1d      	ldr	r3, [pc, #116]	; (405d90 <task_wifi+0x130>)
  405d1a:	7018      	strb	r0, [r3, #0]
  405d1c:	2800      	cmp	r0, #0
  405d1e:	dbd9      	blt.n	405cd4 <task_wifi+0x74>
			  printf("socket connecting\n");
  405d20:	4820      	ldr	r0, [pc, #128]	; (405da4 <task_wifi+0x144>)
  405d22:	4b0b      	ldr	r3, [pc, #44]	; (405d50 <task_wifi+0xf0>)
  405d24:	4798      	blx	r3
			  if (connect(tcp_client_socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
  405d26:	2210      	movs	r2, #16
  405d28:	a902      	add	r1, sp, #8
  405d2a:	4b19      	ldr	r3, [pc, #100]	; (405d90 <task_wifi+0x130>)
  405d2c:	f993 0000 	ldrsb.w	r0, [r3]
  405d30:	4b1d      	ldr	r3, [pc, #116]	; (405da8 <task_wifi+0x148>)
  405d32:	4798      	blx	r3
  405d34:	2800      	cmp	r0, #0
  405d36:	d1d1      	bne.n	405cdc <task_wifi+0x7c>
				  gbTcpConnection = true;
  405d38:	2201      	movs	r2, #1
  405d3a:	4b1c      	ldr	r3, [pc, #112]	; (405dac <task_wifi+0x14c>)
  405d3c:	701a      	strb	r2, [r3, #0]
  405d3e:	e7d7      	b.n	405cf0 <task_wifi+0x90>
  405d40:	00401f31 	.word	0x00401f31
  405d44:	004059b1 	.word	0x004059b1
  405d48:	00402d71 	.word	0x00402d71
  405d4c:	0040d2b4 	.word	0x0040d2b4
  405d50:	00406085 	.word	0x00406085
  405d54:	00404521 	.word	0x00404521
  405d58:	00405719 	.word	0x00405719
  405d5c:	004057e5 	.word	0x004057e5
  405d60:	00404565 	.word	0x00404565
  405d64:	0040d2dc 	.word	0x0040d2dc
  405d68:	0040d2e0 	.word	0x0040d2e0
  405d6c:	0040d304 	.word	0x0040d304
  405d70:	004030c9 	.word	0x004030c9
  405d74:	0040d310 	.word	0x0040d310
  405d78:	00405be5 	.word	0x00405be5
  405d7c:	0040d320 	.word	0x0040d320
  405d80:	00402e6d 	.word	0x00402e6d
  405d84:	2040c961 	.word	0x2040c961
  405d88:	004015f9 	.word	0x004015f9
  405d8c:	0040d340 	.word	0x0040d340
  405d90:	20400020 	.word	0x20400020
  405d94:	00404825 	.word	0x00404825
  405d98:	0040d388 	.word	0x0040d388
  405d9c:	0040d330 	.word	0x0040d330
  405da0:	00404579 	.word	0x00404579
  405da4:	0040d374 	.word	0x0040d374
  405da8:	00404659 	.word	0x00404659
  405dac:	2040c958 	.word	0x2040c958

00405db0 <RTC_init>:
}

/** END OF TASKS SECTION **/
/**************************/

void RTC_init(){
  405db0:	b570      	push	{r4, r5, r6, lr}
  405db2:	b082      	sub	sp, #8
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  405db4:	2002      	movs	r0, #2
  405db6:	4b13      	ldr	r3, [pc, #76]	; (405e04 <RTC_init+0x54>)
  405db8:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
  405dba:	4c13      	ldr	r4, [pc, #76]	; (405e08 <RTC_init+0x58>)
  405dbc:	2100      	movs	r1, #0
  405dbe:	4620      	mov	r0, r4
  405dc0:	4b12      	ldr	r3, [pc, #72]	; (405e0c <RTC_init+0x5c>)
  405dc2:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(RTC, YEAR, MONTH, DAY, WEEK);
  405dc4:	2502      	movs	r5, #2
  405dc6:	9500      	str	r5, [sp, #0]
  405dc8:	230d      	movs	r3, #13
  405dca:	2206      	movs	r2, #6
  405dcc:	f240 71e2 	movw	r1, #2018	; 0x7e2
  405dd0:	4620      	mov	r0, r4
  405dd2:	4e0f      	ldr	r6, [pc, #60]	; (405e10 <RTC_init+0x60>)
  405dd4:	47b0      	blx	r6
	rtc_set_time(RTC, HOUR, MINUTE, SECOND);
  405dd6:	2300      	movs	r3, #0
  405dd8:	220f      	movs	r2, #15
  405dda:	2110      	movs	r1, #16
  405ddc:	4620      	mov	r0, r4
  405dde:	4e0d      	ldr	r6, [pc, #52]	; (405e14 <RTC_init+0x64>)
  405de0:	47b0      	blx	r6
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  405de2:	4b0d      	ldr	r3, [pc, #52]	; (405e18 <RTC_init+0x68>)
  405de4:	2204      	movs	r2, #4
  405de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  405dea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405dee:	2100      	movs	r1, #0
  405df0:	f883 1302 	strb.w	r1, [r3, #770]	; 0x302
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  405df4:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTC_IRQn);
	NVIC_SetPriority(RTC_IRQn, 0);
	NVIC_EnableIRQ(RTC_IRQn);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(RTC,  RTC_IER_ALREN);
  405df6:	4629      	mov	r1, r5
  405df8:	4620      	mov	r0, r4
  405dfa:	4b08      	ldr	r3, [pc, #32]	; (405e1c <RTC_init+0x6c>)
  405dfc:	4798      	blx	r3

}
  405dfe:	b002      	add	sp, #8
  405e00:	bd70      	pop	{r4, r5, r6, pc}
  405e02:	bf00      	nop
  405e04:	00405151 	.word	0x00405151
  405e08:	400e1860 	.word	0x400e1860
  405e0c:	004004ad 	.word	0x004004ad
  405e10:	00400645 	.word	0x00400645
  405e14:	00400521 	.word	0x00400521
  405e18:	e000e100 	.word	0xe000e100
  405e1c:	004004c3 	.word	0x004004c3

00405e20 <RTC_Handler>:
void RTC_Handler(void)
{
  405e20:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  405e22:	4811      	ldr	r0, [pc, #68]	; (405e68 <RTC_Handler+0x48>)
  405e24:	4b11      	ldr	r3, [pc, #68]	; (405e6c <RTC_Handler+0x4c>)
  405e26:	4798      	blx	r3
  405e28:	4604      	mov	r4, r0
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  405e2a:	f010 0f04 	tst.w	r0, #4
  405e2e:	d111      	bne.n	405e54 <RTC_Handler+0x34>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  405e30:	f014 0f02 	tst.w	r4, #2
  405e34:	d113      	bne.n	405e5e <RTC_Handler+0x3e>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);

	}
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  405e36:	4d0c      	ldr	r5, [pc, #48]	; (405e68 <RTC_Handler+0x48>)
  405e38:	2101      	movs	r1, #1
  405e3a:	4628      	mov	r0, r5
  405e3c:	4c0c      	ldr	r4, [pc, #48]	; (405e70 <RTC_Handler+0x50>)
  405e3e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  405e40:	2108      	movs	r1, #8
  405e42:	4628      	mov	r0, r5
  405e44:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  405e46:	2110      	movs	r1, #16
  405e48:	4628      	mov	r0, r5
  405e4a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  405e4c:	2120      	movs	r1, #32
  405e4e:	4628      	mov	r0, r5
  405e50:	47a0      	blx	r4
  405e52:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  405e54:	2104      	movs	r1, #4
  405e56:	4804      	ldr	r0, [pc, #16]	; (405e68 <RTC_Handler+0x48>)
  405e58:	4b05      	ldr	r3, [pc, #20]	; (405e70 <RTC_Handler+0x50>)
  405e5a:	4798      	blx	r3
  405e5c:	e7e8      	b.n	405e30 <RTC_Handler+0x10>
			rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  405e5e:	2102      	movs	r1, #2
  405e60:	4801      	ldr	r0, [pc, #4]	; (405e68 <RTC_Handler+0x48>)
  405e62:	4b03      	ldr	r3, [pc, #12]	; (405e70 <RTC_Handler+0x50>)
  405e64:	4798      	blx	r3
  405e66:	e7e6      	b.n	405e36 <RTC_Handler+0x16>
  405e68:	400e1860 	.word	0x400e1860
  405e6c:	0040075d 	.word	0x0040075d
  405e70:	00400761 	.word	0x00400761

00405e74 <io_init>:
	
}


int io_init(void){
  405e74:	b530      	push	{r4, r5, lr}
  405e76:	b083      	sub	sp, #12
	/* config. pino botao em modo de entrada */
	pmc_enable_periph_clk(BUTTON_SAME_PIO_ID);
  405e78:	200a      	movs	r0, #10
  405e7a:	4b10      	ldr	r3, [pc, #64]	; (405ebc <io_init+0x48>)
  405e7c:	4798      	blx	r3
	pio_set_input(BUTTON_SAME_PIO, BUTTON_SAME_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  405e7e:	4c10      	ldr	r4, [pc, #64]	; (405ec0 <io_init+0x4c>)
  405e80:	2209      	movs	r2, #9
  405e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405e86:	4620      	mov	r0, r4
  405e88:	4b0e      	ldr	r3, [pc, #56]	; (405ec4 <io_init+0x50>)
  405e8a:	4798      	blx	r3
	pio_handler_set(BUTTON_SAME_PIO, BUTTON_SAME_PIO_ID, BUTTON_SAME_PIO_IDX_MASK, PIO_IT_FALL_EDGE, digitalInput_callback);
  405e8c:	4b0e      	ldr	r3, [pc, #56]	; (405ec8 <io_init+0x54>)
  405e8e:	9300      	str	r3, [sp, #0]
  405e90:	2350      	movs	r3, #80	; 0x50
  405e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
  405e96:	210a      	movs	r1, #10
  405e98:	4620      	mov	r0, r4
  405e9a:	4d0c      	ldr	r5, [pc, #48]	; (405ecc <io_init+0x58>)
  405e9c:	47a8      	blx	r5
  405e9e:	4b0c      	ldr	r3, [pc, #48]	; (405ed0 <io_init+0x5c>)
  405ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405ea4:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  405ea6:	22a0      	movs	r2, #160	; 0xa0
  405ea8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_EnableIRQ(BUTTON_SAME_PIO_ID);
	NVIC_SetPriority(BUTTON_SAME_PIO_ID, 5);
	pio_enable_interrupt(BUTTON_SAME_PIO, BUTTON_SAME_PIO_IDX_MASK);
  405eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
  405eb0:	4620      	mov	r0, r4
  405eb2:	4b08      	ldr	r3, [pc, #32]	; (405ed4 <io_init+0x60>)
  405eb4:	4798      	blx	r3
}
  405eb6:	b003      	add	sp, #12
  405eb8:	bd30      	pop	{r4, r5, pc}
  405eba:	bf00      	nop
  405ebc:	00405151 	.word	0x00405151
  405ec0:	400e0e00 	.word	0x400e0e00
  405ec4:	00404cb9 	.word	0x00404cb9
  405ec8:	004056c9 	.word	0x004056c9
  405ecc:	00404ed9 	.word	0x00404ed9
  405ed0:	e000e100 	.word	0xe000e100
  405ed4:	00404d49 	.word	0x00404d49

00405ed8 <main>:
 * Initialize system, UART console, network then start weather client.
 *
 * \return Program return value.
 */
int main(void)
{
  405ed8:	b500      	push	{lr}
  405eda:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the board. */
	sysclk_init();
  405edc:	4b37      	ldr	r3, [pc, #220]	; (405fbc <main+0xe4>)
  405ede:	4798      	blx	r3
	board_init();
  405ee0:	4b37      	ldr	r3, [pc, #220]	; (405fc0 <main+0xe8>)
  405ee2:	4798      	blx	r3
  405ee4:	200e      	movs	r0, #14
  405ee6:	4e37      	ldr	r6, [pc, #220]	; (405fc4 <main+0xec>)
  405ee8:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  405eea:	4d37      	ldr	r5, [pc, #220]	; (405fc8 <main+0xf0>)
  405eec:	4b37      	ldr	r3, [pc, #220]	; (405fcc <main+0xf4>)
  405eee:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  405ef0:	4a37      	ldr	r2, [pc, #220]	; (405fd0 <main+0xf8>)
  405ef2:	4b38      	ldr	r3, [pc, #224]	; (405fd4 <main+0xfc>)
  405ef4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  405ef6:	4a38      	ldr	r2, [pc, #224]	; (405fd8 <main+0x100>)
  405ef8:	4b38      	ldr	r3, [pc, #224]	; (405fdc <main+0x104>)
  405efa:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  405efc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  405f00:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  405f02:	23c0      	movs	r3, #192	; 0xc0
  405f04:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  405f06:	f44f 6300 	mov.w	r3, #2048	; 0x800
  405f0a:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  405f0c:	2400      	movs	r4, #0
  405f0e:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  405f10:	9408      	str	r4, [sp, #32]
  405f12:	200e      	movs	r0, #14
  405f14:	47b0      	blx	r6
		usart_init_rs232(p_usart, &usart_settings,
  405f16:	4a32      	ldr	r2, [pc, #200]	; (405fe0 <main+0x108>)
  405f18:	a904      	add	r1, sp, #16
  405f1a:	4628      	mov	r0, r5
  405f1c:	4b31      	ldr	r3, [pc, #196]	; (405fe4 <main+0x10c>)
  405f1e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  405f20:	4628      	mov	r0, r5
  405f22:	4b31      	ldr	r3, [pc, #196]	; (405fe8 <main+0x110>)
  405f24:	4798      	blx	r3
		usart_enable_rx(p_usart);
  405f26:	4628      	mov	r0, r5
  405f28:	4b30      	ldr	r3, [pc, #192]	; (405fec <main+0x114>)
  405f2a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  405f2c:	4e30      	ldr	r6, [pc, #192]	; (405ff0 <main+0x118>)
  405f2e:	6833      	ldr	r3, [r6, #0]
  405f30:	4621      	mov	r1, r4
  405f32:	6898      	ldr	r0, [r3, #8]
  405f34:	4d2f      	ldr	r5, [pc, #188]	; (405ff4 <main+0x11c>)
  405f36:	47a8      	blx	r5
	setbuf(stdin, NULL);
  405f38:	6833      	ldr	r3, [r6, #0]
  405f3a:	4621      	mov	r1, r4
  405f3c:	6858      	ldr	r0, [r3, #4]
  405f3e:	47a8      	blx	r5

	/* Initialize the UART console. */
	configure_console();
	printf(STRING_HEADER);
  405f40:	482d      	ldr	r0, [pc, #180]	; (405ff8 <main+0x120>)
  405f42:	4b2e      	ldr	r3, [pc, #184]	; (405ffc <main+0x124>)
  405f44:	4798      	blx	r3
	
	io_init();
  405f46:	4b2e      	ldr	r3, [pc, #184]	; (406000 <main+0x128>)
  405f48:	4798      	blx	r3
	
	RTC_init();
  405f4a:	4b2e      	ldr	r3, [pc, #184]	; (406004 <main+0x12c>)
  405f4c:	4798      	blx	r3

	rtc_set_date_alarm(RTC, 1, MONTH, 1, DAY);
  405f4e:	4d2e      	ldr	r5, [pc, #184]	; (406008 <main+0x130>)
  405f50:	230d      	movs	r3, #13
  405f52:	9300      	str	r3, [sp, #0]
  405f54:	2301      	movs	r3, #1
  405f56:	2206      	movs	r2, #6
  405f58:	4619      	mov	r1, r3
  405f5a:	4628      	mov	r0, r5
  405f5c:	4e2b      	ldr	r6, [pc, #172]	; (40600c <main+0x134>)
  405f5e:	47b0      	blx	r6
	rtc_set_time_alarm(RTC, 1, HOUR, 1, MINUTE, 1, SECOND+1);
  405f60:	2101      	movs	r1, #1
  405f62:	9102      	str	r1, [sp, #8]
  405f64:	9101      	str	r1, [sp, #4]
  405f66:	230f      	movs	r3, #15
  405f68:	9300      	str	r3, [sp, #0]
  405f6a:	460b      	mov	r3, r1
  405f6c:	2210      	movs	r2, #16
  405f6e:	4628      	mov	r0, r5
  405f70:	4d27      	ldr	r5, [pc, #156]	; (406010 <main+0x138>)
  405f72:	47a8      	blx	r5

	
	if (xTaskCreate(task_wifi, "Wifi", TASK_WIFI_STACK_SIZE, NULL,
  405f74:	9403      	str	r4, [sp, #12]
  405f76:	9402      	str	r4, [sp, #8]
  405f78:	9401      	str	r4, [sp, #4]
  405f7a:	9400      	str	r4, [sp, #0]
  405f7c:	4623      	mov	r3, r4
  405f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405f82:	4924      	ldr	r1, [pc, #144]	; (406014 <main+0x13c>)
  405f84:	4824      	ldr	r0, [pc, #144]	; (406018 <main+0x140>)
  405f86:	4c25      	ldr	r4, [pc, #148]	; (40601c <main+0x144>)
  405f88:	47a0      	blx	r4
  405f8a:	2801      	cmp	r0, #1
  405f8c:	d002      	beq.n	405f94 <main+0xbc>
	TASK_WIFI_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create Wifi task\r\n");
  405f8e:	4824      	ldr	r0, [pc, #144]	; (406020 <main+0x148>)
  405f90:	4b1a      	ldr	r3, [pc, #104]	; (405ffc <main+0x124>)
  405f92:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_send, "send", TASK_SEND_STACK_SIZE, NULL,
  405f94:	2300      	movs	r3, #0
  405f96:	9303      	str	r3, [sp, #12]
  405f98:	9302      	str	r3, [sp, #8]
  405f9a:	9301      	str	r3, [sp, #4]
  405f9c:	9300      	str	r3, [sp, #0]
  405f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  405fa2:	4920      	ldr	r1, [pc, #128]	; (406024 <main+0x14c>)
  405fa4:	4820      	ldr	r0, [pc, #128]	; (406028 <main+0x150>)
  405fa6:	4c1d      	ldr	r4, [pc, #116]	; (40601c <main+0x144>)
  405fa8:	47a0      	blx	r4
  405faa:	2801      	cmp	r0, #1
  405fac:	d002      	beq.n	405fb4 <main+0xdc>
	TASK_SEND_STACK_PRIORITY, NULL) != pdPASS) {
		printf("Failed to create send task\r\n");
  405fae:	481f      	ldr	r0, [pc, #124]	; (40602c <main+0x154>)
  405fb0:	4b12      	ldr	r3, [pc, #72]	; (405ffc <main+0x124>)
  405fb2:	4798      	blx	r3
	}

	vTaskStartScheduler();
  405fb4:	4b1e      	ldr	r3, [pc, #120]	; (406030 <main+0x158>)
  405fb6:	4798      	blx	r3
  405fb8:	e7fe      	b.n	405fb8 <main+0xe0>
  405fba:	bf00      	nop
  405fbc:	00404989 	.word	0x00404989
  405fc0:	00404a85 	.word	0x00404a85
  405fc4:	00405151 	.word	0x00405151
  405fc8:	40028000 	.word	0x40028000
  405fcc:	2040cb28 	.word	0x2040cb28
  405fd0:	00405af5 	.word	0x00405af5
  405fd4:	2040cb24 	.word	0x2040cb24
  405fd8:	00405a19 	.word	0x00405a19
  405fdc:	2040cb20 	.word	0x2040cb20
  405fe0:	08f0d180 	.word	0x08f0d180
  405fe4:	004053a1 	.word	0x004053a1
  405fe8:	004053f5 	.word	0x004053f5
  405fec:	004053fb 	.word	0x004053fb
  405ff0:	20400024 	.word	0x20400024
  405ff4:	0040627d 	.word	0x0040627d
  405ff8:	0040d0d0 	.word	0x0040d0d0
  405ffc:	00406085 	.word	0x00406085
  406000:	00405e75 	.word	0x00405e75
  406004:	00405db1 	.word	0x00405db1
  406008:	400e1860 	.word	0x400e1860
  40600c:	004006fd 	.word	0x004006fd
  406010:	004005b1 	.word	0x004005b1
  406014:	0040d134 	.word	0x0040d134
  406018:	00405c61 	.word	0x00405c61
  40601c:	00401135 	.word	0x00401135
  406020:	0040d13c 	.word	0x0040d13c
  406024:	0040d15c 	.word	0x0040d15c
  406028:	00405749 	.word	0x00405749
  40602c:	0040d164 	.word	0x0040d164
  406030:	00401331 	.word	0x00401331

00406034 <__libc_init_array>:
  406034:	b570      	push	{r4, r5, r6, lr}
  406036:	4e0f      	ldr	r6, [pc, #60]	; (406074 <__libc_init_array+0x40>)
  406038:	4d0f      	ldr	r5, [pc, #60]	; (406078 <__libc_init_array+0x44>)
  40603a:	1b76      	subs	r6, r6, r5
  40603c:	10b6      	asrs	r6, r6, #2
  40603e:	bf18      	it	ne
  406040:	2400      	movne	r4, #0
  406042:	d005      	beq.n	406050 <__libc_init_array+0x1c>
  406044:	3401      	adds	r4, #1
  406046:	f855 3b04 	ldr.w	r3, [r5], #4
  40604a:	4798      	blx	r3
  40604c:	42a6      	cmp	r6, r4
  40604e:	d1f9      	bne.n	406044 <__libc_init_array+0x10>
  406050:	4e0a      	ldr	r6, [pc, #40]	; (40607c <__libc_init_array+0x48>)
  406052:	4d0b      	ldr	r5, [pc, #44]	; (406080 <__libc_init_array+0x4c>)
  406054:	1b76      	subs	r6, r6, r5
  406056:	f007 fb33 	bl	40d6c0 <_init>
  40605a:	10b6      	asrs	r6, r6, #2
  40605c:	bf18      	it	ne
  40605e:	2400      	movne	r4, #0
  406060:	d006      	beq.n	406070 <__libc_init_array+0x3c>
  406062:	3401      	adds	r4, #1
  406064:	f855 3b04 	ldr.w	r3, [r5], #4
  406068:	4798      	blx	r3
  40606a:	42a6      	cmp	r6, r4
  40606c:	d1f9      	bne.n	406062 <__libc_init_array+0x2e>
  40606e:	bd70      	pop	{r4, r5, r6, pc}
  406070:	bd70      	pop	{r4, r5, r6, pc}
  406072:	bf00      	nop
  406074:	0040d6cc 	.word	0x0040d6cc
  406078:	0040d6cc 	.word	0x0040d6cc
  40607c:	0040d6d4 	.word	0x0040d6d4
  406080:	0040d6cc 	.word	0x0040d6cc

00406084 <iprintf>:
  406084:	b40f      	push	{r0, r1, r2, r3}
  406086:	b500      	push	{lr}
  406088:	4907      	ldr	r1, [pc, #28]	; (4060a8 <iprintf+0x24>)
  40608a:	b083      	sub	sp, #12
  40608c:	ab04      	add	r3, sp, #16
  40608e:	6808      	ldr	r0, [r1, #0]
  406090:	f853 2b04 	ldr.w	r2, [r3], #4
  406094:	6881      	ldr	r1, [r0, #8]
  406096:	9301      	str	r3, [sp, #4]
  406098:	f001 fcce 	bl	407a38 <_vfiprintf_r>
  40609c:	b003      	add	sp, #12
  40609e:	f85d eb04 	ldr.w	lr, [sp], #4
  4060a2:	b004      	add	sp, #16
  4060a4:	4770      	bx	lr
  4060a6:	bf00      	nop
  4060a8:	20400024 	.word	0x20400024

004060ac <memcpy>:
  4060ac:	4684      	mov	ip, r0
  4060ae:	ea41 0300 	orr.w	r3, r1, r0
  4060b2:	f013 0303 	ands.w	r3, r3, #3
  4060b6:	d16d      	bne.n	406194 <memcpy+0xe8>
  4060b8:	3a40      	subs	r2, #64	; 0x40
  4060ba:	d341      	bcc.n	406140 <memcpy+0x94>
  4060bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4060c0:	f840 3b04 	str.w	r3, [r0], #4
  4060c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060c8:	f840 3b04 	str.w	r3, [r0], #4
  4060cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4060d0:	f840 3b04 	str.w	r3, [r0], #4
  4060d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060d8:	f840 3b04 	str.w	r3, [r0], #4
  4060dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4060e0:	f840 3b04 	str.w	r3, [r0], #4
  4060e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060e8:	f840 3b04 	str.w	r3, [r0], #4
  4060ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f0:	f840 3b04 	str.w	r3, [r0], #4
  4060f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f8:	f840 3b04 	str.w	r3, [r0], #4
  4060fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406100:	f840 3b04 	str.w	r3, [r0], #4
  406104:	f851 3b04 	ldr.w	r3, [r1], #4
  406108:	f840 3b04 	str.w	r3, [r0], #4
  40610c:	f851 3b04 	ldr.w	r3, [r1], #4
  406110:	f840 3b04 	str.w	r3, [r0], #4
  406114:	f851 3b04 	ldr.w	r3, [r1], #4
  406118:	f840 3b04 	str.w	r3, [r0], #4
  40611c:	f851 3b04 	ldr.w	r3, [r1], #4
  406120:	f840 3b04 	str.w	r3, [r0], #4
  406124:	f851 3b04 	ldr.w	r3, [r1], #4
  406128:	f840 3b04 	str.w	r3, [r0], #4
  40612c:	f851 3b04 	ldr.w	r3, [r1], #4
  406130:	f840 3b04 	str.w	r3, [r0], #4
  406134:	f851 3b04 	ldr.w	r3, [r1], #4
  406138:	f840 3b04 	str.w	r3, [r0], #4
  40613c:	3a40      	subs	r2, #64	; 0x40
  40613e:	d2bd      	bcs.n	4060bc <memcpy+0x10>
  406140:	3230      	adds	r2, #48	; 0x30
  406142:	d311      	bcc.n	406168 <memcpy+0xbc>
  406144:	f851 3b04 	ldr.w	r3, [r1], #4
  406148:	f840 3b04 	str.w	r3, [r0], #4
  40614c:	f851 3b04 	ldr.w	r3, [r1], #4
  406150:	f840 3b04 	str.w	r3, [r0], #4
  406154:	f851 3b04 	ldr.w	r3, [r1], #4
  406158:	f840 3b04 	str.w	r3, [r0], #4
  40615c:	f851 3b04 	ldr.w	r3, [r1], #4
  406160:	f840 3b04 	str.w	r3, [r0], #4
  406164:	3a10      	subs	r2, #16
  406166:	d2ed      	bcs.n	406144 <memcpy+0x98>
  406168:	320c      	adds	r2, #12
  40616a:	d305      	bcc.n	406178 <memcpy+0xcc>
  40616c:	f851 3b04 	ldr.w	r3, [r1], #4
  406170:	f840 3b04 	str.w	r3, [r0], #4
  406174:	3a04      	subs	r2, #4
  406176:	d2f9      	bcs.n	40616c <memcpy+0xc0>
  406178:	3204      	adds	r2, #4
  40617a:	d008      	beq.n	40618e <memcpy+0xe2>
  40617c:	07d2      	lsls	r2, r2, #31
  40617e:	bf1c      	itt	ne
  406180:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406184:	f800 3b01 	strbne.w	r3, [r0], #1
  406188:	d301      	bcc.n	40618e <memcpy+0xe2>
  40618a:	880b      	ldrh	r3, [r1, #0]
  40618c:	8003      	strh	r3, [r0, #0]
  40618e:	4660      	mov	r0, ip
  406190:	4770      	bx	lr
  406192:	bf00      	nop
  406194:	2a08      	cmp	r2, #8
  406196:	d313      	bcc.n	4061c0 <memcpy+0x114>
  406198:	078b      	lsls	r3, r1, #30
  40619a:	d08d      	beq.n	4060b8 <memcpy+0xc>
  40619c:	f010 0303 	ands.w	r3, r0, #3
  4061a0:	d08a      	beq.n	4060b8 <memcpy+0xc>
  4061a2:	f1c3 0304 	rsb	r3, r3, #4
  4061a6:	1ad2      	subs	r2, r2, r3
  4061a8:	07db      	lsls	r3, r3, #31
  4061aa:	bf1c      	itt	ne
  4061ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061b0:	f800 3b01 	strbne.w	r3, [r0], #1
  4061b4:	d380      	bcc.n	4060b8 <memcpy+0xc>
  4061b6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4061ba:	f820 3b02 	strh.w	r3, [r0], #2
  4061be:	e77b      	b.n	4060b8 <memcpy+0xc>
  4061c0:	3a04      	subs	r2, #4
  4061c2:	d3d9      	bcc.n	406178 <memcpy+0xcc>
  4061c4:	3a01      	subs	r2, #1
  4061c6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4061ca:	f800 3b01 	strb.w	r3, [r0], #1
  4061ce:	d2f9      	bcs.n	4061c4 <memcpy+0x118>
  4061d0:	780b      	ldrb	r3, [r1, #0]
  4061d2:	7003      	strb	r3, [r0, #0]
  4061d4:	784b      	ldrb	r3, [r1, #1]
  4061d6:	7043      	strb	r3, [r0, #1]
  4061d8:	788b      	ldrb	r3, [r1, #2]
  4061da:	7083      	strb	r3, [r0, #2]
  4061dc:	4660      	mov	r0, ip
  4061de:	4770      	bx	lr

004061e0 <memset>:
  4061e0:	b470      	push	{r4, r5, r6}
  4061e2:	0786      	lsls	r6, r0, #30
  4061e4:	d046      	beq.n	406274 <memset+0x94>
  4061e6:	1e54      	subs	r4, r2, #1
  4061e8:	2a00      	cmp	r2, #0
  4061ea:	d041      	beq.n	406270 <memset+0x90>
  4061ec:	b2ca      	uxtb	r2, r1
  4061ee:	4603      	mov	r3, r0
  4061f0:	e002      	b.n	4061f8 <memset+0x18>
  4061f2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4061f6:	d33b      	bcc.n	406270 <memset+0x90>
  4061f8:	f803 2b01 	strb.w	r2, [r3], #1
  4061fc:	079d      	lsls	r5, r3, #30
  4061fe:	d1f8      	bne.n	4061f2 <memset+0x12>
  406200:	2c03      	cmp	r4, #3
  406202:	d92e      	bls.n	406262 <memset+0x82>
  406204:	b2cd      	uxtb	r5, r1
  406206:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40620a:	2c0f      	cmp	r4, #15
  40620c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406210:	d919      	bls.n	406246 <memset+0x66>
  406212:	f103 0210 	add.w	r2, r3, #16
  406216:	4626      	mov	r6, r4
  406218:	3e10      	subs	r6, #16
  40621a:	2e0f      	cmp	r6, #15
  40621c:	f842 5c10 	str.w	r5, [r2, #-16]
  406220:	f842 5c0c 	str.w	r5, [r2, #-12]
  406224:	f842 5c08 	str.w	r5, [r2, #-8]
  406228:	f842 5c04 	str.w	r5, [r2, #-4]
  40622c:	f102 0210 	add.w	r2, r2, #16
  406230:	d8f2      	bhi.n	406218 <memset+0x38>
  406232:	f1a4 0210 	sub.w	r2, r4, #16
  406236:	f022 020f 	bic.w	r2, r2, #15
  40623a:	f004 040f 	and.w	r4, r4, #15
  40623e:	3210      	adds	r2, #16
  406240:	2c03      	cmp	r4, #3
  406242:	4413      	add	r3, r2
  406244:	d90d      	bls.n	406262 <memset+0x82>
  406246:	461e      	mov	r6, r3
  406248:	4622      	mov	r2, r4
  40624a:	3a04      	subs	r2, #4
  40624c:	2a03      	cmp	r2, #3
  40624e:	f846 5b04 	str.w	r5, [r6], #4
  406252:	d8fa      	bhi.n	40624a <memset+0x6a>
  406254:	1f22      	subs	r2, r4, #4
  406256:	f022 0203 	bic.w	r2, r2, #3
  40625a:	3204      	adds	r2, #4
  40625c:	4413      	add	r3, r2
  40625e:	f004 0403 	and.w	r4, r4, #3
  406262:	b12c      	cbz	r4, 406270 <memset+0x90>
  406264:	b2c9      	uxtb	r1, r1
  406266:	441c      	add	r4, r3
  406268:	f803 1b01 	strb.w	r1, [r3], #1
  40626c:	429c      	cmp	r4, r3
  40626e:	d1fb      	bne.n	406268 <memset+0x88>
  406270:	bc70      	pop	{r4, r5, r6}
  406272:	4770      	bx	lr
  406274:	4614      	mov	r4, r2
  406276:	4603      	mov	r3, r0
  406278:	e7c2      	b.n	406200 <memset+0x20>
  40627a:	bf00      	nop

0040627c <setbuf>:
  40627c:	2900      	cmp	r1, #0
  40627e:	bf0c      	ite	eq
  406280:	2202      	moveq	r2, #2
  406282:	2200      	movne	r2, #0
  406284:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406288:	f000 b800 	b.w	40628c <setvbuf>

0040628c <setvbuf>:
  40628c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406290:	4c61      	ldr	r4, [pc, #388]	; (406418 <setvbuf+0x18c>)
  406292:	6825      	ldr	r5, [r4, #0]
  406294:	b083      	sub	sp, #12
  406296:	4604      	mov	r4, r0
  406298:	460f      	mov	r7, r1
  40629a:	4690      	mov	r8, r2
  40629c:	461e      	mov	r6, r3
  40629e:	b115      	cbz	r5, 4062a6 <setvbuf+0x1a>
  4062a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4062a2:	2b00      	cmp	r3, #0
  4062a4:	d064      	beq.n	406370 <setvbuf+0xe4>
  4062a6:	f1b8 0f02 	cmp.w	r8, #2
  4062aa:	d006      	beq.n	4062ba <setvbuf+0x2e>
  4062ac:	f1b8 0f01 	cmp.w	r8, #1
  4062b0:	f200 809f 	bhi.w	4063f2 <setvbuf+0x166>
  4062b4:	2e00      	cmp	r6, #0
  4062b6:	f2c0 809c 	blt.w	4063f2 <setvbuf+0x166>
  4062ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4062bc:	07d8      	lsls	r0, r3, #31
  4062be:	d534      	bpl.n	40632a <setvbuf+0x9e>
  4062c0:	4621      	mov	r1, r4
  4062c2:	4628      	mov	r0, r5
  4062c4:	f003 fb16 	bl	4098f4 <_fflush_r>
  4062c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4062ca:	b141      	cbz	r1, 4062de <setvbuf+0x52>
  4062cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4062d0:	4299      	cmp	r1, r3
  4062d2:	d002      	beq.n	4062da <setvbuf+0x4e>
  4062d4:	4628      	mov	r0, r5
  4062d6:	f003 fc8b 	bl	409bf0 <_free_r>
  4062da:	2300      	movs	r3, #0
  4062dc:	6323      	str	r3, [r4, #48]	; 0x30
  4062de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062e2:	2200      	movs	r2, #0
  4062e4:	61a2      	str	r2, [r4, #24]
  4062e6:	6062      	str	r2, [r4, #4]
  4062e8:	061a      	lsls	r2, r3, #24
  4062ea:	d43a      	bmi.n	406362 <setvbuf+0xd6>
  4062ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4062f0:	f023 0303 	bic.w	r3, r3, #3
  4062f4:	f1b8 0f02 	cmp.w	r8, #2
  4062f8:	81a3      	strh	r3, [r4, #12]
  4062fa:	d01d      	beq.n	406338 <setvbuf+0xac>
  4062fc:	ab01      	add	r3, sp, #4
  4062fe:	466a      	mov	r2, sp
  406300:	4621      	mov	r1, r4
  406302:	4628      	mov	r0, r5
  406304:	f003 ff20 	bl	40a148 <__swhatbuf_r>
  406308:	89a3      	ldrh	r3, [r4, #12]
  40630a:	4318      	orrs	r0, r3
  40630c:	81a0      	strh	r0, [r4, #12]
  40630e:	2e00      	cmp	r6, #0
  406310:	d132      	bne.n	406378 <setvbuf+0xec>
  406312:	9e00      	ldr	r6, [sp, #0]
  406314:	4630      	mov	r0, r6
  406316:	f003 ff8f 	bl	40a238 <malloc>
  40631a:	4607      	mov	r7, r0
  40631c:	2800      	cmp	r0, #0
  40631e:	d06b      	beq.n	4063f8 <setvbuf+0x16c>
  406320:	89a3      	ldrh	r3, [r4, #12]
  406322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406326:	81a3      	strh	r3, [r4, #12]
  406328:	e028      	b.n	40637c <setvbuf+0xf0>
  40632a:	89a3      	ldrh	r3, [r4, #12]
  40632c:	0599      	lsls	r1, r3, #22
  40632e:	d4c7      	bmi.n	4062c0 <setvbuf+0x34>
  406330:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406332:	f003 ff05 	bl	40a140 <__retarget_lock_acquire_recursive>
  406336:	e7c3      	b.n	4062c0 <setvbuf+0x34>
  406338:	2500      	movs	r5, #0
  40633a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40633c:	2600      	movs	r6, #0
  40633e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406342:	f043 0302 	orr.w	r3, r3, #2
  406346:	2001      	movs	r0, #1
  406348:	60a6      	str	r6, [r4, #8]
  40634a:	07ce      	lsls	r6, r1, #31
  40634c:	81a3      	strh	r3, [r4, #12]
  40634e:	6022      	str	r2, [r4, #0]
  406350:	6122      	str	r2, [r4, #16]
  406352:	6160      	str	r0, [r4, #20]
  406354:	d401      	bmi.n	40635a <setvbuf+0xce>
  406356:	0598      	lsls	r0, r3, #22
  406358:	d53e      	bpl.n	4063d8 <setvbuf+0x14c>
  40635a:	4628      	mov	r0, r5
  40635c:	b003      	add	sp, #12
  40635e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406362:	6921      	ldr	r1, [r4, #16]
  406364:	4628      	mov	r0, r5
  406366:	f003 fc43 	bl	409bf0 <_free_r>
  40636a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40636e:	e7bd      	b.n	4062ec <setvbuf+0x60>
  406370:	4628      	mov	r0, r5
  406372:	f003 fb17 	bl	4099a4 <__sinit>
  406376:	e796      	b.n	4062a6 <setvbuf+0x1a>
  406378:	2f00      	cmp	r7, #0
  40637a:	d0cb      	beq.n	406314 <setvbuf+0x88>
  40637c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40637e:	2b00      	cmp	r3, #0
  406380:	d033      	beq.n	4063ea <setvbuf+0x15e>
  406382:	9b00      	ldr	r3, [sp, #0]
  406384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406388:	6027      	str	r7, [r4, #0]
  40638a:	429e      	cmp	r6, r3
  40638c:	bf1c      	itt	ne
  40638e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  406392:	81a2      	strhne	r2, [r4, #12]
  406394:	f1b8 0f01 	cmp.w	r8, #1
  406398:	bf04      	itt	eq
  40639a:	f042 0201 	orreq.w	r2, r2, #1
  40639e:	81a2      	strheq	r2, [r4, #12]
  4063a0:	b292      	uxth	r2, r2
  4063a2:	f012 0308 	ands.w	r3, r2, #8
  4063a6:	6127      	str	r7, [r4, #16]
  4063a8:	6166      	str	r6, [r4, #20]
  4063aa:	d00e      	beq.n	4063ca <setvbuf+0x13e>
  4063ac:	07d1      	lsls	r1, r2, #31
  4063ae:	d51a      	bpl.n	4063e6 <setvbuf+0x15a>
  4063b0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4063b2:	4276      	negs	r6, r6
  4063b4:	2300      	movs	r3, #0
  4063b6:	f015 0501 	ands.w	r5, r5, #1
  4063ba:	61a6      	str	r6, [r4, #24]
  4063bc:	60a3      	str	r3, [r4, #8]
  4063be:	d009      	beq.n	4063d4 <setvbuf+0x148>
  4063c0:	2500      	movs	r5, #0
  4063c2:	4628      	mov	r0, r5
  4063c4:	b003      	add	sp, #12
  4063c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4063ca:	60a3      	str	r3, [r4, #8]
  4063cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4063ce:	f015 0501 	ands.w	r5, r5, #1
  4063d2:	d1f5      	bne.n	4063c0 <setvbuf+0x134>
  4063d4:	0593      	lsls	r3, r2, #22
  4063d6:	d4c0      	bmi.n	40635a <setvbuf+0xce>
  4063d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4063da:	f003 feb3 	bl	40a144 <__retarget_lock_release_recursive>
  4063de:	4628      	mov	r0, r5
  4063e0:	b003      	add	sp, #12
  4063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4063e6:	60a6      	str	r6, [r4, #8]
  4063e8:	e7f0      	b.n	4063cc <setvbuf+0x140>
  4063ea:	4628      	mov	r0, r5
  4063ec:	f003 fada 	bl	4099a4 <__sinit>
  4063f0:	e7c7      	b.n	406382 <setvbuf+0xf6>
  4063f2:	f04f 35ff 	mov.w	r5, #4294967295
  4063f6:	e7b0      	b.n	40635a <setvbuf+0xce>
  4063f8:	f8dd 9000 	ldr.w	r9, [sp]
  4063fc:	45b1      	cmp	r9, r6
  4063fe:	d004      	beq.n	40640a <setvbuf+0x17e>
  406400:	4648      	mov	r0, r9
  406402:	f003 ff19 	bl	40a238 <malloc>
  406406:	4607      	mov	r7, r0
  406408:	b920      	cbnz	r0, 406414 <setvbuf+0x188>
  40640a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40640e:	f04f 35ff 	mov.w	r5, #4294967295
  406412:	e792      	b.n	40633a <setvbuf+0xae>
  406414:	464e      	mov	r6, r9
  406416:	e783      	b.n	406320 <setvbuf+0x94>
  406418:	20400024 	.word	0x20400024

0040641c <sprintf>:
  40641c:	b40e      	push	{r1, r2, r3}
  40641e:	b5f0      	push	{r4, r5, r6, r7, lr}
  406420:	b09c      	sub	sp, #112	; 0x70
  406422:	ab21      	add	r3, sp, #132	; 0x84
  406424:	490f      	ldr	r1, [pc, #60]	; (406464 <sprintf+0x48>)
  406426:	f853 2b04 	ldr.w	r2, [r3], #4
  40642a:	9301      	str	r3, [sp, #4]
  40642c:	4605      	mov	r5, r0
  40642e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  406432:	6808      	ldr	r0, [r1, #0]
  406434:	9502      	str	r5, [sp, #8]
  406436:	f44f 7702 	mov.w	r7, #520	; 0x208
  40643a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40643e:	a902      	add	r1, sp, #8
  406440:	9506      	str	r5, [sp, #24]
  406442:	f8ad 7014 	strh.w	r7, [sp, #20]
  406446:	9404      	str	r4, [sp, #16]
  406448:	9407      	str	r4, [sp, #28]
  40644a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40644e:	f000 f885 	bl	40655c <_svfprintf_r>
  406452:	9b02      	ldr	r3, [sp, #8]
  406454:	2200      	movs	r2, #0
  406456:	701a      	strb	r2, [r3, #0]
  406458:	b01c      	add	sp, #112	; 0x70
  40645a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40645e:	b003      	add	sp, #12
  406460:	4770      	bx	lr
  406462:	bf00      	nop
  406464:	20400024 	.word	0x20400024
	...

00406480 <strlen>:
  406480:	f890 f000 	pld	[r0]
  406484:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406488:	f020 0107 	bic.w	r1, r0, #7
  40648c:	f06f 0c00 	mvn.w	ip, #0
  406490:	f010 0407 	ands.w	r4, r0, #7
  406494:	f891 f020 	pld	[r1, #32]
  406498:	f040 8049 	bne.w	40652e <strlen+0xae>
  40649c:	f04f 0400 	mov.w	r4, #0
  4064a0:	f06f 0007 	mvn.w	r0, #7
  4064a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4064a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4064ac:	f100 0008 	add.w	r0, r0, #8
  4064b0:	fa82 f24c 	uadd8	r2, r2, ip
  4064b4:	faa4 f28c 	sel	r2, r4, ip
  4064b8:	fa83 f34c 	uadd8	r3, r3, ip
  4064bc:	faa2 f38c 	sel	r3, r2, ip
  4064c0:	bb4b      	cbnz	r3, 406516 <strlen+0x96>
  4064c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4064c6:	fa82 f24c 	uadd8	r2, r2, ip
  4064ca:	f100 0008 	add.w	r0, r0, #8
  4064ce:	faa4 f28c 	sel	r2, r4, ip
  4064d2:	fa83 f34c 	uadd8	r3, r3, ip
  4064d6:	faa2 f38c 	sel	r3, r2, ip
  4064da:	b9e3      	cbnz	r3, 406516 <strlen+0x96>
  4064dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4064e0:	fa82 f24c 	uadd8	r2, r2, ip
  4064e4:	f100 0008 	add.w	r0, r0, #8
  4064e8:	faa4 f28c 	sel	r2, r4, ip
  4064ec:	fa83 f34c 	uadd8	r3, r3, ip
  4064f0:	faa2 f38c 	sel	r3, r2, ip
  4064f4:	b97b      	cbnz	r3, 406516 <strlen+0x96>
  4064f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4064fa:	f101 0120 	add.w	r1, r1, #32
  4064fe:	fa82 f24c 	uadd8	r2, r2, ip
  406502:	f100 0008 	add.w	r0, r0, #8
  406506:	faa4 f28c 	sel	r2, r4, ip
  40650a:	fa83 f34c 	uadd8	r3, r3, ip
  40650e:	faa2 f38c 	sel	r3, r2, ip
  406512:	2b00      	cmp	r3, #0
  406514:	d0c6      	beq.n	4064a4 <strlen+0x24>
  406516:	2a00      	cmp	r2, #0
  406518:	bf04      	itt	eq
  40651a:	3004      	addeq	r0, #4
  40651c:	461a      	moveq	r2, r3
  40651e:	ba12      	rev	r2, r2
  406520:	fab2 f282 	clz	r2, r2
  406524:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406528:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40652c:	4770      	bx	lr
  40652e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406532:	f004 0503 	and.w	r5, r4, #3
  406536:	f1c4 0000 	rsb	r0, r4, #0
  40653a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40653e:	f014 0f04 	tst.w	r4, #4
  406542:	f891 f040 	pld	[r1, #64]	; 0x40
  406546:	fa0c f505 	lsl.w	r5, ip, r5
  40654a:	ea62 0205 	orn	r2, r2, r5
  40654e:	bf1c      	itt	ne
  406550:	ea63 0305 	ornne	r3, r3, r5
  406554:	4662      	movne	r2, ip
  406556:	f04f 0400 	mov.w	r4, #0
  40655a:	e7a9      	b.n	4064b0 <strlen+0x30>

0040655c <_svfprintf_r>:
  40655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406560:	b0c3      	sub	sp, #268	; 0x10c
  406562:	460c      	mov	r4, r1
  406564:	910b      	str	r1, [sp, #44]	; 0x2c
  406566:	4692      	mov	sl, r2
  406568:	930f      	str	r3, [sp, #60]	; 0x3c
  40656a:	900c      	str	r0, [sp, #48]	; 0x30
  40656c:	f003 fdd6 	bl	40a11c <_localeconv_r>
  406570:	6803      	ldr	r3, [r0, #0]
  406572:	931a      	str	r3, [sp, #104]	; 0x68
  406574:	4618      	mov	r0, r3
  406576:	f7ff ff83 	bl	406480 <strlen>
  40657a:	89a3      	ldrh	r3, [r4, #12]
  40657c:	9019      	str	r0, [sp, #100]	; 0x64
  40657e:	0619      	lsls	r1, r3, #24
  406580:	d503      	bpl.n	40658a <_svfprintf_r+0x2e>
  406582:	6923      	ldr	r3, [r4, #16]
  406584:	2b00      	cmp	r3, #0
  406586:	f001 8003 	beq.w	407590 <_svfprintf_r+0x1034>
  40658a:	2300      	movs	r3, #0
  40658c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  406590:	9313      	str	r3, [sp, #76]	; 0x4c
  406592:	9315      	str	r3, [sp, #84]	; 0x54
  406594:	9314      	str	r3, [sp, #80]	; 0x50
  406596:	9327      	str	r3, [sp, #156]	; 0x9c
  406598:	9326      	str	r3, [sp, #152]	; 0x98
  40659a:	9318      	str	r3, [sp, #96]	; 0x60
  40659c:	931b      	str	r3, [sp, #108]	; 0x6c
  40659e:	9309      	str	r3, [sp, #36]	; 0x24
  4065a0:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  4065a4:	46c8      	mov	r8, r9
  4065a6:	9316      	str	r3, [sp, #88]	; 0x58
  4065a8:	9317      	str	r3, [sp, #92]	; 0x5c
  4065aa:	f89a 3000 	ldrb.w	r3, [sl]
  4065ae:	4654      	mov	r4, sl
  4065b0:	b1e3      	cbz	r3, 4065ec <_svfprintf_r+0x90>
  4065b2:	2b25      	cmp	r3, #37	; 0x25
  4065b4:	d102      	bne.n	4065bc <_svfprintf_r+0x60>
  4065b6:	e019      	b.n	4065ec <_svfprintf_r+0x90>
  4065b8:	2b25      	cmp	r3, #37	; 0x25
  4065ba:	d003      	beq.n	4065c4 <_svfprintf_r+0x68>
  4065bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4065c0:	2b00      	cmp	r3, #0
  4065c2:	d1f9      	bne.n	4065b8 <_svfprintf_r+0x5c>
  4065c4:	eba4 050a 	sub.w	r5, r4, sl
  4065c8:	b185      	cbz	r5, 4065ec <_svfprintf_r+0x90>
  4065ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4065cc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4065ce:	f8c8 a000 	str.w	sl, [r8]
  4065d2:	3301      	adds	r3, #1
  4065d4:	442a      	add	r2, r5
  4065d6:	2b07      	cmp	r3, #7
  4065d8:	f8c8 5004 	str.w	r5, [r8, #4]
  4065dc:	9227      	str	r2, [sp, #156]	; 0x9c
  4065de:	9326      	str	r3, [sp, #152]	; 0x98
  4065e0:	dc7f      	bgt.n	4066e2 <_svfprintf_r+0x186>
  4065e2:	f108 0808 	add.w	r8, r8, #8
  4065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4065e8:	442b      	add	r3, r5
  4065ea:	9309      	str	r3, [sp, #36]	; 0x24
  4065ec:	7823      	ldrb	r3, [r4, #0]
  4065ee:	2b00      	cmp	r3, #0
  4065f0:	d07f      	beq.n	4066f2 <_svfprintf_r+0x196>
  4065f2:	2300      	movs	r3, #0
  4065f4:	461a      	mov	r2, r3
  4065f6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4065fa:	4619      	mov	r1, r3
  4065fc:	930d      	str	r3, [sp, #52]	; 0x34
  4065fe:	469b      	mov	fp, r3
  406600:	f04f 30ff 	mov.w	r0, #4294967295
  406604:	7863      	ldrb	r3, [r4, #1]
  406606:	900a      	str	r0, [sp, #40]	; 0x28
  406608:	f104 0a01 	add.w	sl, r4, #1
  40660c:	f10a 0a01 	add.w	sl, sl, #1
  406610:	f1a3 0020 	sub.w	r0, r3, #32
  406614:	2858      	cmp	r0, #88	; 0x58
  406616:	f200 83c1 	bhi.w	406d9c <_svfprintf_r+0x840>
  40661a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40661e:	0238      	.short	0x0238
  406620:	03bf03bf 	.word	0x03bf03bf
  406624:	03bf0240 	.word	0x03bf0240
  406628:	03bf03bf 	.word	0x03bf03bf
  40662c:	03bf03bf 	.word	0x03bf03bf
  406630:	024503bf 	.word	0x024503bf
  406634:	03bf0203 	.word	0x03bf0203
  406638:	026b005d 	.word	0x026b005d
  40663c:	028603bf 	.word	0x028603bf
  406640:	039d039d 	.word	0x039d039d
  406644:	039d039d 	.word	0x039d039d
  406648:	039d039d 	.word	0x039d039d
  40664c:	039d039d 	.word	0x039d039d
  406650:	03bf039d 	.word	0x03bf039d
  406654:	03bf03bf 	.word	0x03bf03bf
  406658:	03bf03bf 	.word	0x03bf03bf
  40665c:	03bf03bf 	.word	0x03bf03bf
  406660:	03bf03bf 	.word	0x03bf03bf
  406664:	033703bf 	.word	0x033703bf
  406668:	03bf0357 	.word	0x03bf0357
  40666c:	03bf0357 	.word	0x03bf0357
  406670:	03bf03bf 	.word	0x03bf03bf
  406674:	039803bf 	.word	0x039803bf
  406678:	03bf03bf 	.word	0x03bf03bf
  40667c:	03bf03ad 	.word	0x03bf03ad
  406680:	03bf03bf 	.word	0x03bf03bf
  406684:	03bf03bf 	.word	0x03bf03bf
  406688:	03bf0259 	.word	0x03bf0259
  40668c:	031e03bf 	.word	0x031e03bf
  406690:	03bf03bf 	.word	0x03bf03bf
  406694:	03bf03bf 	.word	0x03bf03bf
  406698:	03bf03bf 	.word	0x03bf03bf
  40669c:	03bf03bf 	.word	0x03bf03bf
  4066a0:	03bf03bf 	.word	0x03bf03bf
  4066a4:	02db02c6 	.word	0x02db02c6
  4066a8:	03570357 	.word	0x03570357
  4066ac:	028b0357 	.word	0x028b0357
  4066b0:	03bf02db 	.word	0x03bf02db
  4066b4:	029003bf 	.word	0x029003bf
  4066b8:	029d03bf 	.word	0x029d03bf
  4066bc:	02b401cc 	.word	0x02b401cc
  4066c0:	03bf0208 	.word	0x03bf0208
  4066c4:	03bf01e1 	.word	0x03bf01e1
  4066c8:	03bf007e 	.word	0x03bf007e
  4066cc:	020d03bf 	.word	0x020d03bf
  4066d0:	980d      	ldr	r0, [sp, #52]	; 0x34
  4066d2:	930f      	str	r3, [sp, #60]	; 0x3c
  4066d4:	4240      	negs	r0, r0
  4066d6:	900d      	str	r0, [sp, #52]	; 0x34
  4066d8:	f04b 0b04 	orr.w	fp, fp, #4
  4066dc:	f89a 3000 	ldrb.w	r3, [sl]
  4066e0:	e794      	b.n	40660c <_svfprintf_r+0xb0>
  4066e2:	aa25      	add	r2, sp, #148	; 0x94
  4066e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4066e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4066e8:	f004 fe30 	bl	40b34c <__ssprint_r>
  4066ec:	b940      	cbnz	r0, 406700 <_svfprintf_r+0x1a4>
  4066ee:	46c8      	mov	r8, r9
  4066f0:	e779      	b.n	4065e6 <_svfprintf_r+0x8a>
  4066f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4066f4:	b123      	cbz	r3, 406700 <_svfprintf_r+0x1a4>
  4066f6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4066f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4066fa:	aa25      	add	r2, sp, #148	; 0x94
  4066fc:	f004 fe26 	bl	40b34c <__ssprint_r>
  406700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406702:	899b      	ldrh	r3, [r3, #12]
  406704:	f013 0f40 	tst.w	r3, #64	; 0x40
  406708:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40670a:	bf18      	it	ne
  40670c:	f04f 33ff 	movne.w	r3, #4294967295
  406710:	9309      	str	r3, [sp, #36]	; 0x24
  406712:	9809      	ldr	r0, [sp, #36]	; 0x24
  406714:	b043      	add	sp, #268	; 0x10c
  406716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40671a:	f01b 0f20 	tst.w	fp, #32
  40671e:	9311      	str	r3, [sp, #68]	; 0x44
  406720:	f040 81dd 	bne.w	406ade <_svfprintf_r+0x582>
  406724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406726:	f01b 0f10 	tst.w	fp, #16
  40672a:	4613      	mov	r3, r2
  40672c:	f040 856e 	bne.w	40720c <_svfprintf_r+0xcb0>
  406730:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406734:	f000 856a 	beq.w	40720c <_svfprintf_r+0xcb0>
  406738:	8814      	ldrh	r4, [r2, #0]
  40673a:	3204      	adds	r2, #4
  40673c:	2500      	movs	r5, #0
  40673e:	2301      	movs	r3, #1
  406740:	920f      	str	r2, [sp, #60]	; 0x3c
  406742:	2700      	movs	r7, #0
  406744:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406748:	990a      	ldr	r1, [sp, #40]	; 0x28
  40674a:	1c4a      	adds	r2, r1, #1
  40674c:	f000 8265 	beq.w	406c1a <_svfprintf_r+0x6be>
  406750:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  406754:	9207      	str	r2, [sp, #28]
  406756:	ea54 0205 	orrs.w	r2, r4, r5
  40675a:	f040 8264 	bne.w	406c26 <_svfprintf_r+0x6ca>
  40675e:	2900      	cmp	r1, #0
  406760:	f040 843c 	bne.w	406fdc <_svfprintf_r+0xa80>
  406764:	2b00      	cmp	r3, #0
  406766:	f040 84d7 	bne.w	407118 <_svfprintf_r+0xbbc>
  40676a:	f01b 0301 	ands.w	r3, fp, #1
  40676e:	930e      	str	r3, [sp, #56]	; 0x38
  406770:	f000 8604 	beq.w	40737c <_svfprintf_r+0xe20>
  406774:	ae42      	add	r6, sp, #264	; 0x108
  406776:	2330      	movs	r3, #48	; 0x30
  406778:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40677c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40677e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406780:	4293      	cmp	r3, r2
  406782:	bfb8      	it	lt
  406784:	4613      	movlt	r3, r2
  406786:	9308      	str	r3, [sp, #32]
  406788:	2300      	movs	r3, #0
  40678a:	9312      	str	r3, [sp, #72]	; 0x48
  40678c:	b117      	cbz	r7, 406794 <_svfprintf_r+0x238>
  40678e:	9b08      	ldr	r3, [sp, #32]
  406790:	3301      	adds	r3, #1
  406792:	9308      	str	r3, [sp, #32]
  406794:	9b07      	ldr	r3, [sp, #28]
  406796:	f013 0302 	ands.w	r3, r3, #2
  40679a:	9310      	str	r3, [sp, #64]	; 0x40
  40679c:	d002      	beq.n	4067a4 <_svfprintf_r+0x248>
  40679e:	9b08      	ldr	r3, [sp, #32]
  4067a0:	3302      	adds	r3, #2
  4067a2:	9308      	str	r3, [sp, #32]
  4067a4:	9b07      	ldr	r3, [sp, #28]
  4067a6:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4067aa:	f040 830e 	bne.w	406dca <_svfprintf_r+0x86e>
  4067ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4067b0:	9a08      	ldr	r2, [sp, #32]
  4067b2:	eba3 0b02 	sub.w	fp, r3, r2
  4067b6:	f1bb 0f00 	cmp.w	fp, #0
  4067ba:	f340 8306 	ble.w	406dca <_svfprintf_r+0x86e>
  4067be:	f1bb 0f10 	cmp.w	fp, #16
  4067c2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4067c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4067c6:	dd29      	ble.n	40681c <_svfprintf_r+0x2c0>
  4067c8:	4643      	mov	r3, r8
  4067ca:	4621      	mov	r1, r4
  4067cc:	46a8      	mov	r8, r5
  4067ce:	2710      	movs	r7, #16
  4067d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4067d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4067d4:	e006      	b.n	4067e4 <_svfprintf_r+0x288>
  4067d6:	f1ab 0b10 	sub.w	fp, fp, #16
  4067da:	f1bb 0f10 	cmp.w	fp, #16
  4067de:	f103 0308 	add.w	r3, r3, #8
  4067e2:	dd18      	ble.n	406816 <_svfprintf_r+0x2ba>
  4067e4:	3201      	adds	r2, #1
  4067e6:	48b7      	ldr	r0, [pc, #732]	; (406ac4 <_svfprintf_r+0x568>)
  4067e8:	9226      	str	r2, [sp, #152]	; 0x98
  4067ea:	3110      	adds	r1, #16
  4067ec:	2a07      	cmp	r2, #7
  4067ee:	9127      	str	r1, [sp, #156]	; 0x9c
  4067f0:	e883 0081 	stmia.w	r3, {r0, r7}
  4067f4:	ddef      	ble.n	4067d6 <_svfprintf_r+0x27a>
  4067f6:	aa25      	add	r2, sp, #148	; 0x94
  4067f8:	4629      	mov	r1, r5
  4067fa:	4620      	mov	r0, r4
  4067fc:	f004 fda6 	bl	40b34c <__ssprint_r>
  406800:	2800      	cmp	r0, #0
  406802:	f47f af7d 	bne.w	406700 <_svfprintf_r+0x1a4>
  406806:	f1ab 0b10 	sub.w	fp, fp, #16
  40680a:	f1bb 0f10 	cmp.w	fp, #16
  40680e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406810:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406812:	464b      	mov	r3, r9
  406814:	dce6      	bgt.n	4067e4 <_svfprintf_r+0x288>
  406816:	4645      	mov	r5, r8
  406818:	460c      	mov	r4, r1
  40681a:	4698      	mov	r8, r3
  40681c:	3201      	adds	r2, #1
  40681e:	4ba9      	ldr	r3, [pc, #676]	; (406ac4 <_svfprintf_r+0x568>)
  406820:	9226      	str	r2, [sp, #152]	; 0x98
  406822:	445c      	add	r4, fp
  406824:	2a07      	cmp	r2, #7
  406826:	9427      	str	r4, [sp, #156]	; 0x9c
  406828:	e888 0808 	stmia.w	r8, {r3, fp}
  40682c:	f300 8498 	bgt.w	407160 <_svfprintf_r+0xc04>
  406830:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406834:	f108 0808 	add.w	r8, r8, #8
  406838:	b177      	cbz	r7, 406858 <_svfprintf_r+0x2fc>
  40683a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40683c:	3301      	adds	r3, #1
  40683e:	3401      	adds	r4, #1
  406840:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  406844:	2201      	movs	r2, #1
  406846:	2b07      	cmp	r3, #7
  406848:	9427      	str	r4, [sp, #156]	; 0x9c
  40684a:	9326      	str	r3, [sp, #152]	; 0x98
  40684c:	e888 0006 	stmia.w	r8, {r1, r2}
  406850:	f300 83db 	bgt.w	40700a <_svfprintf_r+0xaae>
  406854:	f108 0808 	add.w	r8, r8, #8
  406858:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40685a:	b16b      	cbz	r3, 406878 <_svfprintf_r+0x31c>
  40685c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40685e:	3301      	adds	r3, #1
  406860:	3402      	adds	r4, #2
  406862:	a91e      	add	r1, sp, #120	; 0x78
  406864:	2202      	movs	r2, #2
  406866:	2b07      	cmp	r3, #7
  406868:	9427      	str	r4, [sp, #156]	; 0x9c
  40686a:	9326      	str	r3, [sp, #152]	; 0x98
  40686c:	e888 0006 	stmia.w	r8, {r1, r2}
  406870:	f300 83d6 	bgt.w	407020 <_svfprintf_r+0xac4>
  406874:	f108 0808 	add.w	r8, r8, #8
  406878:	2d80      	cmp	r5, #128	; 0x80
  40687a:	f000 8315 	beq.w	406ea8 <_svfprintf_r+0x94c>
  40687e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  406882:	1a9f      	subs	r7, r3, r2
  406884:	2f00      	cmp	r7, #0
  406886:	dd36      	ble.n	4068f6 <_svfprintf_r+0x39a>
  406888:	2f10      	cmp	r7, #16
  40688a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40688c:	4d8e      	ldr	r5, [pc, #568]	; (406ac8 <_svfprintf_r+0x56c>)
  40688e:	dd27      	ble.n	4068e0 <_svfprintf_r+0x384>
  406890:	4642      	mov	r2, r8
  406892:	4621      	mov	r1, r4
  406894:	46b0      	mov	r8, r6
  406896:	f04f 0b10 	mov.w	fp, #16
  40689a:	462e      	mov	r6, r5
  40689c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40689e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4068a0:	e004      	b.n	4068ac <_svfprintf_r+0x350>
  4068a2:	3f10      	subs	r7, #16
  4068a4:	2f10      	cmp	r7, #16
  4068a6:	f102 0208 	add.w	r2, r2, #8
  4068aa:	dd15      	ble.n	4068d8 <_svfprintf_r+0x37c>
  4068ac:	3301      	adds	r3, #1
  4068ae:	3110      	adds	r1, #16
  4068b0:	2b07      	cmp	r3, #7
  4068b2:	9127      	str	r1, [sp, #156]	; 0x9c
  4068b4:	9326      	str	r3, [sp, #152]	; 0x98
  4068b6:	e882 0840 	stmia.w	r2, {r6, fp}
  4068ba:	ddf2      	ble.n	4068a2 <_svfprintf_r+0x346>
  4068bc:	aa25      	add	r2, sp, #148	; 0x94
  4068be:	4629      	mov	r1, r5
  4068c0:	4620      	mov	r0, r4
  4068c2:	f004 fd43 	bl	40b34c <__ssprint_r>
  4068c6:	2800      	cmp	r0, #0
  4068c8:	f47f af1a 	bne.w	406700 <_svfprintf_r+0x1a4>
  4068cc:	3f10      	subs	r7, #16
  4068ce:	2f10      	cmp	r7, #16
  4068d0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4068d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4068d4:	464a      	mov	r2, r9
  4068d6:	dce9      	bgt.n	4068ac <_svfprintf_r+0x350>
  4068d8:	4635      	mov	r5, r6
  4068da:	460c      	mov	r4, r1
  4068dc:	4646      	mov	r6, r8
  4068de:	4690      	mov	r8, r2
  4068e0:	3301      	adds	r3, #1
  4068e2:	443c      	add	r4, r7
  4068e4:	2b07      	cmp	r3, #7
  4068e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4068e8:	9326      	str	r3, [sp, #152]	; 0x98
  4068ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4068ee:	f300 8381 	bgt.w	406ff4 <_svfprintf_r+0xa98>
  4068f2:	f108 0808 	add.w	r8, r8, #8
  4068f6:	9b07      	ldr	r3, [sp, #28]
  4068f8:	05df      	lsls	r7, r3, #23
  4068fa:	f100 8268 	bmi.w	406dce <_svfprintf_r+0x872>
  4068fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406900:	990e      	ldr	r1, [sp, #56]	; 0x38
  406902:	f8c8 6000 	str.w	r6, [r8]
  406906:	3301      	adds	r3, #1
  406908:	440c      	add	r4, r1
  40690a:	2b07      	cmp	r3, #7
  40690c:	9427      	str	r4, [sp, #156]	; 0x9c
  40690e:	f8c8 1004 	str.w	r1, [r8, #4]
  406912:	9326      	str	r3, [sp, #152]	; 0x98
  406914:	f300 834d 	bgt.w	406fb2 <_svfprintf_r+0xa56>
  406918:	f108 0808 	add.w	r8, r8, #8
  40691c:	9b07      	ldr	r3, [sp, #28]
  40691e:	075b      	lsls	r3, r3, #29
  406920:	d53a      	bpl.n	406998 <_svfprintf_r+0x43c>
  406922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406924:	9a08      	ldr	r2, [sp, #32]
  406926:	1a9d      	subs	r5, r3, r2
  406928:	2d00      	cmp	r5, #0
  40692a:	dd35      	ble.n	406998 <_svfprintf_r+0x43c>
  40692c:	2d10      	cmp	r5, #16
  40692e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406930:	dd20      	ble.n	406974 <_svfprintf_r+0x418>
  406932:	2610      	movs	r6, #16
  406934:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406936:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  40693a:	e004      	b.n	406946 <_svfprintf_r+0x3ea>
  40693c:	3d10      	subs	r5, #16
  40693e:	2d10      	cmp	r5, #16
  406940:	f108 0808 	add.w	r8, r8, #8
  406944:	dd16      	ble.n	406974 <_svfprintf_r+0x418>
  406946:	3301      	adds	r3, #1
  406948:	4a5e      	ldr	r2, [pc, #376]	; (406ac4 <_svfprintf_r+0x568>)
  40694a:	9326      	str	r3, [sp, #152]	; 0x98
  40694c:	3410      	adds	r4, #16
  40694e:	2b07      	cmp	r3, #7
  406950:	9427      	str	r4, [sp, #156]	; 0x9c
  406952:	e888 0044 	stmia.w	r8, {r2, r6}
  406956:	ddf1      	ble.n	40693c <_svfprintf_r+0x3e0>
  406958:	aa25      	add	r2, sp, #148	; 0x94
  40695a:	4659      	mov	r1, fp
  40695c:	4638      	mov	r0, r7
  40695e:	f004 fcf5 	bl	40b34c <__ssprint_r>
  406962:	2800      	cmp	r0, #0
  406964:	f47f aecc 	bne.w	406700 <_svfprintf_r+0x1a4>
  406968:	3d10      	subs	r5, #16
  40696a:	2d10      	cmp	r5, #16
  40696c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40696e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406970:	46c8      	mov	r8, r9
  406972:	dce8      	bgt.n	406946 <_svfprintf_r+0x3ea>
  406974:	3301      	adds	r3, #1
  406976:	4a53      	ldr	r2, [pc, #332]	; (406ac4 <_svfprintf_r+0x568>)
  406978:	9326      	str	r3, [sp, #152]	; 0x98
  40697a:	442c      	add	r4, r5
  40697c:	2b07      	cmp	r3, #7
  40697e:	9427      	str	r4, [sp, #156]	; 0x9c
  406980:	e888 0024 	stmia.w	r8, {r2, r5}
  406984:	dd08      	ble.n	406998 <_svfprintf_r+0x43c>
  406986:	aa25      	add	r2, sp, #148	; 0x94
  406988:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40698a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40698c:	f004 fcde 	bl	40b34c <__ssprint_r>
  406990:	2800      	cmp	r0, #0
  406992:	f47f aeb5 	bne.w	406700 <_svfprintf_r+0x1a4>
  406996:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406998:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40699a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40699c:	9908      	ldr	r1, [sp, #32]
  40699e:	428a      	cmp	r2, r1
  4069a0:	bfac      	ite	ge
  4069a2:	189b      	addge	r3, r3, r2
  4069a4:	185b      	addlt	r3, r3, r1
  4069a6:	9309      	str	r3, [sp, #36]	; 0x24
  4069a8:	2c00      	cmp	r4, #0
  4069aa:	f040 830d 	bne.w	406fc8 <_svfprintf_r+0xa6c>
  4069ae:	2300      	movs	r3, #0
  4069b0:	9326      	str	r3, [sp, #152]	; 0x98
  4069b2:	46c8      	mov	r8, r9
  4069b4:	e5f9      	b.n	4065aa <_svfprintf_r+0x4e>
  4069b6:	9311      	str	r3, [sp, #68]	; 0x44
  4069b8:	f01b 0320 	ands.w	r3, fp, #32
  4069bc:	f040 81e3 	bne.w	406d86 <_svfprintf_r+0x82a>
  4069c0:	f01b 0210 	ands.w	r2, fp, #16
  4069c4:	f040 842e 	bne.w	407224 <_svfprintf_r+0xcc8>
  4069c8:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4069cc:	f000 842a 	beq.w	407224 <_svfprintf_r+0xcc8>
  4069d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4069d2:	4613      	mov	r3, r2
  4069d4:	460a      	mov	r2, r1
  4069d6:	3204      	adds	r2, #4
  4069d8:	880c      	ldrh	r4, [r1, #0]
  4069da:	920f      	str	r2, [sp, #60]	; 0x3c
  4069dc:	2500      	movs	r5, #0
  4069de:	e6b0      	b.n	406742 <_svfprintf_r+0x1e6>
  4069e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4069e2:	9311      	str	r3, [sp, #68]	; 0x44
  4069e4:	6816      	ldr	r6, [r2, #0]
  4069e6:	2400      	movs	r4, #0
  4069e8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4069ec:	1d15      	adds	r5, r2, #4
  4069ee:	2e00      	cmp	r6, #0
  4069f0:	f000 86a7 	beq.w	407742 <_svfprintf_r+0x11e6>
  4069f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4069f6:	1c53      	adds	r3, r2, #1
  4069f8:	f000 8609 	beq.w	40760e <_svfprintf_r+0x10b2>
  4069fc:	4621      	mov	r1, r4
  4069fe:	4630      	mov	r0, r6
  406a00:	f003 feee 	bl	40a7e0 <memchr>
  406a04:	2800      	cmp	r0, #0
  406a06:	f000 86e1 	beq.w	4077cc <_svfprintf_r+0x1270>
  406a0a:	1b83      	subs	r3, r0, r6
  406a0c:	930e      	str	r3, [sp, #56]	; 0x38
  406a0e:	940a      	str	r4, [sp, #40]	; 0x28
  406a10:	950f      	str	r5, [sp, #60]	; 0x3c
  406a12:	f8cd b01c 	str.w	fp, [sp, #28]
  406a16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  406a1a:	9308      	str	r3, [sp, #32]
  406a1c:	9412      	str	r4, [sp, #72]	; 0x48
  406a1e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406a22:	e6b3      	b.n	40678c <_svfprintf_r+0x230>
  406a24:	f89a 3000 	ldrb.w	r3, [sl]
  406a28:	2201      	movs	r2, #1
  406a2a:	212b      	movs	r1, #43	; 0x2b
  406a2c:	e5ee      	b.n	40660c <_svfprintf_r+0xb0>
  406a2e:	f04b 0b20 	orr.w	fp, fp, #32
  406a32:	f89a 3000 	ldrb.w	r3, [sl]
  406a36:	e5e9      	b.n	40660c <_svfprintf_r+0xb0>
  406a38:	9311      	str	r3, [sp, #68]	; 0x44
  406a3a:	2a00      	cmp	r2, #0
  406a3c:	f040 8795 	bne.w	40796a <_svfprintf_r+0x140e>
  406a40:	4b22      	ldr	r3, [pc, #136]	; (406acc <_svfprintf_r+0x570>)
  406a42:	9318      	str	r3, [sp, #96]	; 0x60
  406a44:	f01b 0f20 	tst.w	fp, #32
  406a48:	f040 8111 	bne.w	406c6e <_svfprintf_r+0x712>
  406a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406a4e:	f01b 0f10 	tst.w	fp, #16
  406a52:	4613      	mov	r3, r2
  406a54:	f040 83e1 	bne.w	40721a <_svfprintf_r+0xcbe>
  406a58:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406a5c:	f000 83dd 	beq.w	40721a <_svfprintf_r+0xcbe>
  406a60:	3304      	adds	r3, #4
  406a62:	8814      	ldrh	r4, [r2, #0]
  406a64:	930f      	str	r3, [sp, #60]	; 0x3c
  406a66:	2500      	movs	r5, #0
  406a68:	f01b 0f01 	tst.w	fp, #1
  406a6c:	f000 810c 	beq.w	406c88 <_svfprintf_r+0x72c>
  406a70:	ea54 0305 	orrs.w	r3, r4, r5
  406a74:	f000 8108 	beq.w	406c88 <_svfprintf_r+0x72c>
  406a78:	2330      	movs	r3, #48	; 0x30
  406a7a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  406a7e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  406a82:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  406a86:	f04b 0b02 	orr.w	fp, fp, #2
  406a8a:	2302      	movs	r3, #2
  406a8c:	e659      	b.n	406742 <_svfprintf_r+0x1e6>
  406a8e:	f89a 3000 	ldrb.w	r3, [sl]
  406a92:	2900      	cmp	r1, #0
  406a94:	f47f adba 	bne.w	40660c <_svfprintf_r+0xb0>
  406a98:	2201      	movs	r2, #1
  406a9a:	2120      	movs	r1, #32
  406a9c:	e5b6      	b.n	40660c <_svfprintf_r+0xb0>
  406a9e:	f04b 0b01 	orr.w	fp, fp, #1
  406aa2:	f89a 3000 	ldrb.w	r3, [sl]
  406aa6:	e5b1      	b.n	40660c <_svfprintf_r+0xb0>
  406aa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  406aaa:	6823      	ldr	r3, [r4, #0]
  406aac:	930d      	str	r3, [sp, #52]	; 0x34
  406aae:	4618      	mov	r0, r3
  406ab0:	2800      	cmp	r0, #0
  406ab2:	4623      	mov	r3, r4
  406ab4:	f103 0304 	add.w	r3, r3, #4
  406ab8:	f6ff ae0a 	blt.w	4066d0 <_svfprintf_r+0x174>
  406abc:	930f      	str	r3, [sp, #60]	; 0x3c
  406abe:	f89a 3000 	ldrb.w	r3, [sl]
  406ac2:	e5a3      	b.n	40660c <_svfprintf_r+0xb0>
  406ac4:	0040d45c 	.word	0x0040d45c
  406ac8:	0040d46c 	.word	0x0040d46c
  406acc:	0040d43c 	.word	0x0040d43c
  406ad0:	f04b 0b10 	orr.w	fp, fp, #16
  406ad4:	f01b 0f20 	tst.w	fp, #32
  406ad8:	9311      	str	r3, [sp, #68]	; 0x44
  406ada:	f43f ae23 	beq.w	406724 <_svfprintf_r+0x1c8>
  406ade:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406ae0:	3507      	adds	r5, #7
  406ae2:	f025 0307 	bic.w	r3, r5, #7
  406ae6:	f103 0208 	add.w	r2, r3, #8
  406aea:	e9d3 4500 	ldrd	r4, r5, [r3]
  406aee:	920f      	str	r2, [sp, #60]	; 0x3c
  406af0:	2301      	movs	r3, #1
  406af2:	e626      	b.n	406742 <_svfprintf_r+0x1e6>
  406af4:	f89a 3000 	ldrb.w	r3, [sl]
  406af8:	2b2a      	cmp	r3, #42	; 0x2a
  406afa:	f10a 0401 	add.w	r4, sl, #1
  406afe:	f000 8727 	beq.w	407950 <_svfprintf_r+0x13f4>
  406b02:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406b06:	2809      	cmp	r0, #9
  406b08:	46a2      	mov	sl, r4
  406b0a:	f200 86ad 	bhi.w	407868 <_svfprintf_r+0x130c>
  406b0e:	2300      	movs	r3, #0
  406b10:	461c      	mov	r4, r3
  406b12:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406b16:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406b1a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406b1e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406b22:	2809      	cmp	r0, #9
  406b24:	d9f5      	bls.n	406b12 <_svfprintf_r+0x5b6>
  406b26:	940a      	str	r4, [sp, #40]	; 0x28
  406b28:	e572      	b.n	406610 <_svfprintf_r+0xb4>
  406b2a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  406b2e:	f89a 3000 	ldrb.w	r3, [sl]
  406b32:	e56b      	b.n	40660c <_svfprintf_r+0xb0>
  406b34:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  406b38:	f89a 3000 	ldrb.w	r3, [sl]
  406b3c:	e566      	b.n	40660c <_svfprintf_r+0xb0>
  406b3e:	f89a 3000 	ldrb.w	r3, [sl]
  406b42:	2b6c      	cmp	r3, #108	; 0x6c
  406b44:	bf03      	ittte	eq
  406b46:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  406b4a:	f04b 0b20 	orreq.w	fp, fp, #32
  406b4e:	f10a 0a01 	addeq.w	sl, sl, #1
  406b52:	f04b 0b10 	orrne.w	fp, fp, #16
  406b56:	e559      	b.n	40660c <_svfprintf_r+0xb0>
  406b58:	2a00      	cmp	r2, #0
  406b5a:	f040 8711 	bne.w	407980 <_svfprintf_r+0x1424>
  406b5e:	f01b 0f20 	tst.w	fp, #32
  406b62:	f040 84f9 	bne.w	407558 <_svfprintf_r+0xffc>
  406b66:	f01b 0f10 	tst.w	fp, #16
  406b6a:	f040 84ac 	bne.w	4074c6 <_svfprintf_r+0xf6a>
  406b6e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406b72:	f000 84a8 	beq.w	4074c6 <_svfprintf_r+0xf6a>
  406b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406b78:	6813      	ldr	r3, [r2, #0]
  406b7a:	3204      	adds	r2, #4
  406b7c:	920f      	str	r2, [sp, #60]	; 0x3c
  406b7e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  406b82:	801a      	strh	r2, [r3, #0]
  406b84:	e511      	b.n	4065aa <_svfprintf_r+0x4e>
  406b86:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406b88:	4bb3      	ldr	r3, [pc, #716]	; (406e58 <_svfprintf_r+0x8fc>)
  406b8a:	680c      	ldr	r4, [r1, #0]
  406b8c:	9318      	str	r3, [sp, #96]	; 0x60
  406b8e:	2230      	movs	r2, #48	; 0x30
  406b90:	2378      	movs	r3, #120	; 0x78
  406b92:	3104      	adds	r1, #4
  406b94:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  406b98:	9311      	str	r3, [sp, #68]	; 0x44
  406b9a:	f04b 0b02 	orr.w	fp, fp, #2
  406b9e:	910f      	str	r1, [sp, #60]	; 0x3c
  406ba0:	2500      	movs	r5, #0
  406ba2:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  406ba6:	2302      	movs	r3, #2
  406ba8:	e5cb      	b.n	406742 <_svfprintf_r+0x1e6>
  406baa:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406bac:	9311      	str	r3, [sp, #68]	; 0x44
  406bae:	680a      	ldr	r2, [r1, #0]
  406bb0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  406bb4:	2300      	movs	r3, #0
  406bb6:	460a      	mov	r2, r1
  406bb8:	461f      	mov	r7, r3
  406bba:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406bbe:	3204      	adds	r2, #4
  406bc0:	2301      	movs	r3, #1
  406bc2:	9308      	str	r3, [sp, #32]
  406bc4:	f8cd b01c 	str.w	fp, [sp, #28]
  406bc8:	970a      	str	r7, [sp, #40]	; 0x28
  406bca:	9712      	str	r7, [sp, #72]	; 0x48
  406bcc:	920f      	str	r2, [sp, #60]	; 0x3c
  406bce:	930e      	str	r3, [sp, #56]	; 0x38
  406bd0:	ae28      	add	r6, sp, #160	; 0xa0
  406bd2:	e5df      	b.n	406794 <_svfprintf_r+0x238>
  406bd4:	9311      	str	r3, [sp, #68]	; 0x44
  406bd6:	2a00      	cmp	r2, #0
  406bd8:	f040 86ea 	bne.w	4079b0 <_svfprintf_r+0x1454>
  406bdc:	f01b 0f20 	tst.w	fp, #32
  406be0:	d15d      	bne.n	406c9e <_svfprintf_r+0x742>
  406be2:	f01b 0f10 	tst.w	fp, #16
  406be6:	f040 8308 	bne.w	4071fa <_svfprintf_r+0xc9e>
  406bea:	f01b 0f40 	tst.w	fp, #64	; 0x40
  406bee:	f000 8304 	beq.w	4071fa <_svfprintf_r+0xc9e>
  406bf2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  406bf4:	f9b1 4000 	ldrsh.w	r4, [r1]
  406bf8:	3104      	adds	r1, #4
  406bfa:	17e5      	asrs	r5, r4, #31
  406bfc:	4622      	mov	r2, r4
  406bfe:	462b      	mov	r3, r5
  406c00:	910f      	str	r1, [sp, #60]	; 0x3c
  406c02:	2a00      	cmp	r2, #0
  406c04:	f173 0300 	sbcs.w	r3, r3, #0
  406c08:	db58      	blt.n	406cbc <_svfprintf_r+0x760>
  406c0a:	990a      	ldr	r1, [sp, #40]	; 0x28
  406c0c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406c10:	1c4a      	adds	r2, r1, #1
  406c12:	f04f 0301 	mov.w	r3, #1
  406c16:	f47f ad9b 	bne.w	406750 <_svfprintf_r+0x1f4>
  406c1a:	ea54 0205 	orrs.w	r2, r4, r5
  406c1e:	f000 81df 	beq.w	406fe0 <_svfprintf_r+0xa84>
  406c22:	f8cd b01c 	str.w	fp, [sp, #28]
  406c26:	2b01      	cmp	r3, #1
  406c28:	f000 827b 	beq.w	407122 <_svfprintf_r+0xbc6>
  406c2c:	2b02      	cmp	r3, #2
  406c2e:	f040 8206 	bne.w	40703e <_svfprintf_r+0xae2>
  406c32:	9818      	ldr	r0, [sp, #96]	; 0x60
  406c34:	464e      	mov	r6, r9
  406c36:	0923      	lsrs	r3, r4, #4
  406c38:	f004 010f 	and.w	r1, r4, #15
  406c3c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  406c40:	092a      	lsrs	r2, r5, #4
  406c42:	461c      	mov	r4, r3
  406c44:	4615      	mov	r5, r2
  406c46:	5c43      	ldrb	r3, [r0, r1]
  406c48:	f806 3d01 	strb.w	r3, [r6, #-1]!
  406c4c:	ea54 0305 	orrs.w	r3, r4, r5
  406c50:	d1f1      	bne.n	406c36 <_svfprintf_r+0x6da>
  406c52:	eba9 0306 	sub.w	r3, r9, r6
  406c56:	930e      	str	r3, [sp, #56]	; 0x38
  406c58:	e590      	b.n	40677c <_svfprintf_r+0x220>
  406c5a:	9311      	str	r3, [sp, #68]	; 0x44
  406c5c:	2a00      	cmp	r2, #0
  406c5e:	f040 86a3 	bne.w	4079a8 <_svfprintf_r+0x144c>
  406c62:	4b7e      	ldr	r3, [pc, #504]	; (406e5c <_svfprintf_r+0x900>)
  406c64:	9318      	str	r3, [sp, #96]	; 0x60
  406c66:	f01b 0f20 	tst.w	fp, #32
  406c6a:	f43f aeef 	beq.w	406a4c <_svfprintf_r+0x4f0>
  406c6e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406c70:	3507      	adds	r5, #7
  406c72:	f025 0307 	bic.w	r3, r5, #7
  406c76:	f103 0208 	add.w	r2, r3, #8
  406c7a:	f01b 0f01 	tst.w	fp, #1
  406c7e:	920f      	str	r2, [sp, #60]	; 0x3c
  406c80:	e9d3 4500 	ldrd	r4, r5, [r3]
  406c84:	f47f aef4 	bne.w	406a70 <_svfprintf_r+0x514>
  406c88:	2302      	movs	r3, #2
  406c8a:	e55a      	b.n	406742 <_svfprintf_r+0x1e6>
  406c8c:	9311      	str	r3, [sp, #68]	; 0x44
  406c8e:	2a00      	cmp	r2, #0
  406c90:	f040 8686 	bne.w	4079a0 <_svfprintf_r+0x1444>
  406c94:	f04b 0b10 	orr.w	fp, fp, #16
  406c98:	f01b 0f20 	tst.w	fp, #32
  406c9c:	d0a1      	beq.n	406be2 <_svfprintf_r+0x686>
  406c9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406ca0:	3507      	adds	r5, #7
  406ca2:	f025 0507 	bic.w	r5, r5, #7
  406ca6:	e9d5 2300 	ldrd	r2, r3, [r5]
  406caa:	2a00      	cmp	r2, #0
  406cac:	f105 0108 	add.w	r1, r5, #8
  406cb0:	461d      	mov	r5, r3
  406cb2:	f173 0300 	sbcs.w	r3, r3, #0
  406cb6:	910f      	str	r1, [sp, #60]	; 0x3c
  406cb8:	4614      	mov	r4, r2
  406cba:	daa6      	bge.n	406c0a <_svfprintf_r+0x6ae>
  406cbc:	272d      	movs	r7, #45	; 0x2d
  406cbe:	4264      	negs	r4, r4
  406cc0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406cc4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  406cc8:	2301      	movs	r3, #1
  406cca:	e53d      	b.n	406748 <_svfprintf_r+0x1ec>
  406ccc:	9311      	str	r3, [sp, #68]	; 0x44
  406cce:	2a00      	cmp	r2, #0
  406cd0:	f040 8662 	bne.w	407998 <_svfprintf_r+0x143c>
  406cd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406cd6:	3507      	adds	r5, #7
  406cd8:	f025 0307 	bic.w	r3, r5, #7
  406cdc:	f103 0208 	add.w	r2, r3, #8
  406ce0:	920f      	str	r2, [sp, #60]	; 0x3c
  406ce2:	681a      	ldr	r2, [r3, #0]
  406ce4:	9215      	str	r2, [sp, #84]	; 0x54
  406ce6:	685b      	ldr	r3, [r3, #4]
  406ce8:	9314      	str	r3, [sp, #80]	; 0x50
  406cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
  406cec:	9d15      	ldr	r5, [sp, #84]	; 0x54
  406cee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  406cf2:	4628      	mov	r0, r5
  406cf4:	4621      	mov	r1, r4
  406cf6:	f04f 32ff 	mov.w	r2, #4294967295
  406cfa:	4b59      	ldr	r3, [pc, #356]	; (406e60 <_svfprintf_r+0x904>)
  406cfc:	f005 f9f4 	bl	40c0e8 <__aeabi_dcmpun>
  406d00:	2800      	cmp	r0, #0
  406d02:	f040 834a 	bne.w	40739a <_svfprintf_r+0xe3e>
  406d06:	4628      	mov	r0, r5
  406d08:	4621      	mov	r1, r4
  406d0a:	f04f 32ff 	mov.w	r2, #4294967295
  406d0e:	4b54      	ldr	r3, [pc, #336]	; (406e60 <_svfprintf_r+0x904>)
  406d10:	f005 f9cc 	bl	40c0ac <__aeabi_dcmple>
  406d14:	2800      	cmp	r0, #0
  406d16:	f040 8340 	bne.w	40739a <_svfprintf_r+0xe3e>
  406d1a:	a815      	add	r0, sp, #84	; 0x54
  406d1c:	c80d      	ldmia	r0, {r0, r2, r3}
  406d1e:	9914      	ldr	r1, [sp, #80]	; 0x50
  406d20:	f005 f9ba 	bl	40c098 <__aeabi_dcmplt>
  406d24:	2800      	cmp	r0, #0
  406d26:	f040 8530 	bne.w	40778a <_svfprintf_r+0x122e>
  406d2a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  406d2e:	4e4d      	ldr	r6, [pc, #308]	; (406e64 <_svfprintf_r+0x908>)
  406d30:	4b4d      	ldr	r3, [pc, #308]	; (406e68 <_svfprintf_r+0x90c>)
  406d32:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  406d36:	9007      	str	r0, [sp, #28]
  406d38:	9811      	ldr	r0, [sp, #68]	; 0x44
  406d3a:	2203      	movs	r2, #3
  406d3c:	2100      	movs	r1, #0
  406d3e:	9208      	str	r2, [sp, #32]
  406d40:	910a      	str	r1, [sp, #40]	; 0x28
  406d42:	2847      	cmp	r0, #71	; 0x47
  406d44:	bfd8      	it	le
  406d46:	461e      	movle	r6, r3
  406d48:	920e      	str	r2, [sp, #56]	; 0x38
  406d4a:	9112      	str	r1, [sp, #72]	; 0x48
  406d4c:	e51e      	b.n	40678c <_svfprintf_r+0x230>
  406d4e:	f04b 0b08 	orr.w	fp, fp, #8
  406d52:	f89a 3000 	ldrb.w	r3, [sl]
  406d56:	e459      	b.n	40660c <_svfprintf_r+0xb0>
  406d58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406d5c:	2300      	movs	r3, #0
  406d5e:	461c      	mov	r4, r3
  406d60:	f81a 3b01 	ldrb.w	r3, [sl], #1
  406d64:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406d68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406d6c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  406d70:	2809      	cmp	r0, #9
  406d72:	d9f5      	bls.n	406d60 <_svfprintf_r+0x804>
  406d74:	940d      	str	r4, [sp, #52]	; 0x34
  406d76:	e44b      	b.n	406610 <_svfprintf_r+0xb4>
  406d78:	f04b 0b10 	orr.w	fp, fp, #16
  406d7c:	9311      	str	r3, [sp, #68]	; 0x44
  406d7e:	f01b 0320 	ands.w	r3, fp, #32
  406d82:	f43f ae1d 	beq.w	4069c0 <_svfprintf_r+0x464>
  406d86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  406d88:	3507      	adds	r5, #7
  406d8a:	f025 0307 	bic.w	r3, r5, #7
  406d8e:	f103 0208 	add.w	r2, r3, #8
  406d92:	e9d3 4500 	ldrd	r4, r5, [r3]
  406d96:	920f      	str	r2, [sp, #60]	; 0x3c
  406d98:	2300      	movs	r3, #0
  406d9a:	e4d2      	b.n	406742 <_svfprintf_r+0x1e6>
  406d9c:	9311      	str	r3, [sp, #68]	; 0x44
  406d9e:	2a00      	cmp	r2, #0
  406da0:	f040 85e7 	bne.w	407972 <_svfprintf_r+0x1416>
  406da4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406da6:	2a00      	cmp	r2, #0
  406da8:	f43f aca3 	beq.w	4066f2 <_svfprintf_r+0x196>
  406dac:	2300      	movs	r3, #0
  406dae:	2101      	movs	r1, #1
  406db0:	461f      	mov	r7, r3
  406db2:	9108      	str	r1, [sp, #32]
  406db4:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  406db8:	f8cd b01c 	str.w	fp, [sp, #28]
  406dbc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  406dc0:	930a      	str	r3, [sp, #40]	; 0x28
  406dc2:	9312      	str	r3, [sp, #72]	; 0x48
  406dc4:	910e      	str	r1, [sp, #56]	; 0x38
  406dc6:	ae28      	add	r6, sp, #160	; 0xa0
  406dc8:	e4e4      	b.n	406794 <_svfprintf_r+0x238>
  406dca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406dcc:	e534      	b.n	406838 <_svfprintf_r+0x2dc>
  406dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406dd0:	2b65      	cmp	r3, #101	; 0x65
  406dd2:	f340 80a7 	ble.w	406f24 <_svfprintf_r+0x9c8>
  406dd6:	a815      	add	r0, sp, #84	; 0x54
  406dd8:	c80d      	ldmia	r0, {r0, r2, r3}
  406dda:	9914      	ldr	r1, [sp, #80]	; 0x50
  406ddc:	f005 f952 	bl	40c084 <__aeabi_dcmpeq>
  406de0:	2800      	cmp	r0, #0
  406de2:	f000 8150 	beq.w	407086 <_svfprintf_r+0xb2a>
  406de6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406de8:	4a20      	ldr	r2, [pc, #128]	; (406e6c <_svfprintf_r+0x910>)
  406dea:	f8c8 2000 	str.w	r2, [r8]
  406dee:	3301      	adds	r3, #1
  406df0:	3401      	adds	r4, #1
  406df2:	2201      	movs	r2, #1
  406df4:	2b07      	cmp	r3, #7
  406df6:	9427      	str	r4, [sp, #156]	; 0x9c
  406df8:	9326      	str	r3, [sp, #152]	; 0x98
  406dfa:	f8c8 2004 	str.w	r2, [r8, #4]
  406dfe:	f300 836a 	bgt.w	4074d6 <_svfprintf_r+0xf7a>
  406e02:	f108 0808 	add.w	r8, r8, #8
  406e06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  406e08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  406e0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406e0c:	4293      	cmp	r3, r2
  406e0e:	db03      	blt.n	406e18 <_svfprintf_r+0x8bc>
  406e10:	9b07      	ldr	r3, [sp, #28]
  406e12:	07dd      	lsls	r5, r3, #31
  406e14:	f57f ad82 	bpl.w	40691c <_svfprintf_r+0x3c0>
  406e18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e1a:	9919      	ldr	r1, [sp, #100]	; 0x64
  406e1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  406e1e:	f8c8 2000 	str.w	r2, [r8]
  406e22:	3301      	adds	r3, #1
  406e24:	440c      	add	r4, r1
  406e26:	2b07      	cmp	r3, #7
  406e28:	f8c8 1004 	str.w	r1, [r8, #4]
  406e2c:	9427      	str	r4, [sp, #156]	; 0x9c
  406e2e:	9326      	str	r3, [sp, #152]	; 0x98
  406e30:	f300 839e 	bgt.w	407570 <_svfprintf_r+0x1014>
  406e34:	f108 0808 	add.w	r8, r8, #8
  406e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406e3a:	1e5e      	subs	r6, r3, #1
  406e3c:	2e00      	cmp	r6, #0
  406e3e:	f77f ad6d 	ble.w	40691c <_svfprintf_r+0x3c0>
  406e42:	2e10      	cmp	r6, #16
  406e44:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406e46:	4d0a      	ldr	r5, [pc, #40]	; (406e70 <_svfprintf_r+0x914>)
  406e48:	f340 81f5 	ble.w	407236 <_svfprintf_r+0xcda>
  406e4c:	4622      	mov	r2, r4
  406e4e:	2710      	movs	r7, #16
  406e50:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  406e54:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  406e56:	e013      	b.n	406e80 <_svfprintf_r+0x924>
  406e58:	0040d43c 	.word	0x0040d43c
  406e5c:	0040d428 	.word	0x0040d428
  406e60:	7fefffff 	.word	0x7fefffff
  406e64:	0040d41c 	.word	0x0040d41c
  406e68:	0040d418 	.word	0x0040d418
  406e6c:	0040d458 	.word	0x0040d458
  406e70:	0040d46c 	.word	0x0040d46c
  406e74:	f108 0808 	add.w	r8, r8, #8
  406e78:	3e10      	subs	r6, #16
  406e7a:	2e10      	cmp	r6, #16
  406e7c:	f340 81da 	ble.w	407234 <_svfprintf_r+0xcd8>
  406e80:	3301      	adds	r3, #1
  406e82:	3210      	adds	r2, #16
  406e84:	2b07      	cmp	r3, #7
  406e86:	9227      	str	r2, [sp, #156]	; 0x9c
  406e88:	9326      	str	r3, [sp, #152]	; 0x98
  406e8a:	e888 00a0 	stmia.w	r8, {r5, r7}
  406e8e:	ddf1      	ble.n	406e74 <_svfprintf_r+0x918>
  406e90:	aa25      	add	r2, sp, #148	; 0x94
  406e92:	4621      	mov	r1, r4
  406e94:	4658      	mov	r0, fp
  406e96:	f004 fa59 	bl	40b34c <__ssprint_r>
  406e9a:	2800      	cmp	r0, #0
  406e9c:	f47f ac30 	bne.w	406700 <_svfprintf_r+0x1a4>
  406ea0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  406ea2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406ea4:	46c8      	mov	r8, r9
  406ea6:	e7e7      	b.n	406e78 <_svfprintf_r+0x91c>
  406ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406eaa:	9a08      	ldr	r2, [sp, #32]
  406eac:	1a9f      	subs	r7, r3, r2
  406eae:	2f00      	cmp	r7, #0
  406eb0:	f77f ace5 	ble.w	40687e <_svfprintf_r+0x322>
  406eb4:	2f10      	cmp	r7, #16
  406eb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406eb8:	4db6      	ldr	r5, [pc, #728]	; (407194 <_svfprintf_r+0xc38>)
  406eba:	dd27      	ble.n	406f0c <_svfprintf_r+0x9b0>
  406ebc:	4642      	mov	r2, r8
  406ebe:	4621      	mov	r1, r4
  406ec0:	46b0      	mov	r8, r6
  406ec2:	f04f 0b10 	mov.w	fp, #16
  406ec6:	462e      	mov	r6, r5
  406ec8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406eca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  406ecc:	e004      	b.n	406ed8 <_svfprintf_r+0x97c>
  406ece:	3f10      	subs	r7, #16
  406ed0:	2f10      	cmp	r7, #16
  406ed2:	f102 0208 	add.w	r2, r2, #8
  406ed6:	dd15      	ble.n	406f04 <_svfprintf_r+0x9a8>
  406ed8:	3301      	adds	r3, #1
  406eda:	3110      	adds	r1, #16
  406edc:	2b07      	cmp	r3, #7
  406ede:	9127      	str	r1, [sp, #156]	; 0x9c
  406ee0:	9326      	str	r3, [sp, #152]	; 0x98
  406ee2:	e882 0840 	stmia.w	r2, {r6, fp}
  406ee6:	ddf2      	ble.n	406ece <_svfprintf_r+0x972>
  406ee8:	aa25      	add	r2, sp, #148	; 0x94
  406eea:	4629      	mov	r1, r5
  406eec:	4620      	mov	r0, r4
  406eee:	f004 fa2d 	bl	40b34c <__ssprint_r>
  406ef2:	2800      	cmp	r0, #0
  406ef4:	f47f ac04 	bne.w	406700 <_svfprintf_r+0x1a4>
  406ef8:	3f10      	subs	r7, #16
  406efa:	2f10      	cmp	r7, #16
  406efc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  406efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  406f00:	464a      	mov	r2, r9
  406f02:	dce9      	bgt.n	406ed8 <_svfprintf_r+0x97c>
  406f04:	4635      	mov	r5, r6
  406f06:	460c      	mov	r4, r1
  406f08:	4646      	mov	r6, r8
  406f0a:	4690      	mov	r8, r2
  406f0c:	3301      	adds	r3, #1
  406f0e:	443c      	add	r4, r7
  406f10:	2b07      	cmp	r3, #7
  406f12:	9427      	str	r4, [sp, #156]	; 0x9c
  406f14:	9326      	str	r3, [sp, #152]	; 0x98
  406f16:	e888 00a0 	stmia.w	r8, {r5, r7}
  406f1a:	f300 8232 	bgt.w	407382 <_svfprintf_r+0xe26>
  406f1e:	f108 0808 	add.w	r8, r8, #8
  406f22:	e4ac      	b.n	40687e <_svfprintf_r+0x322>
  406f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406f26:	9f26      	ldr	r7, [sp, #152]	; 0x98
  406f28:	2b01      	cmp	r3, #1
  406f2a:	f340 81fe 	ble.w	40732a <_svfprintf_r+0xdce>
  406f2e:	3701      	adds	r7, #1
  406f30:	3401      	adds	r4, #1
  406f32:	2301      	movs	r3, #1
  406f34:	2f07      	cmp	r7, #7
  406f36:	9427      	str	r4, [sp, #156]	; 0x9c
  406f38:	9726      	str	r7, [sp, #152]	; 0x98
  406f3a:	f8c8 6000 	str.w	r6, [r8]
  406f3e:	f8c8 3004 	str.w	r3, [r8, #4]
  406f42:	f300 8203 	bgt.w	40734c <_svfprintf_r+0xdf0>
  406f46:	f108 0808 	add.w	r8, r8, #8
  406f4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  406f4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  406f4e:	f8c8 3000 	str.w	r3, [r8]
  406f52:	3701      	adds	r7, #1
  406f54:	4414      	add	r4, r2
  406f56:	2f07      	cmp	r7, #7
  406f58:	9427      	str	r4, [sp, #156]	; 0x9c
  406f5a:	9726      	str	r7, [sp, #152]	; 0x98
  406f5c:	f8c8 2004 	str.w	r2, [r8, #4]
  406f60:	f300 8200 	bgt.w	407364 <_svfprintf_r+0xe08>
  406f64:	f108 0808 	add.w	r8, r8, #8
  406f68:	a815      	add	r0, sp, #84	; 0x54
  406f6a:	c80d      	ldmia	r0, {r0, r2, r3}
  406f6c:	9914      	ldr	r1, [sp, #80]	; 0x50
  406f6e:	f005 f889 	bl	40c084 <__aeabi_dcmpeq>
  406f72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  406f74:	2800      	cmp	r0, #0
  406f76:	f040 8101 	bne.w	40717c <_svfprintf_r+0xc20>
  406f7a:	3b01      	subs	r3, #1
  406f7c:	3701      	adds	r7, #1
  406f7e:	3601      	adds	r6, #1
  406f80:	441c      	add	r4, r3
  406f82:	2f07      	cmp	r7, #7
  406f84:	9726      	str	r7, [sp, #152]	; 0x98
  406f86:	9427      	str	r4, [sp, #156]	; 0x9c
  406f88:	f8c8 6000 	str.w	r6, [r8]
  406f8c:	f8c8 3004 	str.w	r3, [r8, #4]
  406f90:	f300 8127 	bgt.w	4071e2 <_svfprintf_r+0xc86>
  406f94:	f108 0808 	add.w	r8, r8, #8
  406f98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  406f9a:	f8c8 2004 	str.w	r2, [r8, #4]
  406f9e:	3701      	adds	r7, #1
  406fa0:	4414      	add	r4, r2
  406fa2:	ab21      	add	r3, sp, #132	; 0x84
  406fa4:	2f07      	cmp	r7, #7
  406fa6:	9427      	str	r4, [sp, #156]	; 0x9c
  406fa8:	9726      	str	r7, [sp, #152]	; 0x98
  406faa:	f8c8 3000 	str.w	r3, [r8]
  406fae:	f77f acb3 	ble.w	406918 <_svfprintf_r+0x3bc>
  406fb2:	aa25      	add	r2, sp, #148	; 0x94
  406fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
  406fb8:	f004 f9c8 	bl	40b34c <__ssprint_r>
  406fbc:	2800      	cmp	r0, #0
  406fbe:	f47f ab9f 	bne.w	406700 <_svfprintf_r+0x1a4>
  406fc2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  406fc4:	46c8      	mov	r8, r9
  406fc6:	e4a9      	b.n	40691c <_svfprintf_r+0x3c0>
  406fc8:	aa25      	add	r2, sp, #148	; 0x94
  406fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406fcc:	980c      	ldr	r0, [sp, #48]	; 0x30
  406fce:	f004 f9bd 	bl	40b34c <__ssprint_r>
  406fd2:	2800      	cmp	r0, #0
  406fd4:	f43f aceb 	beq.w	4069ae <_svfprintf_r+0x452>
  406fd8:	f7ff bb92 	b.w	406700 <_svfprintf_r+0x1a4>
  406fdc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  406fe0:	2b01      	cmp	r3, #1
  406fe2:	f000 8134 	beq.w	40724e <_svfprintf_r+0xcf2>
  406fe6:	2b02      	cmp	r3, #2
  406fe8:	d125      	bne.n	407036 <_svfprintf_r+0xada>
  406fea:	f8cd b01c 	str.w	fp, [sp, #28]
  406fee:	2400      	movs	r4, #0
  406ff0:	2500      	movs	r5, #0
  406ff2:	e61e      	b.n	406c32 <_svfprintf_r+0x6d6>
  406ff4:	aa25      	add	r2, sp, #148	; 0x94
  406ff6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406ff8:	980c      	ldr	r0, [sp, #48]	; 0x30
  406ffa:	f004 f9a7 	bl	40b34c <__ssprint_r>
  406ffe:	2800      	cmp	r0, #0
  407000:	f47f ab7e 	bne.w	406700 <_svfprintf_r+0x1a4>
  407004:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407006:	46c8      	mov	r8, r9
  407008:	e475      	b.n	4068f6 <_svfprintf_r+0x39a>
  40700a:	aa25      	add	r2, sp, #148	; 0x94
  40700c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40700e:	980c      	ldr	r0, [sp, #48]	; 0x30
  407010:	f004 f99c 	bl	40b34c <__ssprint_r>
  407014:	2800      	cmp	r0, #0
  407016:	f47f ab73 	bne.w	406700 <_svfprintf_r+0x1a4>
  40701a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40701c:	46c8      	mov	r8, r9
  40701e:	e41b      	b.n	406858 <_svfprintf_r+0x2fc>
  407020:	aa25      	add	r2, sp, #148	; 0x94
  407022:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407024:	980c      	ldr	r0, [sp, #48]	; 0x30
  407026:	f004 f991 	bl	40b34c <__ssprint_r>
  40702a:	2800      	cmp	r0, #0
  40702c:	f47f ab68 	bne.w	406700 <_svfprintf_r+0x1a4>
  407030:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407032:	46c8      	mov	r8, r9
  407034:	e420      	b.n	406878 <_svfprintf_r+0x31c>
  407036:	f8cd b01c 	str.w	fp, [sp, #28]
  40703a:	2400      	movs	r4, #0
  40703c:	2500      	movs	r5, #0
  40703e:	4649      	mov	r1, r9
  407040:	e000      	b.n	407044 <_svfprintf_r+0xae8>
  407042:	4631      	mov	r1, r6
  407044:	08e2      	lsrs	r2, r4, #3
  407046:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40704a:	08e8      	lsrs	r0, r5, #3
  40704c:	f004 0307 	and.w	r3, r4, #7
  407050:	4605      	mov	r5, r0
  407052:	4614      	mov	r4, r2
  407054:	3330      	adds	r3, #48	; 0x30
  407056:	ea54 0205 	orrs.w	r2, r4, r5
  40705a:	f801 3c01 	strb.w	r3, [r1, #-1]
  40705e:	f101 36ff 	add.w	r6, r1, #4294967295
  407062:	d1ee      	bne.n	407042 <_svfprintf_r+0xae6>
  407064:	9a07      	ldr	r2, [sp, #28]
  407066:	07d2      	lsls	r2, r2, #31
  407068:	f57f adf3 	bpl.w	406c52 <_svfprintf_r+0x6f6>
  40706c:	2b30      	cmp	r3, #48	; 0x30
  40706e:	f43f adf0 	beq.w	406c52 <_svfprintf_r+0x6f6>
  407072:	3902      	subs	r1, #2
  407074:	2330      	movs	r3, #48	; 0x30
  407076:	f806 3c01 	strb.w	r3, [r6, #-1]
  40707a:	eba9 0301 	sub.w	r3, r9, r1
  40707e:	930e      	str	r3, [sp, #56]	; 0x38
  407080:	460e      	mov	r6, r1
  407082:	f7ff bb7b 	b.w	40677c <_svfprintf_r+0x220>
  407086:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407088:	2900      	cmp	r1, #0
  40708a:	f340 822e 	ble.w	4074ea <_svfprintf_r+0xf8e>
  40708e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407090:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  407092:	4293      	cmp	r3, r2
  407094:	bfa8      	it	ge
  407096:	4613      	movge	r3, r2
  407098:	2b00      	cmp	r3, #0
  40709a:	461f      	mov	r7, r3
  40709c:	dd0d      	ble.n	4070ba <_svfprintf_r+0xb5e>
  40709e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4070a0:	f8c8 6000 	str.w	r6, [r8]
  4070a4:	3301      	adds	r3, #1
  4070a6:	443c      	add	r4, r7
  4070a8:	2b07      	cmp	r3, #7
  4070aa:	9427      	str	r4, [sp, #156]	; 0x9c
  4070ac:	f8c8 7004 	str.w	r7, [r8, #4]
  4070b0:	9326      	str	r3, [sp, #152]	; 0x98
  4070b2:	f300 831f 	bgt.w	4076f4 <_svfprintf_r+0x1198>
  4070b6:	f108 0808 	add.w	r8, r8, #8
  4070ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4070bc:	2f00      	cmp	r7, #0
  4070be:	bfa8      	it	ge
  4070c0:	1bdb      	subge	r3, r3, r7
  4070c2:	2b00      	cmp	r3, #0
  4070c4:	461f      	mov	r7, r3
  4070c6:	f340 80d6 	ble.w	407276 <_svfprintf_r+0xd1a>
  4070ca:	2f10      	cmp	r7, #16
  4070cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4070ce:	4d31      	ldr	r5, [pc, #196]	; (407194 <_svfprintf_r+0xc38>)
  4070d0:	f340 81ed 	ble.w	4074ae <_svfprintf_r+0xf52>
  4070d4:	4642      	mov	r2, r8
  4070d6:	4621      	mov	r1, r4
  4070d8:	46b0      	mov	r8, r6
  4070da:	f04f 0b10 	mov.w	fp, #16
  4070de:	462e      	mov	r6, r5
  4070e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4070e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4070e4:	e004      	b.n	4070f0 <_svfprintf_r+0xb94>
  4070e6:	3208      	adds	r2, #8
  4070e8:	3f10      	subs	r7, #16
  4070ea:	2f10      	cmp	r7, #16
  4070ec:	f340 81db 	ble.w	4074a6 <_svfprintf_r+0xf4a>
  4070f0:	3301      	adds	r3, #1
  4070f2:	3110      	adds	r1, #16
  4070f4:	2b07      	cmp	r3, #7
  4070f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4070f8:	9326      	str	r3, [sp, #152]	; 0x98
  4070fa:	e882 0840 	stmia.w	r2, {r6, fp}
  4070fe:	ddf2      	ble.n	4070e6 <_svfprintf_r+0xb8a>
  407100:	aa25      	add	r2, sp, #148	; 0x94
  407102:	4629      	mov	r1, r5
  407104:	4620      	mov	r0, r4
  407106:	f004 f921 	bl	40b34c <__ssprint_r>
  40710a:	2800      	cmp	r0, #0
  40710c:	f47f aaf8 	bne.w	406700 <_svfprintf_r+0x1a4>
  407110:	9927      	ldr	r1, [sp, #156]	; 0x9c
  407112:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407114:	464a      	mov	r2, r9
  407116:	e7e7      	b.n	4070e8 <_svfprintf_r+0xb8c>
  407118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40711a:	930e      	str	r3, [sp, #56]	; 0x38
  40711c:	464e      	mov	r6, r9
  40711e:	f7ff bb2d 	b.w	40677c <_svfprintf_r+0x220>
  407122:	2d00      	cmp	r5, #0
  407124:	bf08      	it	eq
  407126:	2c0a      	cmpeq	r4, #10
  407128:	f0c0 808f 	bcc.w	40724a <_svfprintf_r+0xcee>
  40712c:	464e      	mov	r6, r9
  40712e:	4620      	mov	r0, r4
  407130:	4629      	mov	r1, r5
  407132:	220a      	movs	r2, #10
  407134:	2300      	movs	r3, #0
  407136:	f005 f815 	bl	40c164 <__aeabi_uldivmod>
  40713a:	3230      	adds	r2, #48	; 0x30
  40713c:	f806 2d01 	strb.w	r2, [r6, #-1]!
  407140:	4620      	mov	r0, r4
  407142:	4629      	mov	r1, r5
  407144:	2300      	movs	r3, #0
  407146:	220a      	movs	r2, #10
  407148:	f005 f80c 	bl	40c164 <__aeabi_uldivmod>
  40714c:	4604      	mov	r4, r0
  40714e:	460d      	mov	r5, r1
  407150:	ea54 0305 	orrs.w	r3, r4, r5
  407154:	d1eb      	bne.n	40712e <_svfprintf_r+0xbd2>
  407156:	eba9 0306 	sub.w	r3, r9, r6
  40715a:	930e      	str	r3, [sp, #56]	; 0x38
  40715c:	f7ff bb0e 	b.w	40677c <_svfprintf_r+0x220>
  407160:	aa25      	add	r2, sp, #148	; 0x94
  407162:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407164:	980c      	ldr	r0, [sp, #48]	; 0x30
  407166:	f004 f8f1 	bl	40b34c <__ssprint_r>
  40716a:	2800      	cmp	r0, #0
  40716c:	f47f aac8 	bne.w	406700 <_svfprintf_r+0x1a4>
  407170:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  407174:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407176:	46c8      	mov	r8, r9
  407178:	f7ff bb5e 	b.w	406838 <_svfprintf_r+0x2dc>
  40717c:	1e5e      	subs	r6, r3, #1
  40717e:	2e00      	cmp	r6, #0
  407180:	f77f af0a 	ble.w	406f98 <_svfprintf_r+0xa3c>
  407184:	2e10      	cmp	r6, #16
  407186:	4d03      	ldr	r5, [pc, #12]	; (407194 <_svfprintf_r+0xc38>)
  407188:	dd22      	ble.n	4071d0 <_svfprintf_r+0xc74>
  40718a:	4622      	mov	r2, r4
  40718c:	f04f 0b10 	mov.w	fp, #16
  407190:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407192:	e006      	b.n	4071a2 <_svfprintf_r+0xc46>
  407194:	0040d46c 	.word	0x0040d46c
  407198:	3e10      	subs	r6, #16
  40719a:	2e10      	cmp	r6, #16
  40719c:	f108 0808 	add.w	r8, r8, #8
  4071a0:	dd15      	ble.n	4071ce <_svfprintf_r+0xc72>
  4071a2:	3701      	adds	r7, #1
  4071a4:	3210      	adds	r2, #16
  4071a6:	2f07      	cmp	r7, #7
  4071a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4071aa:	9726      	str	r7, [sp, #152]	; 0x98
  4071ac:	e888 0820 	stmia.w	r8, {r5, fp}
  4071b0:	ddf2      	ble.n	407198 <_svfprintf_r+0xc3c>
  4071b2:	aa25      	add	r2, sp, #148	; 0x94
  4071b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4071b6:	4620      	mov	r0, r4
  4071b8:	f004 f8c8 	bl	40b34c <__ssprint_r>
  4071bc:	2800      	cmp	r0, #0
  4071be:	f47f aa9f 	bne.w	406700 <_svfprintf_r+0x1a4>
  4071c2:	3e10      	subs	r6, #16
  4071c4:	2e10      	cmp	r6, #16
  4071c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4071c8:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4071ca:	46c8      	mov	r8, r9
  4071cc:	dce9      	bgt.n	4071a2 <_svfprintf_r+0xc46>
  4071ce:	4614      	mov	r4, r2
  4071d0:	3701      	adds	r7, #1
  4071d2:	4434      	add	r4, r6
  4071d4:	2f07      	cmp	r7, #7
  4071d6:	9427      	str	r4, [sp, #156]	; 0x9c
  4071d8:	9726      	str	r7, [sp, #152]	; 0x98
  4071da:	e888 0060 	stmia.w	r8, {r5, r6}
  4071de:	f77f aed9 	ble.w	406f94 <_svfprintf_r+0xa38>
  4071e2:	aa25      	add	r2, sp, #148	; 0x94
  4071e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4071e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4071e8:	f004 f8b0 	bl	40b34c <__ssprint_r>
  4071ec:	2800      	cmp	r0, #0
  4071ee:	f47f aa87 	bne.w	406700 <_svfprintf_r+0x1a4>
  4071f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4071f4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4071f6:	46c8      	mov	r8, r9
  4071f8:	e6ce      	b.n	406f98 <_svfprintf_r+0xa3c>
  4071fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4071fc:	6814      	ldr	r4, [r2, #0]
  4071fe:	4613      	mov	r3, r2
  407200:	3304      	adds	r3, #4
  407202:	17e5      	asrs	r5, r4, #31
  407204:	930f      	str	r3, [sp, #60]	; 0x3c
  407206:	4622      	mov	r2, r4
  407208:	462b      	mov	r3, r5
  40720a:	e4fa      	b.n	406c02 <_svfprintf_r+0x6a6>
  40720c:	3204      	adds	r2, #4
  40720e:	681c      	ldr	r4, [r3, #0]
  407210:	920f      	str	r2, [sp, #60]	; 0x3c
  407212:	2301      	movs	r3, #1
  407214:	2500      	movs	r5, #0
  407216:	f7ff ba94 	b.w	406742 <_svfprintf_r+0x1e6>
  40721a:	681c      	ldr	r4, [r3, #0]
  40721c:	3304      	adds	r3, #4
  40721e:	930f      	str	r3, [sp, #60]	; 0x3c
  407220:	2500      	movs	r5, #0
  407222:	e421      	b.n	406a68 <_svfprintf_r+0x50c>
  407224:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407226:	460a      	mov	r2, r1
  407228:	3204      	adds	r2, #4
  40722a:	680c      	ldr	r4, [r1, #0]
  40722c:	920f      	str	r2, [sp, #60]	; 0x3c
  40722e:	2500      	movs	r5, #0
  407230:	f7ff ba87 	b.w	406742 <_svfprintf_r+0x1e6>
  407234:	4614      	mov	r4, r2
  407236:	3301      	adds	r3, #1
  407238:	4434      	add	r4, r6
  40723a:	2b07      	cmp	r3, #7
  40723c:	9427      	str	r4, [sp, #156]	; 0x9c
  40723e:	9326      	str	r3, [sp, #152]	; 0x98
  407240:	e888 0060 	stmia.w	r8, {r5, r6}
  407244:	f77f ab68 	ble.w	406918 <_svfprintf_r+0x3bc>
  407248:	e6b3      	b.n	406fb2 <_svfprintf_r+0xa56>
  40724a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40724e:	f8cd b01c 	str.w	fp, [sp, #28]
  407252:	ae42      	add	r6, sp, #264	; 0x108
  407254:	3430      	adds	r4, #48	; 0x30
  407256:	2301      	movs	r3, #1
  407258:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40725c:	930e      	str	r3, [sp, #56]	; 0x38
  40725e:	f7ff ba8d 	b.w	40677c <_svfprintf_r+0x220>
  407262:	aa25      	add	r2, sp, #148	; 0x94
  407264:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407266:	980c      	ldr	r0, [sp, #48]	; 0x30
  407268:	f004 f870 	bl	40b34c <__ssprint_r>
  40726c:	2800      	cmp	r0, #0
  40726e:	f47f aa47 	bne.w	406700 <_svfprintf_r+0x1a4>
  407272:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407274:	46c8      	mov	r8, r9
  407276:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407278:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40727a:	429a      	cmp	r2, r3
  40727c:	db44      	blt.n	407308 <_svfprintf_r+0xdac>
  40727e:	9b07      	ldr	r3, [sp, #28]
  407280:	07d9      	lsls	r1, r3, #31
  407282:	d441      	bmi.n	407308 <_svfprintf_r+0xdac>
  407284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407286:	9812      	ldr	r0, [sp, #72]	; 0x48
  407288:	1a9a      	subs	r2, r3, r2
  40728a:	1a1d      	subs	r5, r3, r0
  40728c:	4295      	cmp	r5, r2
  40728e:	bfa8      	it	ge
  407290:	4615      	movge	r5, r2
  407292:	2d00      	cmp	r5, #0
  407294:	dd0e      	ble.n	4072b4 <_svfprintf_r+0xd58>
  407296:	9926      	ldr	r1, [sp, #152]	; 0x98
  407298:	f8c8 5004 	str.w	r5, [r8, #4]
  40729c:	3101      	adds	r1, #1
  40729e:	4406      	add	r6, r0
  4072a0:	442c      	add	r4, r5
  4072a2:	2907      	cmp	r1, #7
  4072a4:	f8c8 6000 	str.w	r6, [r8]
  4072a8:	9427      	str	r4, [sp, #156]	; 0x9c
  4072aa:	9126      	str	r1, [sp, #152]	; 0x98
  4072ac:	f300 823b 	bgt.w	407726 <_svfprintf_r+0x11ca>
  4072b0:	f108 0808 	add.w	r8, r8, #8
  4072b4:	2d00      	cmp	r5, #0
  4072b6:	bfac      	ite	ge
  4072b8:	1b56      	subge	r6, r2, r5
  4072ba:	4616      	movlt	r6, r2
  4072bc:	2e00      	cmp	r6, #0
  4072be:	f77f ab2d 	ble.w	40691c <_svfprintf_r+0x3c0>
  4072c2:	2e10      	cmp	r6, #16
  4072c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4072c6:	4db0      	ldr	r5, [pc, #704]	; (407588 <_svfprintf_r+0x102c>)
  4072c8:	ddb5      	ble.n	407236 <_svfprintf_r+0xcda>
  4072ca:	4622      	mov	r2, r4
  4072cc:	2710      	movs	r7, #16
  4072ce:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4072d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4072d4:	e004      	b.n	4072e0 <_svfprintf_r+0xd84>
  4072d6:	f108 0808 	add.w	r8, r8, #8
  4072da:	3e10      	subs	r6, #16
  4072dc:	2e10      	cmp	r6, #16
  4072de:	dda9      	ble.n	407234 <_svfprintf_r+0xcd8>
  4072e0:	3301      	adds	r3, #1
  4072e2:	3210      	adds	r2, #16
  4072e4:	2b07      	cmp	r3, #7
  4072e6:	9227      	str	r2, [sp, #156]	; 0x9c
  4072e8:	9326      	str	r3, [sp, #152]	; 0x98
  4072ea:	e888 00a0 	stmia.w	r8, {r5, r7}
  4072ee:	ddf2      	ble.n	4072d6 <_svfprintf_r+0xd7a>
  4072f0:	aa25      	add	r2, sp, #148	; 0x94
  4072f2:	4621      	mov	r1, r4
  4072f4:	4658      	mov	r0, fp
  4072f6:	f004 f829 	bl	40b34c <__ssprint_r>
  4072fa:	2800      	cmp	r0, #0
  4072fc:	f47f aa00 	bne.w	406700 <_svfprintf_r+0x1a4>
  407300:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407302:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407304:	46c8      	mov	r8, r9
  407306:	e7e8      	b.n	4072da <_svfprintf_r+0xd7e>
  407308:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40730a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40730c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40730e:	f8c8 1000 	str.w	r1, [r8]
  407312:	3301      	adds	r3, #1
  407314:	4404      	add	r4, r0
  407316:	2b07      	cmp	r3, #7
  407318:	9427      	str	r4, [sp, #156]	; 0x9c
  40731a:	f8c8 0004 	str.w	r0, [r8, #4]
  40731e:	9326      	str	r3, [sp, #152]	; 0x98
  407320:	f300 81f5 	bgt.w	40770e <_svfprintf_r+0x11b2>
  407324:	f108 0808 	add.w	r8, r8, #8
  407328:	e7ac      	b.n	407284 <_svfprintf_r+0xd28>
  40732a:	9b07      	ldr	r3, [sp, #28]
  40732c:	07da      	lsls	r2, r3, #31
  40732e:	f53f adfe 	bmi.w	406f2e <_svfprintf_r+0x9d2>
  407332:	3701      	adds	r7, #1
  407334:	3401      	adds	r4, #1
  407336:	2301      	movs	r3, #1
  407338:	2f07      	cmp	r7, #7
  40733a:	9427      	str	r4, [sp, #156]	; 0x9c
  40733c:	9726      	str	r7, [sp, #152]	; 0x98
  40733e:	f8c8 6000 	str.w	r6, [r8]
  407342:	f8c8 3004 	str.w	r3, [r8, #4]
  407346:	f77f ae25 	ble.w	406f94 <_svfprintf_r+0xa38>
  40734a:	e74a      	b.n	4071e2 <_svfprintf_r+0xc86>
  40734c:	aa25      	add	r2, sp, #148	; 0x94
  40734e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407350:	980c      	ldr	r0, [sp, #48]	; 0x30
  407352:	f003 fffb 	bl	40b34c <__ssprint_r>
  407356:	2800      	cmp	r0, #0
  407358:	f47f a9d2 	bne.w	406700 <_svfprintf_r+0x1a4>
  40735c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40735e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407360:	46c8      	mov	r8, r9
  407362:	e5f2      	b.n	406f4a <_svfprintf_r+0x9ee>
  407364:	aa25      	add	r2, sp, #148	; 0x94
  407366:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407368:	980c      	ldr	r0, [sp, #48]	; 0x30
  40736a:	f003 ffef 	bl	40b34c <__ssprint_r>
  40736e:	2800      	cmp	r0, #0
  407370:	f47f a9c6 	bne.w	406700 <_svfprintf_r+0x1a4>
  407374:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407376:	9f26      	ldr	r7, [sp, #152]	; 0x98
  407378:	46c8      	mov	r8, r9
  40737a:	e5f5      	b.n	406f68 <_svfprintf_r+0xa0c>
  40737c:	464e      	mov	r6, r9
  40737e:	f7ff b9fd 	b.w	40677c <_svfprintf_r+0x220>
  407382:	aa25      	add	r2, sp, #148	; 0x94
  407384:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407386:	980c      	ldr	r0, [sp, #48]	; 0x30
  407388:	f003 ffe0 	bl	40b34c <__ssprint_r>
  40738c:	2800      	cmp	r0, #0
  40738e:	f47f a9b7 	bne.w	406700 <_svfprintf_r+0x1a4>
  407392:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407394:	46c8      	mov	r8, r9
  407396:	f7ff ba72 	b.w	40687e <_svfprintf_r+0x322>
  40739a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40739c:	4622      	mov	r2, r4
  40739e:	4620      	mov	r0, r4
  4073a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
  4073a2:	4623      	mov	r3, r4
  4073a4:	4621      	mov	r1, r4
  4073a6:	f004 fe9f 	bl	40c0e8 <__aeabi_dcmpun>
  4073aa:	2800      	cmp	r0, #0
  4073ac:	f040 8286 	bne.w	4078bc <_svfprintf_r+0x1360>
  4073b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4073b2:	3301      	adds	r3, #1
  4073b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4073b6:	f023 0320 	bic.w	r3, r3, #32
  4073ba:	930e      	str	r3, [sp, #56]	; 0x38
  4073bc:	f000 81e2 	beq.w	407784 <_svfprintf_r+0x1228>
  4073c0:	2b47      	cmp	r3, #71	; 0x47
  4073c2:	f000 811e 	beq.w	407602 <_svfprintf_r+0x10a6>
  4073c6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4073ca:	9307      	str	r3, [sp, #28]
  4073cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4073ce:	1e1f      	subs	r7, r3, #0
  4073d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4073d2:	9308      	str	r3, [sp, #32]
  4073d4:	bfbb      	ittet	lt
  4073d6:	463b      	movlt	r3, r7
  4073d8:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4073dc:	2300      	movge	r3, #0
  4073de:	232d      	movlt	r3, #45	; 0x2d
  4073e0:	9310      	str	r3, [sp, #64]	; 0x40
  4073e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4073e4:	2b66      	cmp	r3, #102	; 0x66
  4073e6:	f000 81bb 	beq.w	407760 <_svfprintf_r+0x1204>
  4073ea:	2b46      	cmp	r3, #70	; 0x46
  4073ec:	f000 80df 	beq.w	4075ae <_svfprintf_r+0x1052>
  4073f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4073f2:	9a08      	ldr	r2, [sp, #32]
  4073f4:	2b45      	cmp	r3, #69	; 0x45
  4073f6:	bf0c      	ite	eq
  4073f8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4073fa:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4073fc:	a823      	add	r0, sp, #140	; 0x8c
  4073fe:	a920      	add	r1, sp, #128	; 0x80
  407400:	bf08      	it	eq
  407402:	1c5d      	addeq	r5, r3, #1
  407404:	9004      	str	r0, [sp, #16]
  407406:	9103      	str	r1, [sp, #12]
  407408:	a81f      	add	r0, sp, #124	; 0x7c
  40740a:	2102      	movs	r1, #2
  40740c:	463b      	mov	r3, r7
  40740e:	9002      	str	r0, [sp, #8]
  407410:	9501      	str	r5, [sp, #4]
  407412:	9100      	str	r1, [sp, #0]
  407414:	980c      	ldr	r0, [sp, #48]	; 0x30
  407416:	f001 faa3 	bl	408960 <_dtoa_r>
  40741a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40741c:	2b67      	cmp	r3, #103	; 0x67
  40741e:	4606      	mov	r6, r0
  407420:	f040 81e0 	bne.w	4077e4 <_svfprintf_r+0x1288>
  407424:	f01b 0f01 	tst.w	fp, #1
  407428:	f000 8246 	beq.w	4078b8 <_svfprintf_r+0x135c>
  40742c:	1974      	adds	r4, r6, r5
  40742e:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407430:	9808      	ldr	r0, [sp, #32]
  407432:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  407434:	4639      	mov	r1, r7
  407436:	f004 fe25 	bl	40c084 <__aeabi_dcmpeq>
  40743a:	2800      	cmp	r0, #0
  40743c:	f040 8165 	bne.w	40770a <_svfprintf_r+0x11ae>
  407440:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407442:	42a3      	cmp	r3, r4
  407444:	d206      	bcs.n	407454 <_svfprintf_r+0xef8>
  407446:	2130      	movs	r1, #48	; 0x30
  407448:	1c5a      	adds	r2, r3, #1
  40744a:	9223      	str	r2, [sp, #140]	; 0x8c
  40744c:	7019      	strb	r1, [r3, #0]
  40744e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  407450:	429c      	cmp	r4, r3
  407452:	d8f9      	bhi.n	407448 <_svfprintf_r+0xeec>
  407454:	1b9b      	subs	r3, r3, r6
  407456:	9313      	str	r3, [sp, #76]	; 0x4c
  407458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40745a:	2b47      	cmp	r3, #71	; 0x47
  40745c:	f000 80e9 	beq.w	407632 <_svfprintf_r+0x10d6>
  407460:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407462:	2b65      	cmp	r3, #101	; 0x65
  407464:	f340 81cd 	ble.w	407802 <_svfprintf_r+0x12a6>
  407468:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40746a:	2b66      	cmp	r3, #102	; 0x66
  40746c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40746e:	9312      	str	r3, [sp, #72]	; 0x48
  407470:	f000 819e 	beq.w	4077b0 <_svfprintf_r+0x1254>
  407474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407476:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407478:	4619      	mov	r1, r3
  40747a:	4291      	cmp	r1, r2
  40747c:	f300 818a 	bgt.w	407794 <_svfprintf_r+0x1238>
  407480:	f01b 0f01 	tst.w	fp, #1
  407484:	f040 8213 	bne.w	4078ae <_svfprintf_r+0x1352>
  407488:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40748c:	9308      	str	r3, [sp, #32]
  40748e:	2367      	movs	r3, #103	; 0x67
  407490:	920e      	str	r2, [sp, #56]	; 0x38
  407492:	9311      	str	r3, [sp, #68]	; 0x44
  407494:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407496:	2b00      	cmp	r3, #0
  407498:	f040 80c4 	bne.w	407624 <_svfprintf_r+0x10c8>
  40749c:	930a      	str	r3, [sp, #40]	; 0x28
  40749e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4074a2:	f7ff b973 	b.w	40678c <_svfprintf_r+0x230>
  4074a6:	4635      	mov	r5, r6
  4074a8:	460c      	mov	r4, r1
  4074aa:	4646      	mov	r6, r8
  4074ac:	4690      	mov	r8, r2
  4074ae:	3301      	adds	r3, #1
  4074b0:	443c      	add	r4, r7
  4074b2:	2b07      	cmp	r3, #7
  4074b4:	9427      	str	r4, [sp, #156]	; 0x9c
  4074b6:	9326      	str	r3, [sp, #152]	; 0x98
  4074b8:	e888 00a0 	stmia.w	r8, {r5, r7}
  4074bc:	f73f aed1 	bgt.w	407262 <_svfprintf_r+0xd06>
  4074c0:	f108 0808 	add.w	r8, r8, #8
  4074c4:	e6d7      	b.n	407276 <_svfprintf_r+0xd1a>
  4074c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4074c8:	6813      	ldr	r3, [r2, #0]
  4074ca:	3204      	adds	r2, #4
  4074cc:	920f      	str	r2, [sp, #60]	; 0x3c
  4074ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4074d0:	601a      	str	r2, [r3, #0]
  4074d2:	f7ff b86a 	b.w	4065aa <_svfprintf_r+0x4e>
  4074d6:	aa25      	add	r2, sp, #148	; 0x94
  4074d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4074da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4074dc:	f003 ff36 	bl	40b34c <__ssprint_r>
  4074e0:	2800      	cmp	r0, #0
  4074e2:	f47f a90d 	bne.w	406700 <_svfprintf_r+0x1a4>
  4074e6:	46c8      	mov	r8, r9
  4074e8:	e48d      	b.n	406e06 <_svfprintf_r+0x8aa>
  4074ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4074ec:	4a27      	ldr	r2, [pc, #156]	; (40758c <_svfprintf_r+0x1030>)
  4074ee:	f8c8 2000 	str.w	r2, [r8]
  4074f2:	3301      	adds	r3, #1
  4074f4:	3401      	adds	r4, #1
  4074f6:	2201      	movs	r2, #1
  4074f8:	2b07      	cmp	r3, #7
  4074fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4074fc:	9326      	str	r3, [sp, #152]	; 0x98
  4074fe:	f8c8 2004 	str.w	r2, [r8, #4]
  407502:	dc72      	bgt.n	4075ea <_svfprintf_r+0x108e>
  407504:	f108 0808 	add.w	r8, r8, #8
  407508:	b929      	cbnz	r1, 407516 <_svfprintf_r+0xfba>
  40750a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40750c:	b91b      	cbnz	r3, 407516 <_svfprintf_r+0xfba>
  40750e:	9b07      	ldr	r3, [sp, #28]
  407510:	07d8      	lsls	r0, r3, #31
  407512:	f57f aa03 	bpl.w	40691c <_svfprintf_r+0x3c0>
  407516:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407518:	9819      	ldr	r0, [sp, #100]	; 0x64
  40751a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40751c:	f8c8 2000 	str.w	r2, [r8]
  407520:	3301      	adds	r3, #1
  407522:	4602      	mov	r2, r0
  407524:	4422      	add	r2, r4
  407526:	2b07      	cmp	r3, #7
  407528:	9227      	str	r2, [sp, #156]	; 0x9c
  40752a:	f8c8 0004 	str.w	r0, [r8, #4]
  40752e:	9326      	str	r3, [sp, #152]	; 0x98
  407530:	f300 818d 	bgt.w	40784e <_svfprintf_r+0x12f2>
  407534:	f108 0808 	add.w	r8, r8, #8
  407538:	2900      	cmp	r1, #0
  40753a:	f2c0 8165 	blt.w	407808 <_svfprintf_r+0x12ac>
  40753e:	9913      	ldr	r1, [sp, #76]	; 0x4c
  407540:	f8c8 6000 	str.w	r6, [r8]
  407544:	3301      	adds	r3, #1
  407546:	188c      	adds	r4, r1, r2
  407548:	2b07      	cmp	r3, #7
  40754a:	9427      	str	r4, [sp, #156]	; 0x9c
  40754c:	9326      	str	r3, [sp, #152]	; 0x98
  40754e:	f8c8 1004 	str.w	r1, [r8, #4]
  407552:	f77f a9e1 	ble.w	406918 <_svfprintf_r+0x3bc>
  407556:	e52c      	b.n	406fb2 <_svfprintf_r+0xa56>
  407558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40755a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40755c:	6813      	ldr	r3, [r2, #0]
  40755e:	17cd      	asrs	r5, r1, #31
  407560:	4608      	mov	r0, r1
  407562:	3204      	adds	r2, #4
  407564:	4629      	mov	r1, r5
  407566:	920f      	str	r2, [sp, #60]	; 0x3c
  407568:	e9c3 0100 	strd	r0, r1, [r3]
  40756c:	f7ff b81d 	b.w	4065aa <_svfprintf_r+0x4e>
  407570:	aa25      	add	r2, sp, #148	; 0x94
  407572:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407574:	980c      	ldr	r0, [sp, #48]	; 0x30
  407576:	f003 fee9 	bl	40b34c <__ssprint_r>
  40757a:	2800      	cmp	r0, #0
  40757c:	f47f a8c0 	bne.w	406700 <_svfprintf_r+0x1a4>
  407580:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407582:	46c8      	mov	r8, r9
  407584:	e458      	b.n	406e38 <_svfprintf_r+0x8dc>
  407586:	bf00      	nop
  407588:	0040d46c 	.word	0x0040d46c
  40758c:	0040d458 	.word	0x0040d458
  407590:	2140      	movs	r1, #64	; 0x40
  407592:	980c      	ldr	r0, [sp, #48]	; 0x30
  407594:	f002 fe58 	bl	40a248 <_malloc_r>
  407598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40759a:	6010      	str	r0, [r2, #0]
  40759c:	6110      	str	r0, [r2, #16]
  40759e:	2800      	cmp	r0, #0
  4075a0:	f000 81f2 	beq.w	407988 <_svfprintf_r+0x142c>
  4075a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4075a6:	2340      	movs	r3, #64	; 0x40
  4075a8:	6153      	str	r3, [r2, #20]
  4075aa:	f7fe bfee 	b.w	40658a <_svfprintf_r+0x2e>
  4075ae:	a823      	add	r0, sp, #140	; 0x8c
  4075b0:	a920      	add	r1, sp, #128	; 0x80
  4075b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4075b4:	9004      	str	r0, [sp, #16]
  4075b6:	9103      	str	r1, [sp, #12]
  4075b8:	a81f      	add	r0, sp, #124	; 0x7c
  4075ba:	2103      	movs	r1, #3
  4075bc:	9002      	str	r0, [sp, #8]
  4075be:	9a08      	ldr	r2, [sp, #32]
  4075c0:	9401      	str	r4, [sp, #4]
  4075c2:	463b      	mov	r3, r7
  4075c4:	9100      	str	r1, [sp, #0]
  4075c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075c8:	f001 f9ca 	bl	408960 <_dtoa_r>
  4075cc:	4625      	mov	r5, r4
  4075ce:	4606      	mov	r6, r0
  4075d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4075d2:	2b46      	cmp	r3, #70	; 0x46
  4075d4:	eb06 0405 	add.w	r4, r6, r5
  4075d8:	f47f af29 	bne.w	40742e <_svfprintf_r+0xed2>
  4075dc:	7833      	ldrb	r3, [r6, #0]
  4075de:	2b30      	cmp	r3, #48	; 0x30
  4075e0:	f000 8178 	beq.w	4078d4 <_svfprintf_r+0x1378>
  4075e4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4075e6:	442c      	add	r4, r5
  4075e8:	e721      	b.n	40742e <_svfprintf_r+0xed2>
  4075ea:	aa25      	add	r2, sp, #148	; 0x94
  4075ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4075ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4075f0:	f003 feac 	bl	40b34c <__ssprint_r>
  4075f4:	2800      	cmp	r0, #0
  4075f6:	f47f a883 	bne.w	406700 <_svfprintf_r+0x1a4>
  4075fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4075fc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4075fe:	46c8      	mov	r8, r9
  407600:	e782      	b.n	407508 <_svfprintf_r+0xfac>
  407602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407604:	2b00      	cmp	r3, #0
  407606:	bf08      	it	eq
  407608:	2301      	moveq	r3, #1
  40760a:	930a      	str	r3, [sp, #40]	; 0x28
  40760c:	e6db      	b.n	4073c6 <_svfprintf_r+0xe6a>
  40760e:	4630      	mov	r0, r6
  407610:	940a      	str	r4, [sp, #40]	; 0x28
  407612:	f7fe ff35 	bl	406480 <strlen>
  407616:	950f      	str	r5, [sp, #60]	; 0x3c
  407618:	900e      	str	r0, [sp, #56]	; 0x38
  40761a:	f8cd b01c 	str.w	fp, [sp, #28]
  40761e:	4603      	mov	r3, r0
  407620:	f7ff b9f9 	b.w	406a16 <_svfprintf_r+0x4ba>
  407624:	272d      	movs	r7, #45	; 0x2d
  407626:	2300      	movs	r3, #0
  407628:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40762c:	930a      	str	r3, [sp, #40]	; 0x28
  40762e:	f7ff b8ae 	b.w	40678e <_svfprintf_r+0x232>
  407632:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407634:	9312      	str	r3, [sp, #72]	; 0x48
  407636:	461a      	mov	r2, r3
  407638:	3303      	adds	r3, #3
  40763a:	db04      	blt.n	407646 <_svfprintf_r+0x10ea>
  40763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40763e:	4619      	mov	r1, r3
  407640:	4291      	cmp	r1, r2
  407642:	f6bf af17 	bge.w	407474 <_svfprintf_r+0xf18>
  407646:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407648:	3b02      	subs	r3, #2
  40764a:	9311      	str	r3, [sp, #68]	; 0x44
  40764c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  407650:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  407654:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407656:	3b01      	subs	r3, #1
  407658:	2b00      	cmp	r3, #0
  40765a:	931f      	str	r3, [sp, #124]	; 0x7c
  40765c:	bfbd      	ittte	lt
  40765e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  407660:	f1c3 0301 	rsblt	r3, r3, #1
  407664:	222d      	movlt	r2, #45	; 0x2d
  407666:	222b      	movge	r2, #43	; 0x2b
  407668:	2b09      	cmp	r3, #9
  40766a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40766e:	f340 8116 	ble.w	40789e <_svfprintf_r+0x1342>
  407672:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  407676:	4620      	mov	r0, r4
  407678:	4dab      	ldr	r5, [pc, #684]	; (407928 <_svfprintf_r+0x13cc>)
  40767a:	e000      	b.n	40767e <_svfprintf_r+0x1122>
  40767c:	4610      	mov	r0, r2
  40767e:	fb85 1203 	smull	r1, r2, r5, r3
  407682:	17d9      	asrs	r1, r3, #31
  407684:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  407688:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40768c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407690:	3230      	adds	r2, #48	; 0x30
  407692:	2909      	cmp	r1, #9
  407694:	f800 2c01 	strb.w	r2, [r0, #-1]
  407698:	460b      	mov	r3, r1
  40769a:	f100 32ff 	add.w	r2, r0, #4294967295
  40769e:	dced      	bgt.n	40767c <_svfprintf_r+0x1120>
  4076a0:	3330      	adds	r3, #48	; 0x30
  4076a2:	3802      	subs	r0, #2
  4076a4:	b2d9      	uxtb	r1, r3
  4076a6:	4284      	cmp	r4, r0
  4076a8:	f802 1c01 	strb.w	r1, [r2, #-1]
  4076ac:	f240 8165 	bls.w	40797a <_svfprintf_r+0x141e>
  4076b0:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4076b4:	4613      	mov	r3, r2
  4076b6:	e001      	b.n	4076bc <_svfprintf_r+0x1160>
  4076b8:	f813 1b01 	ldrb.w	r1, [r3], #1
  4076bc:	f800 1b01 	strb.w	r1, [r0], #1
  4076c0:	42a3      	cmp	r3, r4
  4076c2:	d1f9      	bne.n	4076b8 <_svfprintf_r+0x115c>
  4076c4:	3301      	adds	r3, #1
  4076c6:	1a9b      	subs	r3, r3, r2
  4076c8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4076cc:	4413      	add	r3, r2
  4076ce:	aa21      	add	r2, sp, #132	; 0x84
  4076d0:	1a9b      	subs	r3, r3, r2
  4076d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4076d4:	931b      	str	r3, [sp, #108]	; 0x6c
  4076d6:	2a01      	cmp	r2, #1
  4076d8:	4413      	add	r3, r2
  4076da:	930e      	str	r3, [sp, #56]	; 0x38
  4076dc:	f340 8119 	ble.w	407912 <_svfprintf_r+0x13b6>
  4076e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4076e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4076e4:	4413      	add	r3, r2
  4076e6:	930e      	str	r3, [sp, #56]	; 0x38
  4076e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4076ec:	9308      	str	r3, [sp, #32]
  4076ee:	2300      	movs	r3, #0
  4076f0:	9312      	str	r3, [sp, #72]	; 0x48
  4076f2:	e6cf      	b.n	407494 <_svfprintf_r+0xf38>
  4076f4:	aa25      	add	r2, sp, #148	; 0x94
  4076f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4076f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4076fa:	f003 fe27 	bl	40b34c <__ssprint_r>
  4076fe:	2800      	cmp	r0, #0
  407700:	f47e affe 	bne.w	406700 <_svfprintf_r+0x1a4>
  407704:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407706:	46c8      	mov	r8, r9
  407708:	e4d7      	b.n	4070ba <_svfprintf_r+0xb5e>
  40770a:	4623      	mov	r3, r4
  40770c:	e6a2      	b.n	407454 <_svfprintf_r+0xef8>
  40770e:	aa25      	add	r2, sp, #148	; 0x94
  407710:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407712:	980c      	ldr	r0, [sp, #48]	; 0x30
  407714:	f003 fe1a 	bl	40b34c <__ssprint_r>
  407718:	2800      	cmp	r0, #0
  40771a:	f47e aff1 	bne.w	406700 <_svfprintf_r+0x1a4>
  40771e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407720:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  407722:	46c8      	mov	r8, r9
  407724:	e5ae      	b.n	407284 <_svfprintf_r+0xd28>
  407726:	aa25      	add	r2, sp, #148	; 0x94
  407728:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40772a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40772c:	f003 fe0e 	bl	40b34c <__ssprint_r>
  407730:	2800      	cmp	r0, #0
  407732:	f47e afe5 	bne.w	406700 <_svfprintf_r+0x1a4>
  407736:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  407738:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40773a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40773c:	1a9a      	subs	r2, r3, r2
  40773e:	46c8      	mov	r8, r9
  407740:	e5b8      	b.n	4072b4 <_svfprintf_r+0xd58>
  407742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407744:	9612      	str	r6, [sp, #72]	; 0x48
  407746:	2b06      	cmp	r3, #6
  407748:	bf28      	it	cs
  40774a:	2306      	movcs	r3, #6
  40774c:	960a      	str	r6, [sp, #40]	; 0x28
  40774e:	4637      	mov	r7, r6
  407750:	9308      	str	r3, [sp, #32]
  407752:	950f      	str	r5, [sp, #60]	; 0x3c
  407754:	f8cd b01c 	str.w	fp, [sp, #28]
  407758:	930e      	str	r3, [sp, #56]	; 0x38
  40775a:	4e74      	ldr	r6, [pc, #464]	; (40792c <_svfprintf_r+0x13d0>)
  40775c:	f7ff b816 	b.w	40678c <_svfprintf_r+0x230>
  407760:	a823      	add	r0, sp, #140	; 0x8c
  407762:	a920      	add	r1, sp, #128	; 0x80
  407764:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  407766:	9004      	str	r0, [sp, #16]
  407768:	9103      	str	r1, [sp, #12]
  40776a:	a81f      	add	r0, sp, #124	; 0x7c
  40776c:	2103      	movs	r1, #3
  40776e:	9002      	str	r0, [sp, #8]
  407770:	9a08      	ldr	r2, [sp, #32]
  407772:	9501      	str	r5, [sp, #4]
  407774:	463b      	mov	r3, r7
  407776:	9100      	str	r1, [sp, #0]
  407778:	980c      	ldr	r0, [sp, #48]	; 0x30
  40777a:	f001 f8f1 	bl	408960 <_dtoa_r>
  40777e:	4606      	mov	r6, r0
  407780:	1944      	adds	r4, r0, r5
  407782:	e72b      	b.n	4075dc <_svfprintf_r+0x1080>
  407784:	2306      	movs	r3, #6
  407786:	930a      	str	r3, [sp, #40]	; 0x28
  407788:	e61d      	b.n	4073c6 <_svfprintf_r+0xe6a>
  40778a:	272d      	movs	r7, #45	; 0x2d
  40778c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  407790:	f7ff bacd 	b.w	406d2e <_svfprintf_r+0x7d2>
  407794:	9a19      	ldr	r2, [sp, #100]	; 0x64
  407796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  407798:	4413      	add	r3, r2
  40779a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40779c:	930e      	str	r3, [sp, #56]	; 0x38
  40779e:	2a00      	cmp	r2, #0
  4077a0:	f340 80b0 	ble.w	407904 <_svfprintf_r+0x13a8>
  4077a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4077a8:	9308      	str	r3, [sp, #32]
  4077aa:	2367      	movs	r3, #103	; 0x67
  4077ac:	9311      	str	r3, [sp, #68]	; 0x44
  4077ae:	e671      	b.n	407494 <_svfprintf_r+0xf38>
  4077b0:	2b00      	cmp	r3, #0
  4077b2:	f340 80c3 	ble.w	40793c <_svfprintf_r+0x13e0>
  4077b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4077b8:	2a00      	cmp	r2, #0
  4077ba:	f040 8099 	bne.w	4078f0 <_svfprintf_r+0x1394>
  4077be:	f01b 0f01 	tst.w	fp, #1
  4077c2:	f040 8095 	bne.w	4078f0 <_svfprintf_r+0x1394>
  4077c6:	9308      	str	r3, [sp, #32]
  4077c8:	930e      	str	r3, [sp, #56]	; 0x38
  4077ca:	e663      	b.n	407494 <_svfprintf_r+0xf38>
  4077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077ce:	9308      	str	r3, [sp, #32]
  4077d0:	930e      	str	r3, [sp, #56]	; 0x38
  4077d2:	900a      	str	r0, [sp, #40]	; 0x28
  4077d4:	950f      	str	r5, [sp, #60]	; 0x3c
  4077d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4077da:	9012      	str	r0, [sp, #72]	; 0x48
  4077dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4077e0:	f7fe bfd4 	b.w	40678c <_svfprintf_r+0x230>
  4077e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4077e6:	2b47      	cmp	r3, #71	; 0x47
  4077e8:	f47f ae20 	bne.w	40742c <_svfprintf_r+0xed0>
  4077ec:	f01b 0f01 	tst.w	fp, #1
  4077f0:	f47f aeee 	bne.w	4075d0 <_svfprintf_r+0x1074>
  4077f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4077f6:	1b9b      	subs	r3, r3, r6
  4077f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4077fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4077fc:	2b47      	cmp	r3, #71	; 0x47
  4077fe:	f43f af18 	beq.w	407632 <_svfprintf_r+0x10d6>
  407802:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  407804:	9312      	str	r3, [sp, #72]	; 0x48
  407806:	e721      	b.n	40764c <_svfprintf_r+0x10f0>
  407808:	424f      	negs	r7, r1
  40780a:	3110      	adds	r1, #16
  40780c:	4d48      	ldr	r5, [pc, #288]	; (407930 <_svfprintf_r+0x13d4>)
  40780e:	da2f      	bge.n	407870 <_svfprintf_r+0x1314>
  407810:	2410      	movs	r4, #16
  407812:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  407816:	e004      	b.n	407822 <_svfprintf_r+0x12c6>
  407818:	f108 0808 	add.w	r8, r8, #8
  40781c:	3f10      	subs	r7, #16
  40781e:	2f10      	cmp	r7, #16
  407820:	dd26      	ble.n	407870 <_svfprintf_r+0x1314>
  407822:	3301      	adds	r3, #1
  407824:	3210      	adds	r2, #16
  407826:	2b07      	cmp	r3, #7
  407828:	9227      	str	r2, [sp, #156]	; 0x9c
  40782a:	9326      	str	r3, [sp, #152]	; 0x98
  40782c:	f8c8 5000 	str.w	r5, [r8]
  407830:	f8c8 4004 	str.w	r4, [r8, #4]
  407834:	ddf0      	ble.n	407818 <_svfprintf_r+0x12bc>
  407836:	aa25      	add	r2, sp, #148	; 0x94
  407838:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40783a:	4658      	mov	r0, fp
  40783c:	f003 fd86 	bl	40b34c <__ssprint_r>
  407840:	2800      	cmp	r0, #0
  407842:	f47e af5d 	bne.w	406700 <_svfprintf_r+0x1a4>
  407846:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407848:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40784a:	46c8      	mov	r8, r9
  40784c:	e7e6      	b.n	40781c <_svfprintf_r+0x12c0>
  40784e:	aa25      	add	r2, sp, #148	; 0x94
  407850:	990b      	ldr	r1, [sp, #44]	; 0x2c
  407852:	980c      	ldr	r0, [sp, #48]	; 0x30
  407854:	f003 fd7a 	bl	40b34c <__ssprint_r>
  407858:	2800      	cmp	r0, #0
  40785a:	f47e af51 	bne.w	406700 <_svfprintf_r+0x1a4>
  40785e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  407860:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407862:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407864:	46c8      	mov	r8, r9
  407866:	e667      	b.n	407538 <_svfprintf_r+0xfdc>
  407868:	2000      	movs	r0, #0
  40786a:	900a      	str	r0, [sp, #40]	; 0x28
  40786c:	f7fe bed0 	b.w	406610 <_svfprintf_r+0xb4>
  407870:	3301      	adds	r3, #1
  407872:	443a      	add	r2, r7
  407874:	2b07      	cmp	r3, #7
  407876:	e888 00a0 	stmia.w	r8, {r5, r7}
  40787a:	9227      	str	r2, [sp, #156]	; 0x9c
  40787c:	9326      	str	r3, [sp, #152]	; 0x98
  40787e:	f108 0808 	add.w	r8, r8, #8
  407882:	f77f ae5c 	ble.w	40753e <_svfprintf_r+0xfe2>
  407886:	aa25      	add	r2, sp, #148	; 0x94
  407888:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40788a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40788c:	f003 fd5e 	bl	40b34c <__ssprint_r>
  407890:	2800      	cmp	r0, #0
  407892:	f47e af35 	bne.w	406700 <_svfprintf_r+0x1a4>
  407896:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  407898:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40789a:	46c8      	mov	r8, r9
  40789c:	e64f      	b.n	40753e <_svfprintf_r+0xfe2>
  40789e:	3330      	adds	r3, #48	; 0x30
  4078a0:	2230      	movs	r2, #48	; 0x30
  4078a2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4078a6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4078aa:	ab22      	add	r3, sp, #136	; 0x88
  4078ac:	e70f      	b.n	4076ce <_svfprintf_r+0x1172>
  4078ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4078b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4078b2:	4413      	add	r3, r2
  4078b4:	930e      	str	r3, [sp, #56]	; 0x38
  4078b6:	e775      	b.n	4077a4 <_svfprintf_r+0x1248>
  4078b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4078ba:	e5cb      	b.n	407454 <_svfprintf_r+0xef8>
  4078bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4078be:	4e1d      	ldr	r6, [pc, #116]	; (407934 <_svfprintf_r+0x13d8>)
  4078c0:	2b00      	cmp	r3, #0
  4078c2:	bfb6      	itet	lt
  4078c4:	272d      	movlt	r7, #45	; 0x2d
  4078c6:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4078ca:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4078ce:	4b1a      	ldr	r3, [pc, #104]	; (407938 <_svfprintf_r+0x13dc>)
  4078d0:	f7ff ba2f 	b.w	406d32 <_svfprintf_r+0x7d6>
  4078d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4078d6:	9808      	ldr	r0, [sp, #32]
  4078d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4078da:	4639      	mov	r1, r7
  4078dc:	f004 fbd2 	bl	40c084 <__aeabi_dcmpeq>
  4078e0:	2800      	cmp	r0, #0
  4078e2:	f47f ae7f 	bne.w	4075e4 <_svfprintf_r+0x1088>
  4078e6:	f1c5 0501 	rsb	r5, r5, #1
  4078ea:	951f      	str	r5, [sp, #124]	; 0x7c
  4078ec:	442c      	add	r4, r5
  4078ee:	e59e      	b.n	40742e <_svfprintf_r+0xed2>
  4078f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4078f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4078f4:	4413      	add	r3, r2
  4078f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4078f8:	441a      	add	r2, r3
  4078fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4078fe:	920e      	str	r2, [sp, #56]	; 0x38
  407900:	9308      	str	r3, [sp, #32]
  407902:	e5c7      	b.n	407494 <_svfprintf_r+0xf38>
  407904:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  407908:	f1c3 0301 	rsb	r3, r3, #1
  40790c:	441a      	add	r2, r3
  40790e:	4613      	mov	r3, r2
  407910:	e7d0      	b.n	4078b4 <_svfprintf_r+0x1358>
  407912:	f01b 0301 	ands.w	r3, fp, #1
  407916:	9312      	str	r3, [sp, #72]	; 0x48
  407918:	f47f aee2 	bne.w	4076e0 <_svfprintf_r+0x1184>
  40791c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40791e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  407922:	9308      	str	r3, [sp, #32]
  407924:	e5b6      	b.n	407494 <_svfprintf_r+0xf38>
  407926:	bf00      	nop
  407928:	66666667 	.word	0x66666667
  40792c:	0040d450 	.word	0x0040d450
  407930:	0040d46c 	.word	0x0040d46c
  407934:	0040d424 	.word	0x0040d424
  407938:	0040d420 	.word	0x0040d420
  40793c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40793e:	b913      	cbnz	r3, 407946 <_svfprintf_r+0x13ea>
  407940:	f01b 0f01 	tst.w	fp, #1
  407944:	d002      	beq.n	40794c <_svfprintf_r+0x13f0>
  407946:	9b19      	ldr	r3, [sp, #100]	; 0x64
  407948:	3301      	adds	r3, #1
  40794a:	e7d4      	b.n	4078f6 <_svfprintf_r+0x139a>
  40794c:	2301      	movs	r3, #1
  40794e:	e73a      	b.n	4077c6 <_svfprintf_r+0x126a>
  407950:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  407952:	f89a 3001 	ldrb.w	r3, [sl, #1]
  407956:	6828      	ldr	r0, [r5, #0]
  407958:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40795c:	900a      	str	r0, [sp, #40]	; 0x28
  40795e:	4628      	mov	r0, r5
  407960:	3004      	adds	r0, #4
  407962:	46a2      	mov	sl, r4
  407964:	900f      	str	r0, [sp, #60]	; 0x3c
  407966:	f7fe be51 	b.w	40660c <_svfprintf_r+0xb0>
  40796a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40796e:	f7ff b867 	b.w	406a40 <_svfprintf_r+0x4e4>
  407972:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407976:	f7ff ba15 	b.w	406da4 <_svfprintf_r+0x848>
  40797a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40797e:	e6a6      	b.n	4076ce <_svfprintf_r+0x1172>
  407980:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  407984:	f7ff b8eb 	b.w	406b5e <_svfprintf_r+0x602>
  407988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40798a:	230c      	movs	r3, #12
  40798c:	6013      	str	r3, [r2, #0]
  40798e:	f04f 33ff 	mov.w	r3, #4294967295
  407992:	9309      	str	r3, [sp, #36]	; 0x24
  407994:	f7fe bebd 	b.w	406712 <_svfprintf_r+0x1b6>
  407998:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40799c:	f7ff b99a 	b.w	406cd4 <_svfprintf_r+0x778>
  4079a0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4079a4:	f7ff b976 	b.w	406c94 <_svfprintf_r+0x738>
  4079a8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4079ac:	f7ff b959 	b.w	406c62 <_svfprintf_r+0x706>
  4079b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4079b4:	f7ff b912 	b.w	406bdc <_svfprintf_r+0x680>

004079b8 <__sprint_r.part.0>:
  4079b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4079be:	049c      	lsls	r4, r3, #18
  4079c0:	4693      	mov	fp, r2
  4079c2:	d52f      	bpl.n	407a24 <__sprint_r.part.0+0x6c>
  4079c4:	6893      	ldr	r3, [r2, #8]
  4079c6:	6812      	ldr	r2, [r2, #0]
  4079c8:	b353      	cbz	r3, 407a20 <__sprint_r.part.0+0x68>
  4079ca:	460e      	mov	r6, r1
  4079cc:	4607      	mov	r7, r0
  4079ce:	f102 0908 	add.w	r9, r2, #8
  4079d2:	e919 0420 	ldmdb	r9, {r5, sl}
  4079d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4079da:	d017      	beq.n	407a0c <__sprint_r.part.0+0x54>
  4079dc:	3d04      	subs	r5, #4
  4079de:	2400      	movs	r4, #0
  4079e0:	e001      	b.n	4079e6 <__sprint_r.part.0+0x2e>
  4079e2:	45a0      	cmp	r8, r4
  4079e4:	d010      	beq.n	407a08 <__sprint_r.part.0+0x50>
  4079e6:	4632      	mov	r2, r6
  4079e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4079ec:	4638      	mov	r0, r7
  4079ee:	f002 f87b 	bl	409ae8 <_fputwc_r>
  4079f2:	1c43      	adds	r3, r0, #1
  4079f4:	f104 0401 	add.w	r4, r4, #1
  4079f8:	d1f3      	bne.n	4079e2 <__sprint_r.part.0+0x2a>
  4079fa:	2300      	movs	r3, #0
  4079fc:	f8cb 3008 	str.w	r3, [fp, #8]
  407a00:	f8cb 3004 	str.w	r3, [fp, #4]
  407a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a08:	f8db 3008 	ldr.w	r3, [fp, #8]
  407a0c:	f02a 0a03 	bic.w	sl, sl, #3
  407a10:	eba3 030a 	sub.w	r3, r3, sl
  407a14:	f8cb 3008 	str.w	r3, [fp, #8]
  407a18:	f109 0908 	add.w	r9, r9, #8
  407a1c:	2b00      	cmp	r3, #0
  407a1e:	d1d8      	bne.n	4079d2 <__sprint_r.part.0+0x1a>
  407a20:	2000      	movs	r0, #0
  407a22:	e7ea      	b.n	4079fa <__sprint_r.part.0+0x42>
  407a24:	f002 f9ca 	bl	409dbc <__sfvwrite_r>
  407a28:	2300      	movs	r3, #0
  407a2a:	f8cb 3008 	str.w	r3, [fp, #8]
  407a2e:	f8cb 3004 	str.w	r3, [fp, #4]
  407a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407a36:	bf00      	nop

00407a38 <_vfiprintf_r>:
  407a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407a3c:	b0ad      	sub	sp, #180	; 0xb4
  407a3e:	461d      	mov	r5, r3
  407a40:	468b      	mov	fp, r1
  407a42:	4690      	mov	r8, r2
  407a44:	9307      	str	r3, [sp, #28]
  407a46:	9006      	str	r0, [sp, #24]
  407a48:	b118      	cbz	r0, 407a52 <_vfiprintf_r+0x1a>
  407a4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407a4c:	2b00      	cmp	r3, #0
  407a4e:	f000 80f3 	beq.w	407c38 <_vfiprintf_r+0x200>
  407a52:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407a56:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407a5a:	07df      	lsls	r7, r3, #31
  407a5c:	b281      	uxth	r1, r0
  407a5e:	d402      	bmi.n	407a66 <_vfiprintf_r+0x2e>
  407a60:	058e      	lsls	r6, r1, #22
  407a62:	f140 80fc 	bpl.w	407c5e <_vfiprintf_r+0x226>
  407a66:	048c      	lsls	r4, r1, #18
  407a68:	d40a      	bmi.n	407a80 <_vfiprintf_r+0x48>
  407a6a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407a6e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  407a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  407a76:	f8ab 100c 	strh.w	r1, [fp, #12]
  407a7a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  407a7e:	b289      	uxth	r1, r1
  407a80:	0708      	lsls	r0, r1, #28
  407a82:	f140 80b3 	bpl.w	407bec <_vfiprintf_r+0x1b4>
  407a86:	f8db 3010 	ldr.w	r3, [fp, #16]
  407a8a:	2b00      	cmp	r3, #0
  407a8c:	f000 80ae 	beq.w	407bec <_vfiprintf_r+0x1b4>
  407a90:	f001 031a 	and.w	r3, r1, #26
  407a94:	2b0a      	cmp	r3, #10
  407a96:	f000 80b5 	beq.w	407c04 <_vfiprintf_r+0x1cc>
  407a9a:	2300      	movs	r3, #0
  407a9c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  407aa0:	930b      	str	r3, [sp, #44]	; 0x2c
  407aa2:	9311      	str	r3, [sp, #68]	; 0x44
  407aa4:	9310      	str	r3, [sp, #64]	; 0x40
  407aa6:	9303      	str	r3, [sp, #12]
  407aa8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  407aac:	46ca      	mov	sl, r9
  407aae:	f8cd b010 	str.w	fp, [sp, #16]
  407ab2:	f898 3000 	ldrb.w	r3, [r8]
  407ab6:	4644      	mov	r4, r8
  407ab8:	b1fb      	cbz	r3, 407afa <_vfiprintf_r+0xc2>
  407aba:	2b25      	cmp	r3, #37	; 0x25
  407abc:	d102      	bne.n	407ac4 <_vfiprintf_r+0x8c>
  407abe:	e01c      	b.n	407afa <_vfiprintf_r+0xc2>
  407ac0:	2b25      	cmp	r3, #37	; 0x25
  407ac2:	d003      	beq.n	407acc <_vfiprintf_r+0x94>
  407ac4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  407ac8:	2b00      	cmp	r3, #0
  407aca:	d1f9      	bne.n	407ac0 <_vfiprintf_r+0x88>
  407acc:	eba4 0508 	sub.w	r5, r4, r8
  407ad0:	b19d      	cbz	r5, 407afa <_vfiprintf_r+0xc2>
  407ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407ad4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407ad6:	f8ca 8000 	str.w	r8, [sl]
  407ada:	3301      	adds	r3, #1
  407adc:	442a      	add	r2, r5
  407ade:	2b07      	cmp	r3, #7
  407ae0:	f8ca 5004 	str.w	r5, [sl, #4]
  407ae4:	9211      	str	r2, [sp, #68]	; 0x44
  407ae6:	9310      	str	r3, [sp, #64]	; 0x40
  407ae8:	dd7a      	ble.n	407be0 <_vfiprintf_r+0x1a8>
  407aea:	2a00      	cmp	r2, #0
  407aec:	f040 84b0 	bne.w	408450 <_vfiprintf_r+0xa18>
  407af0:	9b03      	ldr	r3, [sp, #12]
  407af2:	9210      	str	r2, [sp, #64]	; 0x40
  407af4:	442b      	add	r3, r5
  407af6:	46ca      	mov	sl, r9
  407af8:	9303      	str	r3, [sp, #12]
  407afa:	7823      	ldrb	r3, [r4, #0]
  407afc:	2b00      	cmp	r3, #0
  407afe:	f000 83e0 	beq.w	4082c2 <_vfiprintf_r+0x88a>
  407b02:	2000      	movs	r0, #0
  407b04:	f04f 0300 	mov.w	r3, #0
  407b08:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  407b0c:	f104 0801 	add.w	r8, r4, #1
  407b10:	7862      	ldrb	r2, [r4, #1]
  407b12:	4605      	mov	r5, r0
  407b14:	4606      	mov	r6, r0
  407b16:	4603      	mov	r3, r0
  407b18:	f04f 34ff 	mov.w	r4, #4294967295
  407b1c:	f108 0801 	add.w	r8, r8, #1
  407b20:	f1a2 0120 	sub.w	r1, r2, #32
  407b24:	2958      	cmp	r1, #88	; 0x58
  407b26:	f200 82de 	bhi.w	4080e6 <_vfiprintf_r+0x6ae>
  407b2a:	e8df f011 	tbh	[pc, r1, lsl #1]
  407b2e:	0221      	.short	0x0221
  407b30:	02dc02dc 	.word	0x02dc02dc
  407b34:	02dc0229 	.word	0x02dc0229
  407b38:	02dc02dc 	.word	0x02dc02dc
  407b3c:	02dc02dc 	.word	0x02dc02dc
  407b40:	028902dc 	.word	0x028902dc
  407b44:	02dc0295 	.word	0x02dc0295
  407b48:	02bd00a2 	.word	0x02bd00a2
  407b4c:	019f02dc 	.word	0x019f02dc
  407b50:	01a401a4 	.word	0x01a401a4
  407b54:	01a401a4 	.word	0x01a401a4
  407b58:	01a401a4 	.word	0x01a401a4
  407b5c:	01a401a4 	.word	0x01a401a4
  407b60:	02dc01a4 	.word	0x02dc01a4
  407b64:	02dc02dc 	.word	0x02dc02dc
  407b68:	02dc02dc 	.word	0x02dc02dc
  407b6c:	02dc02dc 	.word	0x02dc02dc
  407b70:	02dc02dc 	.word	0x02dc02dc
  407b74:	01b202dc 	.word	0x01b202dc
  407b78:	02dc02dc 	.word	0x02dc02dc
  407b7c:	02dc02dc 	.word	0x02dc02dc
  407b80:	02dc02dc 	.word	0x02dc02dc
  407b84:	02dc02dc 	.word	0x02dc02dc
  407b88:	02dc02dc 	.word	0x02dc02dc
  407b8c:	02dc0197 	.word	0x02dc0197
  407b90:	02dc02dc 	.word	0x02dc02dc
  407b94:	02dc02dc 	.word	0x02dc02dc
  407b98:	02dc019b 	.word	0x02dc019b
  407b9c:	025302dc 	.word	0x025302dc
  407ba0:	02dc02dc 	.word	0x02dc02dc
  407ba4:	02dc02dc 	.word	0x02dc02dc
  407ba8:	02dc02dc 	.word	0x02dc02dc
  407bac:	02dc02dc 	.word	0x02dc02dc
  407bb0:	02dc02dc 	.word	0x02dc02dc
  407bb4:	021b025a 	.word	0x021b025a
  407bb8:	02dc02dc 	.word	0x02dc02dc
  407bbc:	026e02dc 	.word	0x026e02dc
  407bc0:	02dc021b 	.word	0x02dc021b
  407bc4:	027302dc 	.word	0x027302dc
  407bc8:	01f502dc 	.word	0x01f502dc
  407bcc:	02090182 	.word	0x02090182
  407bd0:	02dc02d7 	.word	0x02dc02d7
  407bd4:	02dc029a 	.word	0x02dc029a
  407bd8:	02dc00a7 	.word	0x02dc00a7
  407bdc:	022e02dc 	.word	0x022e02dc
  407be0:	f10a 0a08 	add.w	sl, sl, #8
  407be4:	9b03      	ldr	r3, [sp, #12]
  407be6:	442b      	add	r3, r5
  407be8:	9303      	str	r3, [sp, #12]
  407bea:	e786      	b.n	407afa <_vfiprintf_r+0xc2>
  407bec:	4659      	mov	r1, fp
  407bee:	9806      	ldr	r0, [sp, #24]
  407bf0:	f000 fdac 	bl	40874c <__swsetup_r>
  407bf4:	bb18      	cbnz	r0, 407c3e <_vfiprintf_r+0x206>
  407bf6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  407bfa:	f001 031a 	and.w	r3, r1, #26
  407bfe:	2b0a      	cmp	r3, #10
  407c00:	f47f af4b 	bne.w	407a9a <_vfiprintf_r+0x62>
  407c04:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  407c08:	2b00      	cmp	r3, #0
  407c0a:	f6ff af46 	blt.w	407a9a <_vfiprintf_r+0x62>
  407c0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407c12:	07db      	lsls	r3, r3, #31
  407c14:	d405      	bmi.n	407c22 <_vfiprintf_r+0x1ea>
  407c16:	058f      	lsls	r7, r1, #22
  407c18:	d403      	bmi.n	407c22 <_vfiprintf_r+0x1ea>
  407c1a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407c1e:	f002 fa91 	bl	40a144 <__retarget_lock_release_recursive>
  407c22:	462b      	mov	r3, r5
  407c24:	4642      	mov	r2, r8
  407c26:	4659      	mov	r1, fp
  407c28:	9806      	ldr	r0, [sp, #24]
  407c2a:	f000 fd4d 	bl	4086c8 <__sbprintf>
  407c2e:	9003      	str	r0, [sp, #12]
  407c30:	9803      	ldr	r0, [sp, #12]
  407c32:	b02d      	add	sp, #180	; 0xb4
  407c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c38:	f001 feb4 	bl	4099a4 <__sinit>
  407c3c:	e709      	b.n	407a52 <_vfiprintf_r+0x1a>
  407c3e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  407c42:	07d9      	lsls	r1, r3, #31
  407c44:	d404      	bmi.n	407c50 <_vfiprintf_r+0x218>
  407c46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407c4a:	059a      	lsls	r2, r3, #22
  407c4c:	f140 84aa 	bpl.w	4085a4 <_vfiprintf_r+0xb6c>
  407c50:	f04f 33ff 	mov.w	r3, #4294967295
  407c54:	9303      	str	r3, [sp, #12]
  407c56:	9803      	ldr	r0, [sp, #12]
  407c58:	b02d      	add	sp, #180	; 0xb4
  407c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c5e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  407c62:	f002 fa6d 	bl	40a140 <__retarget_lock_acquire_recursive>
  407c66:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  407c6a:	b281      	uxth	r1, r0
  407c6c:	e6fb      	b.n	407a66 <_vfiprintf_r+0x2e>
  407c6e:	4276      	negs	r6, r6
  407c70:	9207      	str	r2, [sp, #28]
  407c72:	f043 0304 	orr.w	r3, r3, #4
  407c76:	f898 2000 	ldrb.w	r2, [r8]
  407c7a:	e74f      	b.n	407b1c <_vfiprintf_r+0xe4>
  407c7c:	9608      	str	r6, [sp, #32]
  407c7e:	069e      	lsls	r6, r3, #26
  407c80:	f100 8450 	bmi.w	408524 <_vfiprintf_r+0xaec>
  407c84:	9907      	ldr	r1, [sp, #28]
  407c86:	06dd      	lsls	r5, r3, #27
  407c88:	460a      	mov	r2, r1
  407c8a:	f100 83ef 	bmi.w	40846c <_vfiprintf_r+0xa34>
  407c8e:	0658      	lsls	r0, r3, #25
  407c90:	f140 83ec 	bpl.w	40846c <_vfiprintf_r+0xa34>
  407c94:	880e      	ldrh	r6, [r1, #0]
  407c96:	3104      	adds	r1, #4
  407c98:	2700      	movs	r7, #0
  407c9a:	2201      	movs	r2, #1
  407c9c:	9107      	str	r1, [sp, #28]
  407c9e:	f04f 0100 	mov.w	r1, #0
  407ca2:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  407ca6:	2500      	movs	r5, #0
  407ca8:	1c61      	adds	r1, r4, #1
  407caa:	f000 8116 	beq.w	407eda <_vfiprintf_r+0x4a2>
  407cae:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  407cb2:	9102      	str	r1, [sp, #8]
  407cb4:	ea56 0107 	orrs.w	r1, r6, r7
  407cb8:	f040 8114 	bne.w	407ee4 <_vfiprintf_r+0x4ac>
  407cbc:	2c00      	cmp	r4, #0
  407cbe:	f040 835c 	bne.w	40837a <_vfiprintf_r+0x942>
  407cc2:	2a00      	cmp	r2, #0
  407cc4:	f040 83b7 	bne.w	408436 <_vfiprintf_r+0x9fe>
  407cc8:	f013 0301 	ands.w	r3, r3, #1
  407ccc:	9305      	str	r3, [sp, #20]
  407cce:	f000 8457 	beq.w	408580 <_vfiprintf_r+0xb48>
  407cd2:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  407cd6:	2330      	movs	r3, #48	; 0x30
  407cd8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  407cdc:	9b05      	ldr	r3, [sp, #20]
  407cde:	42a3      	cmp	r3, r4
  407ce0:	bfb8      	it	lt
  407ce2:	4623      	movlt	r3, r4
  407ce4:	9301      	str	r3, [sp, #4]
  407ce6:	b10d      	cbz	r5, 407cec <_vfiprintf_r+0x2b4>
  407ce8:	3301      	adds	r3, #1
  407cea:	9301      	str	r3, [sp, #4]
  407cec:	9b02      	ldr	r3, [sp, #8]
  407cee:	f013 0302 	ands.w	r3, r3, #2
  407cf2:	9309      	str	r3, [sp, #36]	; 0x24
  407cf4:	d002      	beq.n	407cfc <_vfiprintf_r+0x2c4>
  407cf6:	9b01      	ldr	r3, [sp, #4]
  407cf8:	3302      	adds	r3, #2
  407cfa:	9301      	str	r3, [sp, #4]
  407cfc:	9b02      	ldr	r3, [sp, #8]
  407cfe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  407d02:	930a      	str	r3, [sp, #40]	; 0x28
  407d04:	f040 8217 	bne.w	408136 <_vfiprintf_r+0x6fe>
  407d08:	9b08      	ldr	r3, [sp, #32]
  407d0a:	9a01      	ldr	r2, [sp, #4]
  407d0c:	1a9d      	subs	r5, r3, r2
  407d0e:	2d00      	cmp	r5, #0
  407d10:	f340 8211 	ble.w	408136 <_vfiprintf_r+0x6fe>
  407d14:	2d10      	cmp	r5, #16
  407d16:	f340 8490 	ble.w	40863a <_vfiprintf_r+0xc02>
  407d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  407d1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407d1e:	4ec4      	ldr	r6, [pc, #784]	; (408030 <_vfiprintf_r+0x5f8>)
  407d20:	46d6      	mov	lr, sl
  407d22:	2710      	movs	r7, #16
  407d24:	46a2      	mov	sl, r4
  407d26:	4619      	mov	r1, r3
  407d28:	9c06      	ldr	r4, [sp, #24]
  407d2a:	e007      	b.n	407d3c <_vfiprintf_r+0x304>
  407d2c:	f101 0c02 	add.w	ip, r1, #2
  407d30:	f10e 0e08 	add.w	lr, lr, #8
  407d34:	4601      	mov	r1, r0
  407d36:	3d10      	subs	r5, #16
  407d38:	2d10      	cmp	r5, #16
  407d3a:	dd11      	ble.n	407d60 <_vfiprintf_r+0x328>
  407d3c:	1c48      	adds	r0, r1, #1
  407d3e:	3210      	adds	r2, #16
  407d40:	2807      	cmp	r0, #7
  407d42:	9211      	str	r2, [sp, #68]	; 0x44
  407d44:	e88e 00c0 	stmia.w	lr, {r6, r7}
  407d48:	9010      	str	r0, [sp, #64]	; 0x40
  407d4a:	ddef      	ble.n	407d2c <_vfiprintf_r+0x2f4>
  407d4c:	2a00      	cmp	r2, #0
  407d4e:	f040 81e4 	bne.w	40811a <_vfiprintf_r+0x6e2>
  407d52:	3d10      	subs	r5, #16
  407d54:	2d10      	cmp	r5, #16
  407d56:	4611      	mov	r1, r2
  407d58:	f04f 0c01 	mov.w	ip, #1
  407d5c:	46ce      	mov	lr, r9
  407d5e:	dced      	bgt.n	407d3c <_vfiprintf_r+0x304>
  407d60:	4654      	mov	r4, sl
  407d62:	4661      	mov	r1, ip
  407d64:	46f2      	mov	sl, lr
  407d66:	442a      	add	r2, r5
  407d68:	2907      	cmp	r1, #7
  407d6a:	9211      	str	r2, [sp, #68]	; 0x44
  407d6c:	f8ca 6000 	str.w	r6, [sl]
  407d70:	f8ca 5004 	str.w	r5, [sl, #4]
  407d74:	9110      	str	r1, [sp, #64]	; 0x40
  407d76:	f300 82ec 	bgt.w	408352 <_vfiprintf_r+0x91a>
  407d7a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407d7e:	f10a 0a08 	add.w	sl, sl, #8
  407d82:	1c48      	adds	r0, r1, #1
  407d84:	2d00      	cmp	r5, #0
  407d86:	f040 81de 	bne.w	408146 <_vfiprintf_r+0x70e>
  407d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407d8c:	2b00      	cmp	r3, #0
  407d8e:	f000 81f8 	beq.w	408182 <_vfiprintf_r+0x74a>
  407d92:	3202      	adds	r2, #2
  407d94:	a90e      	add	r1, sp, #56	; 0x38
  407d96:	2302      	movs	r3, #2
  407d98:	2807      	cmp	r0, #7
  407d9a:	9211      	str	r2, [sp, #68]	; 0x44
  407d9c:	9010      	str	r0, [sp, #64]	; 0x40
  407d9e:	e88a 000a 	stmia.w	sl, {r1, r3}
  407da2:	f340 81ea 	ble.w	40817a <_vfiprintf_r+0x742>
  407da6:	2a00      	cmp	r2, #0
  407da8:	f040 838c 	bne.w	4084c4 <_vfiprintf_r+0xa8c>
  407dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407dae:	2b80      	cmp	r3, #128	; 0x80
  407db0:	f04f 0001 	mov.w	r0, #1
  407db4:	4611      	mov	r1, r2
  407db6:	46ca      	mov	sl, r9
  407db8:	f040 81e7 	bne.w	40818a <_vfiprintf_r+0x752>
  407dbc:	9b08      	ldr	r3, [sp, #32]
  407dbe:	9d01      	ldr	r5, [sp, #4]
  407dc0:	1b5e      	subs	r6, r3, r5
  407dc2:	2e00      	cmp	r6, #0
  407dc4:	f340 81e1 	ble.w	40818a <_vfiprintf_r+0x752>
  407dc8:	2e10      	cmp	r6, #16
  407dca:	4d9a      	ldr	r5, [pc, #616]	; (408034 <_vfiprintf_r+0x5fc>)
  407dcc:	f340 8450 	ble.w	408670 <_vfiprintf_r+0xc38>
  407dd0:	46d4      	mov	ip, sl
  407dd2:	2710      	movs	r7, #16
  407dd4:	46a2      	mov	sl, r4
  407dd6:	9c06      	ldr	r4, [sp, #24]
  407dd8:	e007      	b.n	407dea <_vfiprintf_r+0x3b2>
  407dda:	f101 0e02 	add.w	lr, r1, #2
  407dde:	f10c 0c08 	add.w	ip, ip, #8
  407de2:	4601      	mov	r1, r0
  407de4:	3e10      	subs	r6, #16
  407de6:	2e10      	cmp	r6, #16
  407de8:	dd11      	ble.n	407e0e <_vfiprintf_r+0x3d6>
  407dea:	1c48      	adds	r0, r1, #1
  407dec:	3210      	adds	r2, #16
  407dee:	2807      	cmp	r0, #7
  407df0:	9211      	str	r2, [sp, #68]	; 0x44
  407df2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  407df6:	9010      	str	r0, [sp, #64]	; 0x40
  407df8:	ddef      	ble.n	407dda <_vfiprintf_r+0x3a2>
  407dfa:	2a00      	cmp	r2, #0
  407dfc:	f040 829d 	bne.w	40833a <_vfiprintf_r+0x902>
  407e00:	3e10      	subs	r6, #16
  407e02:	2e10      	cmp	r6, #16
  407e04:	f04f 0e01 	mov.w	lr, #1
  407e08:	4611      	mov	r1, r2
  407e0a:	46cc      	mov	ip, r9
  407e0c:	dced      	bgt.n	407dea <_vfiprintf_r+0x3b2>
  407e0e:	4654      	mov	r4, sl
  407e10:	46e2      	mov	sl, ip
  407e12:	4432      	add	r2, r6
  407e14:	f1be 0f07 	cmp.w	lr, #7
  407e18:	9211      	str	r2, [sp, #68]	; 0x44
  407e1a:	e88a 0060 	stmia.w	sl, {r5, r6}
  407e1e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  407e22:	f300 8369 	bgt.w	4084f8 <_vfiprintf_r+0xac0>
  407e26:	f10a 0a08 	add.w	sl, sl, #8
  407e2a:	f10e 0001 	add.w	r0, lr, #1
  407e2e:	4671      	mov	r1, lr
  407e30:	e1ab      	b.n	40818a <_vfiprintf_r+0x752>
  407e32:	9608      	str	r6, [sp, #32]
  407e34:	f013 0220 	ands.w	r2, r3, #32
  407e38:	f040 838c 	bne.w	408554 <_vfiprintf_r+0xb1c>
  407e3c:	f013 0110 	ands.w	r1, r3, #16
  407e40:	f040 831a 	bne.w	408478 <_vfiprintf_r+0xa40>
  407e44:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  407e48:	f000 8316 	beq.w	408478 <_vfiprintf_r+0xa40>
  407e4c:	9807      	ldr	r0, [sp, #28]
  407e4e:	460a      	mov	r2, r1
  407e50:	4601      	mov	r1, r0
  407e52:	3104      	adds	r1, #4
  407e54:	8806      	ldrh	r6, [r0, #0]
  407e56:	9107      	str	r1, [sp, #28]
  407e58:	2700      	movs	r7, #0
  407e5a:	e720      	b.n	407c9e <_vfiprintf_r+0x266>
  407e5c:	9608      	str	r6, [sp, #32]
  407e5e:	f043 0310 	orr.w	r3, r3, #16
  407e62:	e7e7      	b.n	407e34 <_vfiprintf_r+0x3fc>
  407e64:	9608      	str	r6, [sp, #32]
  407e66:	f043 0310 	orr.w	r3, r3, #16
  407e6a:	e708      	b.n	407c7e <_vfiprintf_r+0x246>
  407e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407e70:	f898 2000 	ldrb.w	r2, [r8]
  407e74:	e652      	b.n	407b1c <_vfiprintf_r+0xe4>
  407e76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407e7a:	2600      	movs	r6, #0
  407e7c:	f818 2b01 	ldrb.w	r2, [r8], #1
  407e80:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  407e84:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  407e88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  407e8c:	2909      	cmp	r1, #9
  407e8e:	d9f5      	bls.n	407e7c <_vfiprintf_r+0x444>
  407e90:	e646      	b.n	407b20 <_vfiprintf_r+0xe8>
  407e92:	9608      	str	r6, [sp, #32]
  407e94:	2800      	cmp	r0, #0
  407e96:	f040 8408 	bne.w	4086aa <_vfiprintf_r+0xc72>
  407e9a:	f043 0310 	orr.w	r3, r3, #16
  407e9e:	069e      	lsls	r6, r3, #26
  407ea0:	f100 834c 	bmi.w	40853c <_vfiprintf_r+0xb04>
  407ea4:	06dd      	lsls	r5, r3, #27
  407ea6:	f100 82f3 	bmi.w	408490 <_vfiprintf_r+0xa58>
  407eaa:	0658      	lsls	r0, r3, #25
  407eac:	f140 82f0 	bpl.w	408490 <_vfiprintf_r+0xa58>
  407eb0:	9d07      	ldr	r5, [sp, #28]
  407eb2:	f9b5 6000 	ldrsh.w	r6, [r5]
  407eb6:	462a      	mov	r2, r5
  407eb8:	17f7      	asrs	r7, r6, #31
  407eba:	3204      	adds	r2, #4
  407ebc:	4630      	mov	r0, r6
  407ebe:	4639      	mov	r1, r7
  407ec0:	9207      	str	r2, [sp, #28]
  407ec2:	2800      	cmp	r0, #0
  407ec4:	f171 0200 	sbcs.w	r2, r1, #0
  407ec8:	f2c0 835d 	blt.w	408586 <_vfiprintf_r+0xb4e>
  407ecc:	1c61      	adds	r1, r4, #1
  407ece:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  407ed2:	f04f 0201 	mov.w	r2, #1
  407ed6:	f47f aeea 	bne.w	407cae <_vfiprintf_r+0x276>
  407eda:	ea56 0107 	orrs.w	r1, r6, r7
  407ede:	f000 824d 	beq.w	40837c <_vfiprintf_r+0x944>
  407ee2:	9302      	str	r3, [sp, #8]
  407ee4:	2a01      	cmp	r2, #1
  407ee6:	f000 828c 	beq.w	408402 <_vfiprintf_r+0x9ca>
  407eea:	2a02      	cmp	r2, #2
  407eec:	f040 825c 	bne.w	4083a8 <_vfiprintf_r+0x970>
  407ef0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407ef2:	46cb      	mov	fp, r9
  407ef4:	0933      	lsrs	r3, r6, #4
  407ef6:	f006 010f 	and.w	r1, r6, #15
  407efa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  407efe:	093a      	lsrs	r2, r7, #4
  407f00:	461e      	mov	r6, r3
  407f02:	4617      	mov	r7, r2
  407f04:	5c43      	ldrb	r3, [r0, r1]
  407f06:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  407f0a:	ea56 0307 	orrs.w	r3, r6, r7
  407f0e:	d1f1      	bne.n	407ef4 <_vfiprintf_r+0x4bc>
  407f10:	eba9 030b 	sub.w	r3, r9, fp
  407f14:	9305      	str	r3, [sp, #20]
  407f16:	e6e1      	b.n	407cdc <_vfiprintf_r+0x2a4>
  407f18:	2800      	cmp	r0, #0
  407f1a:	f040 83c0 	bne.w	40869e <_vfiprintf_r+0xc66>
  407f1e:	0699      	lsls	r1, r3, #26
  407f20:	f100 8367 	bmi.w	4085f2 <_vfiprintf_r+0xbba>
  407f24:	06da      	lsls	r2, r3, #27
  407f26:	f100 80f1 	bmi.w	40810c <_vfiprintf_r+0x6d4>
  407f2a:	065b      	lsls	r3, r3, #25
  407f2c:	f140 80ee 	bpl.w	40810c <_vfiprintf_r+0x6d4>
  407f30:	9a07      	ldr	r2, [sp, #28]
  407f32:	6813      	ldr	r3, [r2, #0]
  407f34:	3204      	adds	r2, #4
  407f36:	9207      	str	r2, [sp, #28]
  407f38:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  407f3c:	801a      	strh	r2, [r3, #0]
  407f3e:	e5b8      	b.n	407ab2 <_vfiprintf_r+0x7a>
  407f40:	9807      	ldr	r0, [sp, #28]
  407f42:	4a3d      	ldr	r2, [pc, #244]	; (408038 <_vfiprintf_r+0x600>)
  407f44:	9608      	str	r6, [sp, #32]
  407f46:	920b      	str	r2, [sp, #44]	; 0x2c
  407f48:	6806      	ldr	r6, [r0, #0]
  407f4a:	2278      	movs	r2, #120	; 0x78
  407f4c:	2130      	movs	r1, #48	; 0x30
  407f4e:	3004      	adds	r0, #4
  407f50:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407f54:	f043 0302 	orr.w	r3, r3, #2
  407f58:	9007      	str	r0, [sp, #28]
  407f5a:	2700      	movs	r7, #0
  407f5c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407f60:	2202      	movs	r2, #2
  407f62:	e69c      	b.n	407c9e <_vfiprintf_r+0x266>
  407f64:	9608      	str	r6, [sp, #32]
  407f66:	2800      	cmp	r0, #0
  407f68:	d099      	beq.n	407e9e <_vfiprintf_r+0x466>
  407f6a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407f6e:	e796      	b.n	407e9e <_vfiprintf_r+0x466>
  407f70:	f898 2000 	ldrb.w	r2, [r8]
  407f74:	2d00      	cmp	r5, #0
  407f76:	f47f add1 	bne.w	407b1c <_vfiprintf_r+0xe4>
  407f7a:	2001      	movs	r0, #1
  407f7c:	2520      	movs	r5, #32
  407f7e:	e5cd      	b.n	407b1c <_vfiprintf_r+0xe4>
  407f80:	f043 0301 	orr.w	r3, r3, #1
  407f84:	f898 2000 	ldrb.w	r2, [r8]
  407f88:	e5c8      	b.n	407b1c <_vfiprintf_r+0xe4>
  407f8a:	9608      	str	r6, [sp, #32]
  407f8c:	2800      	cmp	r0, #0
  407f8e:	f040 8393 	bne.w	4086b8 <_vfiprintf_r+0xc80>
  407f92:	4929      	ldr	r1, [pc, #164]	; (408038 <_vfiprintf_r+0x600>)
  407f94:	910b      	str	r1, [sp, #44]	; 0x2c
  407f96:	069f      	lsls	r7, r3, #26
  407f98:	f100 82e8 	bmi.w	40856c <_vfiprintf_r+0xb34>
  407f9c:	9807      	ldr	r0, [sp, #28]
  407f9e:	06de      	lsls	r6, r3, #27
  407fa0:	4601      	mov	r1, r0
  407fa2:	f100 8270 	bmi.w	408486 <_vfiprintf_r+0xa4e>
  407fa6:	065d      	lsls	r5, r3, #25
  407fa8:	f140 826d 	bpl.w	408486 <_vfiprintf_r+0xa4e>
  407fac:	3104      	adds	r1, #4
  407fae:	8806      	ldrh	r6, [r0, #0]
  407fb0:	9107      	str	r1, [sp, #28]
  407fb2:	2700      	movs	r7, #0
  407fb4:	07d8      	lsls	r0, r3, #31
  407fb6:	f140 8222 	bpl.w	4083fe <_vfiprintf_r+0x9c6>
  407fba:	ea56 0107 	orrs.w	r1, r6, r7
  407fbe:	f000 821e 	beq.w	4083fe <_vfiprintf_r+0x9c6>
  407fc2:	2130      	movs	r1, #48	; 0x30
  407fc4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  407fc8:	f043 0302 	orr.w	r3, r3, #2
  407fcc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  407fd0:	2202      	movs	r2, #2
  407fd2:	e664      	b.n	407c9e <_vfiprintf_r+0x266>
  407fd4:	9608      	str	r6, [sp, #32]
  407fd6:	2800      	cmp	r0, #0
  407fd8:	f040 836b 	bne.w	4086b2 <_vfiprintf_r+0xc7a>
  407fdc:	4917      	ldr	r1, [pc, #92]	; (40803c <_vfiprintf_r+0x604>)
  407fde:	910b      	str	r1, [sp, #44]	; 0x2c
  407fe0:	e7d9      	b.n	407f96 <_vfiprintf_r+0x55e>
  407fe2:	9907      	ldr	r1, [sp, #28]
  407fe4:	9608      	str	r6, [sp, #32]
  407fe6:	680a      	ldr	r2, [r1, #0]
  407fe8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  407fec:	f04f 0000 	mov.w	r0, #0
  407ff0:	460a      	mov	r2, r1
  407ff2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  407ff6:	3204      	adds	r2, #4
  407ff8:	2001      	movs	r0, #1
  407ffa:	9001      	str	r0, [sp, #4]
  407ffc:	9207      	str	r2, [sp, #28]
  407ffe:	9005      	str	r0, [sp, #20]
  408000:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  408004:	9302      	str	r3, [sp, #8]
  408006:	2400      	movs	r4, #0
  408008:	e670      	b.n	407cec <_vfiprintf_r+0x2b4>
  40800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40800e:	f898 2000 	ldrb.w	r2, [r8]
  408012:	e583      	b.n	407b1c <_vfiprintf_r+0xe4>
  408014:	f898 2000 	ldrb.w	r2, [r8]
  408018:	2a6c      	cmp	r2, #108	; 0x6c
  40801a:	bf03      	ittte	eq
  40801c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  408020:	f043 0320 	orreq.w	r3, r3, #32
  408024:	f108 0801 	addeq.w	r8, r8, #1
  408028:	f043 0310 	orrne.w	r3, r3, #16
  40802c:	e576      	b.n	407b1c <_vfiprintf_r+0xe4>
  40802e:	bf00      	nop
  408030:	0040d47c 	.word	0x0040d47c
  408034:	0040d48c 	.word	0x0040d48c
  408038:	0040d43c 	.word	0x0040d43c
  40803c:	0040d428 	.word	0x0040d428
  408040:	9907      	ldr	r1, [sp, #28]
  408042:	680e      	ldr	r6, [r1, #0]
  408044:	460a      	mov	r2, r1
  408046:	2e00      	cmp	r6, #0
  408048:	f102 0204 	add.w	r2, r2, #4
  40804c:	f6ff ae0f 	blt.w	407c6e <_vfiprintf_r+0x236>
  408050:	9207      	str	r2, [sp, #28]
  408052:	f898 2000 	ldrb.w	r2, [r8]
  408056:	e561      	b.n	407b1c <_vfiprintf_r+0xe4>
  408058:	f898 2000 	ldrb.w	r2, [r8]
  40805c:	2001      	movs	r0, #1
  40805e:	252b      	movs	r5, #43	; 0x2b
  408060:	e55c      	b.n	407b1c <_vfiprintf_r+0xe4>
  408062:	9907      	ldr	r1, [sp, #28]
  408064:	9608      	str	r6, [sp, #32]
  408066:	f8d1 b000 	ldr.w	fp, [r1]
  40806a:	f04f 0200 	mov.w	r2, #0
  40806e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408072:	1d0e      	adds	r6, r1, #4
  408074:	f1bb 0f00 	cmp.w	fp, #0
  408078:	f000 82e5 	beq.w	408646 <_vfiprintf_r+0xc0e>
  40807c:	1c67      	adds	r7, r4, #1
  40807e:	f000 82c4 	beq.w	40860a <_vfiprintf_r+0xbd2>
  408082:	4622      	mov	r2, r4
  408084:	2100      	movs	r1, #0
  408086:	4658      	mov	r0, fp
  408088:	9301      	str	r3, [sp, #4]
  40808a:	f002 fba9 	bl	40a7e0 <memchr>
  40808e:	9b01      	ldr	r3, [sp, #4]
  408090:	2800      	cmp	r0, #0
  408092:	f000 82e5 	beq.w	408660 <_vfiprintf_r+0xc28>
  408096:	eba0 020b 	sub.w	r2, r0, fp
  40809a:	9205      	str	r2, [sp, #20]
  40809c:	9607      	str	r6, [sp, #28]
  40809e:	9302      	str	r3, [sp, #8]
  4080a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4080a4:	2400      	movs	r4, #0
  4080a6:	e619      	b.n	407cdc <_vfiprintf_r+0x2a4>
  4080a8:	f898 2000 	ldrb.w	r2, [r8]
  4080ac:	2a2a      	cmp	r2, #42	; 0x2a
  4080ae:	f108 0701 	add.w	r7, r8, #1
  4080b2:	f000 82e9 	beq.w	408688 <_vfiprintf_r+0xc50>
  4080b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4080ba:	2909      	cmp	r1, #9
  4080bc:	46b8      	mov	r8, r7
  4080be:	f04f 0400 	mov.w	r4, #0
  4080c2:	f63f ad2d 	bhi.w	407b20 <_vfiprintf_r+0xe8>
  4080c6:	f818 2b01 	ldrb.w	r2, [r8], #1
  4080ca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4080ce:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4080d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4080d6:	2909      	cmp	r1, #9
  4080d8:	d9f5      	bls.n	4080c6 <_vfiprintf_r+0x68e>
  4080da:	e521      	b.n	407b20 <_vfiprintf_r+0xe8>
  4080dc:	f043 0320 	orr.w	r3, r3, #32
  4080e0:	f898 2000 	ldrb.w	r2, [r8]
  4080e4:	e51a      	b.n	407b1c <_vfiprintf_r+0xe4>
  4080e6:	9608      	str	r6, [sp, #32]
  4080e8:	2800      	cmp	r0, #0
  4080ea:	f040 82db 	bne.w	4086a4 <_vfiprintf_r+0xc6c>
  4080ee:	2a00      	cmp	r2, #0
  4080f0:	f000 80e7 	beq.w	4082c2 <_vfiprintf_r+0x88a>
  4080f4:	2101      	movs	r1, #1
  4080f6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4080fa:	f04f 0200 	mov.w	r2, #0
  4080fe:	9101      	str	r1, [sp, #4]
  408100:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  408104:	9105      	str	r1, [sp, #20]
  408106:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40810a:	e77b      	b.n	408004 <_vfiprintf_r+0x5cc>
  40810c:	9a07      	ldr	r2, [sp, #28]
  40810e:	6813      	ldr	r3, [r2, #0]
  408110:	3204      	adds	r2, #4
  408112:	9207      	str	r2, [sp, #28]
  408114:	9a03      	ldr	r2, [sp, #12]
  408116:	601a      	str	r2, [r3, #0]
  408118:	e4cb      	b.n	407ab2 <_vfiprintf_r+0x7a>
  40811a:	aa0f      	add	r2, sp, #60	; 0x3c
  40811c:	9904      	ldr	r1, [sp, #16]
  40811e:	4620      	mov	r0, r4
  408120:	f7ff fc4a 	bl	4079b8 <__sprint_r.part.0>
  408124:	2800      	cmp	r0, #0
  408126:	f040 8139 	bne.w	40839c <_vfiprintf_r+0x964>
  40812a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40812c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40812e:	f101 0c01 	add.w	ip, r1, #1
  408132:	46ce      	mov	lr, r9
  408134:	e5ff      	b.n	407d36 <_vfiprintf_r+0x2fe>
  408136:	9910      	ldr	r1, [sp, #64]	; 0x40
  408138:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40813a:	1c48      	adds	r0, r1, #1
  40813c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408140:	2d00      	cmp	r5, #0
  408142:	f43f ae22 	beq.w	407d8a <_vfiprintf_r+0x352>
  408146:	3201      	adds	r2, #1
  408148:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40814c:	2101      	movs	r1, #1
  40814e:	2807      	cmp	r0, #7
  408150:	9211      	str	r2, [sp, #68]	; 0x44
  408152:	9010      	str	r0, [sp, #64]	; 0x40
  408154:	f8ca 5000 	str.w	r5, [sl]
  408158:	f8ca 1004 	str.w	r1, [sl, #4]
  40815c:	f340 8108 	ble.w	408370 <_vfiprintf_r+0x938>
  408160:	2a00      	cmp	r2, #0
  408162:	f040 81bc 	bne.w	4084de <_vfiprintf_r+0xaa6>
  408166:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408168:	2b00      	cmp	r3, #0
  40816a:	f43f ae1f 	beq.w	407dac <_vfiprintf_r+0x374>
  40816e:	ab0e      	add	r3, sp, #56	; 0x38
  408170:	2202      	movs	r2, #2
  408172:	4608      	mov	r0, r1
  408174:	931c      	str	r3, [sp, #112]	; 0x70
  408176:	921d      	str	r2, [sp, #116]	; 0x74
  408178:	46ca      	mov	sl, r9
  40817a:	4601      	mov	r1, r0
  40817c:	f10a 0a08 	add.w	sl, sl, #8
  408180:	3001      	adds	r0, #1
  408182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408184:	2b80      	cmp	r3, #128	; 0x80
  408186:	f43f ae19 	beq.w	407dbc <_vfiprintf_r+0x384>
  40818a:	9b05      	ldr	r3, [sp, #20]
  40818c:	1ae4      	subs	r4, r4, r3
  40818e:	2c00      	cmp	r4, #0
  408190:	dd2e      	ble.n	4081f0 <_vfiprintf_r+0x7b8>
  408192:	2c10      	cmp	r4, #16
  408194:	4db3      	ldr	r5, [pc, #716]	; (408464 <_vfiprintf_r+0xa2c>)
  408196:	dd1e      	ble.n	4081d6 <_vfiprintf_r+0x79e>
  408198:	46d6      	mov	lr, sl
  40819a:	2610      	movs	r6, #16
  40819c:	9f06      	ldr	r7, [sp, #24]
  40819e:	f8dd a010 	ldr.w	sl, [sp, #16]
  4081a2:	e006      	b.n	4081b2 <_vfiprintf_r+0x77a>
  4081a4:	1c88      	adds	r0, r1, #2
  4081a6:	f10e 0e08 	add.w	lr, lr, #8
  4081aa:	4619      	mov	r1, r3
  4081ac:	3c10      	subs	r4, #16
  4081ae:	2c10      	cmp	r4, #16
  4081b0:	dd10      	ble.n	4081d4 <_vfiprintf_r+0x79c>
  4081b2:	1c4b      	adds	r3, r1, #1
  4081b4:	3210      	adds	r2, #16
  4081b6:	2b07      	cmp	r3, #7
  4081b8:	9211      	str	r2, [sp, #68]	; 0x44
  4081ba:	e88e 0060 	stmia.w	lr, {r5, r6}
  4081be:	9310      	str	r3, [sp, #64]	; 0x40
  4081c0:	ddf0      	ble.n	4081a4 <_vfiprintf_r+0x76c>
  4081c2:	2a00      	cmp	r2, #0
  4081c4:	d165      	bne.n	408292 <_vfiprintf_r+0x85a>
  4081c6:	3c10      	subs	r4, #16
  4081c8:	2c10      	cmp	r4, #16
  4081ca:	f04f 0001 	mov.w	r0, #1
  4081ce:	4611      	mov	r1, r2
  4081d0:	46ce      	mov	lr, r9
  4081d2:	dcee      	bgt.n	4081b2 <_vfiprintf_r+0x77a>
  4081d4:	46f2      	mov	sl, lr
  4081d6:	4422      	add	r2, r4
  4081d8:	2807      	cmp	r0, #7
  4081da:	9211      	str	r2, [sp, #68]	; 0x44
  4081dc:	f8ca 5000 	str.w	r5, [sl]
  4081e0:	f8ca 4004 	str.w	r4, [sl, #4]
  4081e4:	9010      	str	r0, [sp, #64]	; 0x40
  4081e6:	f300 8085 	bgt.w	4082f4 <_vfiprintf_r+0x8bc>
  4081ea:	f10a 0a08 	add.w	sl, sl, #8
  4081ee:	3001      	adds	r0, #1
  4081f0:	9905      	ldr	r1, [sp, #20]
  4081f2:	f8ca b000 	str.w	fp, [sl]
  4081f6:	440a      	add	r2, r1
  4081f8:	2807      	cmp	r0, #7
  4081fa:	9211      	str	r2, [sp, #68]	; 0x44
  4081fc:	f8ca 1004 	str.w	r1, [sl, #4]
  408200:	9010      	str	r0, [sp, #64]	; 0x40
  408202:	f340 8082 	ble.w	40830a <_vfiprintf_r+0x8d2>
  408206:	2a00      	cmp	r2, #0
  408208:	f040 8118 	bne.w	40843c <_vfiprintf_r+0xa04>
  40820c:	9b02      	ldr	r3, [sp, #8]
  40820e:	9210      	str	r2, [sp, #64]	; 0x40
  408210:	0758      	lsls	r0, r3, #29
  408212:	d535      	bpl.n	408280 <_vfiprintf_r+0x848>
  408214:	9b08      	ldr	r3, [sp, #32]
  408216:	9901      	ldr	r1, [sp, #4]
  408218:	1a5c      	subs	r4, r3, r1
  40821a:	2c00      	cmp	r4, #0
  40821c:	f340 80e7 	ble.w	4083ee <_vfiprintf_r+0x9b6>
  408220:	46ca      	mov	sl, r9
  408222:	2c10      	cmp	r4, #16
  408224:	f340 8218 	ble.w	408658 <_vfiprintf_r+0xc20>
  408228:	9910      	ldr	r1, [sp, #64]	; 0x40
  40822a:	4e8f      	ldr	r6, [pc, #572]	; (408468 <_vfiprintf_r+0xa30>)
  40822c:	9f06      	ldr	r7, [sp, #24]
  40822e:	f8dd b010 	ldr.w	fp, [sp, #16]
  408232:	2510      	movs	r5, #16
  408234:	e006      	b.n	408244 <_vfiprintf_r+0x80c>
  408236:	1c88      	adds	r0, r1, #2
  408238:	f10a 0a08 	add.w	sl, sl, #8
  40823c:	4619      	mov	r1, r3
  40823e:	3c10      	subs	r4, #16
  408240:	2c10      	cmp	r4, #16
  408242:	dd11      	ble.n	408268 <_vfiprintf_r+0x830>
  408244:	1c4b      	adds	r3, r1, #1
  408246:	3210      	adds	r2, #16
  408248:	2b07      	cmp	r3, #7
  40824a:	9211      	str	r2, [sp, #68]	; 0x44
  40824c:	f8ca 6000 	str.w	r6, [sl]
  408250:	f8ca 5004 	str.w	r5, [sl, #4]
  408254:	9310      	str	r3, [sp, #64]	; 0x40
  408256:	ddee      	ble.n	408236 <_vfiprintf_r+0x7fe>
  408258:	bb42      	cbnz	r2, 4082ac <_vfiprintf_r+0x874>
  40825a:	3c10      	subs	r4, #16
  40825c:	2c10      	cmp	r4, #16
  40825e:	f04f 0001 	mov.w	r0, #1
  408262:	4611      	mov	r1, r2
  408264:	46ca      	mov	sl, r9
  408266:	dced      	bgt.n	408244 <_vfiprintf_r+0x80c>
  408268:	4422      	add	r2, r4
  40826a:	2807      	cmp	r0, #7
  40826c:	9211      	str	r2, [sp, #68]	; 0x44
  40826e:	f8ca 6000 	str.w	r6, [sl]
  408272:	f8ca 4004 	str.w	r4, [sl, #4]
  408276:	9010      	str	r0, [sp, #64]	; 0x40
  408278:	dd51      	ble.n	40831e <_vfiprintf_r+0x8e6>
  40827a:	2a00      	cmp	r2, #0
  40827c:	f040 819b 	bne.w	4085b6 <_vfiprintf_r+0xb7e>
  408280:	9b03      	ldr	r3, [sp, #12]
  408282:	9a08      	ldr	r2, [sp, #32]
  408284:	9901      	ldr	r1, [sp, #4]
  408286:	428a      	cmp	r2, r1
  408288:	bfac      	ite	ge
  40828a:	189b      	addge	r3, r3, r2
  40828c:	185b      	addlt	r3, r3, r1
  40828e:	9303      	str	r3, [sp, #12]
  408290:	e04e      	b.n	408330 <_vfiprintf_r+0x8f8>
  408292:	aa0f      	add	r2, sp, #60	; 0x3c
  408294:	4651      	mov	r1, sl
  408296:	4638      	mov	r0, r7
  408298:	f7ff fb8e 	bl	4079b8 <__sprint_r.part.0>
  40829c:	2800      	cmp	r0, #0
  40829e:	f040 813f 	bne.w	408520 <_vfiprintf_r+0xae8>
  4082a2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4082a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4082a6:	1c48      	adds	r0, r1, #1
  4082a8:	46ce      	mov	lr, r9
  4082aa:	e77f      	b.n	4081ac <_vfiprintf_r+0x774>
  4082ac:	aa0f      	add	r2, sp, #60	; 0x3c
  4082ae:	4659      	mov	r1, fp
  4082b0:	4638      	mov	r0, r7
  4082b2:	f7ff fb81 	bl	4079b8 <__sprint_r.part.0>
  4082b6:	b960      	cbnz	r0, 4082d2 <_vfiprintf_r+0x89a>
  4082b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4082ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4082bc:	1c48      	adds	r0, r1, #1
  4082be:	46ca      	mov	sl, r9
  4082c0:	e7bd      	b.n	40823e <_vfiprintf_r+0x806>
  4082c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4082c4:	f8dd b010 	ldr.w	fp, [sp, #16]
  4082c8:	2b00      	cmp	r3, #0
  4082ca:	f040 81d4 	bne.w	408676 <_vfiprintf_r+0xc3e>
  4082ce:	2300      	movs	r3, #0
  4082d0:	9310      	str	r3, [sp, #64]	; 0x40
  4082d2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4082d6:	f013 0f01 	tst.w	r3, #1
  4082da:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4082de:	d102      	bne.n	4082e6 <_vfiprintf_r+0x8ae>
  4082e0:	059a      	lsls	r2, r3, #22
  4082e2:	f140 80de 	bpl.w	4084a2 <_vfiprintf_r+0xa6a>
  4082e6:	065b      	lsls	r3, r3, #25
  4082e8:	f53f acb2 	bmi.w	407c50 <_vfiprintf_r+0x218>
  4082ec:	9803      	ldr	r0, [sp, #12]
  4082ee:	b02d      	add	sp, #180	; 0xb4
  4082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4082f4:	2a00      	cmp	r2, #0
  4082f6:	f040 8106 	bne.w	408506 <_vfiprintf_r+0xace>
  4082fa:	9a05      	ldr	r2, [sp, #20]
  4082fc:	921d      	str	r2, [sp, #116]	; 0x74
  4082fe:	2301      	movs	r3, #1
  408300:	9211      	str	r2, [sp, #68]	; 0x44
  408302:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  408306:	9310      	str	r3, [sp, #64]	; 0x40
  408308:	46ca      	mov	sl, r9
  40830a:	f10a 0a08 	add.w	sl, sl, #8
  40830e:	9b02      	ldr	r3, [sp, #8]
  408310:	0759      	lsls	r1, r3, #29
  408312:	d504      	bpl.n	40831e <_vfiprintf_r+0x8e6>
  408314:	9b08      	ldr	r3, [sp, #32]
  408316:	9901      	ldr	r1, [sp, #4]
  408318:	1a5c      	subs	r4, r3, r1
  40831a:	2c00      	cmp	r4, #0
  40831c:	dc81      	bgt.n	408222 <_vfiprintf_r+0x7ea>
  40831e:	9b03      	ldr	r3, [sp, #12]
  408320:	9908      	ldr	r1, [sp, #32]
  408322:	9801      	ldr	r0, [sp, #4]
  408324:	4281      	cmp	r1, r0
  408326:	bfac      	ite	ge
  408328:	185b      	addge	r3, r3, r1
  40832a:	181b      	addlt	r3, r3, r0
  40832c:	9303      	str	r3, [sp, #12]
  40832e:	bb72      	cbnz	r2, 40838e <_vfiprintf_r+0x956>
  408330:	2300      	movs	r3, #0
  408332:	9310      	str	r3, [sp, #64]	; 0x40
  408334:	46ca      	mov	sl, r9
  408336:	f7ff bbbc 	b.w	407ab2 <_vfiprintf_r+0x7a>
  40833a:	aa0f      	add	r2, sp, #60	; 0x3c
  40833c:	9904      	ldr	r1, [sp, #16]
  40833e:	4620      	mov	r0, r4
  408340:	f7ff fb3a 	bl	4079b8 <__sprint_r.part.0>
  408344:	bb50      	cbnz	r0, 40839c <_vfiprintf_r+0x964>
  408346:	9910      	ldr	r1, [sp, #64]	; 0x40
  408348:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40834a:	f101 0e01 	add.w	lr, r1, #1
  40834e:	46cc      	mov	ip, r9
  408350:	e548      	b.n	407de4 <_vfiprintf_r+0x3ac>
  408352:	2a00      	cmp	r2, #0
  408354:	f040 8140 	bne.w	4085d8 <_vfiprintf_r+0xba0>
  408358:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40835c:	2900      	cmp	r1, #0
  40835e:	f000 811b 	beq.w	408598 <_vfiprintf_r+0xb60>
  408362:	2201      	movs	r2, #1
  408364:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  408368:	4610      	mov	r0, r2
  40836a:	921d      	str	r2, [sp, #116]	; 0x74
  40836c:	911c      	str	r1, [sp, #112]	; 0x70
  40836e:	46ca      	mov	sl, r9
  408370:	4601      	mov	r1, r0
  408372:	f10a 0a08 	add.w	sl, sl, #8
  408376:	3001      	adds	r0, #1
  408378:	e507      	b.n	407d8a <_vfiprintf_r+0x352>
  40837a:	9b02      	ldr	r3, [sp, #8]
  40837c:	2a01      	cmp	r2, #1
  40837e:	f000 8098 	beq.w	4084b2 <_vfiprintf_r+0xa7a>
  408382:	2a02      	cmp	r2, #2
  408384:	d10d      	bne.n	4083a2 <_vfiprintf_r+0x96a>
  408386:	9302      	str	r3, [sp, #8]
  408388:	2600      	movs	r6, #0
  40838a:	2700      	movs	r7, #0
  40838c:	e5b0      	b.n	407ef0 <_vfiprintf_r+0x4b8>
  40838e:	aa0f      	add	r2, sp, #60	; 0x3c
  408390:	9904      	ldr	r1, [sp, #16]
  408392:	9806      	ldr	r0, [sp, #24]
  408394:	f7ff fb10 	bl	4079b8 <__sprint_r.part.0>
  408398:	2800      	cmp	r0, #0
  40839a:	d0c9      	beq.n	408330 <_vfiprintf_r+0x8f8>
  40839c:	f8dd b010 	ldr.w	fp, [sp, #16]
  4083a0:	e797      	b.n	4082d2 <_vfiprintf_r+0x89a>
  4083a2:	9302      	str	r3, [sp, #8]
  4083a4:	2600      	movs	r6, #0
  4083a6:	2700      	movs	r7, #0
  4083a8:	4649      	mov	r1, r9
  4083aa:	e000      	b.n	4083ae <_vfiprintf_r+0x976>
  4083ac:	4659      	mov	r1, fp
  4083ae:	08f2      	lsrs	r2, r6, #3
  4083b0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4083b4:	08f8      	lsrs	r0, r7, #3
  4083b6:	f006 0307 	and.w	r3, r6, #7
  4083ba:	4607      	mov	r7, r0
  4083bc:	4616      	mov	r6, r2
  4083be:	3330      	adds	r3, #48	; 0x30
  4083c0:	ea56 0207 	orrs.w	r2, r6, r7
  4083c4:	f801 3c01 	strb.w	r3, [r1, #-1]
  4083c8:	f101 3bff 	add.w	fp, r1, #4294967295
  4083cc:	d1ee      	bne.n	4083ac <_vfiprintf_r+0x974>
  4083ce:	9a02      	ldr	r2, [sp, #8]
  4083d0:	07d6      	lsls	r6, r2, #31
  4083d2:	f57f ad9d 	bpl.w	407f10 <_vfiprintf_r+0x4d8>
  4083d6:	2b30      	cmp	r3, #48	; 0x30
  4083d8:	f43f ad9a 	beq.w	407f10 <_vfiprintf_r+0x4d8>
  4083dc:	3902      	subs	r1, #2
  4083de:	2330      	movs	r3, #48	; 0x30
  4083e0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4083e4:	eba9 0301 	sub.w	r3, r9, r1
  4083e8:	9305      	str	r3, [sp, #20]
  4083ea:	468b      	mov	fp, r1
  4083ec:	e476      	b.n	407cdc <_vfiprintf_r+0x2a4>
  4083ee:	9b03      	ldr	r3, [sp, #12]
  4083f0:	9a08      	ldr	r2, [sp, #32]
  4083f2:	428a      	cmp	r2, r1
  4083f4:	bfac      	ite	ge
  4083f6:	189b      	addge	r3, r3, r2
  4083f8:	185b      	addlt	r3, r3, r1
  4083fa:	9303      	str	r3, [sp, #12]
  4083fc:	e798      	b.n	408330 <_vfiprintf_r+0x8f8>
  4083fe:	2202      	movs	r2, #2
  408400:	e44d      	b.n	407c9e <_vfiprintf_r+0x266>
  408402:	2f00      	cmp	r7, #0
  408404:	bf08      	it	eq
  408406:	2e0a      	cmpeq	r6, #10
  408408:	d352      	bcc.n	4084b0 <_vfiprintf_r+0xa78>
  40840a:	46cb      	mov	fp, r9
  40840c:	4630      	mov	r0, r6
  40840e:	4639      	mov	r1, r7
  408410:	220a      	movs	r2, #10
  408412:	2300      	movs	r3, #0
  408414:	f003 fea6 	bl	40c164 <__aeabi_uldivmod>
  408418:	3230      	adds	r2, #48	; 0x30
  40841a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40841e:	4630      	mov	r0, r6
  408420:	4639      	mov	r1, r7
  408422:	2300      	movs	r3, #0
  408424:	220a      	movs	r2, #10
  408426:	f003 fe9d 	bl	40c164 <__aeabi_uldivmod>
  40842a:	4606      	mov	r6, r0
  40842c:	460f      	mov	r7, r1
  40842e:	ea56 0307 	orrs.w	r3, r6, r7
  408432:	d1eb      	bne.n	40840c <_vfiprintf_r+0x9d4>
  408434:	e56c      	b.n	407f10 <_vfiprintf_r+0x4d8>
  408436:	9405      	str	r4, [sp, #20]
  408438:	46cb      	mov	fp, r9
  40843a:	e44f      	b.n	407cdc <_vfiprintf_r+0x2a4>
  40843c:	aa0f      	add	r2, sp, #60	; 0x3c
  40843e:	9904      	ldr	r1, [sp, #16]
  408440:	9806      	ldr	r0, [sp, #24]
  408442:	f7ff fab9 	bl	4079b8 <__sprint_r.part.0>
  408446:	2800      	cmp	r0, #0
  408448:	d1a8      	bne.n	40839c <_vfiprintf_r+0x964>
  40844a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40844c:	46ca      	mov	sl, r9
  40844e:	e75e      	b.n	40830e <_vfiprintf_r+0x8d6>
  408450:	aa0f      	add	r2, sp, #60	; 0x3c
  408452:	9904      	ldr	r1, [sp, #16]
  408454:	9806      	ldr	r0, [sp, #24]
  408456:	f7ff faaf 	bl	4079b8 <__sprint_r.part.0>
  40845a:	2800      	cmp	r0, #0
  40845c:	d19e      	bne.n	40839c <_vfiprintf_r+0x964>
  40845e:	46ca      	mov	sl, r9
  408460:	f7ff bbc0 	b.w	407be4 <_vfiprintf_r+0x1ac>
  408464:	0040d48c 	.word	0x0040d48c
  408468:	0040d47c 	.word	0x0040d47c
  40846c:	3104      	adds	r1, #4
  40846e:	6816      	ldr	r6, [r2, #0]
  408470:	9107      	str	r1, [sp, #28]
  408472:	2201      	movs	r2, #1
  408474:	2700      	movs	r7, #0
  408476:	e412      	b.n	407c9e <_vfiprintf_r+0x266>
  408478:	9807      	ldr	r0, [sp, #28]
  40847a:	4601      	mov	r1, r0
  40847c:	3104      	adds	r1, #4
  40847e:	6806      	ldr	r6, [r0, #0]
  408480:	9107      	str	r1, [sp, #28]
  408482:	2700      	movs	r7, #0
  408484:	e40b      	b.n	407c9e <_vfiprintf_r+0x266>
  408486:	680e      	ldr	r6, [r1, #0]
  408488:	3104      	adds	r1, #4
  40848a:	9107      	str	r1, [sp, #28]
  40848c:	2700      	movs	r7, #0
  40848e:	e591      	b.n	407fb4 <_vfiprintf_r+0x57c>
  408490:	9907      	ldr	r1, [sp, #28]
  408492:	680e      	ldr	r6, [r1, #0]
  408494:	460a      	mov	r2, r1
  408496:	17f7      	asrs	r7, r6, #31
  408498:	3204      	adds	r2, #4
  40849a:	9207      	str	r2, [sp, #28]
  40849c:	4630      	mov	r0, r6
  40849e:	4639      	mov	r1, r7
  4084a0:	e50f      	b.n	407ec2 <_vfiprintf_r+0x48a>
  4084a2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4084a6:	f001 fe4d 	bl	40a144 <__retarget_lock_release_recursive>
  4084aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4084ae:	e71a      	b.n	4082e6 <_vfiprintf_r+0x8ae>
  4084b0:	9b02      	ldr	r3, [sp, #8]
  4084b2:	9302      	str	r3, [sp, #8]
  4084b4:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4084b8:	3630      	adds	r6, #48	; 0x30
  4084ba:	2301      	movs	r3, #1
  4084bc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4084c0:	9305      	str	r3, [sp, #20]
  4084c2:	e40b      	b.n	407cdc <_vfiprintf_r+0x2a4>
  4084c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4084c6:	9904      	ldr	r1, [sp, #16]
  4084c8:	9806      	ldr	r0, [sp, #24]
  4084ca:	f7ff fa75 	bl	4079b8 <__sprint_r.part.0>
  4084ce:	2800      	cmp	r0, #0
  4084d0:	f47f af64 	bne.w	40839c <_vfiprintf_r+0x964>
  4084d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4084d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4084d8:	1c48      	adds	r0, r1, #1
  4084da:	46ca      	mov	sl, r9
  4084dc:	e651      	b.n	408182 <_vfiprintf_r+0x74a>
  4084de:	aa0f      	add	r2, sp, #60	; 0x3c
  4084e0:	9904      	ldr	r1, [sp, #16]
  4084e2:	9806      	ldr	r0, [sp, #24]
  4084e4:	f7ff fa68 	bl	4079b8 <__sprint_r.part.0>
  4084e8:	2800      	cmp	r0, #0
  4084ea:	f47f af57 	bne.w	40839c <_vfiprintf_r+0x964>
  4084ee:	9910      	ldr	r1, [sp, #64]	; 0x40
  4084f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4084f2:	1c48      	adds	r0, r1, #1
  4084f4:	46ca      	mov	sl, r9
  4084f6:	e448      	b.n	407d8a <_vfiprintf_r+0x352>
  4084f8:	2a00      	cmp	r2, #0
  4084fa:	f040 8091 	bne.w	408620 <_vfiprintf_r+0xbe8>
  4084fe:	2001      	movs	r0, #1
  408500:	4611      	mov	r1, r2
  408502:	46ca      	mov	sl, r9
  408504:	e641      	b.n	40818a <_vfiprintf_r+0x752>
  408506:	aa0f      	add	r2, sp, #60	; 0x3c
  408508:	9904      	ldr	r1, [sp, #16]
  40850a:	9806      	ldr	r0, [sp, #24]
  40850c:	f7ff fa54 	bl	4079b8 <__sprint_r.part.0>
  408510:	2800      	cmp	r0, #0
  408512:	f47f af43 	bne.w	40839c <_vfiprintf_r+0x964>
  408516:	9810      	ldr	r0, [sp, #64]	; 0x40
  408518:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40851a:	3001      	adds	r0, #1
  40851c:	46ca      	mov	sl, r9
  40851e:	e667      	b.n	4081f0 <_vfiprintf_r+0x7b8>
  408520:	46d3      	mov	fp, sl
  408522:	e6d6      	b.n	4082d2 <_vfiprintf_r+0x89a>
  408524:	9e07      	ldr	r6, [sp, #28]
  408526:	3607      	adds	r6, #7
  408528:	f026 0207 	bic.w	r2, r6, #7
  40852c:	f102 0108 	add.w	r1, r2, #8
  408530:	e9d2 6700 	ldrd	r6, r7, [r2]
  408534:	9107      	str	r1, [sp, #28]
  408536:	2201      	movs	r2, #1
  408538:	f7ff bbb1 	b.w	407c9e <_vfiprintf_r+0x266>
  40853c:	9e07      	ldr	r6, [sp, #28]
  40853e:	3607      	adds	r6, #7
  408540:	f026 0607 	bic.w	r6, r6, #7
  408544:	e9d6 0100 	ldrd	r0, r1, [r6]
  408548:	f106 0208 	add.w	r2, r6, #8
  40854c:	9207      	str	r2, [sp, #28]
  40854e:	4606      	mov	r6, r0
  408550:	460f      	mov	r7, r1
  408552:	e4b6      	b.n	407ec2 <_vfiprintf_r+0x48a>
  408554:	9e07      	ldr	r6, [sp, #28]
  408556:	3607      	adds	r6, #7
  408558:	f026 0207 	bic.w	r2, r6, #7
  40855c:	f102 0108 	add.w	r1, r2, #8
  408560:	e9d2 6700 	ldrd	r6, r7, [r2]
  408564:	9107      	str	r1, [sp, #28]
  408566:	2200      	movs	r2, #0
  408568:	f7ff bb99 	b.w	407c9e <_vfiprintf_r+0x266>
  40856c:	9e07      	ldr	r6, [sp, #28]
  40856e:	3607      	adds	r6, #7
  408570:	f026 0107 	bic.w	r1, r6, #7
  408574:	f101 0008 	add.w	r0, r1, #8
  408578:	9007      	str	r0, [sp, #28]
  40857a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40857e:	e519      	b.n	407fb4 <_vfiprintf_r+0x57c>
  408580:	46cb      	mov	fp, r9
  408582:	f7ff bbab 	b.w	407cdc <_vfiprintf_r+0x2a4>
  408586:	252d      	movs	r5, #45	; 0x2d
  408588:	4276      	negs	r6, r6
  40858a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40858e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  408592:	2201      	movs	r2, #1
  408594:	f7ff bb88 	b.w	407ca8 <_vfiprintf_r+0x270>
  408598:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40859a:	b9b3      	cbnz	r3, 4085ca <_vfiprintf_r+0xb92>
  40859c:	4611      	mov	r1, r2
  40859e:	2001      	movs	r0, #1
  4085a0:	46ca      	mov	sl, r9
  4085a2:	e5f2      	b.n	40818a <_vfiprintf_r+0x752>
  4085a4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4085a8:	f001 fdcc 	bl	40a144 <__retarget_lock_release_recursive>
  4085ac:	f04f 33ff 	mov.w	r3, #4294967295
  4085b0:	9303      	str	r3, [sp, #12]
  4085b2:	f7ff bb50 	b.w	407c56 <_vfiprintf_r+0x21e>
  4085b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4085b8:	9904      	ldr	r1, [sp, #16]
  4085ba:	9806      	ldr	r0, [sp, #24]
  4085bc:	f7ff f9fc 	bl	4079b8 <__sprint_r.part.0>
  4085c0:	2800      	cmp	r0, #0
  4085c2:	f47f aeeb 	bne.w	40839c <_vfiprintf_r+0x964>
  4085c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085c8:	e6a9      	b.n	40831e <_vfiprintf_r+0x8e6>
  4085ca:	ab0e      	add	r3, sp, #56	; 0x38
  4085cc:	2202      	movs	r2, #2
  4085ce:	931c      	str	r3, [sp, #112]	; 0x70
  4085d0:	921d      	str	r2, [sp, #116]	; 0x74
  4085d2:	2001      	movs	r0, #1
  4085d4:	46ca      	mov	sl, r9
  4085d6:	e5d0      	b.n	40817a <_vfiprintf_r+0x742>
  4085d8:	aa0f      	add	r2, sp, #60	; 0x3c
  4085da:	9904      	ldr	r1, [sp, #16]
  4085dc:	9806      	ldr	r0, [sp, #24]
  4085de:	f7ff f9eb 	bl	4079b8 <__sprint_r.part.0>
  4085e2:	2800      	cmp	r0, #0
  4085e4:	f47f aeda 	bne.w	40839c <_vfiprintf_r+0x964>
  4085e8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4085ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4085ec:	1c48      	adds	r0, r1, #1
  4085ee:	46ca      	mov	sl, r9
  4085f0:	e5a4      	b.n	40813c <_vfiprintf_r+0x704>
  4085f2:	9a07      	ldr	r2, [sp, #28]
  4085f4:	9903      	ldr	r1, [sp, #12]
  4085f6:	6813      	ldr	r3, [r2, #0]
  4085f8:	17cd      	asrs	r5, r1, #31
  4085fa:	4608      	mov	r0, r1
  4085fc:	3204      	adds	r2, #4
  4085fe:	4629      	mov	r1, r5
  408600:	9207      	str	r2, [sp, #28]
  408602:	e9c3 0100 	strd	r0, r1, [r3]
  408606:	f7ff ba54 	b.w	407ab2 <_vfiprintf_r+0x7a>
  40860a:	4658      	mov	r0, fp
  40860c:	9607      	str	r6, [sp, #28]
  40860e:	9302      	str	r3, [sp, #8]
  408610:	f7fd ff36 	bl	406480 <strlen>
  408614:	2400      	movs	r4, #0
  408616:	9005      	str	r0, [sp, #20]
  408618:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40861c:	f7ff bb5e 	b.w	407cdc <_vfiprintf_r+0x2a4>
  408620:	aa0f      	add	r2, sp, #60	; 0x3c
  408622:	9904      	ldr	r1, [sp, #16]
  408624:	9806      	ldr	r0, [sp, #24]
  408626:	f7ff f9c7 	bl	4079b8 <__sprint_r.part.0>
  40862a:	2800      	cmp	r0, #0
  40862c:	f47f aeb6 	bne.w	40839c <_vfiprintf_r+0x964>
  408630:	9910      	ldr	r1, [sp, #64]	; 0x40
  408632:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408634:	1c48      	adds	r0, r1, #1
  408636:	46ca      	mov	sl, r9
  408638:	e5a7      	b.n	40818a <_vfiprintf_r+0x752>
  40863a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40863c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40863e:	4e20      	ldr	r6, [pc, #128]	; (4086c0 <_vfiprintf_r+0xc88>)
  408640:	3101      	adds	r1, #1
  408642:	f7ff bb90 	b.w	407d66 <_vfiprintf_r+0x32e>
  408646:	2c06      	cmp	r4, #6
  408648:	bf28      	it	cs
  40864a:	2406      	movcs	r4, #6
  40864c:	9405      	str	r4, [sp, #20]
  40864e:	9607      	str	r6, [sp, #28]
  408650:	9401      	str	r4, [sp, #4]
  408652:	f8df b070 	ldr.w	fp, [pc, #112]	; 4086c4 <_vfiprintf_r+0xc8c>
  408656:	e4d5      	b.n	408004 <_vfiprintf_r+0x5cc>
  408658:	9810      	ldr	r0, [sp, #64]	; 0x40
  40865a:	4e19      	ldr	r6, [pc, #100]	; (4086c0 <_vfiprintf_r+0xc88>)
  40865c:	3001      	adds	r0, #1
  40865e:	e603      	b.n	408268 <_vfiprintf_r+0x830>
  408660:	9405      	str	r4, [sp, #20]
  408662:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  408666:	9607      	str	r6, [sp, #28]
  408668:	9302      	str	r3, [sp, #8]
  40866a:	4604      	mov	r4, r0
  40866c:	f7ff bb36 	b.w	407cdc <_vfiprintf_r+0x2a4>
  408670:	4686      	mov	lr, r0
  408672:	f7ff bbce 	b.w	407e12 <_vfiprintf_r+0x3da>
  408676:	9806      	ldr	r0, [sp, #24]
  408678:	aa0f      	add	r2, sp, #60	; 0x3c
  40867a:	4659      	mov	r1, fp
  40867c:	f7ff f99c 	bl	4079b8 <__sprint_r.part.0>
  408680:	2800      	cmp	r0, #0
  408682:	f43f ae24 	beq.w	4082ce <_vfiprintf_r+0x896>
  408686:	e624      	b.n	4082d2 <_vfiprintf_r+0x89a>
  408688:	9907      	ldr	r1, [sp, #28]
  40868a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40868e:	680c      	ldr	r4, [r1, #0]
  408690:	3104      	adds	r1, #4
  408692:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  408696:	46b8      	mov	r8, r7
  408698:	9107      	str	r1, [sp, #28]
  40869a:	f7ff ba3f 	b.w	407b1c <_vfiprintf_r+0xe4>
  40869e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4086a2:	e43c      	b.n	407f1e <_vfiprintf_r+0x4e6>
  4086a4:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4086a8:	e521      	b.n	4080ee <_vfiprintf_r+0x6b6>
  4086aa:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4086ae:	f7ff bbf4 	b.w	407e9a <_vfiprintf_r+0x462>
  4086b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4086b6:	e491      	b.n	407fdc <_vfiprintf_r+0x5a4>
  4086b8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4086bc:	e469      	b.n	407f92 <_vfiprintf_r+0x55a>
  4086be:	bf00      	nop
  4086c0:	0040d47c 	.word	0x0040d47c
  4086c4:	0040d450 	.word	0x0040d450

004086c8 <__sbprintf>:
  4086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4086cc:	460c      	mov	r4, r1
  4086ce:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4086d2:	8989      	ldrh	r1, [r1, #12]
  4086d4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4086d6:	89e5      	ldrh	r5, [r4, #14]
  4086d8:	9619      	str	r6, [sp, #100]	; 0x64
  4086da:	f021 0102 	bic.w	r1, r1, #2
  4086de:	4606      	mov	r6, r0
  4086e0:	69e0      	ldr	r0, [r4, #28]
  4086e2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4086e6:	4617      	mov	r7, r2
  4086e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4086ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4086ee:	f8ad 500e 	strh.w	r5, [sp, #14]
  4086f2:	4698      	mov	r8, r3
  4086f4:	ad1a      	add	r5, sp, #104	; 0x68
  4086f6:	2300      	movs	r3, #0
  4086f8:	9007      	str	r0, [sp, #28]
  4086fa:	a816      	add	r0, sp, #88	; 0x58
  4086fc:	9209      	str	r2, [sp, #36]	; 0x24
  4086fe:	9306      	str	r3, [sp, #24]
  408700:	9500      	str	r5, [sp, #0]
  408702:	9504      	str	r5, [sp, #16]
  408704:	9102      	str	r1, [sp, #8]
  408706:	9105      	str	r1, [sp, #20]
  408708:	f001 fd16 	bl	40a138 <__retarget_lock_init_recursive>
  40870c:	4643      	mov	r3, r8
  40870e:	463a      	mov	r2, r7
  408710:	4669      	mov	r1, sp
  408712:	4630      	mov	r0, r6
  408714:	f7ff f990 	bl	407a38 <_vfiprintf_r>
  408718:	1e05      	subs	r5, r0, #0
  40871a:	db07      	blt.n	40872c <__sbprintf+0x64>
  40871c:	4630      	mov	r0, r6
  40871e:	4669      	mov	r1, sp
  408720:	f001 f8e8 	bl	4098f4 <_fflush_r>
  408724:	2800      	cmp	r0, #0
  408726:	bf18      	it	ne
  408728:	f04f 35ff 	movne.w	r5, #4294967295
  40872c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  408730:	065b      	lsls	r3, r3, #25
  408732:	d503      	bpl.n	40873c <__sbprintf+0x74>
  408734:	89a3      	ldrh	r3, [r4, #12]
  408736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40873a:	81a3      	strh	r3, [r4, #12]
  40873c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40873e:	f001 fcfd 	bl	40a13c <__retarget_lock_close_recursive>
  408742:	4628      	mov	r0, r5
  408744:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  408748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040874c <__swsetup_r>:
  40874c:	b538      	push	{r3, r4, r5, lr}
  40874e:	4b30      	ldr	r3, [pc, #192]	; (408810 <__swsetup_r+0xc4>)
  408750:	681b      	ldr	r3, [r3, #0]
  408752:	4605      	mov	r5, r0
  408754:	460c      	mov	r4, r1
  408756:	b113      	cbz	r3, 40875e <__swsetup_r+0x12>
  408758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40875a:	2a00      	cmp	r2, #0
  40875c:	d038      	beq.n	4087d0 <__swsetup_r+0x84>
  40875e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408762:	b293      	uxth	r3, r2
  408764:	0718      	lsls	r0, r3, #28
  408766:	d50c      	bpl.n	408782 <__swsetup_r+0x36>
  408768:	6920      	ldr	r0, [r4, #16]
  40876a:	b1a8      	cbz	r0, 408798 <__swsetup_r+0x4c>
  40876c:	f013 0201 	ands.w	r2, r3, #1
  408770:	d01e      	beq.n	4087b0 <__swsetup_r+0x64>
  408772:	6963      	ldr	r3, [r4, #20]
  408774:	2200      	movs	r2, #0
  408776:	425b      	negs	r3, r3
  408778:	61a3      	str	r3, [r4, #24]
  40877a:	60a2      	str	r2, [r4, #8]
  40877c:	b1f0      	cbz	r0, 4087bc <__swsetup_r+0x70>
  40877e:	2000      	movs	r0, #0
  408780:	bd38      	pop	{r3, r4, r5, pc}
  408782:	06d9      	lsls	r1, r3, #27
  408784:	d53c      	bpl.n	408800 <__swsetup_r+0xb4>
  408786:	0758      	lsls	r0, r3, #29
  408788:	d426      	bmi.n	4087d8 <__swsetup_r+0x8c>
  40878a:	6920      	ldr	r0, [r4, #16]
  40878c:	f042 0308 	orr.w	r3, r2, #8
  408790:	81a3      	strh	r3, [r4, #12]
  408792:	b29b      	uxth	r3, r3
  408794:	2800      	cmp	r0, #0
  408796:	d1e9      	bne.n	40876c <__swsetup_r+0x20>
  408798:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40879c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4087a0:	d0e4      	beq.n	40876c <__swsetup_r+0x20>
  4087a2:	4628      	mov	r0, r5
  4087a4:	4621      	mov	r1, r4
  4087a6:	f001 fcfd 	bl	40a1a4 <__smakebuf_r>
  4087aa:	89a3      	ldrh	r3, [r4, #12]
  4087ac:	6920      	ldr	r0, [r4, #16]
  4087ae:	e7dd      	b.n	40876c <__swsetup_r+0x20>
  4087b0:	0799      	lsls	r1, r3, #30
  4087b2:	bf58      	it	pl
  4087b4:	6962      	ldrpl	r2, [r4, #20]
  4087b6:	60a2      	str	r2, [r4, #8]
  4087b8:	2800      	cmp	r0, #0
  4087ba:	d1e0      	bne.n	40877e <__swsetup_r+0x32>
  4087bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4087c0:	061a      	lsls	r2, r3, #24
  4087c2:	d5dd      	bpl.n	408780 <__swsetup_r+0x34>
  4087c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4087c8:	81a3      	strh	r3, [r4, #12]
  4087ca:	f04f 30ff 	mov.w	r0, #4294967295
  4087ce:	bd38      	pop	{r3, r4, r5, pc}
  4087d0:	4618      	mov	r0, r3
  4087d2:	f001 f8e7 	bl	4099a4 <__sinit>
  4087d6:	e7c2      	b.n	40875e <__swsetup_r+0x12>
  4087d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4087da:	b151      	cbz	r1, 4087f2 <__swsetup_r+0xa6>
  4087dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4087e0:	4299      	cmp	r1, r3
  4087e2:	d004      	beq.n	4087ee <__swsetup_r+0xa2>
  4087e4:	4628      	mov	r0, r5
  4087e6:	f001 fa03 	bl	409bf0 <_free_r>
  4087ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4087ee:	2300      	movs	r3, #0
  4087f0:	6323      	str	r3, [r4, #48]	; 0x30
  4087f2:	2300      	movs	r3, #0
  4087f4:	6920      	ldr	r0, [r4, #16]
  4087f6:	6063      	str	r3, [r4, #4]
  4087f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4087fc:	6020      	str	r0, [r4, #0]
  4087fe:	e7c5      	b.n	40878c <__swsetup_r+0x40>
  408800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  408804:	2309      	movs	r3, #9
  408806:	602b      	str	r3, [r5, #0]
  408808:	f04f 30ff 	mov.w	r0, #4294967295
  40880c:	81a2      	strh	r2, [r4, #12]
  40880e:	bd38      	pop	{r3, r4, r5, pc}
  408810:	20400024 	.word	0x20400024

00408814 <register_fini>:
  408814:	4b02      	ldr	r3, [pc, #8]	; (408820 <register_fini+0xc>)
  408816:	b113      	cbz	r3, 40881e <register_fini+0xa>
  408818:	4802      	ldr	r0, [pc, #8]	; (408824 <register_fini+0x10>)
  40881a:	f000 b805 	b.w	408828 <atexit>
  40881e:	4770      	bx	lr
  408820:	00000000 	.word	0x00000000
  408824:	00409a15 	.word	0x00409a15

00408828 <atexit>:
  408828:	2300      	movs	r3, #0
  40882a:	4601      	mov	r1, r0
  40882c:	461a      	mov	r2, r3
  40882e:	4618      	mov	r0, r3
  408830:	f002 beb0 	b.w	40b594 <__register_exitproc>

00408834 <quorem>:
  408834:	6902      	ldr	r2, [r0, #16]
  408836:	690b      	ldr	r3, [r1, #16]
  408838:	4293      	cmp	r3, r2
  40883a:	f300 808d 	bgt.w	408958 <quorem+0x124>
  40883e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408842:	f103 38ff 	add.w	r8, r3, #4294967295
  408846:	f101 0714 	add.w	r7, r1, #20
  40884a:	f100 0b14 	add.w	fp, r0, #20
  40884e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  408852:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  408856:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40885a:	b083      	sub	sp, #12
  40885c:	3201      	adds	r2, #1
  40885e:	fbb3 f9f2 	udiv	r9, r3, r2
  408862:	eb0b 0304 	add.w	r3, fp, r4
  408866:	9400      	str	r4, [sp, #0]
  408868:	eb07 0a04 	add.w	sl, r7, r4
  40886c:	9301      	str	r3, [sp, #4]
  40886e:	f1b9 0f00 	cmp.w	r9, #0
  408872:	d039      	beq.n	4088e8 <quorem+0xb4>
  408874:	2500      	movs	r5, #0
  408876:	462e      	mov	r6, r5
  408878:	46bc      	mov	ip, r7
  40887a:	46de      	mov	lr, fp
  40887c:	f85c 4b04 	ldr.w	r4, [ip], #4
  408880:	f8de 3000 	ldr.w	r3, [lr]
  408884:	b2a2      	uxth	r2, r4
  408886:	fb09 5502 	mla	r5, r9, r2, r5
  40888a:	0c22      	lsrs	r2, r4, #16
  40888c:	0c2c      	lsrs	r4, r5, #16
  40888e:	fb09 4202 	mla	r2, r9, r2, r4
  408892:	b2ad      	uxth	r5, r5
  408894:	1b75      	subs	r5, r6, r5
  408896:	b296      	uxth	r6, r2
  408898:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40889c:	fa15 f383 	uxtah	r3, r5, r3
  4088a0:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4088a4:	b29b      	uxth	r3, r3
  4088a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4088aa:	45e2      	cmp	sl, ip
  4088ac:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4088b0:	f84e 3b04 	str.w	r3, [lr], #4
  4088b4:	ea4f 4626 	mov.w	r6, r6, asr #16
  4088b8:	d2e0      	bcs.n	40887c <quorem+0x48>
  4088ba:	9b00      	ldr	r3, [sp, #0]
  4088bc:	f85b 3003 	ldr.w	r3, [fp, r3]
  4088c0:	b993      	cbnz	r3, 4088e8 <quorem+0xb4>
  4088c2:	9c01      	ldr	r4, [sp, #4]
  4088c4:	1f23      	subs	r3, r4, #4
  4088c6:	459b      	cmp	fp, r3
  4088c8:	d20c      	bcs.n	4088e4 <quorem+0xb0>
  4088ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4088ce:	b94b      	cbnz	r3, 4088e4 <quorem+0xb0>
  4088d0:	f1a4 0308 	sub.w	r3, r4, #8
  4088d4:	e002      	b.n	4088dc <quorem+0xa8>
  4088d6:	681a      	ldr	r2, [r3, #0]
  4088d8:	3b04      	subs	r3, #4
  4088da:	b91a      	cbnz	r2, 4088e4 <quorem+0xb0>
  4088dc:	459b      	cmp	fp, r3
  4088de:	f108 38ff 	add.w	r8, r8, #4294967295
  4088e2:	d3f8      	bcc.n	4088d6 <quorem+0xa2>
  4088e4:	f8c0 8010 	str.w	r8, [r0, #16]
  4088e8:	4604      	mov	r4, r0
  4088ea:	f002 fa37 	bl	40ad5c <__mcmp>
  4088ee:	2800      	cmp	r0, #0
  4088f0:	db2e      	blt.n	408950 <quorem+0x11c>
  4088f2:	f109 0901 	add.w	r9, r9, #1
  4088f6:	465d      	mov	r5, fp
  4088f8:	2300      	movs	r3, #0
  4088fa:	f857 1b04 	ldr.w	r1, [r7], #4
  4088fe:	6828      	ldr	r0, [r5, #0]
  408900:	b28a      	uxth	r2, r1
  408902:	1a9a      	subs	r2, r3, r2
  408904:	0c0b      	lsrs	r3, r1, #16
  408906:	fa12 f280 	uxtah	r2, r2, r0
  40890a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  40890e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408912:	b292      	uxth	r2, r2
  408914:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408918:	45ba      	cmp	sl, r7
  40891a:	f845 2b04 	str.w	r2, [r5], #4
  40891e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408922:	d2ea      	bcs.n	4088fa <quorem+0xc6>
  408924:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  408928:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  40892c:	b982      	cbnz	r2, 408950 <quorem+0x11c>
  40892e:	1f1a      	subs	r2, r3, #4
  408930:	4593      	cmp	fp, r2
  408932:	d20b      	bcs.n	40894c <quorem+0x118>
  408934:	f853 2c04 	ldr.w	r2, [r3, #-4]
  408938:	b942      	cbnz	r2, 40894c <quorem+0x118>
  40893a:	3b08      	subs	r3, #8
  40893c:	e002      	b.n	408944 <quorem+0x110>
  40893e:	681a      	ldr	r2, [r3, #0]
  408940:	3b04      	subs	r3, #4
  408942:	b91a      	cbnz	r2, 40894c <quorem+0x118>
  408944:	459b      	cmp	fp, r3
  408946:	f108 38ff 	add.w	r8, r8, #4294967295
  40894a:	d3f8      	bcc.n	40893e <quorem+0x10a>
  40894c:	f8c4 8010 	str.w	r8, [r4, #16]
  408950:	4648      	mov	r0, r9
  408952:	b003      	add	sp, #12
  408954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408958:	2000      	movs	r0, #0
  40895a:	4770      	bx	lr
  40895c:	0000      	movs	r0, r0
	...

00408960 <_dtoa_r>:
  408960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408964:	6c01      	ldr	r1, [r0, #64]	; 0x40
  408966:	b09b      	sub	sp, #108	; 0x6c
  408968:	4604      	mov	r4, r0
  40896a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40896c:	4692      	mov	sl, r2
  40896e:	469b      	mov	fp, r3
  408970:	b141      	cbz	r1, 408984 <_dtoa_r+0x24>
  408972:	6c42      	ldr	r2, [r0, #68]	; 0x44
  408974:	604a      	str	r2, [r1, #4]
  408976:	2301      	movs	r3, #1
  408978:	4093      	lsls	r3, r2
  40897a:	608b      	str	r3, [r1, #8]
  40897c:	f002 f816 	bl	40a9ac <_Bfree>
  408980:	2300      	movs	r3, #0
  408982:	6423      	str	r3, [r4, #64]	; 0x40
  408984:	f1bb 0f00 	cmp.w	fp, #0
  408988:	465d      	mov	r5, fp
  40898a:	db35      	blt.n	4089f8 <_dtoa_r+0x98>
  40898c:	2300      	movs	r3, #0
  40898e:	6033      	str	r3, [r6, #0]
  408990:	4b9d      	ldr	r3, [pc, #628]	; (408c08 <_dtoa_r+0x2a8>)
  408992:	43ab      	bics	r3, r5
  408994:	d015      	beq.n	4089c2 <_dtoa_r+0x62>
  408996:	4650      	mov	r0, sl
  408998:	4659      	mov	r1, fp
  40899a:	2200      	movs	r2, #0
  40899c:	2300      	movs	r3, #0
  40899e:	f003 fb71 	bl	40c084 <__aeabi_dcmpeq>
  4089a2:	4680      	mov	r8, r0
  4089a4:	2800      	cmp	r0, #0
  4089a6:	d02d      	beq.n	408a04 <_dtoa_r+0xa4>
  4089a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4089aa:	2301      	movs	r3, #1
  4089ac:	6013      	str	r3, [r2, #0]
  4089ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4089b0:	2b00      	cmp	r3, #0
  4089b2:	f000 80bd 	beq.w	408b30 <_dtoa_r+0x1d0>
  4089b6:	4895      	ldr	r0, [pc, #596]	; (408c0c <_dtoa_r+0x2ac>)
  4089b8:	6018      	str	r0, [r3, #0]
  4089ba:	3801      	subs	r0, #1
  4089bc:	b01b      	add	sp, #108	; 0x6c
  4089be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4089c4:	f242 730f 	movw	r3, #9999	; 0x270f
  4089c8:	6013      	str	r3, [r2, #0]
  4089ca:	f1ba 0f00 	cmp.w	sl, #0
  4089ce:	d10d      	bne.n	4089ec <_dtoa_r+0x8c>
  4089d0:	f3c5 0513 	ubfx	r5, r5, #0, #20
  4089d4:	b955      	cbnz	r5, 4089ec <_dtoa_r+0x8c>
  4089d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4089d8:	488d      	ldr	r0, [pc, #564]	; (408c10 <_dtoa_r+0x2b0>)
  4089da:	2b00      	cmp	r3, #0
  4089dc:	d0ee      	beq.n	4089bc <_dtoa_r+0x5c>
  4089de:	f100 0308 	add.w	r3, r0, #8
  4089e2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4089e4:	6013      	str	r3, [r2, #0]
  4089e6:	b01b      	add	sp, #108	; 0x6c
  4089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4089ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4089ee:	4889      	ldr	r0, [pc, #548]	; (408c14 <_dtoa_r+0x2b4>)
  4089f0:	2b00      	cmp	r3, #0
  4089f2:	d0e3      	beq.n	4089bc <_dtoa_r+0x5c>
  4089f4:	1cc3      	adds	r3, r0, #3
  4089f6:	e7f4      	b.n	4089e2 <_dtoa_r+0x82>
  4089f8:	2301      	movs	r3, #1
  4089fa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4089fe:	6033      	str	r3, [r6, #0]
  408a00:	46ab      	mov	fp, r5
  408a02:	e7c5      	b.n	408990 <_dtoa_r+0x30>
  408a04:	aa18      	add	r2, sp, #96	; 0x60
  408a06:	ab19      	add	r3, sp, #100	; 0x64
  408a08:	9201      	str	r2, [sp, #4]
  408a0a:	9300      	str	r3, [sp, #0]
  408a0c:	4652      	mov	r2, sl
  408a0e:	465b      	mov	r3, fp
  408a10:	4620      	mov	r0, r4
  408a12:	f002 fa43 	bl	40ae9c <__d2b>
  408a16:	0d2b      	lsrs	r3, r5, #20
  408a18:	4681      	mov	r9, r0
  408a1a:	d071      	beq.n	408b00 <_dtoa_r+0x1a0>
  408a1c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  408a20:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  408a24:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408a26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  408a2a:	4650      	mov	r0, sl
  408a2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  408a30:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408a34:	2200      	movs	r2, #0
  408a36:	4b78      	ldr	r3, [pc, #480]	; (408c18 <_dtoa_r+0x2b8>)
  408a38:	f002 ff08 	bl	40b84c <__aeabi_dsub>
  408a3c:	a36c      	add	r3, pc, #432	; (adr r3, 408bf0 <_dtoa_r+0x290>)
  408a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a42:	f003 f8b7 	bl	40bbb4 <__aeabi_dmul>
  408a46:	a36c      	add	r3, pc, #432	; (adr r3, 408bf8 <_dtoa_r+0x298>)
  408a48:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a4c:	f002 ff00 	bl	40b850 <__adddf3>
  408a50:	e9cd 0102 	strd	r0, r1, [sp, #8]
  408a54:	4630      	mov	r0, r6
  408a56:	f003 f847 	bl	40bae8 <__aeabi_i2d>
  408a5a:	a369      	add	r3, pc, #420	; (adr r3, 408c00 <_dtoa_r+0x2a0>)
  408a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
  408a60:	f003 f8a8 	bl	40bbb4 <__aeabi_dmul>
  408a64:	4602      	mov	r2, r0
  408a66:	460b      	mov	r3, r1
  408a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  408a6c:	f002 fef0 	bl	40b850 <__adddf3>
  408a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
  408a74:	f003 fb4e 	bl	40c114 <__aeabi_d2iz>
  408a78:	2200      	movs	r2, #0
  408a7a:	9002      	str	r0, [sp, #8]
  408a7c:	2300      	movs	r3, #0
  408a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408a82:	f003 fb09 	bl	40c098 <__aeabi_dcmplt>
  408a86:	2800      	cmp	r0, #0
  408a88:	f040 8173 	bne.w	408d72 <_dtoa_r+0x412>
  408a8c:	9d02      	ldr	r5, [sp, #8]
  408a8e:	2d16      	cmp	r5, #22
  408a90:	f200 815d 	bhi.w	408d4e <_dtoa_r+0x3ee>
  408a94:	4b61      	ldr	r3, [pc, #388]	; (408c1c <_dtoa_r+0x2bc>)
  408a96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  408a9a:	e9d3 0100 	ldrd	r0, r1, [r3]
  408a9e:	4652      	mov	r2, sl
  408aa0:	465b      	mov	r3, fp
  408aa2:	f003 fb17 	bl	40c0d4 <__aeabi_dcmpgt>
  408aa6:	2800      	cmp	r0, #0
  408aa8:	f000 81c5 	beq.w	408e36 <_dtoa_r+0x4d6>
  408aac:	1e6b      	subs	r3, r5, #1
  408aae:	9302      	str	r3, [sp, #8]
  408ab0:	2300      	movs	r3, #0
  408ab2:	930e      	str	r3, [sp, #56]	; 0x38
  408ab4:	1bbf      	subs	r7, r7, r6
  408ab6:	1e7b      	subs	r3, r7, #1
  408ab8:	9306      	str	r3, [sp, #24]
  408aba:	f100 8154 	bmi.w	408d66 <_dtoa_r+0x406>
  408abe:	2300      	movs	r3, #0
  408ac0:	9308      	str	r3, [sp, #32]
  408ac2:	9b02      	ldr	r3, [sp, #8]
  408ac4:	2b00      	cmp	r3, #0
  408ac6:	f2c0 8145 	blt.w	408d54 <_dtoa_r+0x3f4>
  408aca:	9a06      	ldr	r2, [sp, #24]
  408acc:	930d      	str	r3, [sp, #52]	; 0x34
  408ace:	4611      	mov	r1, r2
  408ad0:	4419      	add	r1, r3
  408ad2:	2300      	movs	r3, #0
  408ad4:	9106      	str	r1, [sp, #24]
  408ad6:	930c      	str	r3, [sp, #48]	; 0x30
  408ad8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408ada:	2b09      	cmp	r3, #9
  408adc:	d82a      	bhi.n	408b34 <_dtoa_r+0x1d4>
  408ade:	2b05      	cmp	r3, #5
  408ae0:	f340 865b 	ble.w	40979a <_dtoa_r+0xe3a>
  408ae4:	3b04      	subs	r3, #4
  408ae6:	9324      	str	r3, [sp, #144]	; 0x90
  408ae8:	2500      	movs	r5, #0
  408aea:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408aec:	3b02      	subs	r3, #2
  408aee:	2b03      	cmp	r3, #3
  408af0:	f200 8642 	bhi.w	409778 <_dtoa_r+0xe18>
  408af4:	e8df f013 	tbh	[pc, r3, lsl #1]
  408af8:	02c903d4 	.word	0x02c903d4
  408afc:	046103df 	.word	0x046103df
  408b00:	9f18      	ldr	r7, [sp, #96]	; 0x60
  408b02:	9e19      	ldr	r6, [sp, #100]	; 0x64
  408b04:	443e      	add	r6, r7
  408b06:	f206 4332 	addw	r3, r6, #1074	; 0x432
  408b0a:	2b20      	cmp	r3, #32
  408b0c:	f340 818e 	ble.w	408e2c <_dtoa_r+0x4cc>
  408b10:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  408b14:	f206 4012 	addw	r0, r6, #1042	; 0x412
  408b18:	409d      	lsls	r5, r3
  408b1a:	fa2a f000 	lsr.w	r0, sl, r0
  408b1e:	4328      	orrs	r0, r5
  408b20:	f002 ffd2 	bl	40bac8 <__aeabi_ui2d>
  408b24:	2301      	movs	r3, #1
  408b26:	3e01      	subs	r6, #1
  408b28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  408b2c:	9314      	str	r3, [sp, #80]	; 0x50
  408b2e:	e781      	b.n	408a34 <_dtoa_r+0xd4>
  408b30:	483b      	ldr	r0, [pc, #236]	; (408c20 <_dtoa_r+0x2c0>)
  408b32:	e743      	b.n	4089bc <_dtoa_r+0x5c>
  408b34:	2100      	movs	r1, #0
  408b36:	6461      	str	r1, [r4, #68]	; 0x44
  408b38:	4620      	mov	r0, r4
  408b3a:	9125      	str	r1, [sp, #148]	; 0x94
  408b3c:	f001 ff10 	bl	40a960 <_Balloc>
  408b40:	f04f 33ff 	mov.w	r3, #4294967295
  408b44:	930a      	str	r3, [sp, #40]	; 0x28
  408b46:	9a25      	ldr	r2, [sp, #148]	; 0x94
  408b48:	930f      	str	r3, [sp, #60]	; 0x3c
  408b4a:	2301      	movs	r3, #1
  408b4c:	9004      	str	r0, [sp, #16]
  408b4e:	6420      	str	r0, [r4, #64]	; 0x40
  408b50:	9224      	str	r2, [sp, #144]	; 0x90
  408b52:	930b      	str	r3, [sp, #44]	; 0x2c
  408b54:	9b19      	ldr	r3, [sp, #100]	; 0x64
  408b56:	2b00      	cmp	r3, #0
  408b58:	f2c0 80d9 	blt.w	408d0e <_dtoa_r+0x3ae>
  408b5c:	9a02      	ldr	r2, [sp, #8]
  408b5e:	2a0e      	cmp	r2, #14
  408b60:	f300 80d5 	bgt.w	408d0e <_dtoa_r+0x3ae>
  408b64:	4b2d      	ldr	r3, [pc, #180]	; (408c1c <_dtoa_r+0x2bc>)
  408b66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
  408b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  408b72:	9b25      	ldr	r3, [sp, #148]	; 0x94
  408b74:	2b00      	cmp	r3, #0
  408b76:	f2c0 83ba 	blt.w	4092ee <_dtoa_r+0x98e>
  408b7a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  408b7e:	4650      	mov	r0, sl
  408b80:	462a      	mov	r2, r5
  408b82:	4633      	mov	r3, r6
  408b84:	4659      	mov	r1, fp
  408b86:	f003 f93f 	bl	40be08 <__aeabi_ddiv>
  408b8a:	f003 fac3 	bl	40c114 <__aeabi_d2iz>
  408b8e:	4680      	mov	r8, r0
  408b90:	f002 ffaa 	bl	40bae8 <__aeabi_i2d>
  408b94:	462a      	mov	r2, r5
  408b96:	4633      	mov	r3, r6
  408b98:	f003 f80c 	bl	40bbb4 <__aeabi_dmul>
  408b9c:	460b      	mov	r3, r1
  408b9e:	4602      	mov	r2, r0
  408ba0:	4659      	mov	r1, fp
  408ba2:	4650      	mov	r0, sl
  408ba4:	f002 fe52 	bl	40b84c <__aeabi_dsub>
  408ba8:	9d04      	ldr	r5, [sp, #16]
  408baa:	f108 0330 	add.w	r3, r8, #48	; 0x30
  408bae:	702b      	strb	r3, [r5, #0]
  408bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408bb2:	2b01      	cmp	r3, #1
  408bb4:	4606      	mov	r6, r0
  408bb6:	460f      	mov	r7, r1
  408bb8:	f105 0501 	add.w	r5, r5, #1
  408bbc:	d068      	beq.n	408c90 <_dtoa_r+0x330>
  408bbe:	2200      	movs	r2, #0
  408bc0:	4b18      	ldr	r3, [pc, #96]	; (408c24 <_dtoa_r+0x2c4>)
  408bc2:	f002 fff7 	bl	40bbb4 <__aeabi_dmul>
  408bc6:	2200      	movs	r2, #0
  408bc8:	2300      	movs	r3, #0
  408bca:	4606      	mov	r6, r0
  408bcc:	460f      	mov	r7, r1
  408bce:	f003 fa59 	bl	40c084 <__aeabi_dcmpeq>
  408bd2:	2800      	cmp	r0, #0
  408bd4:	f040 8088 	bne.w	408ce8 <_dtoa_r+0x388>
  408bd8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  408bdc:	f04f 0a00 	mov.w	sl, #0
  408be0:	f8df b040 	ldr.w	fp, [pc, #64]	; 408c24 <_dtoa_r+0x2c4>
  408be4:	940c      	str	r4, [sp, #48]	; 0x30
  408be6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408bea:	e028      	b.n	408c3e <_dtoa_r+0x2de>
  408bec:	f3af 8000 	nop.w
  408bf0:	636f4361 	.word	0x636f4361
  408bf4:	3fd287a7 	.word	0x3fd287a7
  408bf8:	8b60c8b3 	.word	0x8b60c8b3
  408bfc:	3fc68a28 	.word	0x3fc68a28
  408c00:	509f79fb 	.word	0x509f79fb
  408c04:	3fd34413 	.word	0x3fd34413
  408c08:	7ff00000 	.word	0x7ff00000
  408c0c:	0040d459 	.word	0x0040d459
  408c10:	0040d49c 	.word	0x0040d49c
  408c14:	0040d4a8 	.word	0x0040d4a8
  408c18:	3ff80000 	.word	0x3ff80000
  408c1c:	0040d4e8 	.word	0x0040d4e8
  408c20:	0040d458 	.word	0x0040d458
  408c24:	40240000 	.word	0x40240000
  408c28:	f002 ffc4 	bl	40bbb4 <__aeabi_dmul>
  408c2c:	2200      	movs	r2, #0
  408c2e:	2300      	movs	r3, #0
  408c30:	4606      	mov	r6, r0
  408c32:	460f      	mov	r7, r1
  408c34:	f003 fa26 	bl	40c084 <__aeabi_dcmpeq>
  408c38:	2800      	cmp	r0, #0
  408c3a:	f040 83c1 	bne.w	4093c0 <_dtoa_r+0xa60>
  408c3e:	4642      	mov	r2, r8
  408c40:	464b      	mov	r3, r9
  408c42:	4630      	mov	r0, r6
  408c44:	4639      	mov	r1, r7
  408c46:	f003 f8df 	bl	40be08 <__aeabi_ddiv>
  408c4a:	f003 fa63 	bl	40c114 <__aeabi_d2iz>
  408c4e:	4604      	mov	r4, r0
  408c50:	f002 ff4a 	bl	40bae8 <__aeabi_i2d>
  408c54:	4642      	mov	r2, r8
  408c56:	464b      	mov	r3, r9
  408c58:	f002 ffac 	bl	40bbb4 <__aeabi_dmul>
  408c5c:	4602      	mov	r2, r0
  408c5e:	460b      	mov	r3, r1
  408c60:	4630      	mov	r0, r6
  408c62:	4639      	mov	r1, r7
  408c64:	f002 fdf2 	bl	40b84c <__aeabi_dsub>
  408c68:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  408c6c:	9e04      	ldr	r6, [sp, #16]
  408c6e:	f805 eb01 	strb.w	lr, [r5], #1
  408c72:	eba5 0e06 	sub.w	lr, r5, r6
  408c76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408c78:	45b6      	cmp	lr, r6
  408c7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  408c7e:	4652      	mov	r2, sl
  408c80:	465b      	mov	r3, fp
  408c82:	d1d1      	bne.n	408c28 <_dtoa_r+0x2c8>
  408c84:	46a0      	mov	r8, r4
  408c86:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  408c8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  408c8c:	4606      	mov	r6, r0
  408c8e:	460f      	mov	r7, r1
  408c90:	4632      	mov	r2, r6
  408c92:	463b      	mov	r3, r7
  408c94:	4630      	mov	r0, r6
  408c96:	4639      	mov	r1, r7
  408c98:	f002 fdda 	bl	40b850 <__adddf3>
  408c9c:	4606      	mov	r6, r0
  408c9e:	460f      	mov	r7, r1
  408ca0:	4602      	mov	r2, r0
  408ca2:	460b      	mov	r3, r1
  408ca4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408ca8:	f003 f9f6 	bl	40c098 <__aeabi_dcmplt>
  408cac:	b948      	cbnz	r0, 408cc2 <_dtoa_r+0x362>
  408cae:	4632      	mov	r2, r6
  408cb0:	463b      	mov	r3, r7
  408cb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408cb6:	f003 f9e5 	bl	40c084 <__aeabi_dcmpeq>
  408cba:	b1a8      	cbz	r0, 408ce8 <_dtoa_r+0x388>
  408cbc:	f018 0f01 	tst.w	r8, #1
  408cc0:	d012      	beq.n	408ce8 <_dtoa_r+0x388>
  408cc2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  408cc6:	9a04      	ldr	r2, [sp, #16]
  408cc8:	1e6b      	subs	r3, r5, #1
  408cca:	e004      	b.n	408cd6 <_dtoa_r+0x376>
  408ccc:	429a      	cmp	r2, r3
  408cce:	f000 8401 	beq.w	4094d4 <_dtoa_r+0xb74>
  408cd2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  408cd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  408cda:	f103 0501 	add.w	r5, r3, #1
  408cde:	d0f5      	beq.n	408ccc <_dtoa_r+0x36c>
  408ce0:	f108 0801 	add.w	r8, r8, #1
  408ce4:	f883 8000 	strb.w	r8, [r3]
  408ce8:	4649      	mov	r1, r9
  408cea:	4620      	mov	r0, r4
  408cec:	f001 fe5e 	bl	40a9ac <_Bfree>
  408cf0:	2200      	movs	r2, #0
  408cf2:	9b02      	ldr	r3, [sp, #8]
  408cf4:	702a      	strb	r2, [r5, #0]
  408cf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  408cf8:	3301      	adds	r3, #1
  408cfa:	6013      	str	r3, [r2, #0]
  408cfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  408cfe:	2b00      	cmp	r3, #0
  408d00:	f000 839e 	beq.w	409440 <_dtoa_r+0xae0>
  408d04:	9804      	ldr	r0, [sp, #16]
  408d06:	601d      	str	r5, [r3, #0]
  408d08:	b01b      	add	sp, #108	; 0x6c
  408d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408d10:	2a00      	cmp	r2, #0
  408d12:	d03e      	beq.n	408d92 <_dtoa_r+0x432>
  408d14:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408d16:	2a01      	cmp	r2, #1
  408d18:	f340 8311 	ble.w	40933e <_dtoa_r+0x9de>
  408d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408d20:	1e5f      	subs	r7, r3, #1
  408d22:	42ba      	cmp	r2, r7
  408d24:	f2c0 838f 	blt.w	409446 <_dtoa_r+0xae6>
  408d28:	1bd7      	subs	r7, r2, r7
  408d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d2c:	2b00      	cmp	r3, #0
  408d2e:	f2c0 848b 	blt.w	409648 <_dtoa_r+0xce8>
  408d32:	9d08      	ldr	r5, [sp, #32]
  408d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408d36:	9a08      	ldr	r2, [sp, #32]
  408d38:	441a      	add	r2, r3
  408d3a:	9208      	str	r2, [sp, #32]
  408d3c:	9a06      	ldr	r2, [sp, #24]
  408d3e:	2101      	movs	r1, #1
  408d40:	441a      	add	r2, r3
  408d42:	4620      	mov	r0, r4
  408d44:	9206      	str	r2, [sp, #24]
  408d46:	f001 fecb 	bl	40aae0 <__i2b>
  408d4a:	4606      	mov	r6, r0
  408d4c:	e024      	b.n	408d98 <_dtoa_r+0x438>
  408d4e:	2301      	movs	r3, #1
  408d50:	930e      	str	r3, [sp, #56]	; 0x38
  408d52:	e6af      	b.n	408ab4 <_dtoa_r+0x154>
  408d54:	9a08      	ldr	r2, [sp, #32]
  408d56:	9b02      	ldr	r3, [sp, #8]
  408d58:	1ad2      	subs	r2, r2, r3
  408d5a:	425b      	negs	r3, r3
  408d5c:	930c      	str	r3, [sp, #48]	; 0x30
  408d5e:	2300      	movs	r3, #0
  408d60:	9208      	str	r2, [sp, #32]
  408d62:	930d      	str	r3, [sp, #52]	; 0x34
  408d64:	e6b8      	b.n	408ad8 <_dtoa_r+0x178>
  408d66:	f1c7 0301 	rsb	r3, r7, #1
  408d6a:	9308      	str	r3, [sp, #32]
  408d6c:	2300      	movs	r3, #0
  408d6e:	9306      	str	r3, [sp, #24]
  408d70:	e6a7      	b.n	408ac2 <_dtoa_r+0x162>
  408d72:	9d02      	ldr	r5, [sp, #8]
  408d74:	4628      	mov	r0, r5
  408d76:	f002 feb7 	bl	40bae8 <__aeabi_i2d>
  408d7a:	4602      	mov	r2, r0
  408d7c:	460b      	mov	r3, r1
  408d7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  408d82:	f003 f97f 	bl	40c084 <__aeabi_dcmpeq>
  408d86:	2800      	cmp	r0, #0
  408d88:	f47f ae80 	bne.w	408a8c <_dtoa_r+0x12c>
  408d8c:	1e6b      	subs	r3, r5, #1
  408d8e:	9302      	str	r3, [sp, #8]
  408d90:	e67c      	b.n	408a8c <_dtoa_r+0x12c>
  408d92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  408d94:	9d08      	ldr	r5, [sp, #32]
  408d96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  408d98:	2d00      	cmp	r5, #0
  408d9a:	dd0c      	ble.n	408db6 <_dtoa_r+0x456>
  408d9c:	9906      	ldr	r1, [sp, #24]
  408d9e:	2900      	cmp	r1, #0
  408da0:	460b      	mov	r3, r1
  408da2:	dd08      	ble.n	408db6 <_dtoa_r+0x456>
  408da4:	42a9      	cmp	r1, r5
  408da6:	9a08      	ldr	r2, [sp, #32]
  408da8:	bfa8      	it	ge
  408daa:	462b      	movge	r3, r5
  408dac:	1ad2      	subs	r2, r2, r3
  408dae:	1aed      	subs	r5, r5, r3
  408db0:	1acb      	subs	r3, r1, r3
  408db2:	9208      	str	r2, [sp, #32]
  408db4:	9306      	str	r3, [sp, #24]
  408db6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408db8:	b1d3      	cbz	r3, 408df0 <_dtoa_r+0x490>
  408dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408dbc:	2b00      	cmp	r3, #0
  408dbe:	f000 82b7 	beq.w	409330 <_dtoa_r+0x9d0>
  408dc2:	2f00      	cmp	r7, #0
  408dc4:	dd10      	ble.n	408de8 <_dtoa_r+0x488>
  408dc6:	4631      	mov	r1, r6
  408dc8:	463a      	mov	r2, r7
  408dca:	4620      	mov	r0, r4
  408dcc:	f001 ff24 	bl	40ac18 <__pow5mult>
  408dd0:	464a      	mov	r2, r9
  408dd2:	4601      	mov	r1, r0
  408dd4:	4606      	mov	r6, r0
  408dd6:	4620      	mov	r0, r4
  408dd8:	f001 fe8c 	bl	40aaf4 <__multiply>
  408ddc:	4649      	mov	r1, r9
  408dde:	4680      	mov	r8, r0
  408de0:	4620      	mov	r0, r4
  408de2:	f001 fde3 	bl	40a9ac <_Bfree>
  408de6:	46c1      	mov	r9, r8
  408de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408dea:	1bda      	subs	r2, r3, r7
  408dec:	f040 82a1 	bne.w	409332 <_dtoa_r+0x9d2>
  408df0:	2101      	movs	r1, #1
  408df2:	4620      	mov	r0, r4
  408df4:	f001 fe74 	bl	40aae0 <__i2b>
  408df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408dfa:	2b00      	cmp	r3, #0
  408dfc:	4680      	mov	r8, r0
  408dfe:	dd1c      	ble.n	408e3a <_dtoa_r+0x4da>
  408e00:	4601      	mov	r1, r0
  408e02:	461a      	mov	r2, r3
  408e04:	4620      	mov	r0, r4
  408e06:	f001 ff07 	bl	40ac18 <__pow5mult>
  408e0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e0c:	2b01      	cmp	r3, #1
  408e0e:	4680      	mov	r8, r0
  408e10:	f340 8254 	ble.w	4092bc <_dtoa_r+0x95c>
  408e14:	2300      	movs	r3, #0
  408e16:	930c      	str	r3, [sp, #48]	; 0x30
  408e18:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408e1c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  408e20:	6918      	ldr	r0, [r3, #16]
  408e22:	f001 fe0d 	bl	40aa40 <__hi0bits>
  408e26:	f1c0 0020 	rsb	r0, r0, #32
  408e2a:	e010      	b.n	408e4e <_dtoa_r+0x4ee>
  408e2c:	f1c3 0520 	rsb	r5, r3, #32
  408e30:	fa0a f005 	lsl.w	r0, sl, r5
  408e34:	e674      	b.n	408b20 <_dtoa_r+0x1c0>
  408e36:	900e      	str	r0, [sp, #56]	; 0x38
  408e38:	e63c      	b.n	408ab4 <_dtoa_r+0x154>
  408e3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  408e3c:	2b01      	cmp	r3, #1
  408e3e:	f340 8287 	ble.w	409350 <_dtoa_r+0x9f0>
  408e42:	2300      	movs	r3, #0
  408e44:	930c      	str	r3, [sp, #48]	; 0x30
  408e46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408e48:	2001      	movs	r0, #1
  408e4a:	2b00      	cmp	r3, #0
  408e4c:	d1e4      	bne.n	408e18 <_dtoa_r+0x4b8>
  408e4e:	9a06      	ldr	r2, [sp, #24]
  408e50:	4410      	add	r0, r2
  408e52:	f010 001f 	ands.w	r0, r0, #31
  408e56:	f000 80a1 	beq.w	408f9c <_dtoa_r+0x63c>
  408e5a:	f1c0 0320 	rsb	r3, r0, #32
  408e5e:	2b04      	cmp	r3, #4
  408e60:	f340 849e 	ble.w	4097a0 <_dtoa_r+0xe40>
  408e64:	9b08      	ldr	r3, [sp, #32]
  408e66:	f1c0 001c 	rsb	r0, r0, #28
  408e6a:	4403      	add	r3, r0
  408e6c:	9308      	str	r3, [sp, #32]
  408e6e:	4613      	mov	r3, r2
  408e70:	4403      	add	r3, r0
  408e72:	4405      	add	r5, r0
  408e74:	9306      	str	r3, [sp, #24]
  408e76:	9b08      	ldr	r3, [sp, #32]
  408e78:	2b00      	cmp	r3, #0
  408e7a:	dd05      	ble.n	408e88 <_dtoa_r+0x528>
  408e7c:	4649      	mov	r1, r9
  408e7e:	461a      	mov	r2, r3
  408e80:	4620      	mov	r0, r4
  408e82:	f001 ff19 	bl	40acb8 <__lshift>
  408e86:	4681      	mov	r9, r0
  408e88:	9b06      	ldr	r3, [sp, #24]
  408e8a:	2b00      	cmp	r3, #0
  408e8c:	dd05      	ble.n	408e9a <_dtoa_r+0x53a>
  408e8e:	4641      	mov	r1, r8
  408e90:	461a      	mov	r2, r3
  408e92:	4620      	mov	r0, r4
  408e94:	f001 ff10 	bl	40acb8 <__lshift>
  408e98:	4680      	mov	r8, r0
  408e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  408e9c:	2b00      	cmp	r3, #0
  408e9e:	f040 8086 	bne.w	408fae <_dtoa_r+0x64e>
  408ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408ea4:	2b00      	cmp	r3, #0
  408ea6:	f340 8266 	ble.w	409376 <_dtoa_r+0xa16>
  408eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408eac:	2b00      	cmp	r3, #0
  408eae:	f000 8098 	beq.w	408fe2 <_dtoa_r+0x682>
  408eb2:	2d00      	cmp	r5, #0
  408eb4:	dd05      	ble.n	408ec2 <_dtoa_r+0x562>
  408eb6:	4631      	mov	r1, r6
  408eb8:	462a      	mov	r2, r5
  408eba:	4620      	mov	r0, r4
  408ebc:	f001 fefc 	bl	40acb8 <__lshift>
  408ec0:	4606      	mov	r6, r0
  408ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408ec4:	2b00      	cmp	r3, #0
  408ec6:	f040 8337 	bne.w	409538 <_dtoa_r+0xbd8>
  408eca:	9606      	str	r6, [sp, #24]
  408ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408ece:	9a04      	ldr	r2, [sp, #16]
  408ed0:	f8dd b018 	ldr.w	fp, [sp, #24]
  408ed4:	3b01      	subs	r3, #1
  408ed6:	18d3      	adds	r3, r2, r3
  408ed8:	930b      	str	r3, [sp, #44]	; 0x2c
  408eda:	f00a 0301 	and.w	r3, sl, #1
  408ede:	930c      	str	r3, [sp, #48]	; 0x30
  408ee0:	4617      	mov	r7, r2
  408ee2:	46c2      	mov	sl, r8
  408ee4:	4651      	mov	r1, sl
  408ee6:	4648      	mov	r0, r9
  408ee8:	f7ff fca4 	bl	408834 <quorem>
  408eec:	4631      	mov	r1, r6
  408eee:	4605      	mov	r5, r0
  408ef0:	4648      	mov	r0, r9
  408ef2:	f001 ff33 	bl	40ad5c <__mcmp>
  408ef6:	465a      	mov	r2, fp
  408ef8:	900a      	str	r0, [sp, #40]	; 0x28
  408efa:	4651      	mov	r1, sl
  408efc:	4620      	mov	r0, r4
  408efe:	f001 ff49 	bl	40ad94 <__mdiff>
  408f02:	68c2      	ldr	r2, [r0, #12]
  408f04:	4680      	mov	r8, r0
  408f06:	f105 0330 	add.w	r3, r5, #48	; 0x30
  408f0a:	2a00      	cmp	r2, #0
  408f0c:	f040 822b 	bne.w	409366 <_dtoa_r+0xa06>
  408f10:	4601      	mov	r1, r0
  408f12:	4648      	mov	r0, r9
  408f14:	9308      	str	r3, [sp, #32]
  408f16:	f001 ff21 	bl	40ad5c <__mcmp>
  408f1a:	4641      	mov	r1, r8
  408f1c:	9006      	str	r0, [sp, #24]
  408f1e:	4620      	mov	r0, r4
  408f20:	f001 fd44 	bl	40a9ac <_Bfree>
  408f24:	9a06      	ldr	r2, [sp, #24]
  408f26:	9b08      	ldr	r3, [sp, #32]
  408f28:	b932      	cbnz	r2, 408f38 <_dtoa_r+0x5d8>
  408f2a:	9924      	ldr	r1, [sp, #144]	; 0x90
  408f2c:	b921      	cbnz	r1, 408f38 <_dtoa_r+0x5d8>
  408f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408f30:	2a00      	cmp	r2, #0
  408f32:	f000 83ef 	beq.w	409714 <_dtoa_r+0xdb4>
  408f36:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408f38:	990a      	ldr	r1, [sp, #40]	; 0x28
  408f3a:	2900      	cmp	r1, #0
  408f3c:	f2c0 829f 	blt.w	40947e <_dtoa_r+0xb1e>
  408f40:	d105      	bne.n	408f4e <_dtoa_r+0x5ee>
  408f42:	9924      	ldr	r1, [sp, #144]	; 0x90
  408f44:	b919      	cbnz	r1, 408f4e <_dtoa_r+0x5ee>
  408f46:	990c      	ldr	r1, [sp, #48]	; 0x30
  408f48:	2900      	cmp	r1, #0
  408f4a:	f000 8298 	beq.w	40947e <_dtoa_r+0xb1e>
  408f4e:	2a00      	cmp	r2, #0
  408f50:	f300 8306 	bgt.w	409560 <_dtoa_r+0xc00>
  408f54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408f56:	703b      	strb	r3, [r7, #0]
  408f58:	f107 0801 	add.w	r8, r7, #1
  408f5c:	4297      	cmp	r7, r2
  408f5e:	4645      	mov	r5, r8
  408f60:	f000 830c 	beq.w	40957c <_dtoa_r+0xc1c>
  408f64:	4649      	mov	r1, r9
  408f66:	2300      	movs	r3, #0
  408f68:	220a      	movs	r2, #10
  408f6a:	4620      	mov	r0, r4
  408f6c:	f001 fd28 	bl	40a9c0 <__multadd>
  408f70:	455e      	cmp	r6, fp
  408f72:	4681      	mov	r9, r0
  408f74:	4631      	mov	r1, r6
  408f76:	f04f 0300 	mov.w	r3, #0
  408f7a:	f04f 020a 	mov.w	r2, #10
  408f7e:	4620      	mov	r0, r4
  408f80:	f000 81eb 	beq.w	40935a <_dtoa_r+0x9fa>
  408f84:	f001 fd1c 	bl	40a9c0 <__multadd>
  408f88:	4659      	mov	r1, fp
  408f8a:	4606      	mov	r6, r0
  408f8c:	2300      	movs	r3, #0
  408f8e:	220a      	movs	r2, #10
  408f90:	4620      	mov	r0, r4
  408f92:	f001 fd15 	bl	40a9c0 <__multadd>
  408f96:	4647      	mov	r7, r8
  408f98:	4683      	mov	fp, r0
  408f9a:	e7a3      	b.n	408ee4 <_dtoa_r+0x584>
  408f9c:	201c      	movs	r0, #28
  408f9e:	9b08      	ldr	r3, [sp, #32]
  408fa0:	4403      	add	r3, r0
  408fa2:	9308      	str	r3, [sp, #32]
  408fa4:	9b06      	ldr	r3, [sp, #24]
  408fa6:	4403      	add	r3, r0
  408fa8:	4405      	add	r5, r0
  408faa:	9306      	str	r3, [sp, #24]
  408fac:	e763      	b.n	408e76 <_dtoa_r+0x516>
  408fae:	4641      	mov	r1, r8
  408fb0:	4648      	mov	r0, r9
  408fb2:	f001 fed3 	bl	40ad5c <__mcmp>
  408fb6:	2800      	cmp	r0, #0
  408fb8:	f6bf af73 	bge.w	408ea2 <_dtoa_r+0x542>
  408fbc:	9f02      	ldr	r7, [sp, #8]
  408fbe:	4649      	mov	r1, r9
  408fc0:	2300      	movs	r3, #0
  408fc2:	220a      	movs	r2, #10
  408fc4:	4620      	mov	r0, r4
  408fc6:	3f01      	subs	r7, #1
  408fc8:	9702      	str	r7, [sp, #8]
  408fca:	f001 fcf9 	bl	40a9c0 <__multadd>
  408fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408fd0:	4681      	mov	r9, r0
  408fd2:	2b00      	cmp	r3, #0
  408fd4:	f040 83b6 	bne.w	409744 <_dtoa_r+0xde4>
  408fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  408fda:	2b00      	cmp	r3, #0
  408fdc:	f340 83bf 	ble.w	40975e <_dtoa_r+0xdfe>
  408fe0:	930a      	str	r3, [sp, #40]	; 0x28
  408fe2:	f8dd b010 	ldr.w	fp, [sp, #16]
  408fe6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408fe8:	465d      	mov	r5, fp
  408fea:	e002      	b.n	408ff2 <_dtoa_r+0x692>
  408fec:	f001 fce8 	bl	40a9c0 <__multadd>
  408ff0:	4681      	mov	r9, r0
  408ff2:	4641      	mov	r1, r8
  408ff4:	4648      	mov	r0, r9
  408ff6:	f7ff fc1d 	bl	408834 <quorem>
  408ffa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  408ffe:	f805 ab01 	strb.w	sl, [r5], #1
  409002:	eba5 030b 	sub.w	r3, r5, fp
  409006:	42bb      	cmp	r3, r7
  409008:	f04f 020a 	mov.w	r2, #10
  40900c:	f04f 0300 	mov.w	r3, #0
  409010:	4649      	mov	r1, r9
  409012:	4620      	mov	r0, r4
  409014:	dbea      	blt.n	408fec <_dtoa_r+0x68c>
  409016:	9b04      	ldr	r3, [sp, #16]
  409018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40901a:	2a01      	cmp	r2, #1
  40901c:	bfac      	ite	ge
  40901e:	189b      	addge	r3, r3, r2
  409020:	3301      	addlt	r3, #1
  409022:	461d      	mov	r5, r3
  409024:	f04f 0b00 	mov.w	fp, #0
  409028:	4649      	mov	r1, r9
  40902a:	2201      	movs	r2, #1
  40902c:	4620      	mov	r0, r4
  40902e:	f001 fe43 	bl	40acb8 <__lshift>
  409032:	4641      	mov	r1, r8
  409034:	4681      	mov	r9, r0
  409036:	f001 fe91 	bl	40ad5c <__mcmp>
  40903a:	2800      	cmp	r0, #0
  40903c:	f340 823d 	ble.w	4094ba <_dtoa_r+0xb5a>
  409040:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  409044:	9904      	ldr	r1, [sp, #16]
  409046:	1e6b      	subs	r3, r5, #1
  409048:	e004      	b.n	409054 <_dtoa_r+0x6f4>
  40904a:	428b      	cmp	r3, r1
  40904c:	f000 81ae 	beq.w	4093ac <_dtoa_r+0xa4c>
  409050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  409054:	2a39      	cmp	r2, #57	; 0x39
  409056:	f103 0501 	add.w	r5, r3, #1
  40905a:	d0f6      	beq.n	40904a <_dtoa_r+0x6ea>
  40905c:	3201      	adds	r2, #1
  40905e:	701a      	strb	r2, [r3, #0]
  409060:	4641      	mov	r1, r8
  409062:	4620      	mov	r0, r4
  409064:	f001 fca2 	bl	40a9ac <_Bfree>
  409068:	2e00      	cmp	r6, #0
  40906a:	f43f ae3d 	beq.w	408ce8 <_dtoa_r+0x388>
  40906e:	f1bb 0f00 	cmp.w	fp, #0
  409072:	d005      	beq.n	409080 <_dtoa_r+0x720>
  409074:	45b3      	cmp	fp, r6
  409076:	d003      	beq.n	409080 <_dtoa_r+0x720>
  409078:	4659      	mov	r1, fp
  40907a:	4620      	mov	r0, r4
  40907c:	f001 fc96 	bl	40a9ac <_Bfree>
  409080:	4631      	mov	r1, r6
  409082:	4620      	mov	r0, r4
  409084:	f001 fc92 	bl	40a9ac <_Bfree>
  409088:	e62e      	b.n	408ce8 <_dtoa_r+0x388>
  40908a:	2300      	movs	r3, #0
  40908c:	930b      	str	r3, [sp, #44]	; 0x2c
  40908e:	9b02      	ldr	r3, [sp, #8]
  409090:	9a25      	ldr	r2, [sp, #148]	; 0x94
  409092:	4413      	add	r3, r2
  409094:	930f      	str	r3, [sp, #60]	; 0x3c
  409096:	3301      	adds	r3, #1
  409098:	2b01      	cmp	r3, #1
  40909a:	461f      	mov	r7, r3
  40909c:	461e      	mov	r6, r3
  40909e:	930a      	str	r3, [sp, #40]	; 0x28
  4090a0:	bfb8      	it	lt
  4090a2:	2701      	movlt	r7, #1
  4090a4:	2100      	movs	r1, #0
  4090a6:	2f17      	cmp	r7, #23
  4090a8:	6461      	str	r1, [r4, #68]	; 0x44
  4090aa:	d90a      	bls.n	4090c2 <_dtoa_r+0x762>
  4090ac:	2201      	movs	r2, #1
  4090ae:	2304      	movs	r3, #4
  4090b0:	005b      	lsls	r3, r3, #1
  4090b2:	f103 0014 	add.w	r0, r3, #20
  4090b6:	4287      	cmp	r7, r0
  4090b8:	4611      	mov	r1, r2
  4090ba:	f102 0201 	add.w	r2, r2, #1
  4090be:	d2f7      	bcs.n	4090b0 <_dtoa_r+0x750>
  4090c0:	6461      	str	r1, [r4, #68]	; 0x44
  4090c2:	4620      	mov	r0, r4
  4090c4:	f001 fc4c 	bl	40a960 <_Balloc>
  4090c8:	2e0e      	cmp	r6, #14
  4090ca:	9004      	str	r0, [sp, #16]
  4090cc:	6420      	str	r0, [r4, #64]	; 0x40
  4090ce:	f63f ad41 	bhi.w	408b54 <_dtoa_r+0x1f4>
  4090d2:	2d00      	cmp	r5, #0
  4090d4:	f43f ad3e 	beq.w	408b54 <_dtoa_r+0x1f4>
  4090d8:	9902      	ldr	r1, [sp, #8]
  4090da:	2900      	cmp	r1, #0
  4090dc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4090e0:	f340 8202 	ble.w	4094e8 <_dtoa_r+0xb88>
  4090e4:	4bb8      	ldr	r3, [pc, #736]	; (4093c8 <_dtoa_r+0xa68>)
  4090e6:	f001 020f 	and.w	r2, r1, #15
  4090ea:	110d      	asrs	r5, r1, #4
  4090ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4090f0:	06e9      	lsls	r1, r5, #27
  4090f2:	e9d3 6700 	ldrd	r6, r7, [r3]
  4090f6:	f140 81ae 	bpl.w	409456 <_dtoa_r+0xaf6>
  4090fa:	4bb4      	ldr	r3, [pc, #720]	; (4093cc <_dtoa_r+0xa6c>)
  4090fc:	4650      	mov	r0, sl
  4090fe:	4659      	mov	r1, fp
  409100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  409104:	f002 fe80 	bl	40be08 <__aeabi_ddiv>
  409108:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40910c:	f005 050f 	and.w	r5, r5, #15
  409110:	f04f 0a03 	mov.w	sl, #3
  409114:	b18d      	cbz	r5, 40913a <_dtoa_r+0x7da>
  409116:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4093cc <_dtoa_r+0xa6c>
  40911a:	07ea      	lsls	r2, r5, #31
  40911c:	d509      	bpl.n	409132 <_dtoa_r+0x7d2>
  40911e:	4630      	mov	r0, r6
  409120:	4639      	mov	r1, r7
  409122:	e9d8 2300 	ldrd	r2, r3, [r8]
  409126:	f002 fd45 	bl	40bbb4 <__aeabi_dmul>
  40912a:	f10a 0a01 	add.w	sl, sl, #1
  40912e:	4606      	mov	r6, r0
  409130:	460f      	mov	r7, r1
  409132:	106d      	asrs	r5, r5, #1
  409134:	f108 0808 	add.w	r8, r8, #8
  409138:	d1ef      	bne.n	40911a <_dtoa_r+0x7ba>
  40913a:	463b      	mov	r3, r7
  40913c:	4632      	mov	r2, r6
  40913e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  409142:	f002 fe61 	bl	40be08 <__aeabi_ddiv>
  409146:	4607      	mov	r7, r0
  409148:	4688      	mov	r8, r1
  40914a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40914c:	b143      	cbz	r3, 409160 <_dtoa_r+0x800>
  40914e:	2200      	movs	r2, #0
  409150:	4b9f      	ldr	r3, [pc, #636]	; (4093d0 <_dtoa_r+0xa70>)
  409152:	4638      	mov	r0, r7
  409154:	4641      	mov	r1, r8
  409156:	f002 ff9f 	bl	40c098 <__aeabi_dcmplt>
  40915a:	2800      	cmp	r0, #0
  40915c:	f040 8286 	bne.w	40966c <_dtoa_r+0xd0c>
  409160:	4650      	mov	r0, sl
  409162:	f002 fcc1 	bl	40bae8 <__aeabi_i2d>
  409166:	463a      	mov	r2, r7
  409168:	4643      	mov	r3, r8
  40916a:	f002 fd23 	bl	40bbb4 <__aeabi_dmul>
  40916e:	4b99      	ldr	r3, [pc, #612]	; (4093d4 <_dtoa_r+0xa74>)
  409170:	2200      	movs	r2, #0
  409172:	f002 fb6d 	bl	40b850 <__adddf3>
  409176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409178:	4605      	mov	r5, r0
  40917a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40917e:	2b00      	cmp	r3, #0
  409180:	f000 813e 	beq.w	409400 <_dtoa_r+0xaa0>
  409184:	9b02      	ldr	r3, [sp, #8]
  409186:	9315      	str	r3, [sp, #84]	; 0x54
  409188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40918a:	9312      	str	r3, [sp, #72]	; 0x48
  40918c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40918e:	2b00      	cmp	r3, #0
  409190:	f000 81fa 	beq.w	409588 <_dtoa_r+0xc28>
  409194:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409196:	4b8c      	ldr	r3, [pc, #560]	; (4093c8 <_dtoa_r+0xa68>)
  409198:	498f      	ldr	r1, [pc, #572]	; (4093d8 <_dtoa_r+0xa78>)
  40919a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40919e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4091a2:	2000      	movs	r0, #0
  4091a4:	f002 fe30 	bl	40be08 <__aeabi_ddiv>
  4091a8:	462a      	mov	r2, r5
  4091aa:	4633      	mov	r3, r6
  4091ac:	f002 fb4e 	bl	40b84c <__aeabi_dsub>
  4091b0:	4682      	mov	sl, r0
  4091b2:	468b      	mov	fp, r1
  4091b4:	4638      	mov	r0, r7
  4091b6:	4641      	mov	r1, r8
  4091b8:	f002 ffac 	bl	40c114 <__aeabi_d2iz>
  4091bc:	4605      	mov	r5, r0
  4091be:	f002 fc93 	bl	40bae8 <__aeabi_i2d>
  4091c2:	4602      	mov	r2, r0
  4091c4:	460b      	mov	r3, r1
  4091c6:	4638      	mov	r0, r7
  4091c8:	4641      	mov	r1, r8
  4091ca:	f002 fb3f 	bl	40b84c <__aeabi_dsub>
  4091ce:	3530      	adds	r5, #48	; 0x30
  4091d0:	fa5f f885 	uxtb.w	r8, r5
  4091d4:	9d04      	ldr	r5, [sp, #16]
  4091d6:	4606      	mov	r6, r0
  4091d8:	460f      	mov	r7, r1
  4091da:	f885 8000 	strb.w	r8, [r5]
  4091de:	4602      	mov	r2, r0
  4091e0:	460b      	mov	r3, r1
  4091e2:	4650      	mov	r0, sl
  4091e4:	4659      	mov	r1, fp
  4091e6:	3501      	adds	r5, #1
  4091e8:	f002 ff74 	bl	40c0d4 <__aeabi_dcmpgt>
  4091ec:	2800      	cmp	r0, #0
  4091ee:	d154      	bne.n	40929a <_dtoa_r+0x93a>
  4091f0:	4632      	mov	r2, r6
  4091f2:	463b      	mov	r3, r7
  4091f4:	2000      	movs	r0, #0
  4091f6:	4976      	ldr	r1, [pc, #472]	; (4093d0 <_dtoa_r+0xa70>)
  4091f8:	f002 fb28 	bl	40b84c <__aeabi_dsub>
  4091fc:	4602      	mov	r2, r0
  4091fe:	460b      	mov	r3, r1
  409200:	4650      	mov	r0, sl
  409202:	4659      	mov	r1, fp
  409204:	f002 ff66 	bl	40c0d4 <__aeabi_dcmpgt>
  409208:	2800      	cmp	r0, #0
  40920a:	f040 8270 	bne.w	4096ee <_dtoa_r+0xd8e>
  40920e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  409210:	2a01      	cmp	r2, #1
  409212:	f000 8111 	beq.w	409438 <_dtoa_r+0xad8>
  409216:	9b12      	ldr	r3, [sp, #72]	; 0x48
  409218:	9a04      	ldr	r2, [sp, #16]
  40921a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40921e:	4413      	add	r3, r2
  409220:	4699      	mov	r9, r3
  409222:	e00d      	b.n	409240 <_dtoa_r+0x8e0>
  409224:	2000      	movs	r0, #0
  409226:	496a      	ldr	r1, [pc, #424]	; (4093d0 <_dtoa_r+0xa70>)
  409228:	f002 fb10 	bl	40b84c <__aeabi_dsub>
  40922c:	4652      	mov	r2, sl
  40922e:	465b      	mov	r3, fp
  409230:	f002 ff32 	bl	40c098 <__aeabi_dcmplt>
  409234:	2800      	cmp	r0, #0
  409236:	f040 8258 	bne.w	4096ea <_dtoa_r+0xd8a>
  40923a:	454d      	cmp	r5, r9
  40923c:	f000 80fa 	beq.w	409434 <_dtoa_r+0xad4>
  409240:	4650      	mov	r0, sl
  409242:	4659      	mov	r1, fp
  409244:	2200      	movs	r2, #0
  409246:	4b65      	ldr	r3, [pc, #404]	; (4093dc <_dtoa_r+0xa7c>)
  409248:	f002 fcb4 	bl	40bbb4 <__aeabi_dmul>
  40924c:	2200      	movs	r2, #0
  40924e:	4b63      	ldr	r3, [pc, #396]	; (4093dc <_dtoa_r+0xa7c>)
  409250:	4682      	mov	sl, r0
  409252:	468b      	mov	fp, r1
  409254:	4630      	mov	r0, r6
  409256:	4639      	mov	r1, r7
  409258:	f002 fcac 	bl	40bbb4 <__aeabi_dmul>
  40925c:	460f      	mov	r7, r1
  40925e:	4606      	mov	r6, r0
  409260:	f002 ff58 	bl	40c114 <__aeabi_d2iz>
  409264:	4680      	mov	r8, r0
  409266:	f002 fc3f 	bl	40bae8 <__aeabi_i2d>
  40926a:	4602      	mov	r2, r0
  40926c:	460b      	mov	r3, r1
  40926e:	4630      	mov	r0, r6
  409270:	4639      	mov	r1, r7
  409272:	f002 faeb 	bl	40b84c <__aeabi_dsub>
  409276:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40927a:	fa5f f888 	uxtb.w	r8, r8
  40927e:	4652      	mov	r2, sl
  409280:	465b      	mov	r3, fp
  409282:	f805 8b01 	strb.w	r8, [r5], #1
  409286:	4606      	mov	r6, r0
  409288:	460f      	mov	r7, r1
  40928a:	f002 ff05 	bl	40c098 <__aeabi_dcmplt>
  40928e:	4632      	mov	r2, r6
  409290:	463b      	mov	r3, r7
  409292:	2800      	cmp	r0, #0
  409294:	d0c6      	beq.n	409224 <_dtoa_r+0x8c4>
  409296:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40929a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40929c:	9302      	str	r3, [sp, #8]
  40929e:	e523      	b.n	408ce8 <_dtoa_r+0x388>
  4092a0:	2300      	movs	r3, #0
  4092a2:	930b      	str	r3, [sp, #44]	; 0x2c
  4092a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4092a6:	2b00      	cmp	r3, #0
  4092a8:	f340 80dc 	ble.w	409464 <_dtoa_r+0xb04>
  4092ac:	461f      	mov	r7, r3
  4092ae:	461e      	mov	r6, r3
  4092b0:	930f      	str	r3, [sp, #60]	; 0x3c
  4092b2:	930a      	str	r3, [sp, #40]	; 0x28
  4092b4:	e6f6      	b.n	4090a4 <_dtoa_r+0x744>
  4092b6:	2301      	movs	r3, #1
  4092b8:	930b      	str	r3, [sp, #44]	; 0x2c
  4092ba:	e7f3      	b.n	4092a4 <_dtoa_r+0x944>
  4092bc:	f1ba 0f00 	cmp.w	sl, #0
  4092c0:	f47f ada8 	bne.w	408e14 <_dtoa_r+0x4b4>
  4092c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4092c8:	2b00      	cmp	r3, #0
  4092ca:	f47f adba 	bne.w	408e42 <_dtoa_r+0x4e2>
  4092ce:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4092d2:	0d3f      	lsrs	r7, r7, #20
  4092d4:	053f      	lsls	r7, r7, #20
  4092d6:	2f00      	cmp	r7, #0
  4092d8:	f000 820d 	beq.w	4096f6 <_dtoa_r+0xd96>
  4092dc:	9b08      	ldr	r3, [sp, #32]
  4092de:	3301      	adds	r3, #1
  4092e0:	9308      	str	r3, [sp, #32]
  4092e2:	9b06      	ldr	r3, [sp, #24]
  4092e4:	3301      	adds	r3, #1
  4092e6:	9306      	str	r3, [sp, #24]
  4092e8:	2301      	movs	r3, #1
  4092ea:	930c      	str	r3, [sp, #48]	; 0x30
  4092ec:	e5ab      	b.n	408e46 <_dtoa_r+0x4e6>
  4092ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4092f0:	2b00      	cmp	r3, #0
  4092f2:	f73f ac42 	bgt.w	408b7a <_dtoa_r+0x21a>
  4092f6:	f040 8221 	bne.w	40973c <_dtoa_r+0xddc>
  4092fa:	2200      	movs	r2, #0
  4092fc:	4b38      	ldr	r3, [pc, #224]	; (4093e0 <_dtoa_r+0xa80>)
  4092fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  409302:	f002 fc57 	bl	40bbb4 <__aeabi_dmul>
  409306:	4652      	mov	r2, sl
  409308:	465b      	mov	r3, fp
  40930a:	f002 fed9 	bl	40c0c0 <__aeabi_dcmpge>
  40930e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  409312:	4646      	mov	r6, r8
  409314:	2800      	cmp	r0, #0
  409316:	d041      	beq.n	40939c <_dtoa_r+0xa3c>
  409318:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40931a:	9d04      	ldr	r5, [sp, #16]
  40931c:	43db      	mvns	r3, r3
  40931e:	9302      	str	r3, [sp, #8]
  409320:	4641      	mov	r1, r8
  409322:	4620      	mov	r0, r4
  409324:	f001 fb42 	bl	40a9ac <_Bfree>
  409328:	2e00      	cmp	r6, #0
  40932a:	f43f acdd 	beq.w	408ce8 <_dtoa_r+0x388>
  40932e:	e6a7      	b.n	409080 <_dtoa_r+0x720>
  409330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  409332:	4649      	mov	r1, r9
  409334:	4620      	mov	r0, r4
  409336:	f001 fc6f 	bl	40ac18 <__pow5mult>
  40933a:	4681      	mov	r9, r0
  40933c:	e558      	b.n	408df0 <_dtoa_r+0x490>
  40933e:	9a14      	ldr	r2, [sp, #80]	; 0x50
  409340:	2a00      	cmp	r2, #0
  409342:	f000 8187 	beq.w	409654 <_dtoa_r+0xcf4>
  409346:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40934a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40934c:	9d08      	ldr	r5, [sp, #32]
  40934e:	e4f2      	b.n	408d36 <_dtoa_r+0x3d6>
  409350:	f1ba 0f00 	cmp.w	sl, #0
  409354:	f47f ad75 	bne.w	408e42 <_dtoa_r+0x4e2>
  409358:	e7b4      	b.n	4092c4 <_dtoa_r+0x964>
  40935a:	f001 fb31 	bl	40a9c0 <__multadd>
  40935e:	4647      	mov	r7, r8
  409360:	4606      	mov	r6, r0
  409362:	4683      	mov	fp, r0
  409364:	e5be      	b.n	408ee4 <_dtoa_r+0x584>
  409366:	4601      	mov	r1, r0
  409368:	4620      	mov	r0, r4
  40936a:	9306      	str	r3, [sp, #24]
  40936c:	f001 fb1e 	bl	40a9ac <_Bfree>
  409370:	2201      	movs	r2, #1
  409372:	9b06      	ldr	r3, [sp, #24]
  409374:	e5e0      	b.n	408f38 <_dtoa_r+0x5d8>
  409376:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409378:	2b02      	cmp	r3, #2
  40937a:	f77f ad96 	ble.w	408eaa <_dtoa_r+0x54a>
  40937e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  409380:	2b00      	cmp	r3, #0
  409382:	d1c9      	bne.n	409318 <_dtoa_r+0x9b8>
  409384:	4641      	mov	r1, r8
  409386:	2205      	movs	r2, #5
  409388:	4620      	mov	r0, r4
  40938a:	f001 fb19 	bl	40a9c0 <__multadd>
  40938e:	4601      	mov	r1, r0
  409390:	4680      	mov	r8, r0
  409392:	4648      	mov	r0, r9
  409394:	f001 fce2 	bl	40ad5c <__mcmp>
  409398:	2800      	cmp	r0, #0
  40939a:	ddbd      	ble.n	409318 <_dtoa_r+0x9b8>
  40939c:	9a02      	ldr	r2, [sp, #8]
  40939e:	9904      	ldr	r1, [sp, #16]
  4093a0:	2331      	movs	r3, #49	; 0x31
  4093a2:	3201      	adds	r2, #1
  4093a4:	9202      	str	r2, [sp, #8]
  4093a6:	700b      	strb	r3, [r1, #0]
  4093a8:	1c4d      	adds	r5, r1, #1
  4093aa:	e7b9      	b.n	409320 <_dtoa_r+0x9c0>
  4093ac:	9a02      	ldr	r2, [sp, #8]
  4093ae:	3201      	adds	r2, #1
  4093b0:	9202      	str	r2, [sp, #8]
  4093b2:	9a04      	ldr	r2, [sp, #16]
  4093b4:	2331      	movs	r3, #49	; 0x31
  4093b6:	7013      	strb	r3, [r2, #0]
  4093b8:	e652      	b.n	409060 <_dtoa_r+0x700>
  4093ba:	2301      	movs	r3, #1
  4093bc:	930b      	str	r3, [sp, #44]	; 0x2c
  4093be:	e666      	b.n	40908e <_dtoa_r+0x72e>
  4093c0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4093c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4093c6:	e48f      	b.n	408ce8 <_dtoa_r+0x388>
  4093c8:	0040d4e8 	.word	0x0040d4e8
  4093cc:	0040d4c0 	.word	0x0040d4c0
  4093d0:	3ff00000 	.word	0x3ff00000
  4093d4:	401c0000 	.word	0x401c0000
  4093d8:	3fe00000 	.word	0x3fe00000
  4093dc:	40240000 	.word	0x40240000
  4093e0:	40140000 	.word	0x40140000
  4093e4:	4650      	mov	r0, sl
  4093e6:	f002 fb7f 	bl	40bae8 <__aeabi_i2d>
  4093ea:	463a      	mov	r2, r7
  4093ec:	4643      	mov	r3, r8
  4093ee:	f002 fbe1 	bl	40bbb4 <__aeabi_dmul>
  4093f2:	2200      	movs	r2, #0
  4093f4:	4bc1      	ldr	r3, [pc, #772]	; (4096fc <_dtoa_r+0xd9c>)
  4093f6:	f002 fa2b 	bl	40b850 <__adddf3>
  4093fa:	4605      	mov	r5, r0
  4093fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  409400:	4641      	mov	r1, r8
  409402:	2200      	movs	r2, #0
  409404:	4bbe      	ldr	r3, [pc, #760]	; (409700 <_dtoa_r+0xda0>)
  409406:	4638      	mov	r0, r7
  409408:	f002 fa20 	bl	40b84c <__aeabi_dsub>
  40940c:	462a      	mov	r2, r5
  40940e:	4633      	mov	r3, r6
  409410:	4682      	mov	sl, r0
  409412:	468b      	mov	fp, r1
  409414:	f002 fe5e 	bl	40c0d4 <__aeabi_dcmpgt>
  409418:	4680      	mov	r8, r0
  40941a:	2800      	cmp	r0, #0
  40941c:	f040 8110 	bne.w	409640 <_dtoa_r+0xce0>
  409420:	462a      	mov	r2, r5
  409422:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  409426:	4650      	mov	r0, sl
  409428:	4659      	mov	r1, fp
  40942a:	f002 fe35 	bl	40c098 <__aeabi_dcmplt>
  40942e:	b118      	cbz	r0, 409438 <_dtoa_r+0xad8>
  409430:	4646      	mov	r6, r8
  409432:	e771      	b.n	409318 <_dtoa_r+0x9b8>
  409434:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  409438:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  40943c:	f7ff bb8a 	b.w	408b54 <_dtoa_r+0x1f4>
  409440:	9804      	ldr	r0, [sp, #16]
  409442:	f7ff babb 	b.w	4089bc <_dtoa_r+0x5c>
  409446:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  409448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40944a:	970c      	str	r7, [sp, #48]	; 0x30
  40944c:	1afb      	subs	r3, r7, r3
  40944e:	441a      	add	r2, r3
  409450:	920d      	str	r2, [sp, #52]	; 0x34
  409452:	2700      	movs	r7, #0
  409454:	e469      	b.n	408d2a <_dtoa_r+0x3ca>
  409456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40945a:	f04f 0a02 	mov.w	sl, #2
  40945e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  409462:	e657      	b.n	409114 <_dtoa_r+0x7b4>
  409464:	2100      	movs	r1, #0
  409466:	2301      	movs	r3, #1
  409468:	6461      	str	r1, [r4, #68]	; 0x44
  40946a:	4620      	mov	r0, r4
  40946c:	9325      	str	r3, [sp, #148]	; 0x94
  40946e:	f001 fa77 	bl	40a960 <_Balloc>
  409472:	9b25      	ldr	r3, [sp, #148]	; 0x94
  409474:	9004      	str	r0, [sp, #16]
  409476:	6420      	str	r0, [r4, #64]	; 0x40
  409478:	930a      	str	r3, [sp, #40]	; 0x28
  40947a:	930f      	str	r3, [sp, #60]	; 0x3c
  40947c:	e629      	b.n	4090d2 <_dtoa_r+0x772>
  40947e:	2a00      	cmp	r2, #0
  409480:	46d0      	mov	r8, sl
  409482:	f8cd b018 	str.w	fp, [sp, #24]
  409486:	469a      	mov	sl, r3
  409488:	dd11      	ble.n	4094ae <_dtoa_r+0xb4e>
  40948a:	4649      	mov	r1, r9
  40948c:	2201      	movs	r2, #1
  40948e:	4620      	mov	r0, r4
  409490:	f001 fc12 	bl	40acb8 <__lshift>
  409494:	4641      	mov	r1, r8
  409496:	4681      	mov	r9, r0
  409498:	f001 fc60 	bl	40ad5c <__mcmp>
  40949c:	2800      	cmp	r0, #0
  40949e:	f340 8146 	ble.w	40972e <_dtoa_r+0xdce>
  4094a2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4094a6:	f000 8106 	beq.w	4096b6 <_dtoa_r+0xd56>
  4094aa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4094ae:	46b3      	mov	fp, r6
  4094b0:	f887 a000 	strb.w	sl, [r7]
  4094b4:	1c7d      	adds	r5, r7, #1
  4094b6:	9e06      	ldr	r6, [sp, #24]
  4094b8:	e5d2      	b.n	409060 <_dtoa_r+0x700>
  4094ba:	d104      	bne.n	4094c6 <_dtoa_r+0xb66>
  4094bc:	f01a 0f01 	tst.w	sl, #1
  4094c0:	d001      	beq.n	4094c6 <_dtoa_r+0xb66>
  4094c2:	e5bd      	b.n	409040 <_dtoa_r+0x6e0>
  4094c4:	4615      	mov	r5, r2
  4094c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4094ca:	2b30      	cmp	r3, #48	; 0x30
  4094cc:	f105 32ff 	add.w	r2, r5, #4294967295
  4094d0:	d0f8      	beq.n	4094c4 <_dtoa_r+0xb64>
  4094d2:	e5c5      	b.n	409060 <_dtoa_r+0x700>
  4094d4:	9904      	ldr	r1, [sp, #16]
  4094d6:	2230      	movs	r2, #48	; 0x30
  4094d8:	700a      	strb	r2, [r1, #0]
  4094da:	9a02      	ldr	r2, [sp, #8]
  4094dc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4094e0:	3201      	adds	r2, #1
  4094e2:	9202      	str	r2, [sp, #8]
  4094e4:	f7ff bbfc 	b.w	408ce0 <_dtoa_r+0x380>
  4094e8:	f000 80bb 	beq.w	409662 <_dtoa_r+0xd02>
  4094ec:	9b02      	ldr	r3, [sp, #8]
  4094ee:	425d      	negs	r5, r3
  4094f0:	4b84      	ldr	r3, [pc, #528]	; (409704 <_dtoa_r+0xda4>)
  4094f2:	f005 020f 	and.w	r2, r5, #15
  4094f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4094fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  409502:	f002 fb57 	bl	40bbb4 <__aeabi_dmul>
  409506:	112d      	asrs	r5, r5, #4
  409508:	4607      	mov	r7, r0
  40950a:	4688      	mov	r8, r1
  40950c:	f000 812c 	beq.w	409768 <_dtoa_r+0xe08>
  409510:	4e7d      	ldr	r6, [pc, #500]	; (409708 <_dtoa_r+0xda8>)
  409512:	f04f 0a02 	mov.w	sl, #2
  409516:	07eb      	lsls	r3, r5, #31
  409518:	d509      	bpl.n	40952e <_dtoa_r+0xbce>
  40951a:	4638      	mov	r0, r7
  40951c:	4641      	mov	r1, r8
  40951e:	e9d6 2300 	ldrd	r2, r3, [r6]
  409522:	f002 fb47 	bl	40bbb4 <__aeabi_dmul>
  409526:	f10a 0a01 	add.w	sl, sl, #1
  40952a:	4607      	mov	r7, r0
  40952c:	4688      	mov	r8, r1
  40952e:	106d      	asrs	r5, r5, #1
  409530:	f106 0608 	add.w	r6, r6, #8
  409534:	d1ef      	bne.n	409516 <_dtoa_r+0xbb6>
  409536:	e608      	b.n	40914a <_dtoa_r+0x7ea>
  409538:	6871      	ldr	r1, [r6, #4]
  40953a:	4620      	mov	r0, r4
  40953c:	f001 fa10 	bl	40a960 <_Balloc>
  409540:	6933      	ldr	r3, [r6, #16]
  409542:	3302      	adds	r3, #2
  409544:	009a      	lsls	r2, r3, #2
  409546:	4605      	mov	r5, r0
  409548:	f106 010c 	add.w	r1, r6, #12
  40954c:	300c      	adds	r0, #12
  40954e:	f7fc fdad 	bl	4060ac <memcpy>
  409552:	4629      	mov	r1, r5
  409554:	2201      	movs	r2, #1
  409556:	4620      	mov	r0, r4
  409558:	f001 fbae 	bl	40acb8 <__lshift>
  40955c:	9006      	str	r0, [sp, #24]
  40955e:	e4b5      	b.n	408ecc <_dtoa_r+0x56c>
  409560:	2b39      	cmp	r3, #57	; 0x39
  409562:	f8cd b018 	str.w	fp, [sp, #24]
  409566:	46d0      	mov	r8, sl
  409568:	f000 80a5 	beq.w	4096b6 <_dtoa_r+0xd56>
  40956c:	f103 0a01 	add.w	sl, r3, #1
  409570:	46b3      	mov	fp, r6
  409572:	f887 a000 	strb.w	sl, [r7]
  409576:	1c7d      	adds	r5, r7, #1
  409578:	9e06      	ldr	r6, [sp, #24]
  40957a:	e571      	b.n	409060 <_dtoa_r+0x700>
  40957c:	465a      	mov	r2, fp
  40957e:	46d0      	mov	r8, sl
  409580:	46b3      	mov	fp, r6
  409582:	469a      	mov	sl, r3
  409584:	4616      	mov	r6, r2
  409586:	e54f      	b.n	409028 <_dtoa_r+0x6c8>
  409588:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40958a:	495e      	ldr	r1, [pc, #376]	; (409704 <_dtoa_r+0xda4>)
  40958c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  409590:	462a      	mov	r2, r5
  409592:	4633      	mov	r3, r6
  409594:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  409598:	f002 fb0c 	bl	40bbb4 <__aeabi_dmul>
  40959c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4095a0:	4638      	mov	r0, r7
  4095a2:	4641      	mov	r1, r8
  4095a4:	f002 fdb6 	bl	40c114 <__aeabi_d2iz>
  4095a8:	4605      	mov	r5, r0
  4095aa:	f002 fa9d 	bl	40bae8 <__aeabi_i2d>
  4095ae:	460b      	mov	r3, r1
  4095b0:	4602      	mov	r2, r0
  4095b2:	4641      	mov	r1, r8
  4095b4:	4638      	mov	r0, r7
  4095b6:	f002 f949 	bl	40b84c <__aeabi_dsub>
  4095ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4095bc:	460f      	mov	r7, r1
  4095be:	9904      	ldr	r1, [sp, #16]
  4095c0:	3530      	adds	r5, #48	; 0x30
  4095c2:	2b01      	cmp	r3, #1
  4095c4:	700d      	strb	r5, [r1, #0]
  4095c6:	4606      	mov	r6, r0
  4095c8:	f101 0501 	add.w	r5, r1, #1
  4095cc:	d026      	beq.n	40961c <_dtoa_r+0xcbc>
  4095ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4095d0:	9a04      	ldr	r2, [sp, #16]
  4095d2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 409710 <_dtoa_r+0xdb0>
  4095d6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4095da:	4413      	add	r3, r2
  4095dc:	f04f 0a00 	mov.w	sl, #0
  4095e0:	4699      	mov	r9, r3
  4095e2:	4652      	mov	r2, sl
  4095e4:	465b      	mov	r3, fp
  4095e6:	4630      	mov	r0, r6
  4095e8:	4639      	mov	r1, r7
  4095ea:	f002 fae3 	bl	40bbb4 <__aeabi_dmul>
  4095ee:	460f      	mov	r7, r1
  4095f0:	4606      	mov	r6, r0
  4095f2:	f002 fd8f 	bl	40c114 <__aeabi_d2iz>
  4095f6:	4680      	mov	r8, r0
  4095f8:	f002 fa76 	bl	40bae8 <__aeabi_i2d>
  4095fc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  409600:	4602      	mov	r2, r0
  409602:	460b      	mov	r3, r1
  409604:	4630      	mov	r0, r6
  409606:	4639      	mov	r1, r7
  409608:	f002 f920 	bl	40b84c <__aeabi_dsub>
  40960c:	f805 8b01 	strb.w	r8, [r5], #1
  409610:	454d      	cmp	r5, r9
  409612:	4606      	mov	r6, r0
  409614:	460f      	mov	r7, r1
  409616:	d1e4      	bne.n	4095e2 <_dtoa_r+0xc82>
  409618:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40961c:	4b3b      	ldr	r3, [pc, #236]	; (40970c <_dtoa_r+0xdac>)
  40961e:	2200      	movs	r2, #0
  409620:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  409624:	f002 f914 	bl	40b850 <__adddf3>
  409628:	4632      	mov	r2, r6
  40962a:	463b      	mov	r3, r7
  40962c:	f002 fd34 	bl	40c098 <__aeabi_dcmplt>
  409630:	2800      	cmp	r0, #0
  409632:	d046      	beq.n	4096c2 <_dtoa_r+0xd62>
  409634:	9b15      	ldr	r3, [sp, #84]	; 0x54
  409636:	9302      	str	r3, [sp, #8]
  409638:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40963c:	f7ff bb43 	b.w	408cc6 <_dtoa_r+0x366>
  409640:	f04f 0800 	mov.w	r8, #0
  409644:	4646      	mov	r6, r8
  409646:	e6a9      	b.n	40939c <_dtoa_r+0xa3c>
  409648:	9b08      	ldr	r3, [sp, #32]
  40964a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40964c:	1a9d      	subs	r5, r3, r2
  40964e:	2300      	movs	r3, #0
  409650:	f7ff bb71 	b.w	408d36 <_dtoa_r+0x3d6>
  409654:	9b18      	ldr	r3, [sp, #96]	; 0x60
  409656:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  409658:	9d08      	ldr	r5, [sp, #32]
  40965a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40965e:	f7ff bb6a 	b.w	408d36 <_dtoa_r+0x3d6>
  409662:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  409666:	f04f 0a02 	mov.w	sl, #2
  40966a:	e56e      	b.n	40914a <_dtoa_r+0x7ea>
  40966c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40966e:	2b00      	cmp	r3, #0
  409670:	f43f aeb8 	beq.w	4093e4 <_dtoa_r+0xa84>
  409674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409676:	2b00      	cmp	r3, #0
  409678:	f77f aede 	ble.w	409438 <_dtoa_r+0xad8>
  40967c:	2200      	movs	r2, #0
  40967e:	4b24      	ldr	r3, [pc, #144]	; (409710 <_dtoa_r+0xdb0>)
  409680:	4638      	mov	r0, r7
  409682:	4641      	mov	r1, r8
  409684:	f002 fa96 	bl	40bbb4 <__aeabi_dmul>
  409688:	4607      	mov	r7, r0
  40968a:	4688      	mov	r8, r1
  40968c:	f10a 0001 	add.w	r0, sl, #1
  409690:	f002 fa2a 	bl	40bae8 <__aeabi_i2d>
  409694:	463a      	mov	r2, r7
  409696:	4643      	mov	r3, r8
  409698:	f002 fa8c 	bl	40bbb4 <__aeabi_dmul>
  40969c:	2200      	movs	r2, #0
  40969e:	4b17      	ldr	r3, [pc, #92]	; (4096fc <_dtoa_r+0xd9c>)
  4096a0:	f002 f8d6 	bl	40b850 <__adddf3>
  4096a4:	9a02      	ldr	r2, [sp, #8]
  4096a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4096a8:	9312      	str	r3, [sp, #72]	; 0x48
  4096aa:	3a01      	subs	r2, #1
  4096ac:	4605      	mov	r5, r0
  4096ae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4096b2:	9215      	str	r2, [sp, #84]	; 0x54
  4096b4:	e56a      	b.n	40918c <_dtoa_r+0x82c>
  4096b6:	2239      	movs	r2, #57	; 0x39
  4096b8:	46b3      	mov	fp, r6
  4096ba:	703a      	strb	r2, [r7, #0]
  4096bc:	9e06      	ldr	r6, [sp, #24]
  4096be:	1c7d      	adds	r5, r7, #1
  4096c0:	e4c0      	b.n	409044 <_dtoa_r+0x6e4>
  4096c2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4096c6:	2000      	movs	r0, #0
  4096c8:	4910      	ldr	r1, [pc, #64]	; (40970c <_dtoa_r+0xdac>)
  4096ca:	f002 f8bf 	bl	40b84c <__aeabi_dsub>
  4096ce:	4632      	mov	r2, r6
  4096d0:	463b      	mov	r3, r7
  4096d2:	f002 fcff 	bl	40c0d4 <__aeabi_dcmpgt>
  4096d6:	b908      	cbnz	r0, 4096dc <_dtoa_r+0xd7c>
  4096d8:	e6ae      	b.n	409438 <_dtoa_r+0xad8>
  4096da:	4615      	mov	r5, r2
  4096dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4096e0:	2b30      	cmp	r3, #48	; 0x30
  4096e2:	f105 32ff 	add.w	r2, r5, #4294967295
  4096e6:	d0f8      	beq.n	4096da <_dtoa_r+0xd7a>
  4096e8:	e5d7      	b.n	40929a <_dtoa_r+0x93a>
  4096ea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4096ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4096f0:	9302      	str	r3, [sp, #8]
  4096f2:	f7ff bae8 	b.w	408cc6 <_dtoa_r+0x366>
  4096f6:	970c      	str	r7, [sp, #48]	; 0x30
  4096f8:	f7ff bba5 	b.w	408e46 <_dtoa_r+0x4e6>
  4096fc:	401c0000 	.word	0x401c0000
  409700:	40140000 	.word	0x40140000
  409704:	0040d4e8 	.word	0x0040d4e8
  409708:	0040d4c0 	.word	0x0040d4c0
  40970c:	3fe00000 	.word	0x3fe00000
  409710:	40240000 	.word	0x40240000
  409714:	2b39      	cmp	r3, #57	; 0x39
  409716:	f8cd b018 	str.w	fp, [sp, #24]
  40971a:	46d0      	mov	r8, sl
  40971c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  409720:	469a      	mov	sl, r3
  409722:	d0c8      	beq.n	4096b6 <_dtoa_r+0xd56>
  409724:	f1bb 0f00 	cmp.w	fp, #0
  409728:	f73f aebf 	bgt.w	4094aa <_dtoa_r+0xb4a>
  40972c:	e6bf      	b.n	4094ae <_dtoa_r+0xb4e>
  40972e:	f47f aebe 	bne.w	4094ae <_dtoa_r+0xb4e>
  409732:	f01a 0f01 	tst.w	sl, #1
  409736:	f43f aeba 	beq.w	4094ae <_dtoa_r+0xb4e>
  40973a:	e6b2      	b.n	4094a2 <_dtoa_r+0xb42>
  40973c:	f04f 0800 	mov.w	r8, #0
  409740:	4646      	mov	r6, r8
  409742:	e5e9      	b.n	409318 <_dtoa_r+0x9b8>
  409744:	4631      	mov	r1, r6
  409746:	2300      	movs	r3, #0
  409748:	220a      	movs	r2, #10
  40974a:	4620      	mov	r0, r4
  40974c:	f001 f938 	bl	40a9c0 <__multadd>
  409750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409752:	2b00      	cmp	r3, #0
  409754:	4606      	mov	r6, r0
  409756:	dd0a      	ble.n	40976e <_dtoa_r+0xe0e>
  409758:	930a      	str	r3, [sp, #40]	; 0x28
  40975a:	f7ff bbaa 	b.w	408eb2 <_dtoa_r+0x552>
  40975e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409760:	2b02      	cmp	r3, #2
  409762:	dc23      	bgt.n	4097ac <_dtoa_r+0xe4c>
  409764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409766:	e43b      	b.n	408fe0 <_dtoa_r+0x680>
  409768:	f04f 0a02 	mov.w	sl, #2
  40976c:	e4ed      	b.n	40914a <_dtoa_r+0x7ea>
  40976e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  409770:	2b02      	cmp	r3, #2
  409772:	dc1b      	bgt.n	4097ac <_dtoa_r+0xe4c>
  409774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  409776:	e7ef      	b.n	409758 <_dtoa_r+0xdf8>
  409778:	2500      	movs	r5, #0
  40977a:	6465      	str	r5, [r4, #68]	; 0x44
  40977c:	4629      	mov	r1, r5
  40977e:	4620      	mov	r0, r4
  409780:	f001 f8ee 	bl	40a960 <_Balloc>
  409784:	f04f 33ff 	mov.w	r3, #4294967295
  409788:	930a      	str	r3, [sp, #40]	; 0x28
  40978a:	930f      	str	r3, [sp, #60]	; 0x3c
  40978c:	2301      	movs	r3, #1
  40978e:	9004      	str	r0, [sp, #16]
  409790:	9525      	str	r5, [sp, #148]	; 0x94
  409792:	6420      	str	r0, [r4, #64]	; 0x40
  409794:	930b      	str	r3, [sp, #44]	; 0x2c
  409796:	f7ff b9dd 	b.w	408b54 <_dtoa_r+0x1f4>
  40979a:	2501      	movs	r5, #1
  40979c:	f7ff b9a5 	b.w	408aea <_dtoa_r+0x18a>
  4097a0:	f43f ab69 	beq.w	408e76 <_dtoa_r+0x516>
  4097a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4097a8:	f7ff bbf9 	b.w	408f9e <_dtoa_r+0x63e>
  4097ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4097ae:	930a      	str	r3, [sp, #40]	; 0x28
  4097b0:	e5e5      	b.n	40937e <_dtoa_r+0xa1e>
  4097b2:	bf00      	nop

004097b4 <__sflush_r>:
  4097b4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4097b8:	b29a      	uxth	r2, r3
  4097ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4097be:	460d      	mov	r5, r1
  4097c0:	0711      	lsls	r1, r2, #28
  4097c2:	4680      	mov	r8, r0
  4097c4:	d43a      	bmi.n	40983c <__sflush_r+0x88>
  4097c6:	686a      	ldr	r2, [r5, #4]
  4097c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4097cc:	2a00      	cmp	r2, #0
  4097ce:	81ab      	strh	r3, [r5, #12]
  4097d0:	dd6f      	ble.n	4098b2 <__sflush_r+0xfe>
  4097d2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4097d4:	2c00      	cmp	r4, #0
  4097d6:	d049      	beq.n	40986c <__sflush_r+0xb8>
  4097d8:	2200      	movs	r2, #0
  4097da:	b29b      	uxth	r3, r3
  4097dc:	f8d8 6000 	ldr.w	r6, [r8]
  4097e0:	f8c8 2000 	str.w	r2, [r8]
  4097e4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4097e8:	d067      	beq.n	4098ba <__sflush_r+0x106>
  4097ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4097ec:	075f      	lsls	r7, r3, #29
  4097ee:	d505      	bpl.n	4097fc <__sflush_r+0x48>
  4097f0:	6869      	ldr	r1, [r5, #4]
  4097f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4097f4:	1a52      	subs	r2, r2, r1
  4097f6:	b10b      	cbz	r3, 4097fc <__sflush_r+0x48>
  4097f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4097fa:	1ad2      	subs	r2, r2, r3
  4097fc:	2300      	movs	r3, #0
  4097fe:	69e9      	ldr	r1, [r5, #28]
  409800:	4640      	mov	r0, r8
  409802:	47a0      	blx	r4
  409804:	1c44      	adds	r4, r0, #1
  409806:	d03c      	beq.n	409882 <__sflush_r+0xce>
  409808:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40980c:	692a      	ldr	r2, [r5, #16]
  40980e:	602a      	str	r2, [r5, #0]
  409810:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  409814:	2200      	movs	r2, #0
  409816:	81ab      	strh	r3, [r5, #12]
  409818:	04db      	lsls	r3, r3, #19
  40981a:	606a      	str	r2, [r5, #4]
  40981c:	d447      	bmi.n	4098ae <__sflush_r+0xfa>
  40981e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  409820:	f8c8 6000 	str.w	r6, [r8]
  409824:	b311      	cbz	r1, 40986c <__sflush_r+0xb8>
  409826:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40982a:	4299      	cmp	r1, r3
  40982c:	d002      	beq.n	409834 <__sflush_r+0x80>
  40982e:	4640      	mov	r0, r8
  409830:	f000 f9de 	bl	409bf0 <_free_r>
  409834:	2000      	movs	r0, #0
  409836:	6328      	str	r0, [r5, #48]	; 0x30
  409838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40983c:	692e      	ldr	r6, [r5, #16]
  40983e:	b1ae      	cbz	r6, 40986c <__sflush_r+0xb8>
  409840:	682c      	ldr	r4, [r5, #0]
  409842:	602e      	str	r6, [r5, #0]
  409844:	0791      	lsls	r1, r2, #30
  409846:	bf0c      	ite	eq
  409848:	696b      	ldreq	r3, [r5, #20]
  40984a:	2300      	movne	r3, #0
  40984c:	1ba4      	subs	r4, r4, r6
  40984e:	60ab      	str	r3, [r5, #8]
  409850:	e00a      	b.n	409868 <__sflush_r+0xb4>
  409852:	4623      	mov	r3, r4
  409854:	4632      	mov	r2, r6
  409856:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  409858:	69e9      	ldr	r1, [r5, #28]
  40985a:	4640      	mov	r0, r8
  40985c:	47b8      	blx	r7
  40985e:	2800      	cmp	r0, #0
  409860:	eba4 0400 	sub.w	r4, r4, r0
  409864:	4406      	add	r6, r0
  409866:	dd04      	ble.n	409872 <__sflush_r+0xbe>
  409868:	2c00      	cmp	r4, #0
  40986a:	dcf2      	bgt.n	409852 <__sflush_r+0x9e>
  40986c:	2000      	movs	r0, #0
  40986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409872:	89ab      	ldrh	r3, [r5, #12]
  409874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409878:	81ab      	strh	r3, [r5, #12]
  40987a:	f04f 30ff 	mov.w	r0, #4294967295
  40987e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409882:	f8d8 4000 	ldr.w	r4, [r8]
  409886:	2c1d      	cmp	r4, #29
  409888:	d8f3      	bhi.n	409872 <__sflush_r+0xbe>
  40988a:	4b19      	ldr	r3, [pc, #100]	; (4098f0 <__sflush_r+0x13c>)
  40988c:	40e3      	lsrs	r3, r4
  40988e:	43db      	mvns	r3, r3
  409890:	f013 0301 	ands.w	r3, r3, #1
  409894:	d1ed      	bne.n	409872 <__sflush_r+0xbe>
  409896:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40989a:	606b      	str	r3, [r5, #4]
  40989c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4098a0:	6929      	ldr	r1, [r5, #16]
  4098a2:	81ab      	strh	r3, [r5, #12]
  4098a4:	04da      	lsls	r2, r3, #19
  4098a6:	6029      	str	r1, [r5, #0]
  4098a8:	d5b9      	bpl.n	40981e <__sflush_r+0x6a>
  4098aa:	2c00      	cmp	r4, #0
  4098ac:	d1b7      	bne.n	40981e <__sflush_r+0x6a>
  4098ae:	6528      	str	r0, [r5, #80]	; 0x50
  4098b0:	e7b5      	b.n	40981e <__sflush_r+0x6a>
  4098b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4098b4:	2a00      	cmp	r2, #0
  4098b6:	dc8c      	bgt.n	4097d2 <__sflush_r+0x1e>
  4098b8:	e7d8      	b.n	40986c <__sflush_r+0xb8>
  4098ba:	2301      	movs	r3, #1
  4098bc:	69e9      	ldr	r1, [r5, #28]
  4098be:	4640      	mov	r0, r8
  4098c0:	47a0      	blx	r4
  4098c2:	1c43      	adds	r3, r0, #1
  4098c4:	4602      	mov	r2, r0
  4098c6:	d002      	beq.n	4098ce <__sflush_r+0x11a>
  4098c8:	89ab      	ldrh	r3, [r5, #12]
  4098ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4098cc:	e78e      	b.n	4097ec <__sflush_r+0x38>
  4098ce:	f8d8 3000 	ldr.w	r3, [r8]
  4098d2:	2b00      	cmp	r3, #0
  4098d4:	d0f8      	beq.n	4098c8 <__sflush_r+0x114>
  4098d6:	2b1d      	cmp	r3, #29
  4098d8:	d001      	beq.n	4098de <__sflush_r+0x12a>
  4098da:	2b16      	cmp	r3, #22
  4098dc:	d102      	bne.n	4098e4 <__sflush_r+0x130>
  4098de:	f8c8 6000 	str.w	r6, [r8]
  4098e2:	e7c3      	b.n	40986c <__sflush_r+0xb8>
  4098e4:	89ab      	ldrh	r3, [r5, #12]
  4098e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4098ea:	81ab      	strh	r3, [r5, #12]
  4098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4098f0:	20400001 	.word	0x20400001

004098f4 <_fflush_r>:
  4098f4:	b538      	push	{r3, r4, r5, lr}
  4098f6:	460d      	mov	r5, r1
  4098f8:	4604      	mov	r4, r0
  4098fa:	b108      	cbz	r0, 409900 <_fflush_r+0xc>
  4098fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4098fe:	b1bb      	cbz	r3, 409930 <_fflush_r+0x3c>
  409900:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  409904:	b188      	cbz	r0, 40992a <_fflush_r+0x36>
  409906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  409908:	07db      	lsls	r3, r3, #31
  40990a:	d401      	bmi.n	409910 <_fflush_r+0x1c>
  40990c:	0581      	lsls	r1, r0, #22
  40990e:	d517      	bpl.n	409940 <_fflush_r+0x4c>
  409910:	4620      	mov	r0, r4
  409912:	4629      	mov	r1, r5
  409914:	f7ff ff4e 	bl	4097b4 <__sflush_r>
  409918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40991a:	07da      	lsls	r2, r3, #31
  40991c:	4604      	mov	r4, r0
  40991e:	d402      	bmi.n	409926 <_fflush_r+0x32>
  409920:	89ab      	ldrh	r3, [r5, #12]
  409922:	059b      	lsls	r3, r3, #22
  409924:	d507      	bpl.n	409936 <_fflush_r+0x42>
  409926:	4620      	mov	r0, r4
  409928:	bd38      	pop	{r3, r4, r5, pc}
  40992a:	4604      	mov	r4, r0
  40992c:	4620      	mov	r0, r4
  40992e:	bd38      	pop	{r3, r4, r5, pc}
  409930:	f000 f838 	bl	4099a4 <__sinit>
  409934:	e7e4      	b.n	409900 <_fflush_r+0xc>
  409936:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409938:	f000 fc04 	bl	40a144 <__retarget_lock_release_recursive>
  40993c:	4620      	mov	r0, r4
  40993e:	bd38      	pop	{r3, r4, r5, pc}
  409940:	6da8      	ldr	r0, [r5, #88]	; 0x58
  409942:	f000 fbfd 	bl	40a140 <__retarget_lock_acquire_recursive>
  409946:	e7e3      	b.n	409910 <_fflush_r+0x1c>

00409948 <_cleanup_r>:
  409948:	4901      	ldr	r1, [pc, #4]	; (409950 <_cleanup_r+0x8>)
  40994a:	f000 bbaf 	b.w	40a0ac <_fwalk_reent>
  40994e:	bf00      	nop
  409950:	0040b6dd 	.word	0x0040b6dd

00409954 <std.isra.0>:
  409954:	b510      	push	{r4, lr}
  409956:	2300      	movs	r3, #0
  409958:	4604      	mov	r4, r0
  40995a:	8181      	strh	r1, [r0, #12]
  40995c:	81c2      	strh	r2, [r0, #14]
  40995e:	6003      	str	r3, [r0, #0]
  409960:	6043      	str	r3, [r0, #4]
  409962:	6083      	str	r3, [r0, #8]
  409964:	6643      	str	r3, [r0, #100]	; 0x64
  409966:	6103      	str	r3, [r0, #16]
  409968:	6143      	str	r3, [r0, #20]
  40996a:	6183      	str	r3, [r0, #24]
  40996c:	4619      	mov	r1, r3
  40996e:	2208      	movs	r2, #8
  409970:	305c      	adds	r0, #92	; 0x5c
  409972:	f7fc fc35 	bl	4061e0 <memset>
  409976:	4807      	ldr	r0, [pc, #28]	; (409994 <std.isra.0+0x40>)
  409978:	4907      	ldr	r1, [pc, #28]	; (409998 <std.isra.0+0x44>)
  40997a:	4a08      	ldr	r2, [pc, #32]	; (40999c <std.isra.0+0x48>)
  40997c:	4b08      	ldr	r3, [pc, #32]	; (4099a0 <std.isra.0+0x4c>)
  40997e:	6220      	str	r0, [r4, #32]
  409980:	61e4      	str	r4, [r4, #28]
  409982:	6261      	str	r1, [r4, #36]	; 0x24
  409984:	62a2      	str	r2, [r4, #40]	; 0x28
  409986:	62e3      	str	r3, [r4, #44]	; 0x2c
  409988:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  409990:	f000 bbd2 	b.w	40a138 <__retarget_lock_init_recursive>
  409994:	0040b2c5 	.word	0x0040b2c5
  409998:	0040b2e9 	.word	0x0040b2e9
  40999c:	0040b325 	.word	0x0040b325
  4099a0:	0040b345 	.word	0x0040b345

004099a4 <__sinit>:
  4099a4:	b510      	push	{r4, lr}
  4099a6:	4604      	mov	r4, r0
  4099a8:	4812      	ldr	r0, [pc, #72]	; (4099f4 <__sinit+0x50>)
  4099aa:	f000 fbc9 	bl	40a140 <__retarget_lock_acquire_recursive>
  4099ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4099b0:	b9d2      	cbnz	r2, 4099e8 <__sinit+0x44>
  4099b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4099b6:	4810      	ldr	r0, [pc, #64]	; (4099f8 <__sinit+0x54>)
  4099b8:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4099bc:	2103      	movs	r1, #3
  4099be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4099c2:	63e0      	str	r0, [r4, #60]	; 0x3c
  4099c4:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4099c8:	6860      	ldr	r0, [r4, #4]
  4099ca:	2104      	movs	r1, #4
  4099cc:	f7ff ffc2 	bl	409954 <std.isra.0>
  4099d0:	2201      	movs	r2, #1
  4099d2:	2109      	movs	r1, #9
  4099d4:	68a0      	ldr	r0, [r4, #8]
  4099d6:	f7ff ffbd 	bl	409954 <std.isra.0>
  4099da:	2202      	movs	r2, #2
  4099dc:	2112      	movs	r1, #18
  4099de:	68e0      	ldr	r0, [r4, #12]
  4099e0:	f7ff ffb8 	bl	409954 <std.isra.0>
  4099e4:	2301      	movs	r3, #1
  4099e6:	63a3      	str	r3, [r4, #56]	; 0x38
  4099e8:	4802      	ldr	r0, [pc, #8]	; (4099f4 <__sinit+0x50>)
  4099ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4099ee:	f000 bba9 	b.w	40a144 <__retarget_lock_release_recursive>
  4099f2:	bf00      	nop
  4099f4:	2040cb38 	.word	0x2040cb38
  4099f8:	00409949 	.word	0x00409949

004099fc <__sfp_lock_acquire>:
  4099fc:	4801      	ldr	r0, [pc, #4]	; (409a04 <__sfp_lock_acquire+0x8>)
  4099fe:	f000 bb9f 	b.w	40a140 <__retarget_lock_acquire_recursive>
  409a02:	bf00      	nop
  409a04:	2040cb4c 	.word	0x2040cb4c

00409a08 <__sfp_lock_release>:
  409a08:	4801      	ldr	r0, [pc, #4]	; (409a10 <__sfp_lock_release+0x8>)
  409a0a:	f000 bb9b 	b.w	40a144 <__retarget_lock_release_recursive>
  409a0e:	bf00      	nop
  409a10:	2040cb4c 	.word	0x2040cb4c

00409a14 <__libc_fini_array>:
  409a14:	b538      	push	{r3, r4, r5, lr}
  409a16:	4c0a      	ldr	r4, [pc, #40]	; (409a40 <__libc_fini_array+0x2c>)
  409a18:	4d0a      	ldr	r5, [pc, #40]	; (409a44 <__libc_fini_array+0x30>)
  409a1a:	1b64      	subs	r4, r4, r5
  409a1c:	10a4      	asrs	r4, r4, #2
  409a1e:	d00a      	beq.n	409a36 <__libc_fini_array+0x22>
  409a20:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  409a24:	3b01      	subs	r3, #1
  409a26:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  409a2a:	3c01      	subs	r4, #1
  409a2c:	f855 3904 	ldr.w	r3, [r5], #-4
  409a30:	4798      	blx	r3
  409a32:	2c00      	cmp	r4, #0
  409a34:	d1f9      	bne.n	409a2a <__libc_fini_array+0x16>
  409a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  409a3a:	f003 be4b 	b.w	40d6d4 <_fini>
  409a3e:	bf00      	nop
  409a40:	0040d6e4 	.word	0x0040d6e4
  409a44:	0040d6e0 	.word	0x0040d6e0

00409a48 <__fputwc>:
  409a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409a4c:	b082      	sub	sp, #8
  409a4e:	4680      	mov	r8, r0
  409a50:	4689      	mov	r9, r1
  409a52:	4614      	mov	r4, r2
  409a54:	f000 fb54 	bl	40a100 <__locale_mb_cur_max>
  409a58:	2801      	cmp	r0, #1
  409a5a:	d036      	beq.n	409aca <__fputwc+0x82>
  409a5c:	464a      	mov	r2, r9
  409a5e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  409a62:	a901      	add	r1, sp, #4
  409a64:	4640      	mov	r0, r8
  409a66:	f001 fd47 	bl	40b4f8 <_wcrtomb_r>
  409a6a:	1c42      	adds	r2, r0, #1
  409a6c:	4606      	mov	r6, r0
  409a6e:	d025      	beq.n	409abc <__fputwc+0x74>
  409a70:	b3a8      	cbz	r0, 409ade <__fputwc+0x96>
  409a72:	f89d e004 	ldrb.w	lr, [sp, #4]
  409a76:	2500      	movs	r5, #0
  409a78:	f10d 0a04 	add.w	sl, sp, #4
  409a7c:	e009      	b.n	409a92 <__fputwc+0x4a>
  409a7e:	6823      	ldr	r3, [r4, #0]
  409a80:	1c5a      	adds	r2, r3, #1
  409a82:	6022      	str	r2, [r4, #0]
  409a84:	f883 e000 	strb.w	lr, [r3]
  409a88:	3501      	adds	r5, #1
  409a8a:	42b5      	cmp	r5, r6
  409a8c:	d227      	bcs.n	409ade <__fputwc+0x96>
  409a8e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  409a92:	68a3      	ldr	r3, [r4, #8]
  409a94:	3b01      	subs	r3, #1
  409a96:	2b00      	cmp	r3, #0
  409a98:	60a3      	str	r3, [r4, #8]
  409a9a:	daf0      	bge.n	409a7e <__fputwc+0x36>
  409a9c:	69a7      	ldr	r7, [r4, #24]
  409a9e:	42bb      	cmp	r3, r7
  409aa0:	4671      	mov	r1, lr
  409aa2:	4622      	mov	r2, r4
  409aa4:	4640      	mov	r0, r8
  409aa6:	db02      	blt.n	409aae <__fputwc+0x66>
  409aa8:	f1be 0f0a 	cmp.w	lr, #10
  409aac:	d1e7      	bne.n	409a7e <__fputwc+0x36>
  409aae:	f001 fccb 	bl	40b448 <__swbuf_r>
  409ab2:	1c43      	adds	r3, r0, #1
  409ab4:	d1e8      	bne.n	409a88 <__fputwc+0x40>
  409ab6:	b002      	add	sp, #8
  409ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409abc:	89a3      	ldrh	r3, [r4, #12]
  409abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409ac2:	81a3      	strh	r3, [r4, #12]
  409ac4:	b002      	add	sp, #8
  409ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409aca:	f109 33ff 	add.w	r3, r9, #4294967295
  409ace:	2bfe      	cmp	r3, #254	; 0xfe
  409ad0:	d8c4      	bhi.n	409a5c <__fputwc+0x14>
  409ad2:	fa5f fe89 	uxtb.w	lr, r9
  409ad6:	4606      	mov	r6, r0
  409ad8:	f88d e004 	strb.w	lr, [sp, #4]
  409adc:	e7cb      	b.n	409a76 <__fputwc+0x2e>
  409ade:	4648      	mov	r0, r9
  409ae0:	b002      	add	sp, #8
  409ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ae6:	bf00      	nop

00409ae8 <_fputwc_r>:
  409ae8:	b530      	push	{r4, r5, lr}
  409aea:	6e53      	ldr	r3, [r2, #100]	; 0x64
  409aec:	f013 0f01 	tst.w	r3, #1
  409af0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  409af4:	4614      	mov	r4, r2
  409af6:	b083      	sub	sp, #12
  409af8:	4605      	mov	r5, r0
  409afa:	b29a      	uxth	r2, r3
  409afc:	d101      	bne.n	409b02 <_fputwc_r+0x1a>
  409afe:	0590      	lsls	r0, r2, #22
  409b00:	d51c      	bpl.n	409b3c <_fputwc_r+0x54>
  409b02:	0490      	lsls	r0, r2, #18
  409b04:	d406      	bmi.n	409b14 <_fputwc_r+0x2c>
  409b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
  409b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  409b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  409b10:	81a3      	strh	r3, [r4, #12]
  409b12:	6662      	str	r2, [r4, #100]	; 0x64
  409b14:	4628      	mov	r0, r5
  409b16:	4622      	mov	r2, r4
  409b18:	f7ff ff96 	bl	409a48 <__fputwc>
  409b1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409b1e:	07da      	lsls	r2, r3, #31
  409b20:	4605      	mov	r5, r0
  409b22:	d402      	bmi.n	409b2a <_fputwc_r+0x42>
  409b24:	89a3      	ldrh	r3, [r4, #12]
  409b26:	059b      	lsls	r3, r3, #22
  409b28:	d502      	bpl.n	409b30 <_fputwc_r+0x48>
  409b2a:	4628      	mov	r0, r5
  409b2c:	b003      	add	sp, #12
  409b2e:	bd30      	pop	{r4, r5, pc}
  409b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b32:	f000 fb07 	bl	40a144 <__retarget_lock_release_recursive>
  409b36:	4628      	mov	r0, r5
  409b38:	b003      	add	sp, #12
  409b3a:	bd30      	pop	{r4, r5, pc}
  409b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409b3e:	9101      	str	r1, [sp, #4]
  409b40:	f000 fafe 	bl	40a140 <__retarget_lock_acquire_recursive>
  409b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409b48:	9901      	ldr	r1, [sp, #4]
  409b4a:	b29a      	uxth	r2, r3
  409b4c:	e7d9      	b.n	409b02 <_fputwc_r+0x1a>
  409b4e:	bf00      	nop

00409b50 <_malloc_trim_r>:
  409b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409b52:	4f24      	ldr	r7, [pc, #144]	; (409be4 <_malloc_trim_r+0x94>)
  409b54:	460c      	mov	r4, r1
  409b56:	4606      	mov	r6, r0
  409b58:	f000 fef6 	bl	40a948 <__malloc_lock>
  409b5c:	68bb      	ldr	r3, [r7, #8]
  409b5e:	685d      	ldr	r5, [r3, #4]
  409b60:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  409b64:	310f      	adds	r1, #15
  409b66:	f025 0503 	bic.w	r5, r5, #3
  409b6a:	4429      	add	r1, r5
  409b6c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  409b70:	f021 010f 	bic.w	r1, r1, #15
  409b74:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  409b78:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  409b7c:	db07      	blt.n	409b8e <_malloc_trim_r+0x3e>
  409b7e:	2100      	movs	r1, #0
  409b80:	4630      	mov	r0, r6
  409b82:	f001 fb8d 	bl	40b2a0 <_sbrk_r>
  409b86:	68bb      	ldr	r3, [r7, #8]
  409b88:	442b      	add	r3, r5
  409b8a:	4298      	cmp	r0, r3
  409b8c:	d004      	beq.n	409b98 <_malloc_trim_r+0x48>
  409b8e:	4630      	mov	r0, r6
  409b90:	f000 fee0 	bl	40a954 <__malloc_unlock>
  409b94:	2000      	movs	r0, #0
  409b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409b98:	4261      	negs	r1, r4
  409b9a:	4630      	mov	r0, r6
  409b9c:	f001 fb80 	bl	40b2a0 <_sbrk_r>
  409ba0:	3001      	adds	r0, #1
  409ba2:	d00d      	beq.n	409bc0 <_malloc_trim_r+0x70>
  409ba4:	4b10      	ldr	r3, [pc, #64]	; (409be8 <_malloc_trim_r+0x98>)
  409ba6:	68ba      	ldr	r2, [r7, #8]
  409ba8:	6819      	ldr	r1, [r3, #0]
  409baa:	1b2d      	subs	r5, r5, r4
  409bac:	f045 0501 	orr.w	r5, r5, #1
  409bb0:	4630      	mov	r0, r6
  409bb2:	1b09      	subs	r1, r1, r4
  409bb4:	6055      	str	r5, [r2, #4]
  409bb6:	6019      	str	r1, [r3, #0]
  409bb8:	f000 fecc 	bl	40a954 <__malloc_unlock>
  409bbc:	2001      	movs	r0, #1
  409bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409bc0:	2100      	movs	r1, #0
  409bc2:	4630      	mov	r0, r6
  409bc4:	f001 fb6c 	bl	40b2a0 <_sbrk_r>
  409bc8:	68ba      	ldr	r2, [r7, #8]
  409bca:	1a83      	subs	r3, r0, r2
  409bcc:	2b0f      	cmp	r3, #15
  409bce:	ddde      	ble.n	409b8e <_malloc_trim_r+0x3e>
  409bd0:	4c06      	ldr	r4, [pc, #24]	; (409bec <_malloc_trim_r+0x9c>)
  409bd2:	4905      	ldr	r1, [pc, #20]	; (409be8 <_malloc_trim_r+0x98>)
  409bd4:	6824      	ldr	r4, [r4, #0]
  409bd6:	f043 0301 	orr.w	r3, r3, #1
  409bda:	1b00      	subs	r0, r0, r4
  409bdc:	6053      	str	r3, [r2, #4]
  409bde:	6008      	str	r0, [r1, #0]
  409be0:	e7d5      	b.n	409b8e <_malloc_trim_r+0x3e>
  409be2:	bf00      	nop
  409be4:	204005c0 	.word	0x204005c0
  409be8:	2040c964 	.word	0x2040c964
  409bec:	204009c8 	.word	0x204009c8

00409bf0 <_free_r>:
  409bf0:	2900      	cmp	r1, #0
  409bf2:	d044      	beq.n	409c7e <_free_r+0x8e>
  409bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409bf8:	460d      	mov	r5, r1
  409bfa:	4680      	mov	r8, r0
  409bfc:	f000 fea4 	bl	40a948 <__malloc_lock>
  409c00:	f855 7c04 	ldr.w	r7, [r5, #-4]
  409c04:	4969      	ldr	r1, [pc, #420]	; (409dac <_free_r+0x1bc>)
  409c06:	f027 0301 	bic.w	r3, r7, #1
  409c0a:	f1a5 0408 	sub.w	r4, r5, #8
  409c0e:	18e2      	adds	r2, r4, r3
  409c10:	688e      	ldr	r6, [r1, #8]
  409c12:	6850      	ldr	r0, [r2, #4]
  409c14:	42b2      	cmp	r2, r6
  409c16:	f020 0003 	bic.w	r0, r0, #3
  409c1a:	d05e      	beq.n	409cda <_free_r+0xea>
  409c1c:	07fe      	lsls	r6, r7, #31
  409c1e:	6050      	str	r0, [r2, #4]
  409c20:	d40b      	bmi.n	409c3a <_free_r+0x4a>
  409c22:	f855 7c08 	ldr.w	r7, [r5, #-8]
  409c26:	1be4      	subs	r4, r4, r7
  409c28:	f101 0e08 	add.w	lr, r1, #8
  409c2c:	68a5      	ldr	r5, [r4, #8]
  409c2e:	4575      	cmp	r5, lr
  409c30:	443b      	add	r3, r7
  409c32:	d06d      	beq.n	409d10 <_free_r+0x120>
  409c34:	68e7      	ldr	r7, [r4, #12]
  409c36:	60ef      	str	r7, [r5, #12]
  409c38:	60bd      	str	r5, [r7, #8]
  409c3a:	1815      	adds	r5, r2, r0
  409c3c:	686d      	ldr	r5, [r5, #4]
  409c3e:	07ed      	lsls	r5, r5, #31
  409c40:	d53e      	bpl.n	409cc0 <_free_r+0xd0>
  409c42:	f043 0201 	orr.w	r2, r3, #1
  409c46:	6062      	str	r2, [r4, #4]
  409c48:	50e3      	str	r3, [r4, r3]
  409c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  409c4e:	d217      	bcs.n	409c80 <_free_r+0x90>
  409c50:	08db      	lsrs	r3, r3, #3
  409c52:	1c58      	adds	r0, r3, #1
  409c54:	109a      	asrs	r2, r3, #2
  409c56:	684d      	ldr	r5, [r1, #4]
  409c58:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  409c5c:	60a7      	str	r7, [r4, #8]
  409c5e:	2301      	movs	r3, #1
  409c60:	4093      	lsls	r3, r2
  409c62:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  409c66:	432b      	orrs	r3, r5
  409c68:	3a08      	subs	r2, #8
  409c6a:	60e2      	str	r2, [r4, #12]
  409c6c:	604b      	str	r3, [r1, #4]
  409c6e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  409c72:	60fc      	str	r4, [r7, #12]
  409c74:	4640      	mov	r0, r8
  409c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409c7a:	f000 be6b 	b.w	40a954 <__malloc_unlock>
  409c7e:	4770      	bx	lr
  409c80:	0a5a      	lsrs	r2, r3, #9
  409c82:	2a04      	cmp	r2, #4
  409c84:	d852      	bhi.n	409d2c <_free_r+0x13c>
  409c86:	099a      	lsrs	r2, r3, #6
  409c88:	f102 0739 	add.w	r7, r2, #57	; 0x39
  409c8c:	00ff      	lsls	r7, r7, #3
  409c8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  409c92:	19c8      	adds	r0, r1, r7
  409c94:	59ca      	ldr	r2, [r1, r7]
  409c96:	3808      	subs	r0, #8
  409c98:	4290      	cmp	r0, r2
  409c9a:	d04f      	beq.n	409d3c <_free_r+0x14c>
  409c9c:	6851      	ldr	r1, [r2, #4]
  409c9e:	f021 0103 	bic.w	r1, r1, #3
  409ca2:	428b      	cmp	r3, r1
  409ca4:	d232      	bcs.n	409d0c <_free_r+0x11c>
  409ca6:	6892      	ldr	r2, [r2, #8]
  409ca8:	4290      	cmp	r0, r2
  409caa:	d1f7      	bne.n	409c9c <_free_r+0xac>
  409cac:	68c3      	ldr	r3, [r0, #12]
  409cae:	60a0      	str	r0, [r4, #8]
  409cb0:	60e3      	str	r3, [r4, #12]
  409cb2:	609c      	str	r4, [r3, #8]
  409cb4:	60c4      	str	r4, [r0, #12]
  409cb6:	4640      	mov	r0, r8
  409cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  409cbc:	f000 be4a 	b.w	40a954 <__malloc_unlock>
  409cc0:	6895      	ldr	r5, [r2, #8]
  409cc2:	4f3b      	ldr	r7, [pc, #236]	; (409db0 <_free_r+0x1c0>)
  409cc4:	42bd      	cmp	r5, r7
  409cc6:	4403      	add	r3, r0
  409cc8:	d040      	beq.n	409d4c <_free_r+0x15c>
  409cca:	68d0      	ldr	r0, [r2, #12]
  409ccc:	60e8      	str	r0, [r5, #12]
  409cce:	f043 0201 	orr.w	r2, r3, #1
  409cd2:	6085      	str	r5, [r0, #8]
  409cd4:	6062      	str	r2, [r4, #4]
  409cd6:	50e3      	str	r3, [r4, r3]
  409cd8:	e7b7      	b.n	409c4a <_free_r+0x5a>
  409cda:	07ff      	lsls	r7, r7, #31
  409cdc:	4403      	add	r3, r0
  409cde:	d407      	bmi.n	409cf0 <_free_r+0x100>
  409ce0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  409ce4:	1aa4      	subs	r4, r4, r2
  409ce6:	4413      	add	r3, r2
  409ce8:	68a0      	ldr	r0, [r4, #8]
  409cea:	68e2      	ldr	r2, [r4, #12]
  409cec:	60c2      	str	r2, [r0, #12]
  409cee:	6090      	str	r0, [r2, #8]
  409cf0:	4a30      	ldr	r2, [pc, #192]	; (409db4 <_free_r+0x1c4>)
  409cf2:	6812      	ldr	r2, [r2, #0]
  409cf4:	f043 0001 	orr.w	r0, r3, #1
  409cf8:	4293      	cmp	r3, r2
  409cfa:	6060      	str	r0, [r4, #4]
  409cfc:	608c      	str	r4, [r1, #8]
  409cfe:	d3b9      	bcc.n	409c74 <_free_r+0x84>
  409d00:	4b2d      	ldr	r3, [pc, #180]	; (409db8 <_free_r+0x1c8>)
  409d02:	4640      	mov	r0, r8
  409d04:	6819      	ldr	r1, [r3, #0]
  409d06:	f7ff ff23 	bl	409b50 <_malloc_trim_r>
  409d0a:	e7b3      	b.n	409c74 <_free_r+0x84>
  409d0c:	4610      	mov	r0, r2
  409d0e:	e7cd      	b.n	409cac <_free_r+0xbc>
  409d10:	1811      	adds	r1, r2, r0
  409d12:	6849      	ldr	r1, [r1, #4]
  409d14:	07c9      	lsls	r1, r1, #31
  409d16:	d444      	bmi.n	409da2 <_free_r+0x1b2>
  409d18:	6891      	ldr	r1, [r2, #8]
  409d1a:	68d2      	ldr	r2, [r2, #12]
  409d1c:	60ca      	str	r2, [r1, #12]
  409d1e:	4403      	add	r3, r0
  409d20:	f043 0001 	orr.w	r0, r3, #1
  409d24:	6091      	str	r1, [r2, #8]
  409d26:	6060      	str	r0, [r4, #4]
  409d28:	50e3      	str	r3, [r4, r3]
  409d2a:	e7a3      	b.n	409c74 <_free_r+0x84>
  409d2c:	2a14      	cmp	r2, #20
  409d2e:	d816      	bhi.n	409d5e <_free_r+0x16e>
  409d30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  409d34:	00ff      	lsls	r7, r7, #3
  409d36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  409d3a:	e7aa      	b.n	409c92 <_free_r+0xa2>
  409d3c:	10aa      	asrs	r2, r5, #2
  409d3e:	2301      	movs	r3, #1
  409d40:	684d      	ldr	r5, [r1, #4]
  409d42:	4093      	lsls	r3, r2
  409d44:	432b      	orrs	r3, r5
  409d46:	604b      	str	r3, [r1, #4]
  409d48:	4603      	mov	r3, r0
  409d4a:	e7b0      	b.n	409cae <_free_r+0xbe>
  409d4c:	f043 0201 	orr.w	r2, r3, #1
  409d50:	614c      	str	r4, [r1, #20]
  409d52:	610c      	str	r4, [r1, #16]
  409d54:	60e5      	str	r5, [r4, #12]
  409d56:	60a5      	str	r5, [r4, #8]
  409d58:	6062      	str	r2, [r4, #4]
  409d5a:	50e3      	str	r3, [r4, r3]
  409d5c:	e78a      	b.n	409c74 <_free_r+0x84>
  409d5e:	2a54      	cmp	r2, #84	; 0x54
  409d60:	d806      	bhi.n	409d70 <_free_r+0x180>
  409d62:	0b1a      	lsrs	r2, r3, #12
  409d64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  409d68:	00ff      	lsls	r7, r7, #3
  409d6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  409d6e:	e790      	b.n	409c92 <_free_r+0xa2>
  409d70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  409d74:	d806      	bhi.n	409d84 <_free_r+0x194>
  409d76:	0bda      	lsrs	r2, r3, #15
  409d78:	f102 0778 	add.w	r7, r2, #120	; 0x78
  409d7c:	00ff      	lsls	r7, r7, #3
  409d7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  409d82:	e786      	b.n	409c92 <_free_r+0xa2>
  409d84:	f240 5054 	movw	r0, #1364	; 0x554
  409d88:	4282      	cmp	r2, r0
  409d8a:	d806      	bhi.n	409d9a <_free_r+0x1aa>
  409d8c:	0c9a      	lsrs	r2, r3, #18
  409d8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  409d92:	00ff      	lsls	r7, r7, #3
  409d94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  409d98:	e77b      	b.n	409c92 <_free_r+0xa2>
  409d9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  409d9e:	257e      	movs	r5, #126	; 0x7e
  409da0:	e777      	b.n	409c92 <_free_r+0xa2>
  409da2:	f043 0101 	orr.w	r1, r3, #1
  409da6:	6061      	str	r1, [r4, #4]
  409da8:	6013      	str	r3, [r2, #0]
  409daa:	e763      	b.n	409c74 <_free_r+0x84>
  409dac:	204005c0 	.word	0x204005c0
  409db0:	204005c8 	.word	0x204005c8
  409db4:	204009cc 	.word	0x204009cc
  409db8:	2040c994 	.word	0x2040c994

00409dbc <__sfvwrite_r>:
  409dbc:	6893      	ldr	r3, [r2, #8]
  409dbe:	2b00      	cmp	r3, #0
  409dc0:	d073      	beq.n	409eaa <__sfvwrite_r+0xee>
  409dc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409dc6:	898b      	ldrh	r3, [r1, #12]
  409dc8:	b083      	sub	sp, #12
  409dca:	460c      	mov	r4, r1
  409dcc:	0719      	lsls	r1, r3, #28
  409dce:	9000      	str	r0, [sp, #0]
  409dd0:	4616      	mov	r6, r2
  409dd2:	d526      	bpl.n	409e22 <__sfvwrite_r+0x66>
  409dd4:	6922      	ldr	r2, [r4, #16]
  409dd6:	b322      	cbz	r2, 409e22 <__sfvwrite_r+0x66>
  409dd8:	f013 0002 	ands.w	r0, r3, #2
  409ddc:	6835      	ldr	r5, [r6, #0]
  409dde:	d02c      	beq.n	409e3a <__sfvwrite_r+0x7e>
  409de0:	f04f 0900 	mov.w	r9, #0
  409de4:	4fb0      	ldr	r7, [pc, #704]	; (40a0a8 <__sfvwrite_r+0x2ec>)
  409de6:	46c8      	mov	r8, r9
  409de8:	46b2      	mov	sl, r6
  409dea:	45b8      	cmp	r8, r7
  409dec:	4643      	mov	r3, r8
  409dee:	464a      	mov	r2, r9
  409df0:	bf28      	it	cs
  409df2:	463b      	movcs	r3, r7
  409df4:	9800      	ldr	r0, [sp, #0]
  409df6:	f1b8 0f00 	cmp.w	r8, #0
  409dfa:	d050      	beq.n	409e9e <__sfvwrite_r+0xe2>
  409dfc:	69e1      	ldr	r1, [r4, #28]
  409dfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  409e00:	47b0      	blx	r6
  409e02:	2800      	cmp	r0, #0
  409e04:	dd58      	ble.n	409eb8 <__sfvwrite_r+0xfc>
  409e06:	f8da 3008 	ldr.w	r3, [sl, #8]
  409e0a:	1a1b      	subs	r3, r3, r0
  409e0c:	4481      	add	r9, r0
  409e0e:	eba8 0800 	sub.w	r8, r8, r0
  409e12:	f8ca 3008 	str.w	r3, [sl, #8]
  409e16:	2b00      	cmp	r3, #0
  409e18:	d1e7      	bne.n	409dea <__sfvwrite_r+0x2e>
  409e1a:	2000      	movs	r0, #0
  409e1c:	b003      	add	sp, #12
  409e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409e22:	4621      	mov	r1, r4
  409e24:	9800      	ldr	r0, [sp, #0]
  409e26:	f7fe fc91 	bl	40874c <__swsetup_r>
  409e2a:	2800      	cmp	r0, #0
  409e2c:	f040 8133 	bne.w	40a096 <__sfvwrite_r+0x2da>
  409e30:	89a3      	ldrh	r3, [r4, #12]
  409e32:	6835      	ldr	r5, [r6, #0]
  409e34:	f013 0002 	ands.w	r0, r3, #2
  409e38:	d1d2      	bne.n	409de0 <__sfvwrite_r+0x24>
  409e3a:	f013 0901 	ands.w	r9, r3, #1
  409e3e:	d145      	bne.n	409ecc <__sfvwrite_r+0x110>
  409e40:	464f      	mov	r7, r9
  409e42:	9601      	str	r6, [sp, #4]
  409e44:	b337      	cbz	r7, 409e94 <__sfvwrite_r+0xd8>
  409e46:	059a      	lsls	r2, r3, #22
  409e48:	f8d4 8008 	ldr.w	r8, [r4, #8]
  409e4c:	f140 8083 	bpl.w	409f56 <__sfvwrite_r+0x19a>
  409e50:	4547      	cmp	r7, r8
  409e52:	46c3      	mov	fp, r8
  409e54:	f0c0 80ab 	bcc.w	409fae <__sfvwrite_r+0x1f2>
  409e58:	f413 6f90 	tst.w	r3, #1152	; 0x480
  409e5c:	f040 80ac 	bne.w	409fb8 <__sfvwrite_r+0x1fc>
  409e60:	6820      	ldr	r0, [r4, #0]
  409e62:	46ba      	mov	sl, r7
  409e64:	465a      	mov	r2, fp
  409e66:	4649      	mov	r1, r9
  409e68:	f000 fd0a 	bl	40a880 <memmove>
  409e6c:	68a2      	ldr	r2, [r4, #8]
  409e6e:	6823      	ldr	r3, [r4, #0]
  409e70:	eba2 0208 	sub.w	r2, r2, r8
  409e74:	445b      	add	r3, fp
  409e76:	60a2      	str	r2, [r4, #8]
  409e78:	6023      	str	r3, [r4, #0]
  409e7a:	9a01      	ldr	r2, [sp, #4]
  409e7c:	6893      	ldr	r3, [r2, #8]
  409e7e:	eba3 030a 	sub.w	r3, r3, sl
  409e82:	44d1      	add	r9, sl
  409e84:	eba7 070a 	sub.w	r7, r7, sl
  409e88:	6093      	str	r3, [r2, #8]
  409e8a:	2b00      	cmp	r3, #0
  409e8c:	d0c5      	beq.n	409e1a <__sfvwrite_r+0x5e>
  409e8e:	89a3      	ldrh	r3, [r4, #12]
  409e90:	2f00      	cmp	r7, #0
  409e92:	d1d8      	bne.n	409e46 <__sfvwrite_r+0x8a>
  409e94:	f8d5 9000 	ldr.w	r9, [r5]
  409e98:	686f      	ldr	r7, [r5, #4]
  409e9a:	3508      	adds	r5, #8
  409e9c:	e7d2      	b.n	409e44 <__sfvwrite_r+0x88>
  409e9e:	f8d5 9000 	ldr.w	r9, [r5]
  409ea2:	f8d5 8004 	ldr.w	r8, [r5, #4]
  409ea6:	3508      	adds	r5, #8
  409ea8:	e79f      	b.n	409dea <__sfvwrite_r+0x2e>
  409eaa:	2000      	movs	r0, #0
  409eac:	4770      	bx	lr
  409eae:	4621      	mov	r1, r4
  409eb0:	9800      	ldr	r0, [sp, #0]
  409eb2:	f7ff fd1f 	bl	4098f4 <_fflush_r>
  409eb6:	b370      	cbz	r0, 409f16 <__sfvwrite_r+0x15a>
  409eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  409ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409ec0:	f04f 30ff 	mov.w	r0, #4294967295
  409ec4:	81a3      	strh	r3, [r4, #12]
  409ec6:	b003      	add	sp, #12
  409ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409ecc:	4681      	mov	r9, r0
  409ece:	4633      	mov	r3, r6
  409ed0:	464e      	mov	r6, r9
  409ed2:	46a8      	mov	r8, r5
  409ed4:	469a      	mov	sl, r3
  409ed6:	464d      	mov	r5, r9
  409ed8:	b34e      	cbz	r6, 409f2e <__sfvwrite_r+0x172>
  409eda:	b380      	cbz	r0, 409f3e <__sfvwrite_r+0x182>
  409edc:	6820      	ldr	r0, [r4, #0]
  409ede:	6923      	ldr	r3, [r4, #16]
  409ee0:	6962      	ldr	r2, [r4, #20]
  409ee2:	45b1      	cmp	r9, r6
  409ee4:	46cb      	mov	fp, r9
  409ee6:	bf28      	it	cs
  409ee8:	46b3      	movcs	fp, r6
  409eea:	4298      	cmp	r0, r3
  409eec:	465f      	mov	r7, fp
  409eee:	d904      	bls.n	409efa <__sfvwrite_r+0x13e>
  409ef0:	68a3      	ldr	r3, [r4, #8]
  409ef2:	4413      	add	r3, r2
  409ef4:	459b      	cmp	fp, r3
  409ef6:	f300 80a6 	bgt.w	40a046 <__sfvwrite_r+0x28a>
  409efa:	4593      	cmp	fp, r2
  409efc:	db4b      	blt.n	409f96 <__sfvwrite_r+0x1da>
  409efe:	4613      	mov	r3, r2
  409f00:	6a67      	ldr	r7, [r4, #36]	; 0x24
  409f02:	69e1      	ldr	r1, [r4, #28]
  409f04:	9800      	ldr	r0, [sp, #0]
  409f06:	462a      	mov	r2, r5
  409f08:	47b8      	blx	r7
  409f0a:	1e07      	subs	r7, r0, #0
  409f0c:	ddd4      	ble.n	409eb8 <__sfvwrite_r+0xfc>
  409f0e:	ebb9 0907 	subs.w	r9, r9, r7
  409f12:	d0cc      	beq.n	409eae <__sfvwrite_r+0xf2>
  409f14:	2001      	movs	r0, #1
  409f16:	f8da 3008 	ldr.w	r3, [sl, #8]
  409f1a:	1bdb      	subs	r3, r3, r7
  409f1c:	443d      	add	r5, r7
  409f1e:	1bf6      	subs	r6, r6, r7
  409f20:	f8ca 3008 	str.w	r3, [sl, #8]
  409f24:	2b00      	cmp	r3, #0
  409f26:	f43f af78 	beq.w	409e1a <__sfvwrite_r+0x5e>
  409f2a:	2e00      	cmp	r6, #0
  409f2c:	d1d5      	bne.n	409eda <__sfvwrite_r+0x11e>
  409f2e:	f108 0308 	add.w	r3, r8, #8
  409f32:	e913 0060 	ldmdb	r3, {r5, r6}
  409f36:	4698      	mov	r8, r3
  409f38:	3308      	adds	r3, #8
  409f3a:	2e00      	cmp	r6, #0
  409f3c:	d0f9      	beq.n	409f32 <__sfvwrite_r+0x176>
  409f3e:	4632      	mov	r2, r6
  409f40:	210a      	movs	r1, #10
  409f42:	4628      	mov	r0, r5
  409f44:	f000 fc4c 	bl	40a7e0 <memchr>
  409f48:	2800      	cmp	r0, #0
  409f4a:	f000 80a1 	beq.w	40a090 <__sfvwrite_r+0x2d4>
  409f4e:	3001      	adds	r0, #1
  409f50:	eba0 0905 	sub.w	r9, r0, r5
  409f54:	e7c2      	b.n	409edc <__sfvwrite_r+0x120>
  409f56:	6820      	ldr	r0, [r4, #0]
  409f58:	6923      	ldr	r3, [r4, #16]
  409f5a:	4298      	cmp	r0, r3
  409f5c:	d802      	bhi.n	409f64 <__sfvwrite_r+0x1a8>
  409f5e:	6963      	ldr	r3, [r4, #20]
  409f60:	429f      	cmp	r7, r3
  409f62:	d25d      	bcs.n	40a020 <__sfvwrite_r+0x264>
  409f64:	45b8      	cmp	r8, r7
  409f66:	bf28      	it	cs
  409f68:	46b8      	movcs	r8, r7
  409f6a:	4642      	mov	r2, r8
  409f6c:	4649      	mov	r1, r9
  409f6e:	f000 fc87 	bl	40a880 <memmove>
  409f72:	68a3      	ldr	r3, [r4, #8]
  409f74:	6822      	ldr	r2, [r4, #0]
  409f76:	eba3 0308 	sub.w	r3, r3, r8
  409f7a:	4442      	add	r2, r8
  409f7c:	60a3      	str	r3, [r4, #8]
  409f7e:	6022      	str	r2, [r4, #0]
  409f80:	b10b      	cbz	r3, 409f86 <__sfvwrite_r+0x1ca>
  409f82:	46c2      	mov	sl, r8
  409f84:	e779      	b.n	409e7a <__sfvwrite_r+0xbe>
  409f86:	4621      	mov	r1, r4
  409f88:	9800      	ldr	r0, [sp, #0]
  409f8a:	f7ff fcb3 	bl	4098f4 <_fflush_r>
  409f8e:	2800      	cmp	r0, #0
  409f90:	d192      	bne.n	409eb8 <__sfvwrite_r+0xfc>
  409f92:	46c2      	mov	sl, r8
  409f94:	e771      	b.n	409e7a <__sfvwrite_r+0xbe>
  409f96:	465a      	mov	r2, fp
  409f98:	4629      	mov	r1, r5
  409f9a:	f000 fc71 	bl	40a880 <memmove>
  409f9e:	68a2      	ldr	r2, [r4, #8]
  409fa0:	6823      	ldr	r3, [r4, #0]
  409fa2:	eba2 020b 	sub.w	r2, r2, fp
  409fa6:	445b      	add	r3, fp
  409fa8:	60a2      	str	r2, [r4, #8]
  409faa:	6023      	str	r3, [r4, #0]
  409fac:	e7af      	b.n	409f0e <__sfvwrite_r+0x152>
  409fae:	6820      	ldr	r0, [r4, #0]
  409fb0:	46b8      	mov	r8, r7
  409fb2:	46ba      	mov	sl, r7
  409fb4:	46bb      	mov	fp, r7
  409fb6:	e755      	b.n	409e64 <__sfvwrite_r+0xa8>
  409fb8:	6962      	ldr	r2, [r4, #20]
  409fba:	6820      	ldr	r0, [r4, #0]
  409fbc:	6921      	ldr	r1, [r4, #16]
  409fbe:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  409fc2:	eba0 0a01 	sub.w	sl, r0, r1
  409fc6:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  409fca:	f10a 0001 	add.w	r0, sl, #1
  409fce:	ea4f 0868 	mov.w	r8, r8, asr #1
  409fd2:	4438      	add	r0, r7
  409fd4:	4540      	cmp	r0, r8
  409fd6:	4642      	mov	r2, r8
  409fd8:	bf84      	itt	hi
  409fda:	4680      	movhi	r8, r0
  409fdc:	4642      	movhi	r2, r8
  409fde:	055b      	lsls	r3, r3, #21
  409fe0:	d544      	bpl.n	40a06c <__sfvwrite_r+0x2b0>
  409fe2:	4611      	mov	r1, r2
  409fe4:	9800      	ldr	r0, [sp, #0]
  409fe6:	f000 f92f 	bl	40a248 <_malloc_r>
  409fea:	4683      	mov	fp, r0
  409fec:	2800      	cmp	r0, #0
  409fee:	d055      	beq.n	40a09c <__sfvwrite_r+0x2e0>
  409ff0:	4652      	mov	r2, sl
  409ff2:	6921      	ldr	r1, [r4, #16]
  409ff4:	f7fc f85a 	bl	4060ac <memcpy>
  409ff8:	89a3      	ldrh	r3, [r4, #12]
  409ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  409ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a002:	81a3      	strh	r3, [r4, #12]
  40a004:	eb0b 000a 	add.w	r0, fp, sl
  40a008:	eba8 030a 	sub.w	r3, r8, sl
  40a00c:	f8c4 b010 	str.w	fp, [r4, #16]
  40a010:	f8c4 8014 	str.w	r8, [r4, #20]
  40a014:	6020      	str	r0, [r4, #0]
  40a016:	60a3      	str	r3, [r4, #8]
  40a018:	46b8      	mov	r8, r7
  40a01a:	46ba      	mov	sl, r7
  40a01c:	46bb      	mov	fp, r7
  40a01e:	e721      	b.n	409e64 <__sfvwrite_r+0xa8>
  40a020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40a024:	42b9      	cmp	r1, r7
  40a026:	bf28      	it	cs
  40a028:	4639      	movcs	r1, r7
  40a02a:	464a      	mov	r2, r9
  40a02c:	fb91 f1f3 	sdiv	r1, r1, r3
  40a030:	9800      	ldr	r0, [sp, #0]
  40a032:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40a034:	fb03 f301 	mul.w	r3, r3, r1
  40a038:	69e1      	ldr	r1, [r4, #28]
  40a03a:	47b0      	blx	r6
  40a03c:	f1b0 0a00 	subs.w	sl, r0, #0
  40a040:	f73f af1b 	bgt.w	409e7a <__sfvwrite_r+0xbe>
  40a044:	e738      	b.n	409eb8 <__sfvwrite_r+0xfc>
  40a046:	461a      	mov	r2, r3
  40a048:	4629      	mov	r1, r5
  40a04a:	9301      	str	r3, [sp, #4]
  40a04c:	f000 fc18 	bl	40a880 <memmove>
  40a050:	6822      	ldr	r2, [r4, #0]
  40a052:	9b01      	ldr	r3, [sp, #4]
  40a054:	9800      	ldr	r0, [sp, #0]
  40a056:	441a      	add	r2, r3
  40a058:	6022      	str	r2, [r4, #0]
  40a05a:	4621      	mov	r1, r4
  40a05c:	f7ff fc4a 	bl	4098f4 <_fflush_r>
  40a060:	9b01      	ldr	r3, [sp, #4]
  40a062:	2800      	cmp	r0, #0
  40a064:	f47f af28 	bne.w	409eb8 <__sfvwrite_r+0xfc>
  40a068:	461f      	mov	r7, r3
  40a06a:	e750      	b.n	409f0e <__sfvwrite_r+0x152>
  40a06c:	9800      	ldr	r0, [sp, #0]
  40a06e:	f000 ff71 	bl	40af54 <_realloc_r>
  40a072:	4683      	mov	fp, r0
  40a074:	2800      	cmp	r0, #0
  40a076:	d1c5      	bne.n	40a004 <__sfvwrite_r+0x248>
  40a078:	9d00      	ldr	r5, [sp, #0]
  40a07a:	6921      	ldr	r1, [r4, #16]
  40a07c:	4628      	mov	r0, r5
  40a07e:	f7ff fdb7 	bl	409bf0 <_free_r>
  40a082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a086:	220c      	movs	r2, #12
  40a088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40a08c:	602a      	str	r2, [r5, #0]
  40a08e:	e715      	b.n	409ebc <__sfvwrite_r+0x100>
  40a090:	f106 0901 	add.w	r9, r6, #1
  40a094:	e722      	b.n	409edc <__sfvwrite_r+0x120>
  40a096:	f04f 30ff 	mov.w	r0, #4294967295
  40a09a:	e6bf      	b.n	409e1c <__sfvwrite_r+0x60>
  40a09c:	9a00      	ldr	r2, [sp, #0]
  40a09e:	230c      	movs	r3, #12
  40a0a0:	6013      	str	r3, [r2, #0]
  40a0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a0a6:	e709      	b.n	409ebc <__sfvwrite_r+0x100>
  40a0a8:	7ffffc00 	.word	0x7ffffc00

0040a0ac <_fwalk_reent>:
  40a0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a0b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40a0b4:	d01f      	beq.n	40a0f6 <_fwalk_reent+0x4a>
  40a0b6:	4688      	mov	r8, r1
  40a0b8:	4606      	mov	r6, r0
  40a0ba:	f04f 0900 	mov.w	r9, #0
  40a0be:	687d      	ldr	r5, [r7, #4]
  40a0c0:	68bc      	ldr	r4, [r7, #8]
  40a0c2:	3d01      	subs	r5, #1
  40a0c4:	d411      	bmi.n	40a0ea <_fwalk_reent+0x3e>
  40a0c6:	89a3      	ldrh	r3, [r4, #12]
  40a0c8:	2b01      	cmp	r3, #1
  40a0ca:	f105 35ff 	add.w	r5, r5, #4294967295
  40a0ce:	d908      	bls.n	40a0e2 <_fwalk_reent+0x36>
  40a0d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40a0d4:	3301      	adds	r3, #1
  40a0d6:	4621      	mov	r1, r4
  40a0d8:	4630      	mov	r0, r6
  40a0da:	d002      	beq.n	40a0e2 <_fwalk_reent+0x36>
  40a0dc:	47c0      	blx	r8
  40a0de:	ea49 0900 	orr.w	r9, r9, r0
  40a0e2:	1c6b      	adds	r3, r5, #1
  40a0e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40a0e8:	d1ed      	bne.n	40a0c6 <_fwalk_reent+0x1a>
  40a0ea:	683f      	ldr	r7, [r7, #0]
  40a0ec:	2f00      	cmp	r7, #0
  40a0ee:	d1e6      	bne.n	40a0be <_fwalk_reent+0x12>
  40a0f0:	4648      	mov	r0, r9
  40a0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a0f6:	46b9      	mov	r9, r7
  40a0f8:	4648      	mov	r0, r9
  40a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40a0fe:	bf00      	nop

0040a100 <__locale_mb_cur_max>:
  40a100:	4b04      	ldr	r3, [pc, #16]	; (40a114 <__locale_mb_cur_max+0x14>)
  40a102:	4a05      	ldr	r2, [pc, #20]	; (40a118 <__locale_mb_cur_max+0x18>)
  40a104:	681b      	ldr	r3, [r3, #0]
  40a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40a108:	2b00      	cmp	r3, #0
  40a10a:	bf08      	it	eq
  40a10c:	4613      	moveq	r3, r2
  40a10e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40a112:	4770      	bx	lr
  40a114:	20400024 	.word	0x20400024
  40a118:	20400454 	.word	0x20400454

0040a11c <_localeconv_r>:
  40a11c:	4a04      	ldr	r2, [pc, #16]	; (40a130 <_localeconv_r+0x14>)
  40a11e:	4b05      	ldr	r3, [pc, #20]	; (40a134 <_localeconv_r+0x18>)
  40a120:	6812      	ldr	r2, [r2, #0]
  40a122:	6b50      	ldr	r0, [r2, #52]	; 0x34
  40a124:	2800      	cmp	r0, #0
  40a126:	bf08      	it	eq
  40a128:	4618      	moveq	r0, r3
  40a12a:	30f0      	adds	r0, #240	; 0xf0
  40a12c:	4770      	bx	lr
  40a12e:	bf00      	nop
  40a130:	20400024 	.word	0x20400024
  40a134:	20400454 	.word	0x20400454

0040a138 <__retarget_lock_init_recursive>:
  40a138:	4770      	bx	lr
  40a13a:	bf00      	nop

0040a13c <__retarget_lock_close_recursive>:
  40a13c:	4770      	bx	lr
  40a13e:	bf00      	nop

0040a140 <__retarget_lock_acquire_recursive>:
  40a140:	4770      	bx	lr
  40a142:	bf00      	nop

0040a144 <__retarget_lock_release_recursive>:
  40a144:	4770      	bx	lr
  40a146:	bf00      	nop

0040a148 <__swhatbuf_r>:
  40a148:	b570      	push	{r4, r5, r6, lr}
  40a14a:	460c      	mov	r4, r1
  40a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40a150:	2900      	cmp	r1, #0
  40a152:	b090      	sub	sp, #64	; 0x40
  40a154:	4615      	mov	r5, r2
  40a156:	461e      	mov	r6, r3
  40a158:	db14      	blt.n	40a184 <__swhatbuf_r+0x3c>
  40a15a:	aa01      	add	r2, sp, #4
  40a15c:	f001 fb20 	bl	40b7a0 <_fstat_r>
  40a160:	2800      	cmp	r0, #0
  40a162:	db0f      	blt.n	40a184 <__swhatbuf_r+0x3c>
  40a164:	9a02      	ldr	r2, [sp, #8]
  40a166:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40a16a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40a16e:	fab2 f282 	clz	r2, r2
  40a172:	0952      	lsrs	r2, r2, #5
  40a174:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a178:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40a17c:	6032      	str	r2, [r6, #0]
  40a17e:	602b      	str	r3, [r5, #0]
  40a180:	b010      	add	sp, #64	; 0x40
  40a182:	bd70      	pop	{r4, r5, r6, pc}
  40a184:	89a2      	ldrh	r2, [r4, #12]
  40a186:	2300      	movs	r3, #0
  40a188:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40a18c:	6033      	str	r3, [r6, #0]
  40a18e:	d004      	beq.n	40a19a <__swhatbuf_r+0x52>
  40a190:	2240      	movs	r2, #64	; 0x40
  40a192:	4618      	mov	r0, r3
  40a194:	602a      	str	r2, [r5, #0]
  40a196:	b010      	add	sp, #64	; 0x40
  40a198:	bd70      	pop	{r4, r5, r6, pc}
  40a19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40a19e:	602b      	str	r3, [r5, #0]
  40a1a0:	b010      	add	sp, #64	; 0x40
  40a1a2:	bd70      	pop	{r4, r5, r6, pc}

0040a1a4 <__smakebuf_r>:
  40a1a4:	898a      	ldrh	r2, [r1, #12]
  40a1a6:	0792      	lsls	r2, r2, #30
  40a1a8:	460b      	mov	r3, r1
  40a1aa:	d506      	bpl.n	40a1ba <__smakebuf_r+0x16>
  40a1ac:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40a1b0:	2101      	movs	r1, #1
  40a1b2:	601a      	str	r2, [r3, #0]
  40a1b4:	611a      	str	r2, [r3, #16]
  40a1b6:	6159      	str	r1, [r3, #20]
  40a1b8:	4770      	bx	lr
  40a1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a1bc:	b083      	sub	sp, #12
  40a1be:	ab01      	add	r3, sp, #4
  40a1c0:	466a      	mov	r2, sp
  40a1c2:	460c      	mov	r4, r1
  40a1c4:	4606      	mov	r6, r0
  40a1c6:	f7ff ffbf 	bl	40a148 <__swhatbuf_r>
  40a1ca:	9900      	ldr	r1, [sp, #0]
  40a1cc:	4605      	mov	r5, r0
  40a1ce:	4630      	mov	r0, r6
  40a1d0:	f000 f83a 	bl	40a248 <_malloc_r>
  40a1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a1d8:	b1d8      	cbz	r0, 40a212 <__smakebuf_r+0x6e>
  40a1da:	9a01      	ldr	r2, [sp, #4]
  40a1dc:	4f15      	ldr	r7, [pc, #84]	; (40a234 <__smakebuf_r+0x90>)
  40a1de:	9900      	ldr	r1, [sp, #0]
  40a1e0:	63f7      	str	r7, [r6, #60]	; 0x3c
  40a1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a1e6:	81a3      	strh	r3, [r4, #12]
  40a1e8:	6020      	str	r0, [r4, #0]
  40a1ea:	6120      	str	r0, [r4, #16]
  40a1ec:	6161      	str	r1, [r4, #20]
  40a1ee:	b91a      	cbnz	r2, 40a1f8 <__smakebuf_r+0x54>
  40a1f0:	432b      	orrs	r3, r5
  40a1f2:	81a3      	strh	r3, [r4, #12]
  40a1f4:	b003      	add	sp, #12
  40a1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a1f8:	4630      	mov	r0, r6
  40a1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40a1fe:	f001 fae3 	bl	40b7c8 <_isatty_r>
  40a202:	b1a0      	cbz	r0, 40a22e <__smakebuf_r+0x8a>
  40a204:	89a3      	ldrh	r3, [r4, #12]
  40a206:	f023 0303 	bic.w	r3, r3, #3
  40a20a:	f043 0301 	orr.w	r3, r3, #1
  40a20e:	b21b      	sxth	r3, r3
  40a210:	e7ee      	b.n	40a1f0 <__smakebuf_r+0x4c>
  40a212:	059a      	lsls	r2, r3, #22
  40a214:	d4ee      	bmi.n	40a1f4 <__smakebuf_r+0x50>
  40a216:	f023 0303 	bic.w	r3, r3, #3
  40a21a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40a21e:	f043 0302 	orr.w	r3, r3, #2
  40a222:	2101      	movs	r1, #1
  40a224:	81a3      	strh	r3, [r4, #12]
  40a226:	6022      	str	r2, [r4, #0]
  40a228:	6122      	str	r2, [r4, #16]
  40a22a:	6161      	str	r1, [r4, #20]
  40a22c:	e7e2      	b.n	40a1f4 <__smakebuf_r+0x50>
  40a22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40a232:	e7dd      	b.n	40a1f0 <__smakebuf_r+0x4c>
  40a234:	00409949 	.word	0x00409949

0040a238 <malloc>:
  40a238:	4b02      	ldr	r3, [pc, #8]	; (40a244 <malloc+0xc>)
  40a23a:	4601      	mov	r1, r0
  40a23c:	6818      	ldr	r0, [r3, #0]
  40a23e:	f000 b803 	b.w	40a248 <_malloc_r>
  40a242:	bf00      	nop
  40a244:	20400024 	.word	0x20400024

0040a248 <_malloc_r>:
  40a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a24c:	f101 060b 	add.w	r6, r1, #11
  40a250:	2e16      	cmp	r6, #22
  40a252:	b083      	sub	sp, #12
  40a254:	4605      	mov	r5, r0
  40a256:	f240 809e 	bls.w	40a396 <_malloc_r+0x14e>
  40a25a:	f036 0607 	bics.w	r6, r6, #7
  40a25e:	f100 80bd 	bmi.w	40a3dc <_malloc_r+0x194>
  40a262:	42b1      	cmp	r1, r6
  40a264:	f200 80ba 	bhi.w	40a3dc <_malloc_r+0x194>
  40a268:	f000 fb6e 	bl	40a948 <__malloc_lock>
  40a26c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40a270:	f0c0 8293 	bcc.w	40a79a <_malloc_r+0x552>
  40a274:	0a73      	lsrs	r3, r6, #9
  40a276:	f000 80b8 	beq.w	40a3ea <_malloc_r+0x1a2>
  40a27a:	2b04      	cmp	r3, #4
  40a27c:	f200 8179 	bhi.w	40a572 <_malloc_r+0x32a>
  40a280:	09b3      	lsrs	r3, r6, #6
  40a282:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40a286:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40a28a:	00c3      	lsls	r3, r0, #3
  40a28c:	4fbf      	ldr	r7, [pc, #764]	; (40a58c <_malloc_r+0x344>)
  40a28e:	443b      	add	r3, r7
  40a290:	f1a3 0108 	sub.w	r1, r3, #8
  40a294:	685c      	ldr	r4, [r3, #4]
  40a296:	42a1      	cmp	r1, r4
  40a298:	d106      	bne.n	40a2a8 <_malloc_r+0x60>
  40a29a:	e00c      	b.n	40a2b6 <_malloc_r+0x6e>
  40a29c:	2a00      	cmp	r2, #0
  40a29e:	f280 80aa 	bge.w	40a3f6 <_malloc_r+0x1ae>
  40a2a2:	68e4      	ldr	r4, [r4, #12]
  40a2a4:	42a1      	cmp	r1, r4
  40a2a6:	d006      	beq.n	40a2b6 <_malloc_r+0x6e>
  40a2a8:	6863      	ldr	r3, [r4, #4]
  40a2aa:	f023 0303 	bic.w	r3, r3, #3
  40a2ae:	1b9a      	subs	r2, r3, r6
  40a2b0:	2a0f      	cmp	r2, #15
  40a2b2:	ddf3      	ble.n	40a29c <_malloc_r+0x54>
  40a2b4:	4670      	mov	r0, lr
  40a2b6:	693c      	ldr	r4, [r7, #16]
  40a2b8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40a5a0 <_malloc_r+0x358>
  40a2bc:	4574      	cmp	r4, lr
  40a2be:	f000 81ab 	beq.w	40a618 <_malloc_r+0x3d0>
  40a2c2:	6863      	ldr	r3, [r4, #4]
  40a2c4:	f023 0303 	bic.w	r3, r3, #3
  40a2c8:	1b9a      	subs	r2, r3, r6
  40a2ca:	2a0f      	cmp	r2, #15
  40a2cc:	f300 8190 	bgt.w	40a5f0 <_malloc_r+0x3a8>
  40a2d0:	2a00      	cmp	r2, #0
  40a2d2:	f8c7 e014 	str.w	lr, [r7, #20]
  40a2d6:	f8c7 e010 	str.w	lr, [r7, #16]
  40a2da:	f280 809d 	bge.w	40a418 <_malloc_r+0x1d0>
  40a2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40a2e2:	f080 8161 	bcs.w	40a5a8 <_malloc_r+0x360>
  40a2e6:	08db      	lsrs	r3, r3, #3
  40a2e8:	f103 0c01 	add.w	ip, r3, #1
  40a2ec:	1099      	asrs	r1, r3, #2
  40a2ee:	687a      	ldr	r2, [r7, #4]
  40a2f0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40a2f4:	f8c4 8008 	str.w	r8, [r4, #8]
  40a2f8:	2301      	movs	r3, #1
  40a2fa:	408b      	lsls	r3, r1
  40a2fc:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40a300:	4313      	orrs	r3, r2
  40a302:	3908      	subs	r1, #8
  40a304:	60e1      	str	r1, [r4, #12]
  40a306:	607b      	str	r3, [r7, #4]
  40a308:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40a30c:	f8c8 400c 	str.w	r4, [r8, #12]
  40a310:	1082      	asrs	r2, r0, #2
  40a312:	2401      	movs	r4, #1
  40a314:	4094      	lsls	r4, r2
  40a316:	429c      	cmp	r4, r3
  40a318:	f200 808b 	bhi.w	40a432 <_malloc_r+0x1ea>
  40a31c:	421c      	tst	r4, r3
  40a31e:	d106      	bne.n	40a32e <_malloc_r+0xe6>
  40a320:	f020 0003 	bic.w	r0, r0, #3
  40a324:	0064      	lsls	r4, r4, #1
  40a326:	421c      	tst	r4, r3
  40a328:	f100 0004 	add.w	r0, r0, #4
  40a32c:	d0fa      	beq.n	40a324 <_malloc_r+0xdc>
  40a32e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40a332:	46cc      	mov	ip, r9
  40a334:	4680      	mov	r8, r0
  40a336:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40a33a:	459c      	cmp	ip, r3
  40a33c:	d107      	bne.n	40a34e <_malloc_r+0x106>
  40a33e:	e16d      	b.n	40a61c <_malloc_r+0x3d4>
  40a340:	2a00      	cmp	r2, #0
  40a342:	f280 817b 	bge.w	40a63c <_malloc_r+0x3f4>
  40a346:	68db      	ldr	r3, [r3, #12]
  40a348:	459c      	cmp	ip, r3
  40a34a:	f000 8167 	beq.w	40a61c <_malloc_r+0x3d4>
  40a34e:	6859      	ldr	r1, [r3, #4]
  40a350:	f021 0103 	bic.w	r1, r1, #3
  40a354:	1b8a      	subs	r2, r1, r6
  40a356:	2a0f      	cmp	r2, #15
  40a358:	ddf2      	ble.n	40a340 <_malloc_r+0xf8>
  40a35a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40a35e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40a362:	9300      	str	r3, [sp, #0]
  40a364:	199c      	adds	r4, r3, r6
  40a366:	4628      	mov	r0, r5
  40a368:	f046 0601 	orr.w	r6, r6, #1
  40a36c:	f042 0501 	orr.w	r5, r2, #1
  40a370:	605e      	str	r6, [r3, #4]
  40a372:	f8c8 c00c 	str.w	ip, [r8, #12]
  40a376:	f8cc 8008 	str.w	r8, [ip, #8]
  40a37a:	617c      	str	r4, [r7, #20]
  40a37c:	613c      	str	r4, [r7, #16]
  40a37e:	f8c4 e00c 	str.w	lr, [r4, #12]
  40a382:	f8c4 e008 	str.w	lr, [r4, #8]
  40a386:	6065      	str	r5, [r4, #4]
  40a388:	505a      	str	r2, [r3, r1]
  40a38a:	f000 fae3 	bl	40a954 <__malloc_unlock>
  40a38e:	9b00      	ldr	r3, [sp, #0]
  40a390:	f103 0408 	add.w	r4, r3, #8
  40a394:	e01e      	b.n	40a3d4 <_malloc_r+0x18c>
  40a396:	2910      	cmp	r1, #16
  40a398:	d820      	bhi.n	40a3dc <_malloc_r+0x194>
  40a39a:	f000 fad5 	bl	40a948 <__malloc_lock>
  40a39e:	2610      	movs	r6, #16
  40a3a0:	2318      	movs	r3, #24
  40a3a2:	2002      	movs	r0, #2
  40a3a4:	4f79      	ldr	r7, [pc, #484]	; (40a58c <_malloc_r+0x344>)
  40a3a6:	443b      	add	r3, r7
  40a3a8:	f1a3 0208 	sub.w	r2, r3, #8
  40a3ac:	685c      	ldr	r4, [r3, #4]
  40a3ae:	4294      	cmp	r4, r2
  40a3b0:	f000 813d 	beq.w	40a62e <_malloc_r+0x3e6>
  40a3b4:	6863      	ldr	r3, [r4, #4]
  40a3b6:	68e1      	ldr	r1, [r4, #12]
  40a3b8:	68a6      	ldr	r6, [r4, #8]
  40a3ba:	f023 0303 	bic.w	r3, r3, #3
  40a3be:	4423      	add	r3, r4
  40a3c0:	4628      	mov	r0, r5
  40a3c2:	685a      	ldr	r2, [r3, #4]
  40a3c4:	60f1      	str	r1, [r6, #12]
  40a3c6:	f042 0201 	orr.w	r2, r2, #1
  40a3ca:	608e      	str	r6, [r1, #8]
  40a3cc:	605a      	str	r2, [r3, #4]
  40a3ce:	f000 fac1 	bl	40a954 <__malloc_unlock>
  40a3d2:	3408      	adds	r4, #8
  40a3d4:	4620      	mov	r0, r4
  40a3d6:	b003      	add	sp, #12
  40a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3dc:	2400      	movs	r4, #0
  40a3de:	230c      	movs	r3, #12
  40a3e0:	4620      	mov	r0, r4
  40a3e2:	602b      	str	r3, [r5, #0]
  40a3e4:	b003      	add	sp, #12
  40a3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a3ea:	2040      	movs	r0, #64	; 0x40
  40a3ec:	f44f 7300 	mov.w	r3, #512	; 0x200
  40a3f0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40a3f4:	e74a      	b.n	40a28c <_malloc_r+0x44>
  40a3f6:	4423      	add	r3, r4
  40a3f8:	68e1      	ldr	r1, [r4, #12]
  40a3fa:	685a      	ldr	r2, [r3, #4]
  40a3fc:	68a6      	ldr	r6, [r4, #8]
  40a3fe:	f042 0201 	orr.w	r2, r2, #1
  40a402:	60f1      	str	r1, [r6, #12]
  40a404:	4628      	mov	r0, r5
  40a406:	608e      	str	r6, [r1, #8]
  40a408:	605a      	str	r2, [r3, #4]
  40a40a:	f000 faa3 	bl	40a954 <__malloc_unlock>
  40a40e:	3408      	adds	r4, #8
  40a410:	4620      	mov	r0, r4
  40a412:	b003      	add	sp, #12
  40a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a418:	4423      	add	r3, r4
  40a41a:	4628      	mov	r0, r5
  40a41c:	685a      	ldr	r2, [r3, #4]
  40a41e:	f042 0201 	orr.w	r2, r2, #1
  40a422:	605a      	str	r2, [r3, #4]
  40a424:	f000 fa96 	bl	40a954 <__malloc_unlock>
  40a428:	3408      	adds	r4, #8
  40a42a:	4620      	mov	r0, r4
  40a42c:	b003      	add	sp, #12
  40a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a432:	68bc      	ldr	r4, [r7, #8]
  40a434:	6863      	ldr	r3, [r4, #4]
  40a436:	f023 0803 	bic.w	r8, r3, #3
  40a43a:	45b0      	cmp	r8, r6
  40a43c:	d304      	bcc.n	40a448 <_malloc_r+0x200>
  40a43e:	eba8 0306 	sub.w	r3, r8, r6
  40a442:	2b0f      	cmp	r3, #15
  40a444:	f300 8085 	bgt.w	40a552 <_malloc_r+0x30a>
  40a448:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40a5a4 <_malloc_r+0x35c>
  40a44c:	4b50      	ldr	r3, [pc, #320]	; (40a590 <_malloc_r+0x348>)
  40a44e:	f8d9 2000 	ldr.w	r2, [r9]
  40a452:	681b      	ldr	r3, [r3, #0]
  40a454:	3201      	adds	r2, #1
  40a456:	4433      	add	r3, r6
  40a458:	eb04 0a08 	add.w	sl, r4, r8
  40a45c:	f000 8155 	beq.w	40a70a <_malloc_r+0x4c2>
  40a460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40a464:	330f      	adds	r3, #15
  40a466:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40a46a:	f02b 0b0f 	bic.w	fp, fp, #15
  40a46e:	4659      	mov	r1, fp
  40a470:	4628      	mov	r0, r5
  40a472:	f000 ff15 	bl	40b2a0 <_sbrk_r>
  40a476:	1c41      	adds	r1, r0, #1
  40a478:	4602      	mov	r2, r0
  40a47a:	f000 80fc 	beq.w	40a676 <_malloc_r+0x42e>
  40a47e:	4582      	cmp	sl, r0
  40a480:	f200 80f7 	bhi.w	40a672 <_malloc_r+0x42a>
  40a484:	4b43      	ldr	r3, [pc, #268]	; (40a594 <_malloc_r+0x34c>)
  40a486:	6819      	ldr	r1, [r3, #0]
  40a488:	4459      	add	r1, fp
  40a48a:	6019      	str	r1, [r3, #0]
  40a48c:	f000 814d 	beq.w	40a72a <_malloc_r+0x4e2>
  40a490:	f8d9 0000 	ldr.w	r0, [r9]
  40a494:	3001      	adds	r0, #1
  40a496:	bf1b      	ittet	ne
  40a498:	eba2 0a0a 	subne.w	sl, r2, sl
  40a49c:	4451      	addne	r1, sl
  40a49e:	f8c9 2000 	streq.w	r2, [r9]
  40a4a2:	6019      	strne	r1, [r3, #0]
  40a4a4:	f012 0107 	ands.w	r1, r2, #7
  40a4a8:	f000 8115 	beq.w	40a6d6 <_malloc_r+0x48e>
  40a4ac:	f1c1 0008 	rsb	r0, r1, #8
  40a4b0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40a4b4:	4402      	add	r2, r0
  40a4b6:	3108      	adds	r1, #8
  40a4b8:	eb02 090b 	add.w	r9, r2, fp
  40a4bc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40a4c0:	eba1 0909 	sub.w	r9, r1, r9
  40a4c4:	4649      	mov	r1, r9
  40a4c6:	4628      	mov	r0, r5
  40a4c8:	9301      	str	r3, [sp, #4]
  40a4ca:	9200      	str	r2, [sp, #0]
  40a4cc:	f000 fee8 	bl	40b2a0 <_sbrk_r>
  40a4d0:	1c43      	adds	r3, r0, #1
  40a4d2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40a4d6:	f000 8143 	beq.w	40a760 <_malloc_r+0x518>
  40a4da:	1a80      	subs	r0, r0, r2
  40a4dc:	4448      	add	r0, r9
  40a4de:	f040 0001 	orr.w	r0, r0, #1
  40a4e2:	6819      	ldr	r1, [r3, #0]
  40a4e4:	60ba      	str	r2, [r7, #8]
  40a4e6:	4449      	add	r1, r9
  40a4e8:	42bc      	cmp	r4, r7
  40a4ea:	6050      	str	r0, [r2, #4]
  40a4ec:	6019      	str	r1, [r3, #0]
  40a4ee:	d017      	beq.n	40a520 <_malloc_r+0x2d8>
  40a4f0:	f1b8 0f0f 	cmp.w	r8, #15
  40a4f4:	f240 80fb 	bls.w	40a6ee <_malloc_r+0x4a6>
  40a4f8:	6860      	ldr	r0, [r4, #4]
  40a4fa:	f1a8 020c 	sub.w	r2, r8, #12
  40a4fe:	f022 0207 	bic.w	r2, r2, #7
  40a502:	eb04 0e02 	add.w	lr, r4, r2
  40a506:	f000 0001 	and.w	r0, r0, #1
  40a50a:	f04f 0c05 	mov.w	ip, #5
  40a50e:	4310      	orrs	r0, r2
  40a510:	2a0f      	cmp	r2, #15
  40a512:	6060      	str	r0, [r4, #4]
  40a514:	f8ce c004 	str.w	ip, [lr, #4]
  40a518:	f8ce c008 	str.w	ip, [lr, #8]
  40a51c:	f200 8117 	bhi.w	40a74e <_malloc_r+0x506>
  40a520:	4b1d      	ldr	r3, [pc, #116]	; (40a598 <_malloc_r+0x350>)
  40a522:	68bc      	ldr	r4, [r7, #8]
  40a524:	681a      	ldr	r2, [r3, #0]
  40a526:	4291      	cmp	r1, r2
  40a528:	bf88      	it	hi
  40a52a:	6019      	strhi	r1, [r3, #0]
  40a52c:	4b1b      	ldr	r3, [pc, #108]	; (40a59c <_malloc_r+0x354>)
  40a52e:	681a      	ldr	r2, [r3, #0]
  40a530:	4291      	cmp	r1, r2
  40a532:	6862      	ldr	r2, [r4, #4]
  40a534:	bf88      	it	hi
  40a536:	6019      	strhi	r1, [r3, #0]
  40a538:	f022 0203 	bic.w	r2, r2, #3
  40a53c:	4296      	cmp	r6, r2
  40a53e:	eba2 0306 	sub.w	r3, r2, r6
  40a542:	d801      	bhi.n	40a548 <_malloc_r+0x300>
  40a544:	2b0f      	cmp	r3, #15
  40a546:	dc04      	bgt.n	40a552 <_malloc_r+0x30a>
  40a548:	4628      	mov	r0, r5
  40a54a:	f000 fa03 	bl	40a954 <__malloc_unlock>
  40a54e:	2400      	movs	r4, #0
  40a550:	e740      	b.n	40a3d4 <_malloc_r+0x18c>
  40a552:	19a2      	adds	r2, r4, r6
  40a554:	f043 0301 	orr.w	r3, r3, #1
  40a558:	f046 0601 	orr.w	r6, r6, #1
  40a55c:	6066      	str	r6, [r4, #4]
  40a55e:	4628      	mov	r0, r5
  40a560:	60ba      	str	r2, [r7, #8]
  40a562:	6053      	str	r3, [r2, #4]
  40a564:	f000 f9f6 	bl	40a954 <__malloc_unlock>
  40a568:	3408      	adds	r4, #8
  40a56a:	4620      	mov	r0, r4
  40a56c:	b003      	add	sp, #12
  40a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a572:	2b14      	cmp	r3, #20
  40a574:	d971      	bls.n	40a65a <_malloc_r+0x412>
  40a576:	2b54      	cmp	r3, #84	; 0x54
  40a578:	f200 80a3 	bhi.w	40a6c2 <_malloc_r+0x47a>
  40a57c:	0b33      	lsrs	r3, r6, #12
  40a57e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40a582:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40a586:	00c3      	lsls	r3, r0, #3
  40a588:	e680      	b.n	40a28c <_malloc_r+0x44>
  40a58a:	bf00      	nop
  40a58c:	204005c0 	.word	0x204005c0
  40a590:	2040c994 	.word	0x2040c994
  40a594:	2040c964 	.word	0x2040c964
  40a598:	2040c98c 	.word	0x2040c98c
  40a59c:	2040c990 	.word	0x2040c990
  40a5a0:	204005c8 	.word	0x204005c8
  40a5a4:	204009c8 	.word	0x204009c8
  40a5a8:	0a5a      	lsrs	r2, r3, #9
  40a5aa:	2a04      	cmp	r2, #4
  40a5ac:	d95b      	bls.n	40a666 <_malloc_r+0x41e>
  40a5ae:	2a14      	cmp	r2, #20
  40a5b0:	f200 80ae 	bhi.w	40a710 <_malloc_r+0x4c8>
  40a5b4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40a5b8:	00c9      	lsls	r1, r1, #3
  40a5ba:	325b      	adds	r2, #91	; 0x5b
  40a5bc:	eb07 0c01 	add.w	ip, r7, r1
  40a5c0:	5879      	ldr	r1, [r7, r1]
  40a5c2:	f1ac 0c08 	sub.w	ip, ip, #8
  40a5c6:	458c      	cmp	ip, r1
  40a5c8:	f000 8088 	beq.w	40a6dc <_malloc_r+0x494>
  40a5cc:	684a      	ldr	r2, [r1, #4]
  40a5ce:	f022 0203 	bic.w	r2, r2, #3
  40a5d2:	4293      	cmp	r3, r2
  40a5d4:	d273      	bcs.n	40a6be <_malloc_r+0x476>
  40a5d6:	6889      	ldr	r1, [r1, #8]
  40a5d8:	458c      	cmp	ip, r1
  40a5da:	d1f7      	bne.n	40a5cc <_malloc_r+0x384>
  40a5dc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40a5e0:	687b      	ldr	r3, [r7, #4]
  40a5e2:	60e2      	str	r2, [r4, #12]
  40a5e4:	f8c4 c008 	str.w	ip, [r4, #8]
  40a5e8:	6094      	str	r4, [r2, #8]
  40a5ea:	f8cc 400c 	str.w	r4, [ip, #12]
  40a5ee:	e68f      	b.n	40a310 <_malloc_r+0xc8>
  40a5f0:	19a1      	adds	r1, r4, r6
  40a5f2:	f046 0c01 	orr.w	ip, r6, #1
  40a5f6:	f042 0601 	orr.w	r6, r2, #1
  40a5fa:	f8c4 c004 	str.w	ip, [r4, #4]
  40a5fe:	4628      	mov	r0, r5
  40a600:	6179      	str	r1, [r7, #20]
  40a602:	6139      	str	r1, [r7, #16]
  40a604:	f8c1 e00c 	str.w	lr, [r1, #12]
  40a608:	f8c1 e008 	str.w	lr, [r1, #8]
  40a60c:	604e      	str	r6, [r1, #4]
  40a60e:	50e2      	str	r2, [r4, r3]
  40a610:	f000 f9a0 	bl	40a954 <__malloc_unlock>
  40a614:	3408      	adds	r4, #8
  40a616:	e6dd      	b.n	40a3d4 <_malloc_r+0x18c>
  40a618:	687b      	ldr	r3, [r7, #4]
  40a61a:	e679      	b.n	40a310 <_malloc_r+0xc8>
  40a61c:	f108 0801 	add.w	r8, r8, #1
  40a620:	f018 0f03 	tst.w	r8, #3
  40a624:	f10c 0c08 	add.w	ip, ip, #8
  40a628:	f47f ae85 	bne.w	40a336 <_malloc_r+0xee>
  40a62c:	e02d      	b.n	40a68a <_malloc_r+0x442>
  40a62e:	68dc      	ldr	r4, [r3, #12]
  40a630:	42a3      	cmp	r3, r4
  40a632:	bf08      	it	eq
  40a634:	3002      	addeq	r0, #2
  40a636:	f43f ae3e 	beq.w	40a2b6 <_malloc_r+0x6e>
  40a63a:	e6bb      	b.n	40a3b4 <_malloc_r+0x16c>
  40a63c:	4419      	add	r1, r3
  40a63e:	461c      	mov	r4, r3
  40a640:	684a      	ldr	r2, [r1, #4]
  40a642:	68db      	ldr	r3, [r3, #12]
  40a644:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40a648:	f042 0201 	orr.w	r2, r2, #1
  40a64c:	604a      	str	r2, [r1, #4]
  40a64e:	4628      	mov	r0, r5
  40a650:	60f3      	str	r3, [r6, #12]
  40a652:	609e      	str	r6, [r3, #8]
  40a654:	f000 f97e 	bl	40a954 <__malloc_unlock>
  40a658:	e6bc      	b.n	40a3d4 <_malloc_r+0x18c>
  40a65a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40a65e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40a662:	00c3      	lsls	r3, r0, #3
  40a664:	e612      	b.n	40a28c <_malloc_r+0x44>
  40a666:	099a      	lsrs	r2, r3, #6
  40a668:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40a66c:	00c9      	lsls	r1, r1, #3
  40a66e:	3238      	adds	r2, #56	; 0x38
  40a670:	e7a4      	b.n	40a5bc <_malloc_r+0x374>
  40a672:	42bc      	cmp	r4, r7
  40a674:	d054      	beq.n	40a720 <_malloc_r+0x4d8>
  40a676:	68bc      	ldr	r4, [r7, #8]
  40a678:	6862      	ldr	r2, [r4, #4]
  40a67a:	f022 0203 	bic.w	r2, r2, #3
  40a67e:	e75d      	b.n	40a53c <_malloc_r+0x2f4>
  40a680:	f859 3908 	ldr.w	r3, [r9], #-8
  40a684:	4599      	cmp	r9, r3
  40a686:	f040 8086 	bne.w	40a796 <_malloc_r+0x54e>
  40a68a:	f010 0f03 	tst.w	r0, #3
  40a68e:	f100 30ff 	add.w	r0, r0, #4294967295
  40a692:	d1f5      	bne.n	40a680 <_malloc_r+0x438>
  40a694:	687b      	ldr	r3, [r7, #4]
  40a696:	ea23 0304 	bic.w	r3, r3, r4
  40a69a:	607b      	str	r3, [r7, #4]
  40a69c:	0064      	lsls	r4, r4, #1
  40a69e:	429c      	cmp	r4, r3
  40a6a0:	f63f aec7 	bhi.w	40a432 <_malloc_r+0x1ea>
  40a6a4:	2c00      	cmp	r4, #0
  40a6a6:	f43f aec4 	beq.w	40a432 <_malloc_r+0x1ea>
  40a6aa:	421c      	tst	r4, r3
  40a6ac:	4640      	mov	r0, r8
  40a6ae:	f47f ae3e 	bne.w	40a32e <_malloc_r+0xe6>
  40a6b2:	0064      	lsls	r4, r4, #1
  40a6b4:	421c      	tst	r4, r3
  40a6b6:	f100 0004 	add.w	r0, r0, #4
  40a6ba:	d0fa      	beq.n	40a6b2 <_malloc_r+0x46a>
  40a6bc:	e637      	b.n	40a32e <_malloc_r+0xe6>
  40a6be:	468c      	mov	ip, r1
  40a6c0:	e78c      	b.n	40a5dc <_malloc_r+0x394>
  40a6c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40a6c6:	d815      	bhi.n	40a6f4 <_malloc_r+0x4ac>
  40a6c8:	0bf3      	lsrs	r3, r6, #15
  40a6ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40a6ce:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40a6d2:	00c3      	lsls	r3, r0, #3
  40a6d4:	e5da      	b.n	40a28c <_malloc_r+0x44>
  40a6d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40a6da:	e6ed      	b.n	40a4b8 <_malloc_r+0x270>
  40a6dc:	687b      	ldr	r3, [r7, #4]
  40a6de:	1092      	asrs	r2, r2, #2
  40a6e0:	2101      	movs	r1, #1
  40a6e2:	fa01 f202 	lsl.w	r2, r1, r2
  40a6e6:	4313      	orrs	r3, r2
  40a6e8:	607b      	str	r3, [r7, #4]
  40a6ea:	4662      	mov	r2, ip
  40a6ec:	e779      	b.n	40a5e2 <_malloc_r+0x39a>
  40a6ee:	2301      	movs	r3, #1
  40a6f0:	6053      	str	r3, [r2, #4]
  40a6f2:	e729      	b.n	40a548 <_malloc_r+0x300>
  40a6f4:	f240 5254 	movw	r2, #1364	; 0x554
  40a6f8:	4293      	cmp	r3, r2
  40a6fa:	d822      	bhi.n	40a742 <_malloc_r+0x4fa>
  40a6fc:	0cb3      	lsrs	r3, r6, #18
  40a6fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40a702:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40a706:	00c3      	lsls	r3, r0, #3
  40a708:	e5c0      	b.n	40a28c <_malloc_r+0x44>
  40a70a:	f103 0b10 	add.w	fp, r3, #16
  40a70e:	e6ae      	b.n	40a46e <_malloc_r+0x226>
  40a710:	2a54      	cmp	r2, #84	; 0x54
  40a712:	d829      	bhi.n	40a768 <_malloc_r+0x520>
  40a714:	0b1a      	lsrs	r2, r3, #12
  40a716:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40a71a:	00c9      	lsls	r1, r1, #3
  40a71c:	326e      	adds	r2, #110	; 0x6e
  40a71e:	e74d      	b.n	40a5bc <_malloc_r+0x374>
  40a720:	4b20      	ldr	r3, [pc, #128]	; (40a7a4 <_malloc_r+0x55c>)
  40a722:	6819      	ldr	r1, [r3, #0]
  40a724:	4459      	add	r1, fp
  40a726:	6019      	str	r1, [r3, #0]
  40a728:	e6b2      	b.n	40a490 <_malloc_r+0x248>
  40a72a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40a72e:	2800      	cmp	r0, #0
  40a730:	f47f aeae 	bne.w	40a490 <_malloc_r+0x248>
  40a734:	eb08 030b 	add.w	r3, r8, fp
  40a738:	68ba      	ldr	r2, [r7, #8]
  40a73a:	f043 0301 	orr.w	r3, r3, #1
  40a73e:	6053      	str	r3, [r2, #4]
  40a740:	e6ee      	b.n	40a520 <_malloc_r+0x2d8>
  40a742:	207f      	movs	r0, #127	; 0x7f
  40a744:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40a748:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40a74c:	e59e      	b.n	40a28c <_malloc_r+0x44>
  40a74e:	f104 0108 	add.w	r1, r4, #8
  40a752:	4628      	mov	r0, r5
  40a754:	9300      	str	r3, [sp, #0]
  40a756:	f7ff fa4b 	bl	409bf0 <_free_r>
  40a75a:	9b00      	ldr	r3, [sp, #0]
  40a75c:	6819      	ldr	r1, [r3, #0]
  40a75e:	e6df      	b.n	40a520 <_malloc_r+0x2d8>
  40a760:	2001      	movs	r0, #1
  40a762:	f04f 0900 	mov.w	r9, #0
  40a766:	e6bc      	b.n	40a4e2 <_malloc_r+0x29a>
  40a768:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40a76c:	d805      	bhi.n	40a77a <_malloc_r+0x532>
  40a76e:	0bda      	lsrs	r2, r3, #15
  40a770:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40a774:	00c9      	lsls	r1, r1, #3
  40a776:	3277      	adds	r2, #119	; 0x77
  40a778:	e720      	b.n	40a5bc <_malloc_r+0x374>
  40a77a:	f240 5154 	movw	r1, #1364	; 0x554
  40a77e:	428a      	cmp	r2, r1
  40a780:	d805      	bhi.n	40a78e <_malloc_r+0x546>
  40a782:	0c9a      	lsrs	r2, r3, #18
  40a784:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40a788:	00c9      	lsls	r1, r1, #3
  40a78a:	327c      	adds	r2, #124	; 0x7c
  40a78c:	e716      	b.n	40a5bc <_malloc_r+0x374>
  40a78e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40a792:	227e      	movs	r2, #126	; 0x7e
  40a794:	e712      	b.n	40a5bc <_malloc_r+0x374>
  40a796:	687b      	ldr	r3, [r7, #4]
  40a798:	e780      	b.n	40a69c <_malloc_r+0x454>
  40a79a:	08f0      	lsrs	r0, r6, #3
  40a79c:	f106 0308 	add.w	r3, r6, #8
  40a7a0:	e600      	b.n	40a3a4 <_malloc_r+0x15c>
  40a7a2:	bf00      	nop
  40a7a4:	2040c964 	.word	0x2040c964

0040a7a8 <__ascii_mbtowc>:
  40a7a8:	b082      	sub	sp, #8
  40a7aa:	b149      	cbz	r1, 40a7c0 <__ascii_mbtowc+0x18>
  40a7ac:	b15a      	cbz	r2, 40a7c6 <__ascii_mbtowc+0x1e>
  40a7ae:	b16b      	cbz	r3, 40a7cc <__ascii_mbtowc+0x24>
  40a7b0:	7813      	ldrb	r3, [r2, #0]
  40a7b2:	600b      	str	r3, [r1, #0]
  40a7b4:	7812      	ldrb	r2, [r2, #0]
  40a7b6:	1c10      	adds	r0, r2, #0
  40a7b8:	bf18      	it	ne
  40a7ba:	2001      	movne	r0, #1
  40a7bc:	b002      	add	sp, #8
  40a7be:	4770      	bx	lr
  40a7c0:	a901      	add	r1, sp, #4
  40a7c2:	2a00      	cmp	r2, #0
  40a7c4:	d1f3      	bne.n	40a7ae <__ascii_mbtowc+0x6>
  40a7c6:	4610      	mov	r0, r2
  40a7c8:	b002      	add	sp, #8
  40a7ca:	4770      	bx	lr
  40a7cc:	f06f 0001 	mvn.w	r0, #1
  40a7d0:	e7f4      	b.n	40a7bc <__ascii_mbtowc+0x14>
  40a7d2:	bf00      	nop
	...

0040a7e0 <memchr>:
  40a7e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a7e4:	2a10      	cmp	r2, #16
  40a7e6:	db2b      	blt.n	40a840 <memchr+0x60>
  40a7e8:	f010 0f07 	tst.w	r0, #7
  40a7ec:	d008      	beq.n	40a800 <memchr+0x20>
  40a7ee:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a7f2:	3a01      	subs	r2, #1
  40a7f4:	428b      	cmp	r3, r1
  40a7f6:	d02d      	beq.n	40a854 <memchr+0x74>
  40a7f8:	f010 0f07 	tst.w	r0, #7
  40a7fc:	b342      	cbz	r2, 40a850 <memchr+0x70>
  40a7fe:	d1f6      	bne.n	40a7ee <memchr+0xe>
  40a800:	b4f0      	push	{r4, r5, r6, r7}
  40a802:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40a806:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40a80a:	f022 0407 	bic.w	r4, r2, #7
  40a80e:	f07f 0700 	mvns.w	r7, #0
  40a812:	2300      	movs	r3, #0
  40a814:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40a818:	3c08      	subs	r4, #8
  40a81a:	ea85 0501 	eor.w	r5, r5, r1
  40a81e:	ea86 0601 	eor.w	r6, r6, r1
  40a822:	fa85 f547 	uadd8	r5, r5, r7
  40a826:	faa3 f587 	sel	r5, r3, r7
  40a82a:	fa86 f647 	uadd8	r6, r6, r7
  40a82e:	faa5 f687 	sel	r6, r5, r7
  40a832:	b98e      	cbnz	r6, 40a858 <memchr+0x78>
  40a834:	d1ee      	bne.n	40a814 <memchr+0x34>
  40a836:	bcf0      	pop	{r4, r5, r6, r7}
  40a838:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40a83c:	f002 0207 	and.w	r2, r2, #7
  40a840:	b132      	cbz	r2, 40a850 <memchr+0x70>
  40a842:	f810 3b01 	ldrb.w	r3, [r0], #1
  40a846:	3a01      	subs	r2, #1
  40a848:	ea83 0301 	eor.w	r3, r3, r1
  40a84c:	b113      	cbz	r3, 40a854 <memchr+0x74>
  40a84e:	d1f8      	bne.n	40a842 <memchr+0x62>
  40a850:	2000      	movs	r0, #0
  40a852:	4770      	bx	lr
  40a854:	3801      	subs	r0, #1
  40a856:	4770      	bx	lr
  40a858:	2d00      	cmp	r5, #0
  40a85a:	bf06      	itte	eq
  40a85c:	4635      	moveq	r5, r6
  40a85e:	3803      	subeq	r0, #3
  40a860:	3807      	subne	r0, #7
  40a862:	f015 0f01 	tst.w	r5, #1
  40a866:	d107      	bne.n	40a878 <memchr+0x98>
  40a868:	3001      	adds	r0, #1
  40a86a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40a86e:	bf02      	ittt	eq
  40a870:	3001      	addeq	r0, #1
  40a872:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40a876:	3001      	addeq	r0, #1
  40a878:	bcf0      	pop	{r4, r5, r6, r7}
  40a87a:	3801      	subs	r0, #1
  40a87c:	4770      	bx	lr
  40a87e:	bf00      	nop

0040a880 <memmove>:
  40a880:	4288      	cmp	r0, r1
  40a882:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a884:	d90d      	bls.n	40a8a2 <memmove+0x22>
  40a886:	188b      	adds	r3, r1, r2
  40a888:	4298      	cmp	r0, r3
  40a88a:	d20a      	bcs.n	40a8a2 <memmove+0x22>
  40a88c:	1884      	adds	r4, r0, r2
  40a88e:	2a00      	cmp	r2, #0
  40a890:	d051      	beq.n	40a936 <memmove+0xb6>
  40a892:	4622      	mov	r2, r4
  40a894:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40a898:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40a89c:	4299      	cmp	r1, r3
  40a89e:	d1f9      	bne.n	40a894 <memmove+0x14>
  40a8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a8a2:	2a0f      	cmp	r2, #15
  40a8a4:	d948      	bls.n	40a938 <memmove+0xb8>
  40a8a6:	ea41 0300 	orr.w	r3, r1, r0
  40a8aa:	079b      	lsls	r3, r3, #30
  40a8ac:	d146      	bne.n	40a93c <memmove+0xbc>
  40a8ae:	f100 0410 	add.w	r4, r0, #16
  40a8b2:	f101 0310 	add.w	r3, r1, #16
  40a8b6:	4615      	mov	r5, r2
  40a8b8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40a8bc:	f844 6c10 	str.w	r6, [r4, #-16]
  40a8c0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40a8c4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40a8c8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40a8cc:	f844 6c08 	str.w	r6, [r4, #-8]
  40a8d0:	3d10      	subs	r5, #16
  40a8d2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40a8d6:	f844 6c04 	str.w	r6, [r4, #-4]
  40a8da:	2d0f      	cmp	r5, #15
  40a8dc:	f103 0310 	add.w	r3, r3, #16
  40a8e0:	f104 0410 	add.w	r4, r4, #16
  40a8e4:	d8e8      	bhi.n	40a8b8 <memmove+0x38>
  40a8e6:	f1a2 0310 	sub.w	r3, r2, #16
  40a8ea:	f023 030f 	bic.w	r3, r3, #15
  40a8ee:	f002 0e0f 	and.w	lr, r2, #15
  40a8f2:	3310      	adds	r3, #16
  40a8f4:	f1be 0f03 	cmp.w	lr, #3
  40a8f8:	4419      	add	r1, r3
  40a8fa:	4403      	add	r3, r0
  40a8fc:	d921      	bls.n	40a942 <memmove+0xc2>
  40a8fe:	1f1e      	subs	r6, r3, #4
  40a900:	460d      	mov	r5, r1
  40a902:	4674      	mov	r4, lr
  40a904:	3c04      	subs	r4, #4
  40a906:	f855 7b04 	ldr.w	r7, [r5], #4
  40a90a:	f846 7f04 	str.w	r7, [r6, #4]!
  40a90e:	2c03      	cmp	r4, #3
  40a910:	d8f8      	bhi.n	40a904 <memmove+0x84>
  40a912:	f1ae 0404 	sub.w	r4, lr, #4
  40a916:	f024 0403 	bic.w	r4, r4, #3
  40a91a:	3404      	adds	r4, #4
  40a91c:	4421      	add	r1, r4
  40a91e:	4423      	add	r3, r4
  40a920:	f002 0203 	and.w	r2, r2, #3
  40a924:	b162      	cbz	r2, 40a940 <memmove+0xc0>
  40a926:	3b01      	subs	r3, #1
  40a928:	440a      	add	r2, r1
  40a92a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40a92e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40a932:	428a      	cmp	r2, r1
  40a934:	d1f9      	bne.n	40a92a <memmove+0xaa>
  40a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a938:	4603      	mov	r3, r0
  40a93a:	e7f3      	b.n	40a924 <memmove+0xa4>
  40a93c:	4603      	mov	r3, r0
  40a93e:	e7f2      	b.n	40a926 <memmove+0xa6>
  40a940:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a942:	4672      	mov	r2, lr
  40a944:	e7ee      	b.n	40a924 <memmove+0xa4>
  40a946:	bf00      	nop

0040a948 <__malloc_lock>:
  40a948:	4801      	ldr	r0, [pc, #4]	; (40a950 <__malloc_lock+0x8>)
  40a94a:	f7ff bbf9 	b.w	40a140 <__retarget_lock_acquire_recursive>
  40a94e:	bf00      	nop
  40a950:	2040cb3c 	.word	0x2040cb3c

0040a954 <__malloc_unlock>:
  40a954:	4801      	ldr	r0, [pc, #4]	; (40a95c <__malloc_unlock+0x8>)
  40a956:	f7ff bbf5 	b.w	40a144 <__retarget_lock_release_recursive>
  40a95a:	bf00      	nop
  40a95c:	2040cb3c 	.word	0x2040cb3c

0040a960 <_Balloc>:
  40a960:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a962:	b570      	push	{r4, r5, r6, lr}
  40a964:	4605      	mov	r5, r0
  40a966:	460c      	mov	r4, r1
  40a968:	b14b      	cbz	r3, 40a97e <_Balloc+0x1e>
  40a96a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40a96e:	b180      	cbz	r0, 40a992 <_Balloc+0x32>
  40a970:	6802      	ldr	r2, [r0, #0]
  40a972:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40a976:	2300      	movs	r3, #0
  40a978:	6103      	str	r3, [r0, #16]
  40a97a:	60c3      	str	r3, [r0, #12]
  40a97c:	bd70      	pop	{r4, r5, r6, pc}
  40a97e:	2221      	movs	r2, #33	; 0x21
  40a980:	2104      	movs	r1, #4
  40a982:	f000 fe69 	bl	40b658 <_calloc_r>
  40a986:	64e8      	str	r0, [r5, #76]	; 0x4c
  40a988:	4603      	mov	r3, r0
  40a98a:	2800      	cmp	r0, #0
  40a98c:	d1ed      	bne.n	40a96a <_Balloc+0xa>
  40a98e:	2000      	movs	r0, #0
  40a990:	bd70      	pop	{r4, r5, r6, pc}
  40a992:	2101      	movs	r1, #1
  40a994:	fa01 f604 	lsl.w	r6, r1, r4
  40a998:	1d72      	adds	r2, r6, #5
  40a99a:	4628      	mov	r0, r5
  40a99c:	0092      	lsls	r2, r2, #2
  40a99e:	f000 fe5b 	bl	40b658 <_calloc_r>
  40a9a2:	2800      	cmp	r0, #0
  40a9a4:	d0f3      	beq.n	40a98e <_Balloc+0x2e>
  40a9a6:	6044      	str	r4, [r0, #4]
  40a9a8:	6086      	str	r6, [r0, #8]
  40a9aa:	e7e4      	b.n	40a976 <_Balloc+0x16>

0040a9ac <_Bfree>:
  40a9ac:	b131      	cbz	r1, 40a9bc <_Bfree+0x10>
  40a9ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40a9b0:	684a      	ldr	r2, [r1, #4]
  40a9b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40a9b6:	6008      	str	r0, [r1, #0]
  40a9b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  40a9bc:	4770      	bx	lr
  40a9be:	bf00      	nop

0040a9c0 <__multadd>:
  40a9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a9c2:	690c      	ldr	r4, [r1, #16]
  40a9c4:	b083      	sub	sp, #12
  40a9c6:	460d      	mov	r5, r1
  40a9c8:	4606      	mov	r6, r0
  40a9ca:	f101 0e14 	add.w	lr, r1, #20
  40a9ce:	2700      	movs	r7, #0
  40a9d0:	f8de 0000 	ldr.w	r0, [lr]
  40a9d4:	b281      	uxth	r1, r0
  40a9d6:	fb02 3301 	mla	r3, r2, r1, r3
  40a9da:	0c01      	lsrs	r1, r0, #16
  40a9dc:	0c18      	lsrs	r0, r3, #16
  40a9de:	fb02 0101 	mla	r1, r2, r1, r0
  40a9e2:	b29b      	uxth	r3, r3
  40a9e4:	3701      	adds	r7, #1
  40a9e6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  40a9ea:	42bc      	cmp	r4, r7
  40a9ec:	f84e 3b04 	str.w	r3, [lr], #4
  40a9f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40a9f4:	dcec      	bgt.n	40a9d0 <__multadd+0x10>
  40a9f6:	b13b      	cbz	r3, 40aa08 <__multadd+0x48>
  40a9f8:	68aa      	ldr	r2, [r5, #8]
  40a9fa:	4294      	cmp	r4, r2
  40a9fc:	da07      	bge.n	40aa0e <__multadd+0x4e>
  40a9fe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40aa02:	3401      	adds	r4, #1
  40aa04:	6153      	str	r3, [r2, #20]
  40aa06:	612c      	str	r4, [r5, #16]
  40aa08:	4628      	mov	r0, r5
  40aa0a:	b003      	add	sp, #12
  40aa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40aa0e:	6869      	ldr	r1, [r5, #4]
  40aa10:	9301      	str	r3, [sp, #4]
  40aa12:	3101      	adds	r1, #1
  40aa14:	4630      	mov	r0, r6
  40aa16:	f7ff ffa3 	bl	40a960 <_Balloc>
  40aa1a:	692a      	ldr	r2, [r5, #16]
  40aa1c:	3202      	adds	r2, #2
  40aa1e:	f105 010c 	add.w	r1, r5, #12
  40aa22:	4607      	mov	r7, r0
  40aa24:	0092      	lsls	r2, r2, #2
  40aa26:	300c      	adds	r0, #12
  40aa28:	f7fb fb40 	bl	4060ac <memcpy>
  40aa2c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40aa2e:	6869      	ldr	r1, [r5, #4]
  40aa30:	9b01      	ldr	r3, [sp, #4]
  40aa32:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40aa36:	6028      	str	r0, [r5, #0]
  40aa38:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40aa3c:	463d      	mov	r5, r7
  40aa3e:	e7de      	b.n	40a9fe <__multadd+0x3e>

0040aa40 <__hi0bits>:
  40aa40:	0c02      	lsrs	r2, r0, #16
  40aa42:	0412      	lsls	r2, r2, #16
  40aa44:	4603      	mov	r3, r0
  40aa46:	b9b2      	cbnz	r2, 40aa76 <__hi0bits+0x36>
  40aa48:	0403      	lsls	r3, r0, #16
  40aa4a:	2010      	movs	r0, #16
  40aa4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40aa50:	bf04      	itt	eq
  40aa52:	021b      	lsleq	r3, r3, #8
  40aa54:	3008      	addeq	r0, #8
  40aa56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  40aa5a:	bf04      	itt	eq
  40aa5c:	011b      	lsleq	r3, r3, #4
  40aa5e:	3004      	addeq	r0, #4
  40aa60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40aa64:	bf04      	itt	eq
  40aa66:	009b      	lsleq	r3, r3, #2
  40aa68:	3002      	addeq	r0, #2
  40aa6a:	2b00      	cmp	r3, #0
  40aa6c:	db02      	blt.n	40aa74 <__hi0bits+0x34>
  40aa6e:	005b      	lsls	r3, r3, #1
  40aa70:	d403      	bmi.n	40aa7a <__hi0bits+0x3a>
  40aa72:	2020      	movs	r0, #32
  40aa74:	4770      	bx	lr
  40aa76:	2000      	movs	r0, #0
  40aa78:	e7e8      	b.n	40aa4c <__hi0bits+0xc>
  40aa7a:	3001      	adds	r0, #1
  40aa7c:	4770      	bx	lr
  40aa7e:	bf00      	nop

0040aa80 <__lo0bits>:
  40aa80:	6803      	ldr	r3, [r0, #0]
  40aa82:	f013 0207 	ands.w	r2, r3, #7
  40aa86:	4601      	mov	r1, r0
  40aa88:	d007      	beq.n	40aa9a <__lo0bits+0x1a>
  40aa8a:	07da      	lsls	r2, r3, #31
  40aa8c:	d421      	bmi.n	40aad2 <__lo0bits+0x52>
  40aa8e:	0798      	lsls	r0, r3, #30
  40aa90:	d421      	bmi.n	40aad6 <__lo0bits+0x56>
  40aa92:	089b      	lsrs	r3, r3, #2
  40aa94:	600b      	str	r3, [r1, #0]
  40aa96:	2002      	movs	r0, #2
  40aa98:	4770      	bx	lr
  40aa9a:	b298      	uxth	r0, r3
  40aa9c:	b198      	cbz	r0, 40aac6 <__lo0bits+0x46>
  40aa9e:	4610      	mov	r0, r2
  40aaa0:	f013 0fff 	tst.w	r3, #255	; 0xff
  40aaa4:	bf04      	itt	eq
  40aaa6:	0a1b      	lsreq	r3, r3, #8
  40aaa8:	3008      	addeq	r0, #8
  40aaaa:	071a      	lsls	r2, r3, #28
  40aaac:	bf04      	itt	eq
  40aaae:	091b      	lsreq	r3, r3, #4
  40aab0:	3004      	addeq	r0, #4
  40aab2:	079a      	lsls	r2, r3, #30
  40aab4:	bf04      	itt	eq
  40aab6:	089b      	lsreq	r3, r3, #2
  40aab8:	3002      	addeq	r0, #2
  40aaba:	07da      	lsls	r2, r3, #31
  40aabc:	d407      	bmi.n	40aace <__lo0bits+0x4e>
  40aabe:	085b      	lsrs	r3, r3, #1
  40aac0:	d104      	bne.n	40aacc <__lo0bits+0x4c>
  40aac2:	2020      	movs	r0, #32
  40aac4:	4770      	bx	lr
  40aac6:	0c1b      	lsrs	r3, r3, #16
  40aac8:	2010      	movs	r0, #16
  40aaca:	e7e9      	b.n	40aaa0 <__lo0bits+0x20>
  40aacc:	3001      	adds	r0, #1
  40aace:	600b      	str	r3, [r1, #0]
  40aad0:	4770      	bx	lr
  40aad2:	2000      	movs	r0, #0
  40aad4:	4770      	bx	lr
  40aad6:	085b      	lsrs	r3, r3, #1
  40aad8:	600b      	str	r3, [r1, #0]
  40aada:	2001      	movs	r0, #1
  40aadc:	4770      	bx	lr
  40aade:	bf00      	nop

0040aae0 <__i2b>:
  40aae0:	b510      	push	{r4, lr}
  40aae2:	460c      	mov	r4, r1
  40aae4:	2101      	movs	r1, #1
  40aae6:	f7ff ff3b 	bl	40a960 <_Balloc>
  40aaea:	2201      	movs	r2, #1
  40aaec:	6144      	str	r4, [r0, #20]
  40aaee:	6102      	str	r2, [r0, #16]
  40aaf0:	bd10      	pop	{r4, pc}
  40aaf2:	bf00      	nop

0040aaf4 <__multiply>:
  40aaf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aaf8:	690c      	ldr	r4, [r1, #16]
  40aafa:	6915      	ldr	r5, [r2, #16]
  40aafc:	42ac      	cmp	r4, r5
  40aafe:	b083      	sub	sp, #12
  40ab00:	468b      	mov	fp, r1
  40ab02:	4616      	mov	r6, r2
  40ab04:	da04      	bge.n	40ab10 <__multiply+0x1c>
  40ab06:	4622      	mov	r2, r4
  40ab08:	46b3      	mov	fp, r6
  40ab0a:	462c      	mov	r4, r5
  40ab0c:	460e      	mov	r6, r1
  40ab0e:	4615      	mov	r5, r2
  40ab10:	f8db 3008 	ldr.w	r3, [fp, #8]
  40ab14:	f8db 1004 	ldr.w	r1, [fp, #4]
  40ab18:	eb04 0805 	add.w	r8, r4, r5
  40ab1c:	4598      	cmp	r8, r3
  40ab1e:	bfc8      	it	gt
  40ab20:	3101      	addgt	r1, #1
  40ab22:	f7ff ff1d 	bl	40a960 <_Balloc>
  40ab26:	f100 0914 	add.w	r9, r0, #20
  40ab2a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40ab2e:	45d1      	cmp	r9, sl
  40ab30:	9000      	str	r0, [sp, #0]
  40ab32:	d205      	bcs.n	40ab40 <__multiply+0x4c>
  40ab34:	464b      	mov	r3, r9
  40ab36:	2100      	movs	r1, #0
  40ab38:	f843 1b04 	str.w	r1, [r3], #4
  40ab3c:	459a      	cmp	sl, r3
  40ab3e:	d8fb      	bhi.n	40ab38 <__multiply+0x44>
  40ab40:	f106 0c14 	add.w	ip, r6, #20
  40ab44:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  40ab48:	f10b 0b14 	add.w	fp, fp, #20
  40ab4c:	459c      	cmp	ip, r3
  40ab4e:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40ab52:	d24c      	bcs.n	40abee <__multiply+0xfa>
  40ab54:	f8cd a004 	str.w	sl, [sp, #4]
  40ab58:	469a      	mov	sl, r3
  40ab5a:	f8dc 5000 	ldr.w	r5, [ip]
  40ab5e:	b2af      	uxth	r7, r5
  40ab60:	b1ef      	cbz	r7, 40ab9e <__multiply+0xaa>
  40ab62:	2100      	movs	r1, #0
  40ab64:	464d      	mov	r5, r9
  40ab66:	465e      	mov	r6, fp
  40ab68:	460c      	mov	r4, r1
  40ab6a:	f856 2b04 	ldr.w	r2, [r6], #4
  40ab6e:	6828      	ldr	r0, [r5, #0]
  40ab70:	b293      	uxth	r3, r2
  40ab72:	b281      	uxth	r1, r0
  40ab74:	fb07 1303 	mla	r3, r7, r3, r1
  40ab78:	0c12      	lsrs	r2, r2, #16
  40ab7a:	0c01      	lsrs	r1, r0, #16
  40ab7c:	4423      	add	r3, r4
  40ab7e:	fb07 1102 	mla	r1, r7, r2, r1
  40ab82:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40ab86:	b29b      	uxth	r3, r3
  40ab88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40ab8c:	45b6      	cmp	lr, r6
  40ab8e:	f845 3b04 	str.w	r3, [r5], #4
  40ab92:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40ab96:	d8e8      	bhi.n	40ab6a <__multiply+0x76>
  40ab98:	602c      	str	r4, [r5, #0]
  40ab9a:	f8dc 5000 	ldr.w	r5, [ip]
  40ab9e:	0c2d      	lsrs	r5, r5, #16
  40aba0:	d01d      	beq.n	40abde <__multiply+0xea>
  40aba2:	f8d9 3000 	ldr.w	r3, [r9]
  40aba6:	4648      	mov	r0, r9
  40aba8:	461c      	mov	r4, r3
  40abaa:	4659      	mov	r1, fp
  40abac:	2200      	movs	r2, #0
  40abae:	880e      	ldrh	r6, [r1, #0]
  40abb0:	0c24      	lsrs	r4, r4, #16
  40abb2:	fb05 4406 	mla	r4, r5, r6, r4
  40abb6:	4422      	add	r2, r4
  40abb8:	b29b      	uxth	r3, r3
  40abba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40abbe:	f840 3b04 	str.w	r3, [r0], #4
  40abc2:	f851 3b04 	ldr.w	r3, [r1], #4
  40abc6:	6804      	ldr	r4, [r0, #0]
  40abc8:	0c1b      	lsrs	r3, r3, #16
  40abca:	b2a6      	uxth	r6, r4
  40abcc:	fb05 6303 	mla	r3, r5, r3, r6
  40abd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40abd4:	458e      	cmp	lr, r1
  40abd6:	ea4f 4213 	mov.w	r2, r3, lsr #16
  40abda:	d8e8      	bhi.n	40abae <__multiply+0xba>
  40abdc:	6003      	str	r3, [r0, #0]
  40abde:	f10c 0c04 	add.w	ip, ip, #4
  40abe2:	45e2      	cmp	sl, ip
  40abe4:	f109 0904 	add.w	r9, r9, #4
  40abe8:	d8b7      	bhi.n	40ab5a <__multiply+0x66>
  40abea:	f8dd a004 	ldr.w	sl, [sp, #4]
  40abee:	f1b8 0f00 	cmp.w	r8, #0
  40abf2:	dd0b      	ble.n	40ac0c <__multiply+0x118>
  40abf4:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  40abf8:	f1aa 0a04 	sub.w	sl, sl, #4
  40abfc:	b11b      	cbz	r3, 40ac06 <__multiply+0x112>
  40abfe:	e005      	b.n	40ac0c <__multiply+0x118>
  40ac00:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40ac04:	b913      	cbnz	r3, 40ac0c <__multiply+0x118>
  40ac06:	f1b8 0801 	subs.w	r8, r8, #1
  40ac0a:	d1f9      	bne.n	40ac00 <__multiply+0x10c>
  40ac0c:	9800      	ldr	r0, [sp, #0]
  40ac0e:	f8c0 8010 	str.w	r8, [r0, #16]
  40ac12:	b003      	add	sp, #12
  40ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040ac18 <__pow5mult>:
  40ac18:	f012 0303 	ands.w	r3, r2, #3
  40ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ac20:	4614      	mov	r4, r2
  40ac22:	4607      	mov	r7, r0
  40ac24:	d12e      	bne.n	40ac84 <__pow5mult+0x6c>
  40ac26:	460d      	mov	r5, r1
  40ac28:	10a4      	asrs	r4, r4, #2
  40ac2a:	d01c      	beq.n	40ac66 <__pow5mult+0x4e>
  40ac2c:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40ac2e:	b396      	cbz	r6, 40ac96 <__pow5mult+0x7e>
  40ac30:	07e3      	lsls	r3, r4, #31
  40ac32:	f04f 0800 	mov.w	r8, #0
  40ac36:	d406      	bmi.n	40ac46 <__pow5mult+0x2e>
  40ac38:	1064      	asrs	r4, r4, #1
  40ac3a:	d014      	beq.n	40ac66 <__pow5mult+0x4e>
  40ac3c:	6830      	ldr	r0, [r6, #0]
  40ac3e:	b1a8      	cbz	r0, 40ac6c <__pow5mult+0x54>
  40ac40:	4606      	mov	r6, r0
  40ac42:	07e3      	lsls	r3, r4, #31
  40ac44:	d5f8      	bpl.n	40ac38 <__pow5mult+0x20>
  40ac46:	4632      	mov	r2, r6
  40ac48:	4629      	mov	r1, r5
  40ac4a:	4638      	mov	r0, r7
  40ac4c:	f7ff ff52 	bl	40aaf4 <__multiply>
  40ac50:	b1b5      	cbz	r5, 40ac80 <__pow5mult+0x68>
  40ac52:	686a      	ldr	r2, [r5, #4]
  40ac54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ac56:	1064      	asrs	r4, r4, #1
  40ac58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ac5c:	6029      	str	r1, [r5, #0]
  40ac5e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40ac62:	4605      	mov	r5, r0
  40ac64:	d1ea      	bne.n	40ac3c <__pow5mult+0x24>
  40ac66:	4628      	mov	r0, r5
  40ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ac6c:	4632      	mov	r2, r6
  40ac6e:	4631      	mov	r1, r6
  40ac70:	4638      	mov	r0, r7
  40ac72:	f7ff ff3f 	bl	40aaf4 <__multiply>
  40ac76:	6030      	str	r0, [r6, #0]
  40ac78:	f8c0 8000 	str.w	r8, [r0]
  40ac7c:	4606      	mov	r6, r0
  40ac7e:	e7e0      	b.n	40ac42 <__pow5mult+0x2a>
  40ac80:	4605      	mov	r5, r0
  40ac82:	e7d9      	b.n	40ac38 <__pow5mult+0x20>
  40ac84:	1e5a      	subs	r2, r3, #1
  40ac86:	4d0b      	ldr	r5, [pc, #44]	; (40acb4 <__pow5mult+0x9c>)
  40ac88:	2300      	movs	r3, #0
  40ac8a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40ac8e:	f7ff fe97 	bl	40a9c0 <__multadd>
  40ac92:	4605      	mov	r5, r0
  40ac94:	e7c8      	b.n	40ac28 <__pow5mult+0x10>
  40ac96:	2101      	movs	r1, #1
  40ac98:	4638      	mov	r0, r7
  40ac9a:	f7ff fe61 	bl	40a960 <_Balloc>
  40ac9e:	f240 2171 	movw	r1, #625	; 0x271
  40aca2:	2201      	movs	r2, #1
  40aca4:	2300      	movs	r3, #0
  40aca6:	6141      	str	r1, [r0, #20]
  40aca8:	6102      	str	r2, [r0, #16]
  40acaa:	4606      	mov	r6, r0
  40acac:	64b8      	str	r0, [r7, #72]	; 0x48
  40acae:	6003      	str	r3, [r0, #0]
  40acb0:	e7be      	b.n	40ac30 <__pow5mult+0x18>
  40acb2:	bf00      	nop
  40acb4:	0040d5b0 	.word	0x0040d5b0

0040acb8 <__lshift>:
  40acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40acbc:	4691      	mov	r9, r2
  40acbe:	690a      	ldr	r2, [r1, #16]
  40acc0:	688b      	ldr	r3, [r1, #8]
  40acc2:	ea4f 1469 	mov.w	r4, r9, asr #5
  40acc6:	eb04 0802 	add.w	r8, r4, r2
  40acca:	f108 0501 	add.w	r5, r8, #1
  40acce:	429d      	cmp	r5, r3
  40acd0:	460e      	mov	r6, r1
  40acd2:	4607      	mov	r7, r0
  40acd4:	6849      	ldr	r1, [r1, #4]
  40acd6:	dd04      	ble.n	40ace2 <__lshift+0x2a>
  40acd8:	005b      	lsls	r3, r3, #1
  40acda:	429d      	cmp	r5, r3
  40acdc:	f101 0101 	add.w	r1, r1, #1
  40ace0:	dcfa      	bgt.n	40acd8 <__lshift+0x20>
  40ace2:	4638      	mov	r0, r7
  40ace4:	f7ff fe3c 	bl	40a960 <_Balloc>
  40ace8:	2c00      	cmp	r4, #0
  40acea:	f100 0314 	add.w	r3, r0, #20
  40acee:	dd06      	ble.n	40acfe <__lshift+0x46>
  40acf0:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40acf4:	2100      	movs	r1, #0
  40acf6:	f843 1b04 	str.w	r1, [r3], #4
  40acfa:	429a      	cmp	r2, r3
  40acfc:	d1fb      	bne.n	40acf6 <__lshift+0x3e>
  40acfe:	6934      	ldr	r4, [r6, #16]
  40ad00:	f106 0114 	add.w	r1, r6, #20
  40ad04:	f019 091f 	ands.w	r9, r9, #31
  40ad08:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  40ad0c:	d01d      	beq.n	40ad4a <__lshift+0x92>
  40ad0e:	f1c9 0c20 	rsb	ip, r9, #32
  40ad12:	2200      	movs	r2, #0
  40ad14:	680c      	ldr	r4, [r1, #0]
  40ad16:	fa04 f409 	lsl.w	r4, r4, r9
  40ad1a:	4314      	orrs	r4, r2
  40ad1c:	f843 4b04 	str.w	r4, [r3], #4
  40ad20:	f851 2b04 	ldr.w	r2, [r1], #4
  40ad24:	458e      	cmp	lr, r1
  40ad26:	fa22 f20c 	lsr.w	r2, r2, ip
  40ad2a:	d8f3      	bhi.n	40ad14 <__lshift+0x5c>
  40ad2c:	601a      	str	r2, [r3, #0]
  40ad2e:	b10a      	cbz	r2, 40ad34 <__lshift+0x7c>
  40ad30:	f108 0502 	add.w	r5, r8, #2
  40ad34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40ad36:	6872      	ldr	r2, [r6, #4]
  40ad38:	3d01      	subs	r5, #1
  40ad3a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40ad3e:	6105      	str	r5, [r0, #16]
  40ad40:	6031      	str	r1, [r6, #0]
  40ad42:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40ad46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40ad4a:	3b04      	subs	r3, #4
  40ad4c:	f851 2b04 	ldr.w	r2, [r1], #4
  40ad50:	f843 2f04 	str.w	r2, [r3, #4]!
  40ad54:	458e      	cmp	lr, r1
  40ad56:	d8f9      	bhi.n	40ad4c <__lshift+0x94>
  40ad58:	e7ec      	b.n	40ad34 <__lshift+0x7c>
  40ad5a:	bf00      	nop

0040ad5c <__mcmp>:
  40ad5c:	b430      	push	{r4, r5}
  40ad5e:	690b      	ldr	r3, [r1, #16]
  40ad60:	4605      	mov	r5, r0
  40ad62:	6900      	ldr	r0, [r0, #16]
  40ad64:	1ac0      	subs	r0, r0, r3
  40ad66:	d10f      	bne.n	40ad88 <__mcmp+0x2c>
  40ad68:	009b      	lsls	r3, r3, #2
  40ad6a:	3514      	adds	r5, #20
  40ad6c:	3114      	adds	r1, #20
  40ad6e:	4419      	add	r1, r3
  40ad70:	442b      	add	r3, r5
  40ad72:	e001      	b.n	40ad78 <__mcmp+0x1c>
  40ad74:	429d      	cmp	r5, r3
  40ad76:	d207      	bcs.n	40ad88 <__mcmp+0x2c>
  40ad78:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  40ad7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40ad80:	4294      	cmp	r4, r2
  40ad82:	d0f7      	beq.n	40ad74 <__mcmp+0x18>
  40ad84:	d302      	bcc.n	40ad8c <__mcmp+0x30>
  40ad86:	2001      	movs	r0, #1
  40ad88:	bc30      	pop	{r4, r5}
  40ad8a:	4770      	bx	lr
  40ad8c:	f04f 30ff 	mov.w	r0, #4294967295
  40ad90:	e7fa      	b.n	40ad88 <__mcmp+0x2c>
  40ad92:	bf00      	nop

0040ad94 <__mdiff>:
  40ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40ad98:	690f      	ldr	r7, [r1, #16]
  40ad9a:	460e      	mov	r6, r1
  40ad9c:	6911      	ldr	r1, [r2, #16]
  40ad9e:	1a7f      	subs	r7, r7, r1
  40ada0:	2f00      	cmp	r7, #0
  40ada2:	4690      	mov	r8, r2
  40ada4:	d117      	bne.n	40add6 <__mdiff+0x42>
  40ada6:	0089      	lsls	r1, r1, #2
  40ada8:	f106 0514 	add.w	r5, r6, #20
  40adac:	f102 0e14 	add.w	lr, r2, #20
  40adb0:	186b      	adds	r3, r5, r1
  40adb2:	4471      	add	r1, lr
  40adb4:	e001      	b.n	40adba <__mdiff+0x26>
  40adb6:	429d      	cmp	r5, r3
  40adb8:	d25c      	bcs.n	40ae74 <__mdiff+0xe0>
  40adba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40adbe:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40adc2:	42a2      	cmp	r2, r4
  40adc4:	d0f7      	beq.n	40adb6 <__mdiff+0x22>
  40adc6:	d25e      	bcs.n	40ae86 <__mdiff+0xf2>
  40adc8:	4633      	mov	r3, r6
  40adca:	462c      	mov	r4, r5
  40adcc:	4646      	mov	r6, r8
  40adce:	4675      	mov	r5, lr
  40add0:	4698      	mov	r8, r3
  40add2:	2701      	movs	r7, #1
  40add4:	e005      	b.n	40ade2 <__mdiff+0x4e>
  40add6:	db58      	blt.n	40ae8a <__mdiff+0xf6>
  40add8:	f106 0514 	add.w	r5, r6, #20
  40addc:	f108 0414 	add.w	r4, r8, #20
  40ade0:	2700      	movs	r7, #0
  40ade2:	6871      	ldr	r1, [r6, #4]
  40ade4:	f7ff fdbc 	bl	40a960 <_Balloc>
  40ade8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40adec:	6936      	ldr	r6, [r6, #16]
  40adee:	60c7      	str	r7, [r0, #12]
  40adf0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40adf4:	46a6      	mov	lr, r4
  40adf6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40adfa:	f100 0414 	add.w	r4, r0, #20
  40adfe:	2300      	movs	r3, #0
  40ae00:	f85e 1b04 	ldr.w	r1, [lr], #4
  40ae04:	f855 8b04 	ldr.w	r8, [r5], #4
  40ae08:	b28a      	uxth	r2, r1
  40ae0a:	fa13 f388 	uxtah	r3, r3, r8
  40ae0e:	0c09      	lsrs	r1, r1, #16
  40ae10:	1a9a      	subs	r2, r3, r2
  40ae12:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40ae16:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40ae1a:	b292      	uxth	r2, r2
  40ae1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40ae20:	45f4      	cmp	ip, lr
  40ae22:	f844 2b04 	str.w	r2, [r4], #4
  40ae26:	ea4f 4323 	mov.w	r3, r3, asr #16
  40ae2a:	d8e9      	bhi.n	40ae00 <__mdiff+0x6c>
  40ae2c:	42af      	cmp	r7, r5
  40ae2e:	d917      	bls.n	40ae60 <__mdiff+0xcc>
  40ae30:	46a4      	mov	ip, r4
  40ae32:	46ae      	mov	lr, r5
  40ae34:	f85e 2b04 	ldr.w	r2, [lr], #4
  40ae38:	fa13 f382 	uxtah	r3, r3, r2
  40ae3c:	1419      	asrs	r1, r3, #16
  40ae3e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40ae42:	b29b      	uxth	r3, r3
  40ae44:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  40ae48:	4577      	cmp	r7, lr
  40ae4a:	f84c 2b04 	str.w	r2, [ip], #4
  40ae4e:	ea4f 4321 	mov.w	r3, r1, asr #16
  40ae52:	d8ef      	bhi.n	40ae34 <__mdiff+0xa0>
  40ae54:	43ed      	mvns	r5, r5
  40ae56:	442f      	add	r7, r5
  40ae58:	f027 0703 	bic.w	r7, r7, #3
  40ae5c:	3704      	adds	r7, #4
  40ae5e:	443c      	add	r4, r7
  40ae60:	3c04      	subs	r4, #4
  40ae62:	b922      	cbnz	r2, 40ae6e <__mdiff+0xda>
  40ae64:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  40ae68:	3e01      	subs	r6, #1
  40ae6a:	2b00      	cmp	r3, #0
  40ae6c:	d0fa      	beq.n	40ae64 <__mdiff+0xd0>
  40ae6e:	6106      	str	r6, [r0, #16]
  40ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ae74:	2100      	movs	r1, #0
  40ae76:	f7ff fd73 	bl	40a960 <_Balloc>
  40ae7a:	2201      	movs	r2, #1
  40ae7c:	2300      	movs	r3, #0
  40ae7e:	6102      	str	r2, [r0, #16]
  40ae80:	6143      	str	r3, [r0, #20]
  40ae82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40ae86:	4674      	mov	r4, lr
  40ae88:	e7ab      	b.n	40ade2 <__mdiff+0x4e>
  40ae8a:	4633      	mov	r3, r6
  40ae8c:	f106 0414 	add.w	r4, r6, #20
  40ae90:	f102 0514 	add.w	r5, r2, #20
  40ae94:	4616      	mov	r6, r2
  40ae96:	2701      	movs	r7, #1
  40ae98:	4698      	mov	r8, r3
  40ae9a:	e7a2      	b.n	40ade2 <__mdiff+0x4e>

0040ae9c <__d2b>:
  40ae9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40aea0:	b082      	sub	sp, #8
  40aea2:	2101      	movs	r1, #1
  40aea4:	461c      	mov	r4, r3
  40aea6:	f3c3 570a 	ubfx	r7, r3, #20, #11
  40aeaa:	4615      	mov	r5, r2
  40aeac:	9e08      	ldr	r6, [sp, #32]
  40aeae:	f7ff fd57 	bl	40a960 <_Balloc>
  40aeb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40aeb6:	4680      	mov	r8, r0
  40aeb8:	b10f      	cbz	r7, 40aebe <__d2b+0x22>
  40aeba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40aebe:	9401      	str	r4, [sp, #4]
  40aec0:	b31d      	cbz	r5, 40af0a <__d2b+0x6e>
  40aec2:	a802      	add	r0, sp, #8
  40aec4:	f840 5d08 	str.w	r5, [r0, #-8]!
  40aec8:	f7ff fdda 	bl	40aa80 <__lo0bits>
  40aecc:	2800      	cmp	r0, #0
  40aece:	d134      	bne.n	40af3a <__d2b+0x9e>
  40aed0:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40aed4:	f8c8 2014 	str.w	r2, [r8, #20]
  40aed8:	2b00      	cmp	r3, #0
  40aeda:	bf0c      	ite	eq
  40aedc:	2101      	moveq	r1, #1
  40aede:	2102      	movne	r1, #2
  40aee0:	f8c8 3018 	str.w	r3, [r8, #24]
  40aee4:	f8c8 1010 	str.w	r1, [r8, #16]
  40aee8:	b9df      	cbnz	r7, 40af22 <__d2b+0x86>
  40aeea:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40aeee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40aef2:	6030      	str	r0, [r6, #0]
  40aef4:	6918      	ldr	r0, [r3, #16]
  40aef6:	f7ff fda3 	bl	40aa40 <__hi0bits>
  40aefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40aefc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40af00:	6018      	str	r0, [r3, #0]
  40af02:	4640      	mov	r0, r8
  40af04:	b002      	add	sp, #8
  40af06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af0a:	a801      	add	r0, sp, #4
  40af0c:	f7ff fdb8 	bl	40aa80 <__lo0bits>
  40af10:	9b01      	ldr	r3, [sp, #4]
  40af12:	f8c8 3014 	str.w	r3, [r8, #20]
  40af16:	2101      	movs	r1, #1
  40af18:	3020      	adds	r0, #32
  40af1a:	f8c8 1010 	str.w	r1, [r8, #16]
  40af1e:	2f00      	cmp	r7, #0
  40af20:	d0e3      	beq.n	40aeea <__d2b+0x4e>
  40af22:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40af24:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  40af28:	4407      	add	r7, r0
  40af2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40af2e:	6037      	str	r7, [r6, #0]
  40af30:	6018      	str	r0, [r3, #0]
  40af32:	4640      	mov	r0, r8
  40af34:	b002      	add	sp, #8
  40af36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40af3a:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40af3e:	f1c0 0220 	rsb	r2, r0, #32
  40af42:	fa03 f202 	lsl.w	r2, r3, r2
  40af46:	430a      	orrs	r2, r1
  40af48:	40c3      	lsrs	r3, r0
  40af4a:	9301      	str	r3, [sp, #4]
  40af4c:	f8c8 2014 	str.w	r2, [r8, #20]
  40af50:	e7c2      	b.n	40aed8 <__d2b+0x3c>
  40af52:	bf00      	nop

0040af54 <_realloc_r>:
  40af54:	2900      	cmp	r1, #0
  40af56:	f000 8095 	beq.w	40b084 <_realloc_r+0x130>
  40af5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40af5e:	460d      	mov	r5, r1
  40af60:	4616      	mov	r6, r2
  40af62:	b083      	sub	sp, #12
  40af64:	4680      	mov	r8, r0
  40af66:	f106 070b 	add.w	r7, r6, #11
  40af6a:	f7ff fced 	bl	40a948 <__malloc_lock>
  40af6e:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40af72:	2f16      	cmp	r7, #22
  40af74:	f02e 0403 	bic.w	r4, lr, #3
  40af78:	f1a5 0908 	sub.w	r9, r5, #8
  40af7c:	d83c      	bhi.n	40aff8 <_realloc_r+0xa4>
  40af7e:	2210      	movs	r2, #16
  40af80:	4617      	mov	r7, r2
  40af82:	42be      	cmp	r6, r7
  40af84:	d83d      	bhi.n	40b002 <_realloc_r+0xae>
  40af86:	4294      	cmp	r4, r2
  40af88:	da43      	bge.n	40b012 <_realloc_r+0xbe>
  40af8a:	4bc4      	ldr	r3, [pc, #784]	; (40b29c <_realloc_r+0x348>)
  40af8c:	6899      	ldr	r1, [r3, #8]
  40af8e:	eb09 0004 	add.w	r0, r9, r4
  40af92:	4288      	cmp	r0, r1
  40af94:	f000 80b4 	beq.w	40b100 <_realloc_r+0x1ac>
  40af98:	6843      	ldr	r3, [r0, #4]
  40af9a:	f023 0101 	bic.w	r1, r3, #1
  40af9e:	4401      	add	r1, r0
  40afa0:	6849      	ldr	r1, [r1, #4]
  40afa2:	07c9      	lsls	r1, r1, #31
  40afa4:	d54c      	bpl.n	40b040 <_realloc_r+0xec>
  40afa6:	f01e 0f01 	tst.w	lr, #1
  40afaa:	f000 809b 	beq.w	40b0e4 <_realloc_r+0x190>
  40afae:	4631      	mov	r1, r6
  40afb0:	4640      	mov	r0, r8
  40afb2:	f7ff f949 	bl	40a248 <_malloc_r>
  40afb6:	4606      	mov	r6, r0
  40afb8:	2800      	cmp	r0, #0
  40afba:	d03a      	beq.n	40b032 <_realloc_r+0xde>
  40afbc:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40afc0:	f023 0301 	bic.w	r3, r3, #1
  40afc4:	444b      	add	r3, r9
  40afc6:	f1a0 0208 	sub.w	r2, r0, #8
  40afca:	429a      	cmp	r2, r3
  40afcc:	f000 8121 	beq.w	40b212 <_realloc_r+0x2be>
  40afd0:	1f22      	subs	r2, r4, #4
  40afd2:	2a24      	cmp	r2, #36	; 0x24
  40afd4:	f200 8107 	bhi.w	40b1e6 <_realloc_r+0x292>
  40afd8:	2a13      	cmp	r2, #19
  40afda:	f200 80db 	bhi.w	40b194 <_realloc_r+0x240>
  40afde:	4603      	mov	r3, r0
  40afe0:	462a      	mov	r2, r5
  40afe2:	6811      	ldr	r1, [r2, #0]
  40afe4:	6019      	str	r1, [r3, #0]
  40afe6:	6851      	ldr	r1, [r2, #4]
  40afe8:	6059      	str	r1, [r3, #4]
  40afea:	6892      	ldr	r2, [r2, #8]
  40afec:	609a      	str	r2, [r3, #8]
  40afee:	4629      	mov	r1, r5
  40aff0:	4640      	mov	r0, r8
  40aff2:	f7fe fdfd 	bl	409bf0 <_free_r>
  40aff6:	e01c      	b.n	40b032 <_realloc_r+0xde>
  40aff8:	f027 0707 	bic.w	r7, r7, #7
  40affc:	2f00      	cmp	r7, #0
  40affe:	463a      	mov	r2, r7
  40b000:	dabf      	bge.n	40af82 <_realloc_r+0x2e>
  40b002:	2600      	movs	r6, #0
  40b004:	230c      	movs	r3, #12
  40b006:	4630      	mov	r0, r6
  40b008:	f8c8 3000 	str.w	r3, [r8]
  40b00c:	b003      	add	sp, #12
  40b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b012:	462e      	mov	r6, r5
  40b014:	1be3      	subs	r3, r4, r7
  40b016:	2b0f      	cmp	r3, #15
  40b018:	d81e      	bhi.n	40b058 <_realloc_r+0x104>
  40b01a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40b01e:	f003 0301 	and.w	r3, r3, #1
  40b022:	4323      	orrs	r3, r4
  40b024:	444c      	add	r4, r9
  40b026:	f8c9 3004 	str.w	r3, [r9, #4]
  40b02a:	6863      	ldr	r3, [r4, #4]
  40b02c:	f043 0301 	orr.w	r3, r3, #1
  40b030:	6063      	str	r3, [r4, #4]
  40b032:	4640      	mov	r0, r8
  40b034:	f7ff fc8e 	bl	40a954 <__malloc_unlock>
  40b038:	4630      	mov	r0, r6
  40b03a:	b003      	add	sp, #12
  40b03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b040:	f023 0303 	bic.w	r3, r3, #3
  40b044:	18e1      	adds	r1, r4, r3
  40b046:	4291      	cmp	r1, r2
  40b048:	db1f      	blt.n	40b08a <_realloc_r+0x136>
  40b04a:	68c3      	ldr	r3, [r0, #12]
  40b04c:	6882      	ldr	r2, [r0, #8]
  40b04e:	462e      	mov	r6, r5
  40b050:	60d3      	str	r3, [r2, #12]
  40b052:	460c      	mov	r4, r1
  40b054:	609a      	str	r2, [r3, #8]
  40b056:	e7dd      	b.n	40b014 <_realloc_r+0xc0>
  40b058:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40b05c:	eb09 0107 	add.w	r1, r9, r7
  40b060:	f002 0201 	and.w	r2, r2, #1
  40b064:	444c      	add	r4, r9
  40b066:	f043 0301 	orr.w	r3, r3, #1
  40b06a:	4317      	orrs	r7, r2
  40b06c:	f8c9 7004 	str.w	r7, [r9, #4]
  40b070:	604b      	str	r3, [r1, #4]
  40b072:	6863      	ldr	r3, [r4, #4]
  40b074:	f043 0301 	orr.w	r3, r3, #1
  40b078:	3108      	adds	r1, #8
  40b07a:	6063      	str	r3, [r4, #4]
  40b07c:	4640      	mov	r0, r8
  40b07e:	f7fe fdb7 	bl	409bf0 <_free_r>
  40b082:	e7d6      	b.n	40b032 <_realloc_r+0xde>
  40b084:	4611      	mov	r1, r2
  40b086:	f7ff b8df 	b.w	40a248 <_malloc_r>
  40b08a:	f01e 0f01 	tst.w	lr, #1
  40b08e:	d18e      	bne.n	40afae <_realloc_r+0x5a>
  40b090:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b094:	eba9 0a01 	sub.w	sl, r9, r1
  40b098:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b09c:	f021 0103 	bic.w	r1, r1, #3
  40b0a0:	440b      	add	r3, r1
  40b0a2:	4423      	add	r3, r4
  40b0a4:	4293      	cmp	r3, r2
  40b0a6:	db25      	blt.n	40b0f4 <_realloc_r+0x1a0>
  40b0a8:	68c2      	ldr	r2, [r0, #12]
  40b0aa:	6881      	ldr	r1, [r0, #8]
  40b0ac:	4656      	mov	r6, sl
  40b0ae:	60ca      	str	r2, [r1, #12]
  40b0b0:	6091      	str	r1, [r2, #8]
  40b0b2:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b0b6:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b0ba:	1f22      	subs	r2, r4, #4
  40b0bc:	2a24      	cmp	r2, #36	; 0x24
  40b0be:	60c1      	str	r1, [r0, #12]
  40b0c0:	6088      	str	r0, [r1, #8]
  40b0c2:	f200 8094 	bhi.w	40b1ee <_realloc_r+0x29a>
  40b0c6:	2a13      	cmp	r2, #19
  40b0c8:	d96f      	bls.n	40b1aa <_realloc_r+0x256>
  40b0ca:	6829      	ldr	r1, [r5, #0]
  40b0cc:	f8ca 1008 	str.w	r1, [sl, #8]
  40b0d0:	6869      	ldr	r1, [r5, #4]
  40b0d2:	f8ca 100c 	str.w	r1, [sl, #12]
  40b0d6:	2a1b      	cmp	r2, #27
  40b0d8:	f200 80a2 	bhi.w	40b220 <_realloc_r+0x2cc>
  40b0dc:	3508      	adds	r5, #8
  40b0de:	f10a 0210 	add.w	r2, sl, #16
  40b0e2:	e063      	b.n	40b1ac <_realloc_r+0x258>
  40b0e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40b0e8:	eba9 0a03 	sub.w	sl, r9, r3
  40b0ec:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b0f0:	f021 0103 	bic.w	r1, r1, #3
  40b0f4:	1863      	adds	r3, r4, r1
  40b0f6:	4293      	cmp	r3, r2
  40b0f8:	f6ff af59 	blt.w	40afae <_realloc_r+0x5a>
  40b0fc:	4656      	mov	r6, sl
  40b0fe:	e7d8      	b.n	40b0b2 <_realloc_r+0x15e>
  40b100:	6841      	ldr	r1, [r0, #4]
  40b102:	f021 0b03 	bic.w	fp, r1, #3
  40b106:	44a3      	add	fp, r4
  40b108:	f107 0010 	add.w	r0, r7, #16
  40b10c:	4583      	cmp	fp, r0
  40b10e:	da56      	bge.n	40b1be <_realloc_r+0x26a>
  40b110:	f01e 0f01 	tst.w	lr, #1
  40b114:	f47f af4b 	bne.w	40afae <_realloc_r+0x5a>
  40b118:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40b11c:	eba9 0a01 	sub.w	sl, r9, r1
  40b120:	f8da 1004 	ldr.w	r1, [sl, #4]
  40b124:	f021 0103 	bic.w	r1, r1, #3
  40b128:	448b      	add	fp, r1
  40b12a:	4558      	cmp	r0, fp
  40b12c:	dce2      	bgt.n	40b0f4 <_realloc_r+0x1a0>
  40b12e:	4656      	mov	r6, sl
  40b130:	f8da 100c 	ldr.w	r1, [sl, #12]
  40b134:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40b138:	1f22      	subs	r2, r4, #4
  40b13a:	2a24      	cmp	r2, #36	; 0x24
  40b13c:	60c1      	str	r1, [r0, #12]
  40b13e:	6088      	str	r0, [r1, #8]
  40b140:	f200 808f 	bhi.w	40b262 <_realloc_r+0x30e>
  40b144:	2a13      	cmp	r2, #19
  40b146:	f240 808a 	bls.w	40b25e <_realloc_r+0x30a>
  40b14a:	6829      	ldr	r1, [r5, #0]
  40b14c:	f8ca 1008 	str.w	r1, [sl, #8]
  40b150:	6869      	ldr	r1, [r5, #4]
  40b152:	f8ca 100c 	str.w	r1, [sl, #12]
  40b156:	2a1b      	cmp	r2, #27
  40b158:	f200 808a 	bhi.w	40b270 <_realloc_r+0x31c>
  40b15c:	3508      	adds	r5, #8
  40b15e:	f10a 0210 	add.w	r2, sl, #16
  40b162:	6829      	ldr	r1, [r5, #0]
  40b164:	6011      	str	r1, [r2, #0]
  40b166:	6869      	ldr	r1, [r5, #4]
  40b168:	6051      	str	r1, [r2, #4]
  40b16a:	68a9      	ldr	r1, [r5, #8]
  40b16c:	6091      	str	r1, [r2, #8]
  40b16e:	eb0a 0107 	add.w	r1, sl, r7
  40b172:	ebab 0207 	sub.w	r2, fp, r7
  40b176:	f042 0201 	orr.w	r2, r2, #1
  40b17a:	6099      	str	r1, [r3, #8]
  40b17c:	604a      	str	r2, [r1, #4]
  40b17e:	f8da 3004 	ldr.w	r3, [sl, #4]
  40b182:	f003 0301 	and.w	r3, r3, #1
  40b186:	431f      	orrs	r7, r3
  40b188:	4640      	mov	r0, r8
  40b18a:	f8ca 7004 	str.w	r7, [sl, #4]
  40b18e:	f7ff fbe1 	bl	40a954 <__malloc_unlock>
  40b192:	e751      	b.n	40b038 <_realloc_r+0xe4>
  40b194:	682b      	ldr	r3, [r5, #0]
  40b196:	6003      	str	r3, [r0, #0]
  40b198:	686b      	ldr	r3, [r5, #4]
  40b19a:	6043      	str	r3, [r0, #4]
  40b19c:	2a1b      	cmp	r2, #27
  40b19e:	d82d      	bhi.n	40b1fc <_realloc_r+0x2a8>
  40b1a0:	f100 0308 	add.w	r3, r0, #8
  40b1a4:	f105 0208 	add.w	r2, r5, #8
  40b1a8:	e71b      	b.n	40afe2 <_realloc_r+0x8e>
  40b1aa:	4632      	mov	r2, r6
  40b1ac:	6829      	ldr	r1, [r5, #0]
  40b1ae:	6011      	str	r1, [r2, #0]
  40b1b0:	6869      	ldr	r1, [r5, #4]
  40b1b2:	6051      	str	r1, [r2, #4]
  40b1b4:	68a9      	ldr	r1, [r5, #8]
  40b1b6:	6091      	str	r1, [r2, #8]
  40b1b8:	461c      	mov	r4, r3
  40b1ba:	46d1      	mov	r9, sl
  40b1bc:	e72a      	b.n	40b014 <_realloc_r+0xc0>
  40b1be:	eb09 0107 	add.w	r1, r9, r7
  40b1c2:	ebab 0b07 	sub.w	fp, fp, r7
  40b1c6:	f04b 0201 	orr.w	r2, fp, #1
  40b1ca:	6099      	str	r1, [r3, #8]
  40b1cc:	604a      	str	r2, [r1, #4]
  40b1ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40b1d2:	f003 0301 	and.w	r3, r3, #1
  40b1d6:	431f      	orrs	r7, r3
  40b1d8:	4640      	mov	r0, r8
  40b1da:	f845 7c04 	str.w	r7, [r5, #-4]
  40b1de:	f7ff fbb9 	bl	40a954 <__malloc_unlock>
  40b1e2:	462e      	mov	r6, r5
  40b1e4:	e728      	b.n	40b038 <_realloc_r+0xe4>
  40b1e6:	4629      	mov	r1, r5
  40b1e8:	f7ff fb4a 	bl	40a880 <memmove>
  40b1ec:	e6ff      	b.n	40afee <_realloc_r+0x9a>
  40b1ee:	4629      	mov	r1, r5
  40b1f0:	4630      	mov	r0, r6
  40b1f2:	461c      	mov	r4, r3
  40b1f4:	46d1      	mov	r9, sl
  40b1f6:	f7ff fb43 	bl	40a880 <memmove>
  40b1fa:	e70b      	b.n	40b014 <_realloc_r+0xc0>
  40b1fc:	68ab      	ldr	r3, [r5, #8]
  40b1fe:	6083      	str	r3, [r0, #8]
  40b200:	68eb      	ldr	r3, [r5, #12]
  40b202:	60c3      	str	r3, [r0, #12]
  40b204:	2a24      	cmp	r2, #36	; 0x24
  40b206:	d017      	beq.n	40b238 <_realloc_r+0x2e4>
  40b208:	f100 0310 	add.w	r3, r0, #16
  40b20c:	f105 0210 	add.w	r2, r5, #16
  40b210:	e6e7      	b.n	40afe2 <_realloc_r+0x8e>
  40b212:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40b216:	f023 0303 	bic.w	r3, r3, #3
  40b21a:	441c      	add	r4, r3
  40b21c:	462e      	mov	r6, r5
  40b21e:	e6f9      	b.n	40b014 <_realloc_r+0xc0>
  40b220:	68a9      	ldr	r1, [r5, #8]
  40b222:	f8ca 1010 	str.w	r1, [sl, #16]
  40b226:	68e9      	ldr	r1, [r5, #12]
  40b228:	f8ca 1014 	str.w	r1, [sl, #20]
  40b22c:	2a24      	cmp	r2, #36	; 0x24
  40b22e:	d00c      	beq.n	40b24a <_realloc_r+0x2f6>
  40b230:	3510      	adds	r5, #16
  40b232:	f10a 0218 	add.w	r2, sl, #24
  40b236:	e7b9      	b.n	40b1ac <_realloc_r+0x258>
  40b238:	692b      	ldr	r3, [r5, #16]
  40b23a:	6103      	str	r3, [r0, #16]
  40b23c:	696b      	ldr	r3, [r5, #20]
  40b23e:	6143      	str	r3, [r0, #20]
  40b240:	f105 0218 	add.w	r2, r5, #24
  40b244:	f100 0318 	add.w	r3, r0, #24
  40b248:	e6cb      	b.n	40afe2 <_realloc_r+0x8e>
  40b24a:	692a      	ldr	r2, [r5, #16]
  40b24c:	f8ca 2018 	str.w	r2, [sl, #24]
  40b250:	696a      	ldr	r2, [r5, #20]
  40b252:	f8ca 201c 	str.w	r2, [sl, #28]
  40b256:	3518      	adds	r5, #24
  40b258:	f10a 0220 	add.w	r2, sl, #32
  40b25c:	e7a6      	b.n	40b1ac <_realloc_r+0x258>
  40b25e:	4632      	mov	r2, r6
  40b260:	e77f      	b.n	40b162 <_realloc_r+0x20e>
  40b262:	4629      	mov	r1, r5
  40b264:	4630      	mov	r0, r6
  40b266:	9301      	str	r3, [sp, #4]
  40b268:	f7ff fb0a 	bl	40a880 <memmove>
  40b26c:	9b01      	ldr	r3, [sp, #4]
  40b26e:	e77e      	b.n	40b16e <_realloc_r+0x21a>
  40b270:	68a9      	ldr	r1, [r5, #8]
  40b272:	f8ca 1010 	str.w	r1, [sl, #16]
  40b276:	68e9      	ldr	r1, [r5, #12]
  40b278:	f8ca 1014 	str.w	r1, [sl, #20]
  40b27c:	2a24      	cmp	r2, #36	; 0x24
  40b27e:	d003      	beq.n	40b288 <_realloc_r+0x334>
  40b280:	3510      	adds	r5, #16
  40b282:	f10a 0218 	add.w	r2, sl, #24
  40b286:	e76c      	b.n	40b162 <_realloc_r+0x20e>
  40b288:	692a      	ldr	r2, [r5, #16]
  40b28a:	f8ca 2018 	str.w	r2, [sl, #24]
  40b28e:	696a      	ldr	r2, [r5, #20]
  40b290:	f8ca 201c 	str.w	r2, [sl, #28]
  40b294:	3518      	adds	r5, #24
  40b296:	f10a 0220 	add.w	r2, sl, #32
  40b29a:	e762      	b.n	40b162 <_realloc_r+0x20e>
  40b29c:	204005c0 	.word	0x204005c0

0040b2a0 <_sbrk_r>:
  40b2a0:	b538      	push	{r3, r4, r5, lr}
  40b2a2:	4c07      	ldr	r4, [pc, #28]	; (40b2c0 <_sbrk_r+0x20>)
  40b2a4:	2300      	movs	r3, #0
  40b2a6:	4605      	mov	r5, r0
  40b2a8:	4608      	mov	r0, r1
  40b2aa:	6023      	str	r3, [r4, #0]
  40b2ac:	f7fa f9e4 	bl	405678 <_sbrk>
  40b2b0:	1c43      	adds	r3, r0, #1
  40b2b2:	d000      	beq.n	40b2b6 <_sbrk_r+0x16>
  40b2b4:	bd38      	pop	{r3, r4, r5, pc}
  40b2b6:	6823      	ldr	r3, [r4, #0]
  40b2b8:	2b00      	cmp	r3, #0
  40b2ba:	d0fb      	beq.n	40b2b4 <_sbrk_r+0x14>
  40b2bc:	602b      	str	r3, [r5, #0]
  40b2be:	bd38      	pop	{r3, r4, r5, pc}
  40b2c0:	2040cb50 	.word	0x2040cb50

0040b2c4 <__sread>:
  40b2c4:	b510      	push	{r4, lr}
  40b2c6:	460c      	mov	r4, r1
  40b2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b2cc:	f000 faa4 	bl	40b818 <_read_r>
  40b2d0:	2800      	cmp	r0, #0
  40b2d2:	db03      	blt.n	40b2dc <__sread+0x18>
  40b2d4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40b2d6:	4403      	add	r3, r0
  40b2d8:	6523      	str	r3, [r4, #80]	; 0x50
  40b2da:	bd10      	pop	{r4, pc}
  40b2dc:	89a3      	ldrh	r3, [r4, #12]
  40b2de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40b2e2:	81a3      	strh	r3, [r4, #12]
  40b2e4:	bd10      	pop	{r4, pc}
  40b2e6:	bf00      	nop

0040b2e8 <__swrite>:
  40b2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40b2ec:	4616      	mov	r6, r2
  40b2ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40b2f2:	461f      	mov	r7, r3
  40b2f4:	05d3      	lsls	r3, r2, #23
  40b2f6:	460c      	mov	r4, r1
  40b2f8:	4605      	mov	r5, r0
  40b2fa:	d507      	bpl.n	40b30c <__swrite+0x24>
  40b2fc:	2200      	movs	r2, #0
  40b2fe:	2302      	movs	r3, #2
  40b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b304:	f000 fa72 	bl	40b7ec <_lseek_r>
  40b308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40b310:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40b314:	81a2      	strh	r2, [r4, #12]
  40b316:	463b      	mov	r3, r7
  40b318:	4632      	mov	r2, r6
  40b31a:	4628      	mov	r0, r5
  40b31c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40b320:	f000 b922 	b.w	40b568 <_write_r>

0040b324 <__sseek>:
  40b324:	b510      	push	{r4, lr}
  40b326:	460c      	mov	r4, r1
  40b328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b32c:	f000 fa5e 	bl	40b7ec <_lseek_r>
  40b330:	89a3      	ldrh	r3, [r4, #12]
  40b332:	1c42      	adds	r2, r0, #1
  40b334:	bf0e      	itee	eq
  40b336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40b33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40b33e:	6520      	strne	r0, [r4, #80]	; 0x50
  40b340:	81a3      	strh	r3, [r4, #12]
  40b342:	bd10      	pop	{r4, pc}

0040b344 <__sclose>:
  40b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40b348:	f000 b9b6 	b.w	40b6b8 <_close_r>

0040b34c <__ssprint_r>:
  40b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b350:	6893      	ldr	r3, [r2, #8]
  40b352:	b083      	sub	sp, #12
  40b354:	4690      	mov	r8, r2
  40b356:	2b00      	cmp	r3, #0
  40b358:	d070      	beq.n	40b43c <__ssprint_r+0xf0>
  40b35a:	4682      	mov	sl, r0
  40b35c:	460c      	mov	r4, r1
  40b35e:	6817      	ldr	r7, [r2, #0]
  40b360:	688d      	ldr	r5, [r1, #8]
  40b362:	6808      	ldr	r0, [r1, #0]
  40b364:	e042      	b.n	40b3ec <__ssprint_r+0xa0>
  40b366:	89a3      	ldrh	r3, [r4, #12]
  40b368:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40b36c:	d02e      	beq.n	40b3cc <__ssprint_r+0x80>
  40b36e:	6965      	ldr	r5, [r4, #20]
  40b370:	6921      	ldr	r1, [r4, #16]
  40b372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  40b376:	eba0 0b01 	sub.w	fp, r0, r1
  40b37a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40b37e:	f10b 0001 	add.w	r0, fp, #1
  40b382:	106d      	asrs	r5, r5, #1
  40b384:	4430      	add	r0, r6
  40b386:	42a8      	cmp	r0, r5
  40b388:	462a      	mov	r2, r5
  40b38a:	bf84      	itt	hi
  40b38c:	4605      	movhi	r5, r0
  40b38e:	462a      	movhi	r2, r5
  40b390:	055b      	lsls	r3, r3, #21
  40b392:	d538      	bpl.n	40b406 <__ssprint_r+0xba>
  40b394:	4611      	mov	r1, r2
  40b396:	4650      	mov	r0, sl
  40b398:	f7fe ff56 	bl	40a248 <_malloc_r>
  40b39c:	2800      	cmp	r0, #0
  40b39e:	d03c      	beq.n	40b41a <__ssprint_r+0xce>
  40b3a0:	465a      	mov	r2, fp
  40b3a2:	6921      	ldr	r1, [r4, #16]
  40b3a4:	9001      	str	r0, [sp, #4]
  40b3a6:	f7fa fe81 	bl	4060ac <memcpy>
  40b3aa:	89a2      	ldrh	r2, [r4, #12]
  40b3ac:	9b01      	ldr	r3, [sp, #4]
  40b3ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40b3b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40b3b6:	81a2      	strh	r2, [r4, #12]
  40b3b8:	eba5 020b 	sub.w	r2, r5, fp
  40b3bc:	eb03 000b 	add.w	r0, r3, fp
  40b3c0:	6165      	str	r5, [r4, #20]
  40b3c2:	6123      	str	r3, [r4, #16]
  40b3c4:	6020      	str	r0, [r4, #0]
  40b3c6:	60a2      	str	r2, [r4, #8]
  40b3c8:	4635      	mov	r5, r6
  40b3ca:	46b3      	mov	fp, r6
  40b3cc:	465a      	mov	r2, fp
  40b3ce:	4649      	mov	r1, r9
  40b3d0:	f7ff fa56 	bl	40a880 <memmove>
  40b3d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  40b3d8:	68a2      	ldr	r2, [r4, #8]
  40b3da:	6820      	ldr	r0, [r4, #0]
  40b3dc:	1b55      	subs	r5, r2, r5
  40b3de:	4458      	add	r0, fp
  40b3e0:	1b9e      	subs	r6, r3, r6
  40b3e2:	60a5      	str	r5, [r4, #8]
  40b3e4:	6020      	str	r0, [r4, #0]
  40b3e6:	f8c8 6008 	str.w	r6, [r8, #8]
  40b3ea:	b33e      	cbz	r6, 40b43c <__ssprint_r+0xf0>
  40b3ec:	687e      	ldr	r6, [r7, #4]
  40b3ee:	463b      	mov	r3, r7
  40b3f0:	3708      	adds	r7, #8
  40b3f2:	2e00      	cmp	r6, #0
  40b3f4:	d0fa      	beq.n	40b3ec <__ssprint_r+0xa0>
  40b3f6:	42ae      	cmp	r6, r5
  40b3f8:	f8d3 9000 	ldr.w	r9, [r3]
  40b3fc:	46ab      	mov	fp, r5
  40b3fe:	d2b2      	bcs.n	40b366 <__ssprint_r+0x1a>
  40b400:	4635      	mov	r5, r6
  40b402:	46b3      	mov	fp, r6
  40b404:	e7e2      	b.n	40b3cc <__ssprint_r+0x80>
  40b406:	4650      	mov	r0, sl
  40b408:	f7ff fda4 	bl	40af54 <_realloc_r>
  40b40c:	4603      	mov	r3, r0
  40b40e:	2800      	cmp	r0, #0
  40b410:	d1d2      	bne.n	40b3b8 <__ssprint_r+0x6c>
  40b412:	6921      	ldr	r1, [r4, #16]
  40b414:	4650      	mov	r0, sl
  40b416:	f7fe fbeb 	bl	409bf0 <_free_r>
  40b41a:	230c      	movs	r3, #12
  40b41c:	f8ca 3000 	str.w	r3, [sl]
  40b420:	89a3      	ldrh	r3, [r4, #12]
  40b422:	2200      	movs	r2, #0
  40b424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40b428:	f04f 30ff 	mov.w	r0, #4294967295
  40b42c:	81a3      	strh	r3, [r4, #12]
  40b42e:	f8c8 2008 	str.w	r2, [r8, #8]
  40b432:	f8c8 2004 	str.w	r2, [r8, #4]
  40b436:	b003      	add	sp, #12
  40b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40b43c:	2000      	movs	r0, #0
  40b43e:	f8c8 0004 	str.w	r0, [r8, #4]
  40b442:	b003      	add	sp, #12
  40b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040b448 <__swbuf_r>:
  40b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40b44a:	460d      	mov	r5, r1
  40b44c:	4614      	mov	r4, r2
  40b44e:	4606      	mov	r6, r0
  40b450:	b110      	cbz	r0, 40b458 <__swbuf_r+0x10>
  40b452:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b454:	2b00      	cmp	r3, #0
  40b456:	d04b      	beq.n	40b4f0 <__swbuf_r+0xa8>
  40b458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b45c:	69a3      	ldr	r3, [r4, #24]
  40b45e:	60a3      	str	r3, [r4, #8]
  40b460:	b291      	uxth	r1, r2
  40b462:	0708      	lsls	r0, r1, #28
  40b464:	d539      	bpl.n	40b4da <__swbuf_r+0x92>
  40b466:	6923      	ldr	r3, [r4, #16]
  40b468:	2b00      	cmp	r3, #0
  40b46a:	d036      	beq.n	40b4da <__swbuf_r+0x92>
  40b46c:	b2ed      	uxtb	r5, r5
  40b46e:	0489      	lsls	r1, r1, #18
  40b470:	462f      	mov	r7, r5
  40b472:	d515      	bpl.n	40b4a0 <__swbuf_r+0x58>
  40b474:	6822      	ldr	r2, [r4, #0]
  40b476:	6961      	ldr	r1, [r4, #20]
  40b478:	1ad3      	subs	r3, r2, r3
  40b47a:	428b      	cmp	r3, r1
  40b47c:	da1c      	bge.n	40b4b8 <__swbuf_r+0x70>
  40b47e:	3301      	adds	r3, #1
  40b480:	68a1      	ldr	r1, [r4, #8]
  40b482:	1c50      	adds	r0, r2, #1
  40b484:	3901      	subs	r1, #1
  40b486:	60a1      	str	r1, [r4, #8]
  40b488:	6020      	str	r0, [r4, #0]
  40b48a:	7015      	strb	r5, [r2, #0]
  40b48c:	6962      	ldr	r2, [r4, #20]
  40b48e:	429a      	cmp	r2, r3
  40b490:	d01a      	beq.n	40b4c8 <__swbuf_r+0x80>
  40b492:	89a3      	ldrh	r3, [r4, #12]
  40b494:	07db      	lsls	r3, r3, #31
  40b496:	d501      	bpl.n	40b49c <__swbuf_r+0x54>
  40b498:	2d0a      	cmp	r5, #10
  40b49a:	d015      	beq.n	40b4c8 <__swbuf_r+0x80>
  40b49c:	4638      	mov	r0, r7
  40b49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40b4a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40b4a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40b4a6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40b4aa:	81a2      	strh	r2, [r4, #12]
  40b4ac:	6822      	ldr	r2, [r4, #0]
  40b4ae:	6661      	str	r1, [r4, #100]	; 0x64
  40b4b0:	6961      	ldr	r1, [r4, #20]
  40b4b2:	1ad3      	subs	r3, r2, r3
  40b4b4:	428b      	cmp	r3, r1
  40b4b6:	dbe2      	blt.n	40b47e <__swbuf_r+0x36>
  40b4b8:	4621      	mov	r1, r4
  40b4ba:	4630      	mov	r0, r6
  40b4bc:	f7fe fa1a 	bl	4098f4 <_fflush_r>
  40b4c0:	b940      	cbnz	r0, 40b4d4 <__swbuf_r+0x8c>
  40b4c2:	6822      	ldr	r2, [r4, #0]
  40b4c4:	2301      	movs	r3, #1
  40b4c6:	e7db      	b.n	40b480 <__swbuf_r+0x38>
  40b4c8:	4621      	mov	r1, r4
  40b4ca:	4630      	mov	r0, r6
  40b4cc:	f7fe fa12 	bl	4098f4 <_fflush_r>
  40b4d0:	2800      	cmp	r0, #0
  40b4d2:	d0e3      	beq.n	40b49c <__swbuf_r+0x54>
  40b4d4:	f04f 37ff 	mov.w	r7, #4294967295
  40b4d8:	e7e0      	b.n	40b49c <__swbuf_r+0x54>
  40b4da:	4621      	mov	r1, r4
  40b4dc:	4630      	mov	r0, r6
  40b4de:	f7fd f935 	bl	40874c <__swsetup_r>
  40b4e2:	2800      	cmp	r0, #0
  40b4e4:	d1f6      	bne.n	40b4d4 <__swbuf_r+0x8c>
  40b4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40b4ea:	6923      	ldr	r3, [r4, #16]
  40b4ec:	b291      	uxth	r1, r2
  40b4ee:	e7bd      	b.n	40b46c <__swbuf_r+0x24>
  40b4f0:	f7fe fa58 	bl	4099a4 <__sinit>
  40b4f4:	e7b0      	b.n	40b458 <__swbuf_r+0x10>
  40b4f6:	bf00      	nop

0040b4f8 <_wcrtomb_r>:
  40b4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40b4fa:	4606      	mov	r6, r0
  40b4fc:	b085      	sub	sp, #20
  40b4fe:	461f      	mov	r7, r3
  40b500:	b189      	cbz	r1, 40b526 <_wcrtomb_r+0x2e>
  40b502:	4c10      	ldr	r4, [pc, #64]	; (40b544 <_wcrtomb_r+0x4c>)
  40b504:	4d10      	ldr	r5, [pc, #64]	; (40b548 <_wcrtomb_r+0x50>)
  40b506:	6824      	ldr	r4, [r4, #0]
  40b508:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40b50a:	2c00      	cmp	r4, #0
  40b50c:	bf08      	it	eq
  40b50e:	462c      	moveq	r4, r5
  40b510:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40b514:	47a0      	blx	r4
  40b516:	1c43      	adds	r3, r0, #1
  40b518:	d103      	bne.n	40b522 <_wcrtomb_r+0x2a>
  40b51a:	2200      	movs	r2, #0
  40b51c:	238a      	movs	r3, #138	; 0x8a
  40b51e:	603a      	str	r2, [r7, #0]
  40b520:	6033      	str	r3, [r6, #0]
  40b522:	b005      	add	sp, #20
  40b524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40b526:	460c      	mov	r4, r1
  40b528:	4906      	ldr	r1, [pc, #24]	; (40b544 <_wcrtomb_r+0x4c>)
  40b52a:	4a07      	ldr	r2, [pc, #28]	; (40b548 <_wcrtomb_r+0x50>)
  40b52c:	6809      	ldr	r1, [r1, #0]
  40b52e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40b530:	2900      	cmp	r1, #0
  40b532:	bf08      	it	eq
  40b534:	4611      	moveq	r1, r2
  40b536:	4622      	mov	r2, r4
  40b538:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40b53c:	a901      	add	r1, sp, #4
  40b53e:	47a0      	blx	r4
  40b540:	e7e9      	b.n	40b516 <_wcrtomb_r+0x1e>
  40b542:	bf00      	nop
  40b544:	20400024 	.word	0x20400024
  40b548:	20400454 	.word	0x20400454

0040b54c <__ascii_wctomb>:
  40b54c:	b121      	cbz	r1, 40b558 <__ascii_wctomb+0xc>
  40b54e:	2aff      	cmp	r2, #255	; 0xff
  40b550:	d804      	bhi.n	40b55c <__ascii_wctomb+0x10>
  40b552:	700a      	strb	r2, [r1, #0]
  40b554:	2001      	movs	r0, #1
  40b556:	4770      	bx	lr
  40b558:	4608      	mov	r0, r1
  40b55a:	4770      	bx	lr
  40b55c:	238a      	movs	r3, #138	; 0x8a
  40b55e:	6003      	str	r3, [r0, #0]
  40b560:	f04f 30ff 	mov.w	r0, #4294967295
  40b564:	4770      	bx	lr
  40b566:	bf00      	nop

0040b568 <_write_r>:
  40b568:	b570      	push	{r4, r5, r6, lr}
  40b56a:	460d      	mov	r5, r1
  40b56c:	4c08      	ldr	r4, [pc, #32]	; (40b590 <_write_r+0x28>)
  40b56e:	4611      	mov	r1, r2
  40b570:	4606      	mov	r6, r0
  40b572:	461a      	mov	r2, r3
  40b574:	4628      	mov	r0, r5
  40b576:	2300      	movs	r3, #0
  40b578:	6023      	str	r3, [r4, #0]
  40b57a:	f7f9 fa5b 	bl	404a34 <_write>
  40b57e:	1c43      	adds	r3, r0, #1
  40b580:	d000      	beq.n	40b584 <_write_r+0x1c>
  40b582:	bd70      	pop	{r4, r5, r6, pc}
  40b584:	6823      	ldr	r3, [r4, #0]
  40b586:	2b00      	cmp	r3, #0
  40b588:	d0fb      	beq.n	40b582 <_write_r+0x1a>
  40b58a:	6033      	str	r3, [r6, #0]
  40b58c:	bd70      	pop	{r4, r5, r6, pc}
  40b58e:	bf00      	nop
  40b590:	2040cb50 	.word	0x2040cb50

0040b594 <__register_exitproc>:
  40b594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40b598:	4d2c      	ldr	r5, [pc, #176]	; (40b64c <__register_exitproc+0xb8>)
  40b59a:	4606      	mov	r6, r0
  40b59c:	6828      	ldr	r0, [r5, #0]
  40b59e:	4698      	mov	r8, r3
  40b5a0:	460f      	mov	r7, r1
  40b5a2:	4691      	mov	r9, r2
  40b5a4:	f7fe fdcc 	bl	40a140 <__retarget_lock_acquire_recursive>
  40b5a8:	4b29      	ldr	r3, [pc, #164]	; (40b650 <__register_exitproc+0xbc>)
  40b5aa:	681c      	ldr	r4, [r3, #0]
  40b5ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40b5b0:	2b00      	cmp	r3, #0
  40b5b2:	d03e      	beq.n	40b632 <__register_exitproc+0x9e>
  40b5b4:	685a      	ldr	r2, [r3, #4]
  40b5b6:	2a1f      	cmp	r2, #31
  40b5b8:	dc1c      	bgt.n	40b5f4 <__register_exitproc+0x60>
  40b5ba:	f102 0e01 	add.w	lr, r2, #1
  40b5be:	b176      	cbz	r6, 40b5de <__register_exitproc+0x4a>
  40b5c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40b5c4:	2401      	movs	r4, #1
  40b5c6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40b5ca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40b5ce:	4094      	lsls	r4, r2
  40b5d0:	4320      	orrs	r0, r4
  40b5d2:	2e02      	cmp	r6, #2
  40b5d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40b5d8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40b5dc:	d023      	beq.n	40b626 <__register_exitproc+0x92>
  40b5de:	3202      	adds	r2, #2
  40b5e0:	f8c3 e004 	str.w	lr, [r3, #4]
  40b5e4:	6828      	ldr	r0, [r5, #0]
  40b5e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40b5ea:	f7fe fdab 	bl	40a144 <__retarget_lock_release_recursive>
  40b5ee:	2000      	movs	r0, #0
  40b5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b5f4:	4b17      	ldr	r3, [pc, #92]	; (40b654 <__register_exitproc+0xc0>)
  40b5f6:	b30b      	cbz	r3, 40b63c <__register_exitproc+0xa8>
  40b5f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40b5fc:	f7fe fe1c 	bl	40a238 <malloc>
  40b600:	4603      	mov	r3, r0
  40b602:	b1d8      	cbz	r0, 40b63c <__register_exitproc+0xa8>
  40b604:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40b608:	6002      	str	r2, [r0, #0]
  40b60a:	2100      	movs	r1, #0
  40b60c:	6041      	str	r1, [r0, #4]
  40b60e:	460a      	mov	r2, r1
  40b610:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40b614:	f04f 0e01 	mov.w	lr, #1
  40b618:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40b61c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40b620:	2e00      	cmp	r6, #0
  40b622:	d0dc      	beq.n	40b5de <__register_exitproc+0x4a>
  40b624:	e7cc      	b.n	40b5c0 <__register_exitproc+0x2c>
  40b626:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40b62a:	430c      	orrs	r4, r1
  40b62c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40b630:	e7d5      	b.n	40b5de <__register_exitproc+0x4a>
  40b632:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40b636:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40b63a:	e7bb      	b.n	40b5b4 <__register_exitproc+0x20>
  40b63c:	6828      	ldr	r0, [r5, #0]
  40b63e:	f7fe fd81 	bl	40a144 <__retarget_lock_release_recursive>
  40b642:	f04f 30ff 	mov.w	r0, #4294967295
  40b646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40b64a:	bf00      	nop
  40b64c:	20400450 	.word	0x20400450
  40b650:	0040d414 	.word	0x0040d414
  40b654:	0040a239 	.word	0x0040a239

0040b658 <_calloc_r>:
  40b658:	b510      	push	{r4, lr}
  40b65a:	fb02 f101 	mul.w	r1, r2, r1
  40b65e:	f7fe fdf3 	bl	40a248 <_malloc_r>
  40b662:	4604      	mov	r4, r0
  40b664:	b1d8      	cbz	r0, 40b69e <_calloc_r+0x46>
  40b666:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40b66a:	f022 0203 	bic.w	r2, r2, #3
  40b66e:	3a04      	subs	r2, #4
  40b670:	2a24      	cmp	r2, #36	; 0x24
  40b672:	d818      	bhi.n	40b6a6 <_calloc_r+0x4e>
  40b674:	2a13      	cmp	r2, #19
  40b676:	d914      	bls.n	40b6a2 <_calloc_r+0x4a>
  40b678:	2300      	movs	r3, #0
  40b67a:	2a1b      	cmp	r2, #27
  40b67c:	6003      	str	r3, [r0, #0]
  40b67e:	6043      	str	r3, [r0, #4]
  40b680:	d916      	bls.n	40b6b0 <_calloc_r+0x58>
  40b682:	2a24      	cmp	r2, #36	; 0x24
  40b684:	6083      	str	r3, [r0, #8]
  40b686:	60c3      	str	r3, [r0, #12]
  40b688:	bf11      	iteee	ne
  40b68a:	f100 0210 	addne.w	r2, r0, #16
  40b68e:	6103      	streq	r3, [r0, #16]
  40b690:	6143      	streq	r3, [r0, #20]
  40b692:	f100 0218 	addeq.w	r2, r0, #24
  40b696:	2300      	movs	r3, #0
  40b698:	6013      	str	r3, [r2, #0]
  40b69a:	6053      	str	r3, [r2, #4]
  40b69c:	6093      	str	r3, [r2, #8]
  40b69e:	4620      	mov	r0, r4
  40b6a0:	bd10      	pop	{r4, pc}
  40b6a2:	4602      	mov	r2, r0
  40b6a4:	e7f7      	b.n	40b696 <_calloc_r+0x3e>
  40b6a6:	2100      	movs	r1, #0
  40b6a8:	f7fa fd9a 	bl	4061e0 <memset>
  40b6ac:	4620      	mov	r0, r4
  40b6ae:	bd10      	pop	{r4, pc}
  40b6b0:	f100 0208 	add.w	r2, r0, #8
  40b6b4:	e7ef      	b.n	40b696 <_calloc_r+0x3e>
  40b6b6:	bf00      	nop

0040b6b8 <_close_r>:
  40b6b8:	b538      	push	{r3, r4, r5, lr}
  40b6ba:	4c07      	ldr	r4, [pc, #28]	; (40b6d8 <_close_r+0x20>)
  40b6bc:	2300      	movs	r3, #0
  40b6be:	4605      	mov	r5, r0
  40b6c0:	4608      	mov	r0, r1
  40b6c2:	6023      	str	r3, [r4, #0]
  40b6c4:	f7f9 fff4 	bl	4056b0 <_close>
  40b6c8:	1c43      	adds	r3, r0, #1
  40b6ca:	d000      	beq.n	40b6ce <_close_r+0x16>
  40b6cc:	bd38      	pop	{r3, r4, r5, pc}
  40b6ce:	6823      	ldr	r3, [r4, #0]
  40b6d0:	2b00      	cmp	r3, #0
  40b6d2:	d0fb      	beq.n	40b6cc <_close_r+0x14>
  40b6d4:	602b      	str	r3, [r5, #0]
  40b6d6:	bd38      	pop	{r3, r4, r5, pc}
  40b6d8:	2040cb50 	.word	0x2040cb50

0040b6dc <_fclose_r>:
  40b6dc:	b570      	push	{r4, r5, r6, lr}
  40b6de:	b159      	cbz	r1, 40b6f8 <_fclose_r+0x1c>
  40b6e0:	4605      	mov	r5, r0
  40b6e2:	460c      	mov	r4, r1
  40b6e4:	b110      	cbz	r0, 40b6ec <_fclose_r+0x10>
  40b6e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40b6e8:	2b00      	cmp	r3, #0
  40b6ea:	d03c      	beq.n	40b766 <_fclose_r+0x8a>
  40b6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b6ee:	07d8      	lsls	r0, r3, #31
  40b6f0:	d505      	bpl.n	40b6fe <_fclose_r+0x22>
  40b6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b6f6:	b92b      	cbnz	r3, 40b704 <_fclose_r+0x28>
  40b6f8:	2600      	movs	r6, #0
  40b6fa:	4630      	mov	r0, r6
  40b6fc:	bd70      	pop	{r4, r5, r6, pc}
  40b6fe:	89a3      	ldrh	r3, [r4, #12]
  40b700:	0599      	lsls	r1, r3, #22
  40b702:	d53c      	bpl.n	40b77e <_fclose_r+0xa2>
  40b704:	4621      	mov	r1, r4
  40b706:	4628      	mov	r0, r5
  40b708:	f7fe f854 	bl	4097b4 <__sflush_r>
  40b70c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40b70e:	4606      	mov	r6, r0
  40b710:	b133      	cbz	r3, 40b720 <_fclose_r+0x44>
  40b712:	69e1      	ldr	r1, [r4, #28]
  40b714:	4628      	mov	r0, r5
  40b716:	4798      	blx	r3
  40b718:	2800      	cmp	r0, #0
  40b71a:	bfb8      	it	lt
  40b71c:	f04f 36ff 	movlt.w	r6, #4294967295
  40b720:	89a3      	ldrh	r3, [r4, #12]
  40b722:	061a      	lsls	r2, r3, #24
  40b724:	d422      	bmi.n	40b76c <_fclose_r+0x90>
  40b726:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40b728:	b141      	cbz	r1, 40b73c <_fclose_r+0x60>
  40b72a:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40b72e:	4299      	cmp	r1, r3
  40b730:	d002      	beq.n	40b738 <_fclose_r+0x5c>
  40b732:	4628      	mov	r0, r5
  40b734:	f7fe fa5c 	bl	409bf0 <_free_r>
  40b738:	2300      	movs	r3, #0
  40b73a:	6323      	str	r3, [r4, #48]	; 0x30
  40b73c:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40b73e:	b121      	cbz	r1, 40b74a <_fclose_r+0x6e>
  40b740:	4628      	mov	r0, r5
  40b742:	f7fe fa55 	bl	409bf0 <_free_r>
  40b746:	2300      	movs	r3, #0
  40b748:	6463      	str	r3, [r4, #68]	; 0x44
  40b74a:	f7fe f957 	bl	4099fc <__sfp_lock_acquire>
  40b74e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40b750:	2200      	movs	r2, #0
  40b752:	07db      	lsls	r3, r3, #31
  40b754:	81a2      	strh	r2, [r4, #12]
  40b756:	d50e      	bpl.n	40b776 <_fclose_r+0x9a>
  40b758:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b75a:	f7fe fcef 	bl	40a13c <__retarget_lock_close_recursive>
  40b75e:	f7fe f953 	bl	409a08 <__sfp_lock_release>
  40b762:	4630      	mov	r0, r6
  40b764:	bd70      	pop	{r4, r5, r6, pc}
  40b766:	f7fe f91d 	bl	4099a4 <__sinit>
  40b76a:	e7bf      	b.n	40b6ec <_fclose_r+0x10>
  40b76c:	6921      	ldr	r1, [r4, #16]
  40b76e:	4628      	mov	r0, r5
  40b770:	f7fe fa3e 	bl	409bf0 <_free_r>
  40b774:	e7d7      	b.n	40b726 <_fclose_r+0x4a>
  40b776:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b778:	f7fe fce4 	bl	40a144 <__retarget_lock_release_recursive>
  40b77c:	e7ec      	b.n	40b758 <_fclose_r+0x7c>
  40b77e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b780:	f7fe fcde 	bl	40a140 <__retarget_lock_acquire_recursive>
  40b784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40b788:	2b00      	cmp	r3, #0
  40b78a:	d1bb      	bne.n	40b704 <_fclose_r+0x28>
  40b78c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40b78e:	f016 0601 	ands.w	r6, r6, #1
  40b792:	d1b1      	bne.n	40b6f8 <_fclose_r+0x1c>
  40b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40b796:	f7fe fcd5 	bl	40a144 <__retarget_lock_release_recursive>
  40b79a:	4630      	mov	r0, r6
  40b79c:	bd70      	pop	{r4, r5, r6, pc}
  40b79e:	bf00      	nop

0040b7a0 <_fstat_r>:
  40b7a0:	b538      	push	{r3, r4, r5, lr}
  40b7a2:	460b      	mov	r3, r1
  40b7a4:	4c07      	ldr	r4, [pc, #28]	; (40b7c4 <_fstat_r+0x24>)
  40b7a6:	4605      	mov	r5, r0
  40b7a8:	4611      	mov	r1, r2
  40b7aa:	4618      	mov	r0, r3
  40b7ac:	2300      	movs	r3, #0
  40b7ae:	6023      	str	r3, [r4, #0]
  40b7b0:	f7f9 ff81 	bl	4056b6 <_fstat>
  40b7b4:	1c43      	adds	r3, r0, #1
  40b7b6:	d000      	beq.n	40b7ba <_fstat_r+0x1a>
  40b7b8:	bd38      	pop	{r3, r4, r5, pc}
  40b7ba:	6823      	ldr	r3, [r4, #0]
  40b7bc:	2b00      	cmp	r3, #0
  40b7be:	d0fb      	beq.n	40b7b8 <_fstat_r+0x18>
  40b7c0:	602b      	str	r3, [r5, #0]
  40b7c2:	bd38      	pop	{r3, r4, r5, pc}
  40b7c4:	2040cb50 	.word	0x2040cb50

0040b7c8 <_isatty_r>:
  40b7c8:	b538      	push	{r3, r4, r5, lr}
  40b7ca:	4c07      	ldr	r4, [pc, #28]	; (40b7e8 <_isatty_r+0x20>)
  40b7cc:	2300      	movs	r3, #0
  40b7ce:	4605      	mov	r5, r0
  40b7d0:	4608      	mov	r0, r1
  40b7d2:	6023      	str	r3, [r4, #0]
  40b7d4:	f7f9 ff74 	bl	4056c0 <_isatty>
  40b7d8:	1c43      	adds	r3, r0, #1
  40b7da:	d000      	beq.n	40b7de <_isatty_r+0x16>
  40b7dc:	bd38      	pop	{r3, r4, r5, pc}
  40b7de:	6823      	ldr	r3, [r4, #0]
  40b7e0:	2b00      	cmp	r3, #0
  40b7e2:	d0fb      	beq.n	40b7dc <_isatty_r+0x14>
  40b7e4:	602b      	str	r3, [r5, #0]
  40b7e6:	bd38      	pop	{r3, r4, r5, pc}
  40b7e8:	2040cb50 	.word	0x2040cb50

0040b7ec <_lseek_r>:
  40b7ec:	b570      	push	{r4, r5, r6, lr}
  40b7ee:	460d      	mov	r5, r1
  40b7f0:	4c08      	ldr	r4, [pc, #32]	; (40b814 <_lseek_r+0x28>)
  40b7f2:	4611      	mov	r1, r2
  40b7f4:	4606      	mov	r6, r0
  40b7f6:	461a      	mov	r2, r3
  40b7f8:	4628      	mov	r0, r5
  40b7fa:	2300      	movs	r3, #0
  40b7fc:	6023      	str	r3, [r4, #0]
  40b7fe:	f7f9 ff61 	bl	4056c4 <_lseek>
  40b802:	1c43      	adds	r3, r0, #1
  40b804:	d000      	beq.n	40b808 <_lseek_r+0x1c>
  40b806:	bd70      	pop	{r4, r5, r6, pc}
  40b808:	6823      	ldr	r3, [r4, #0]
  40b80a:	2b00      	cmp	r3, #0
  40b80c:	d0fb      	beq.n	40b806 <_lseek_r+0x1a>
  40b80e:	6033      	str	r3, [r6, #0]
  40b810:	bd70      	pop	{r4, r5, r6, pc}
  40b812:	bf00      	nop
  40b814:	2040cb50 	.word	0x2040cb50

0040b818 <_read_r>:
  40b818:	b570      	push	{r4, r5, r6, lr}
  40b81a:	460d      	mov	r5, r1
  40b81c:	4c08      	ldr	r4, [pc, #32]	; (40b840 <_read_r+0x28>)
  40b81e:	4611      	mov	r1, r2
  40b820:	4606      	mov	r6, r0
  40b822:	461a      	mov	r2, r3
  40b824:	4628      	mov	r0, r5
  40b826:	2300      	movs	r3, #0
  40b828:	6023      	str	r3, [r4, #0]
  40b82a:	f7f9 f8e5 	bl	4049f8 <_read>
  40b82e:	1c43      	adds	r3, r0, #1
  40b830:	d000      	beq.n	40b834 <_read_r+0x1c>
  40b832:	bd70      	pop	{r4, r5, r6, pc}
  40b834:	6823      	ldr	r3, [r4, #0]
  40b836:	2b00      	cmp	r3, #0
  40b838:	d0fb      	beq.n	40b832 <_read_r+0x1a>
  40b83a:	6033      	str	r3, [r6, #0]
  40b83c:	bd70      	pop	{r4, r5, r6, pc}
  40b83e:	bf00      	nop
  40b840:	2040cb50 	.word	0x2040cb50

0040b844 <__aeabi_drsub>:
  40b844:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40b848:	e002      	b.n	40b850 <__adddf3>
  40b84a:	bf00      	nop

0040b84c <__aeabi_dsub>:
  40b84c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0040b850 <__adddf3>:
  40b850:	b530      	push	{r4, r5, lr}
  40b852:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40b856:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40b85a:	ea94 0f05 	teq	r4, r5
  40b85e:	bf08      	it	eq
  40b860:	ea90 0f02 	teqeq	r0, r2
  40b864:	bf1f      	itttt	ne
  40b866:	ea54 0c00 	orrsne.w	ip, r4, r0
  40b86a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40b86e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40b872:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40b876:	f000 80e2 	beq.w	40ba3e <__adddf3+0x1ee>
  40b87a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40b87e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  40b882:	bfb8      	it	lt
  40b884:	426d      	neglt	r5, r5
  40b886:	dd0c      	ble.n	40b8a2 <__adddf3+0x52>
  40b888:	442c      	add	r4, r5
  40b88a:	ea80 0202 	eor.w	r2, r0, r2
  40b88e:	ea81 0303 	eor.w	r3, r1, r3
  40b892:	ea82 0000 	eor.w	r0, r2, r0
  40b896:	ea83 0101 	eor.w	r1, r3, r1
  40b89a:	ea80 0202 	eor.w	r2, r0, r2
  40b89e:	ea81 0303 	eor.w	r3, r1, r3
  40b8a2:	2d36      	cmp	r5, #54	; 0x36
  40b8a4:	bf88      	it	hi
  40b8a6:	bd30      	pophi	{r4, r5, pc}
  40b8a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40b8ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40b8b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  40b8b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40b8b8:	d002      	beq.n	40b8c0 <__adddf3+0x70>
  40b8ba:	4240      	negs	r0, r0
  40b8bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40b8c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  40b8c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40b8c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40b8cc:	d002      	beq.n	40b8d4 <__adddf3+0x84>
  40b8ce:	4252      	negs	r2, r2
  40b8d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40b8d4:	ea94 0f05 	teq	r4, r5
  40b8d8:	f000 80a7 	beq.w	40ba2a <__adddf3+0x1da>
  40b8dc:	f1a4 0401 	sub.w	r4, r4, #1
  40b8e0:	f1d5 0e20 	rsbs	lr, r5, #32
  40b8e4:	db0d      	blt.n	40b902 <__adddf3+0xb2>
  40b8e6:	fa02 fc0e 	lsl.w	ip, r2, lr
  40b8ea:	fa22 f205 	lsr.w	r2, r2, r5
  40b8ee:	1880      	adds	r0, r0, r2
  40b8f0:	f141 0100 	adc.w	r1, r1, #0
  40b8f4:	fa03 f20e 	lsl.w	r2, r3, lr
  40b8f8:	1880      	adds	r0, r0, r2
  40b8fa:	fa43 f305 	asr.w	r3, r3, r5
  40b8fe:	4159      	adcs	r1, r3
  40b900:	e00e      	b.n	40b920 <__adddf3+0xd0>
  40b902:	f1a5 0520 	sub.w	r5, r5, #32
  40b906:	f10e 0e20 	add.w	lr, lr, #32
  40b90a:	2a01      	cmp	r2, #1
  40b90c:	fa03 fc0e 	lsl.w	ip, r3, lr
  40b910:	bf28      	it	cs
  40b912:	f04c 0c02 	orrcs.w	ip, ip, #2
  40b916:	fa43 f305 	asr.w	r3, r3, r5
  40b91a:	18c0      	adds	r0, r0, r3
  40b91c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  40b920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40b924:	d507      	bpl.n	40b936 <__adddf3+0xe6>
  40b926:	f04f 0e00 	mov.w	lr, #0
  40b92a:	f1dc 0c00 	rsbs	ip, ip, #0
  40b92e:	eb7e 0000 	sbcs.w	r0, lr, r0
  40b932:	eb6e 0101 	sbc.w	r1, lr, r1
  40b936:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40b93a:	d31b      	bcc.n	40b974 <__adddf3+0x124>
  40b93c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  40b940:	d30c      	bcc.n	40b95c <__adddf3+0x10c>
  40b942:	0849      	lsrs	r1, r1, #1
  40b944:	ea5f 0030 	movs.w	r0, r0, rrx
  40b948:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40b94c:	f104 0401 	add.w	r4, r4, #1
  40b950:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40b954:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40b958:	f080 809a 	bcs.w	40ba90 <__adddf3+0x240>
  40b95c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  40b960:	bf08      	it	eq
  40b962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40b966:	f150 0000 	adcs.w	r0, r0, #0
  40b96a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40b96e:	ea41 0105 	orr.w	r1, r1, r5
  40b972:	bd30      	pop	{r4, r5, pc}
  40b974:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40b978:	4140      	adcs	r0, r0
  40b97a:	eb41 0101 	adc.w	r1, r1, r1
  40b97e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40b982:	f1a4 0401 	sub.w	r4, r4, #1
  40b986:	d1e9      	bne.n	40b95c <__adddf3+0x10c>
  40b988:	f091 0f00 	teq	r1, #0
  40b98c:	bf04      	itt	eq
  40b98e:	4601      	moveq	r1, r0
  40b990:	2000      	moveq	r0, #0
  40b992:	fab1 f381 	clz	r3, r1
  40b996:	bf08      	it	eq
  40b998:	3320      	addeq	r3, #32
  40b99a:	f1a3 030b 	sub.w	r3, r3, #11
  40b99e:	f1b3 0220 	subs.w	r2, r3, #32
  40b9a2:	da0c      	bge.n	40b9be <__adddf3+0x16e>
  40b9a4:	320c      	adds	r2, #12
  40b9a6:	dd08      	ble.n	40b9ba <__adddf3+0x16a>
  40b9a8:	f102 0c14 	add.w	ip, r2, #20
  40b9ac:	f1c2 020c 	rsb	r2, r2, #12
  40b9b0:	fa01 f00c 	lsl.w	r0, r1, ip
  40b9b4:	fa21 f102 	lsr.w	r1, r1, r2
  40b9b8:	e00c      	b.n	40b9d4 <__adddf3+0x184>
  40b9ba:	f102 0214 	add.w	r2, r2, #20
  40b9be:	bfd8      	it	le
  40b9c0:	f1c2 0c20 	rsble	ip, r2, #32
  40b9c4:	fa01 f102 	lsl.w	r1, r1, r2
  40b9c8:	fa20 fc0c 	lsr.w	ip, r0, ip
  40b9cc:	bfdc      	itt	le
  40b9ce:	ea41 010c 	orrle.w	r1, r1, ip
  40b9d2:	4090      	lslle	r0, r2
  40b9d4:	1ae4      	subs	r4, r4, r3
  40b9d6:	bfa2      	ittt	ge
  40b9d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40b9dc:	4329      	orrge	r1, r5
  40b9de:	bd30      	popge	{r4, r5, pc}
  40b9e0:	ea6f 0404 	mvn.w	r4, r4
  40b9e4:	3c1f      	subs	r4, #31
  40b9e6:	da1c      	bge.n	40ba22 <__adddf3+0x1d2>
  40b9e8:	340c      	adds	r4, #12
  40b9ea:	dc0e      	bgt.n	40ba0a <__adddf3+0x1ba>
  40b9ec:	f104 0414 	add.w	r4, r4, #20
  40b9f0:	f1c4 0220 	rsb	r2, r4, #32
  40b9f4:	fa20 f004 	lsr.w	r0, r0, r4
  40b9f8:	fa01 f302 	lsl.w	r3, r1, r2
  40b9fc:	ea40 0003 	orr.w	r0, r0, r3
  40ba00:	fa21 f304 	lsr.w	r3, r1, r4
  40ba04:	ea45 0103 	orr.w	r1, r5, r3
  40ba08:	bd30      	pop	{r4, r5, pc}
  40ba0a:	f1c4 040c 	rsb	r4, r4, #12
  40ba0e:	f1c4 0220 	rsb	r2, r4, #32
  40ba12:	fa20 f002 	lsr.w	r0, r0, r2
  40ba16:	fa01 f304 	lsl.w	r3, r1, r4
  40ba1a:	ea40 0003 	orr.w	r0, r0, r3
  40ba1e:	4629      	mov	r1, r5
  40ba20:	bd30      	pop	{r4, r5, pc}
  40ba22:	fa21 f004 	lsr.w	r0, r1, r4
  40ba26:	4629      	mov	r1, r5
  40ba28:	bd30      	pop	{r4, r5, pc}
  40ba2a:	f094 0f00 	teq	r4, #0
  40ba2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40ba32:	bf06      	itte	eq
  40ba34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40ba38:	3401      	addeq	r4, #1
  40ba3a:	3d01      	subne	r5, #1
  40ba3c:	e74e      	b.n	40b8dc <__adddf3+0x8c>
  40ba3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40ba42:	bf18      	it	ne
  40ba44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40ba48:	d029      	beq.n	40ba9e <__adddf3+0x24e>
  40ba4a:	ea94 0f05 	teq	r4, r5
  40ba4e:	bf08      	it	eq
  40ba50:	ea90 0f02 	teqeq	r0, r2
  40ba54:	d005      	beq.n	40ba62 <__adddf3+0x212>
  40ba56:	ea54 0c00 	orrs.w	ip, r4, r0
  40ba5a:	bf04      	itt	eq
  40ba5c:	4619      	moveq	r1, r3
  40ba5e:	4610      	moveq	r0, r2
  40ba60:	bd30      	pop	{r4, r5, pc}
  40ba62:	ea91 0f03 	teq	r1, r3
  40ba66:	bf1e      	ittt	ne
  40ba68:	2100      	movne	r1, #0
  40ba6a:	2000      	movne	r0, #0
  40ba6c:	bd30      	popne	{r4, r5, pc}
  40ba6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40ba72:	d105      	bne.n	40ba80 <__adddf3+0x230>
  40ba74:	0040      	lsls	r0, r0, #1
  40ba76:	4149      	adcs	r1, r1
  40ba78:	bf28      	it	cs
  40ba7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40ba7e:	bd30      	pop	{r4, r5, pc}
  40ba80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  40ba84:	bf3c      	itt	cc
  40ba86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40ba8a:	bd30      	popcc	{r4, r5, pc}
  40ba8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40ba90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  40ba94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40ba98:	f04f 0000 	mov.w	r0, #0
  40ba9c:	bd30      	pop	{r4, r5, pc}
  40ba9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40baa2:	bf1a      	itte	ne
  40baa4:	4619      	movne	r1, r3
  40baa6:	4610      	movne	r0, r2
  40baa8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40baac:	bf1c      	itt	ne
  40baae:	460b      	movne	r3, r1
  40bab0:	4602      	movne	r2, r0
  40bab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bab6:	bf06      	itte	eq
  40bab8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40babc:	ea91 0f03 	teqeq	r1, r3
  40bac0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  40bac4:	bd30      	pop	{r4, r5, pc}
  40bac6:	bf00      	nop

0040bac8 <__aeabi_ui2d>:
  40bac8:	f090 0f00 	teq	r0, #0
  40bacc:	bf04      	itt	eq
  40bace:	2100      	moveq	r1, #0
  40bad0:	4770      	bxeq	lr
  40bad2:	b530      	push	{r4, r5, lr}
  40bad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40badc:	f04f 0500 	mov.w	r5, #0
  40bae0:	f04f 0100 	mov.w	r1, #0
  40bae4:	e750      	b.n	40b988 <__adddf3+0x138>
  40bae6:	bf00      	nop

0040bae8 <__aeabi_i2d>:
  40bae8:	f090 0f00 	teq	r0, #0
  40baec:	bf04      	itt	eq
  40baee:	2100      	moveq	r1, #0
  40baf0:	4770      	bxeq	lr
  40baf2:	b530      	push	{r4, r5, lr}
  40baf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40baf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bafc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  40bb00:	bf48      	it	mi
  40bb02:	4240      	negmi	r0, r0
  40bb04:	f04f 0100 	mov.w	r1, #0
  40bb08:	e73e      	b.n	40b988 <__adddf3+0x138>
  40bb0a:	bf00      	nop

0040bb0c <__aeabi_f2d>:
  40bb0c:	0042      	lsls	r2, r0, #1
  40bb0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40bb12:	ea4f 0131 	mov.w	r1, r1, rrx
  40bb16:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40bb1a:	bf1f      	itttt	ne
  40bb1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  40bb20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40bb24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40bb28:	4770      	bxne	lr
  40bb2a:	f092 0f00 	teq	r2, #0
  40bb2e:	bf14      	ite	ne
  40bb30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40bb34:	4770      	bxeq	lr
  40bb36:	b530      	push	{r4, r5, lr}
  40bb38:	f44f 7460 	mov.w	r4, #896	; 0x380
  40bb3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40bb40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40bb44:	e720      	b.n	40b988 <__adddf3+0x138>
  40bb46:	bf00      	nop

0040bb48 <__aeabi_ul2d>:
  40bb48:	ea50 0201 	orrs.w	r2, r0, r1
  40bb4c:	bf08      	it	eq
  40bb4e:	4770      	bxeq	lr
  40bb50:	b530      	push	{r4, r5, lr}
  40bb52:	f04f 0500 	mov.w	r5, #0
  40bb56:	e00a      	b.n	40bb6e <__aeabi_l2d+0x16>

0040bb58 <__aeabi_l2d>:
  40bb58:	ea50 0201 	orrs.w	r2, r0, r1
  40bb5c:	bf08      	it	eq
  40bb5e:	4770      	bxeq	lr
  40bb60:	b530      	push	{r4, r5, lr}
  40bb62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40bb66:	d502      	bpl.n	40bb6e <__aeabi_l2d+0x16>
  40bb68:	4240      	negs	r0, r0
  40bb6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40bb6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40bb72:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40bb76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40bb7a:	f43f aedc 	beq.w	40b936 <__adddf3+0xe6>
  40bb7e:	f04f 0203 	mov.w	r2, #3
  40bb82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bb86:	bf18      	it	ne
  40bb88:	3203      	addne	r2, #3
  40bb8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40bb8e:	bf18      	it	ne
  40bb90:	3203      	addne	r2, #3
  40bb92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40bb96:	f1c2 0320 	rsb	r3, r2, #32
  40bb9a:	fa00 fc03 	lsl.w	ip, r0, r3
  40bb9e:	fa20 f002 	lsr.w	r0, r0, r2
  40bba2:	fa01 fe03 	lsl.w	lr, r1, r3
  40bba6:	ea40 000e 	orr.w	r0, r0, lr
  40bbaa:	fa21 f102 	lsr.w	r1, r1, r2
  40bbae:	4414      	add	r4, r2
  40bbb0:	e6c1      	b.n	40b936 <__adddf3+0xe6>
  40bbb2:	bf00      	nop

0040bbb4 <__aeabi_dmul>:
  40bbb4:	b570      	push	{r4, r5, r6, lr}
  40bbb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40bbba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40bbbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40bbc2:	bf1d      	ittte	ne
  40bbc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40bbc8:	ea94 0f0c 	teqne	r4, ip
  40bbcc:	ea95 0f0c 	teqne	r5, ip
  40bbd0:	f000 f8de 	bleq	40bd90 <__aeabi_dmul+0x1dc>
  40bbd4:	442c      	add	r4, r5
  40bbd6:	ea81 0603 	eor.w	r6, r1, r3
  40bbda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40bbde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40bbe2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40bbe6:	bf18      	it	ne
  40bbe8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40bbec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bbf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40bbf4:	d038      	beq.n	40bc68 <__aeabi_dmul+0xb4>
  40bbf6:	fba0 ce02 	umull	ip, lr, r0, r2
  40bbfa:	f04f 0500 	mov.w	r5, #0
  40bbfe:	fbe1 e502 	umlal	lr, r5, r1, r2
  40bc02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40bc06:	fbe0 e503 	umlal	lr, r5, r0, r3
  40bc0a:	f04f 0600 	mov.w	r6, #0
  40bc0e:	fbe1 5603 	umlal	r5, r6, r1, r3
  40bc12:	f09c 0f00 	teq	ip, #0
  40bc16:	bf18      	it	ne
  40bc18:	f04e 0e01 	orrne.w	lr, lr, #1
  40bc1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  40bc20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40bc24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40bc28:	d204      	bcs.n	40bc34 <__aeabi_dmul+0x80>
  40bc2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40bc2e:	416d      	adcs	r5, r5
  40bc30:	eb46 0606 	adc.w	r6, r6, r6
  40bc34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40bc38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40bc3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  40bc40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40bc44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40bc48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bc4c:	bf88      	it	hi
  40bc4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bc52:	d81e      	bhi.n	40bc92 <__aeabi_dmul+0xde>
  40bc54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40bc58:	bf08      	it	eq
  40bc5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40bc5e:	f150 0000 	adcs.w	r0, r0, #0
  40bc62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bc66:	bd70      	pop	{r4, r5, r6, pc}
  40bc68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40bc6c:	ea46 0101 	orr.w	r1, r6, r1
  40bc70:	ea40 0002 	orr.w	r0, r0, r2
  40bc74:	ea81 0103 	eor.w	r1, r1, r3
  40bc78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40bc7c:	bfc2      	ittt	gt
  40bc7e:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bc82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bc86:	bd70      	popgt	{r4, r5, r6, pc}
  40bc88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bc8c:	f04f 0e00 	mov.w	lr, #0
  40bc90:	3c01      	subs	r4, #1
  40bc92:	f300 80ab 	bgt.w	40bdec <__aeabi_dmul+0x238>
  40bc96:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40bc9a:	bfde      	ittt	le
  40bc9c:	2000      	movle	r0, #0
  40bc9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  40bca2:	bd70      	pople	{r4, r5, r6, pc}
  40bca4:	f1c4 0400 	rsb	r4, r4, #0
  40bca8:	3c20      	subs	r4, #32
  40bcaa:	da35      	bge.n	40bd18 <__aeabi_dmul+0x164>
  40bcac:	340c      	adds	r4, #12
  40bcae:	dc1b      	bgt.n	40bce8 <__aeabi_dmul+0x134>
  40bcb0:	f104 0414 	add.w	r4, r4, #20
  40bcb4:	f1c4 0520 	rsb	r5, r4, #32
  40bcb8:	fa00 f305 	lsl.w	r3, r0, r5
  40bcbc:	fa20 f004 	lsr.w	r0, r0, r4
  40bcc0:	fa01 f205 	lsl.w	r2, r1, r5
  40bcc4:	ea40 0002 	orr.w	r0, r0, r2
  40bcc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40bccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40bcd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bcd4:	fa21 f604 	lsr.w	r6, r1, r4
  40bcd8:	eb42 0106 	adc.w	r1, r2, r6
  40bcdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bce0:	bf08      	it	eq
  40bce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bce6:	bd70      	pop	{r4, r5, r6, pc}
  40bce8:	f1c4 040c 	rsb	r4, r4, #12
  40bcec:	f1c4 0520 	rsb	r5, r4, #32
  40bcf0:	fa00 f304 	lsl.w	r3, r0, r4
  40bcf4:	fa20 f005 	lsr.w	r0, r0, r5
  40bcf8:	fa01 f204 	lsl.w	r2, r1, r4
  40bcfc:	ea40 0002 	orr.w	r0, r0, r2
  40bd00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bd04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40bd08:	f141 0100 	adc.w	r1, r1, #0
  40bd0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bd10:	bf08      	it	eq
  40bd12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bd16:	bd70      	pop	{r4, r5, r6, pc}
  40bd18:	f1c4 0520 	rsb	r5, r4, #32
  40bd1c:	fa00 f205 	lsl.w	r2, r0, r5
  40bd20:	ea4e 0e02 	orr.w	lr, lr, r2
  40bd24:	fa20 f304 	lsr.w	r3, r0, r4
  40bd28:	fa01 f205 	lsl.w	r2, r1, r5
  40bd2c:	ea43 0302 	orr.w	r3, r3, r2
  40bd30:	fa21 f004 	lsr.w	r0, r1, r4
  40bd34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bd38:	fa21 f204 	lsr.w	r2, r1, r4
  40bd3c:	ea20 0002 	bic.w	r0, r0, r2
  40bd40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40bd44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40bd48:	bf08      	it	eq
  40bd4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40bd4e:	bd70      	pop	{r4, r5, r6, pc}
  40bd50:	f094 0f00 	teq	r4, #0
  40bd54:	d10f      	bne.n	40bd76 <__aeabi_dmul+0x1c2>
  40bd56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40bd5a:	0040      	lsls	r0, r0, #1
  40bd5c:	eb41 0101 	adc.w	r1, r1, r1
  40bd60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bd64:	bf08      	it	eq
  40bd66:	3c01      	subeq	r4, #1
  40bd68:	d0f7      	beq.n	40bd5a <__aeabi_dmul+0x1a6>
  40bd6a:	ea41 0106 	orr.w	r1, r1, r6
  40bd6e:	f095 0f00 	teq	r5, #0
  40bd72:	bf18      	it	ne
  40bd74:	4770      	bxne	lr
  40bd76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40bd7a:	0052      	lsls	r2, r2, #1
  40bd7c:	eb43 0303 	adc.w	r3, r3, r3
  40bd80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40bd84:	bf08      	it	eq
  40bd86:	3d01      	subeq	r5, #1
  40bd88:	d0f7      	beq.n	40bd7a <__aeabi_dmul+0x1c6>
  40bd8a:	ea43 0306 	orr.w	r3, r3, r6
  40bd8e:	4770      	bx	lr
  40bd90:	ea94 0f0c 	teq	r4, ip
  40bd94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40bd98:	bf18      	it	ne
  40bd9a:	ea95 0f0c 	teqne	r5, ip
  40bd9e:	d00c      	beq.n	40bdba <__aeabi_dmul+0x206>
  40bda0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bda4:	bf18      	it	ne
  40bda6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bdaa:	d1d1      	bne.n	40bd50 <__aeabi_dmul+0x19c>
  40bdac:	ea81 0103 	eor.w	r1, r1, r3
  40bdb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bdb4:	f04f 0000 	mov.w	r0, #0
  40bdb8:	bd70      	pop	{r4, r5, r6, pc}
  40bdba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bdbe:	bf06      	itte	eq
  40bdc0:	4610      	moveq	r0, r2
  40bdc2:	4619      	moveq	r1, r3
  40bdc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bdc8:	d019      	beq.n	40bdfe <__aeabi_dmul+0x24a>
  40bdca:	ea94 0f0c 	teq	r4, ip
  40bdce:	d102      	bne.n	40bdd6 <__aeabi_dmul+0x222>
  40bdd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40bdd4:	d113      	bne.n	40bdfe <__aeabi_dmul+0x24a>
  40bdd6:	ea95 0f0c 	teq	r5, ip
  40bdda:	d105      	bne.n	40bde8 <__aeabi_dmul+0x234>
  40bddc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  40bde0:	bf1c      	itt	ne
  40bde2:	4610      	movne	r0, r2
  40bde4:	4619      	movne	r1, r3
  40bde6:	d10a      	bne.n	40bdfe <__aeabi_dmul+0x24a>
  40bde8:	ea81 0103 	eor.w	r1, r1, r3
  40bdec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40bdf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40bdf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40bdf8:	f04f 0000 	mov.w	r0, #0
  40bdfc:	bd70      	pop	{r4, r5, r6, pc}
  40bdfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40be02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40be06:	bd70      	pop	{r4, r5, r6, pc}

0040be08 <__aeabi_ddiv>:
  40be08:	b570      	push	{r4, r5, r6, lr}
  40be0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40be0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40be12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40be16:	bf1d      	ittte	ne
  40be18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40be1c:	ea94 0f0c 	teqne	r4, ip
  40be20:	ea95 0f0c 	teqne	r5, ip
  40be24:	f000 f8a7 	bleq	40bf76 <__aeabi_ddiv+0x16e>
  40be28:	eba4 0405 	sub.w	r4, r4, r5
  40be2c:	ea81 0e03 	eor.w	lr, r1, r3
  40be30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40be34:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40be38:	f000 8088 	beq.w	40bf4c <__aeabi_ddiv+0x144>
  40be3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40be40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40be44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40be48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40be4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  40be50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40be54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40be58:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40be5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  40be60:	429d      	cmp	r5, r3
  40be62:	bf08      	it	eq
  40be64:	4296      	cmpeq	r6, r2
  40be66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40be6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40be6e:	d202      	bcs.n	40be76 <__aeabi_ddiv+0x6e>
  40be70:	085b      	lsrs	r3, r3, #1
  40be72:	ea4f 0232 	mov.w	r2, r2, rrx
  40be76:	1ab6      	subs	r6, r6, r2
  40be78:	eb65 0503 	sbc.w	r5, r5, r3
  40be7c:	085b      	lsrs	r3, r3, #1
  40be7e:	ea4f 0232 	mov.w	r2, r2, rrx
  40be82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40be86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40be8a:	ebb6 0e02 	subs.w	lr, r6, r2
  40be8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  40be92:	bf22      	ittt	cs
  40be94:	1ab6      	subcs	r6, r6, r2
  40be96:	4675      	movcs	r5, lr
  40be98:	ea40 000c 	orrcs.w	r0, r0, ip
  40be9c:	085b      	lsrs	r3, r3, #1
  40be9e:	ea4f 0232 	mov.w	r2, r2, rrx
  40bea2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bea6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40beaa:	bf22      	ittt	cs
  40beac:	1ab6      	subcs	r6, r6, r2
  40beae:	4675      	movcs	r5, lr
  40beb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40beb4:	085b      	lsrs	r3, r3, #1
  40beb6:	ea4f 0232 	mov.w	r2, r2, rrx
  40beba:	ebb6 0e02 	subs.w	lr, r6, r2
  40bebe:	eb75 0e03 	sbcs.w	lr, r5, r3
  40bec2:	bf22      	ittt	cs
  40bec4:	1ab6      	subcs	r6, r6, r2
  40bec6:	4675      	movcs	r5, lr
  40bec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40becc:	085b      	lsrs	r3, r3, #1
  40bece:	ea4f 0232 	mov.w	r2, r2, rrx
  40bed2:	ebb6 0e02 	subs.w	lr, r6, r2
  40bed6:	eb75 0e03 	sbcs.w	lr, r5, r3
  40beda:	bf22      	ittt	cs
  40bedc:	1ab6      	subcs	r6, r6, r2
  40bede:	4675      	movcs	r5, lr
  40bee0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40bee4:	ea55 0e06 	orrs.w	lr, r5, r6
  40bee8:	d018      	beq.n	40bf1c <__aeabi_ddiv+0x114>
  40beea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40beee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  40bef2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40bef6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40befa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40befe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  40bf02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40bf06:	d1c0      	bne.n	40be8a <__aeabi_ddiv+0x82>
  40bf08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bf0c:	d10b      	bne.n	40bf26 <__aeabi_ddiv+0x11e>
  40bf0e:	ea41 0100 	orr.w	r1, r1, r0
  40bf12:	f04f 0000 	mov.w	r0, #0
  40bf16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40bf1a:	e7b6      	b.n	40be8a <__aeabi_ddiv+0x82>
  40bf1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40bf20:	bf04      	itt	eq
  40bf22:	4301      	orreq	r1, r0
  40bf24:	2000      	moveq	r0, #0
  40bf26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40bf2a:	bf88      	it	hi
  40bf2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40bf30:	f63f aeaf 	bhi.w	40bc92 <__aeabi_dmul+0xde>
  40bf34:	ebb5 0c03 	subs.w	ip, r5, r3
  40bf38:	bf04      	itt	eq
  40bf3a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40bf3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40bf42:	f150 0000 	adcs.w	r0, r0, #0
  40bf46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40bf4a:	bd70      	pop	{r4, r5, r6, pc}
  40bf4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  40bf50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40bf54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40bf58:	bfc2      	ittt	gt
  40bf5a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40bf5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40bf62:	bd70      	popgt	{r4, r5, r6, pc}
  40bf64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40bf68:	f04f 0e00 	mov.w	lr, #0
  40bf6c:	3c01      	subs	r4, #1
  40bf6e:	e690      	b.n	40bc92 <__aeabi_dmul+0xde>
  40bf70:	ea45 0e06 	orr.w	lr, r5, r6
  40bf74:	e68d      	b.n	40bc92 <__aeabi_dmul+0xde>
  40bf76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40bf7a:	ea94 0f0c 	teq	r4, ip
  40bf7e:	bf08      	it	eq
  40bf80:	ea95 0f0c 	teqeq	r5, ip
  40bf84:	f43f af3b 	beq.w	40bdfe <__aeabi_dmul+0x24a>
  40bf88:	ea94 0f0c 	teq	r4, ip
  40bf8c:	d10a      	bne.n	40bfa4 <__aeabi_ddiv+0x19c>
  40bf8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40bf92:	f47f af34 	bne.w	40bdfe <__aeabi_dmul+0x24a>
  40bf96:	ea95 0f0c 	teq	r5, ip
  40bf9a:	f47f af25 	bne.w	40bde8 <__aeabi_dmul+0x234>
  40bf9e:	4610      	mov	r0, r2
  40bfa0:	4619      	mov	r1, r3
  40bfa2:	e72c      	b.n	40bdfe <__aeabi_dmul+0x24a>
  40bfa4:	ea95 0f0c 	teq	r5, ip
  40bfa8:	d106      	bne.n	40bfb8 <__aeabi_ddiv+0x1b0>
  40bfaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40bfae:	f43f aefd 	beq.w	40bdac <__aeabi_dmul+0x1f8>
  40bfb2:	4610      	mov	r0, r2
  40bfb4:	4619      	mov	r1, r3
  40bfb6:	e722      	b.n	40bdfe <__aeabi_dmul+0x24a>
  40bfb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40bfbc:	bf18      	it	ne
  40bfbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40bfc2:	f47f aec5 	bne.w	40bd50 <__aeabi_dmul+0x19c>
  40bfc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40bfca:	f47f af0d 	bne.w	40bde8 <__aeabi_dmul+0x234>
  40bfce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40bfd2:	f47f aeeb 	bne.w	40bdac <__aeabi_dmul+0x1f8>
  40bfd6:	e712      	b.n	40bdfe <__aeabi_dmul+0x24a>

0040bfd8 <__gedf2>:
  40bfd8:	f04f 3cff 	mov.w	ip, #4294967295
  40bfdc:	e006      	b.n	40bfec <__cmpdf2+0x4>
  40bfde:	bf00      	nop

0040bfe0 <__ledf2>:
  40bfe0:	f04f 0c01 	mov.w	ip, #1
  40bfe4:	e002      	b.n	40bfec <__cmpdf2+0x4>
  40bfe6:	bf00      	nop

0040bfe8 <__cmpdf2>:
  40bfe8:	f04f 0c01 	mov.w	ip, #1
  40bfec:	f84d cd04 	str.w	ip, [sp, #-4]!
  40bff0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40bff4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40bff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40bffc:	bf18      	it	ne
  40bffe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  40c002:	d01b      	beq.n	40c03c <__cmpdf2+0x54>
  40c004:	b001      	add	sp, #4
  40c006:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40c00a:	bf0c      	ite	eq
  40c00c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  40c010:	ea91 0f03 	teqne	r1, r3
  40c014:	bf02      	ittt	eq
  40c016:	ea90 0f02 	teqeq	r0, r2
  40c01a:	2000      	moveq	r0, #0
  40c01c:	4770      	bxeq	lr
  40c01e:	f110 0f00 	cmn.w	r0, #0
  40c022:	ea91 0f03 	teq	r1, r3
  40c026:	bf58      	it	pl
  40c028:	4299      	cmppl	r1, r3
  40c02a:	bf08      	it	eq
  40c02c:	4290      	cmpeq	r0, r2
  40c02e:	bf2c      	ite	cs
  40c030:	17d8      	asrcs	r0, r3, #31
  40c032:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40c036:	f040 0001 	orr.w	r0, r0, #1
  40c03a:	4770      	bx	lr
  40c03c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c040:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c044:	d102      	bne.n	40c04c <__cmpdf2+0x64>
  40c046:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c04a:	d107      	bne.n	40c05c <__cmpdf2+0x74>
  40c04c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c050:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c054:	d1d6      	bne.n	40c004 <__cmpdf2+0x1c>
  40c056:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c05a:	d0d3      	beq.n	40c004 <__cmpdf2+0x1c>
  40c05c:	f85d 0b04 	ldr.w	r0, [sp], #4
  40c060:	4770      	bx	lr
  40c062:	bf00      	nop

0040c064 <__aeabi_cdrcmple>:
  40c064:	4684      	mov	ip, r0
  40c066:	4610      	mov	r0, r2
  40c068:	4662      	mov	r2, ip
  40c06a:	468c      	mov	ip, r1
  40c06c:	4619      	mov	r1, r3
  40c06e:	4663      	mov	r3, ip
  40c070:	e000      	b.n	40c074 <__aeabi_cdcmpeq>
  40c072:	bf00      	nop

0040c074 <__aeabi_cdcmpeq>:
  40c074:	b501      	push	{r0, lr}
  40c076:	f7ff ffb7 	bl	40bfe8 <__cmpdf2>
  40c07a:	2800      	cmp	r0, #0
  40c07c:	bf48      	it	mi
  40c07e:	f110 0f00 	cmnmi.w	r0, #0
  40c082:	bd01      	pop	{r0, pc}

0040c084 <__aeabi_dcmpeq>:
  40c084:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c088:	f7ff fff4 	bl	40c074 <__aeabi_cdcmpeq>
  40c08c:	bf0c      	ite	eq
  40c08e:	2001      	moveq	r0, #1
  40c090:	2000      	movne	r0, #0
  40c092:	f85d fb08 	ldr.w	pc, [sp], #8
  40c096:	bf00      	nop

0040c098 <__aeabi_dcmplt>:
  40c098:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c09c:	f7ff ffea 	bl	40c074 <__aeabi_cdcmpeq>
  40c0a0:	bf34      	ite	cc
  40c0a2:	2001      	movcc	r0, #1
  40c0a4:	2000      	movcs	r0, #0
  40c0a6:	f85d fb08 	ldr.w	pc, [sp], #8
  40c0aa:	bf00      	nop

0040c0ac <__aeabi_dcmple>:
  40c0ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c0b0:	f7ff ffe0 	bl	40c074 <__aeabi_cdcmpeq>
  40c0b4:	bf94      	ite	ls
  40c0b6:	2001      	movls	r0, #1
  40c0b8:	2000      	movhi	r0, #0
  40c0ba:	f85d fb08 	ldr.w	pc, [sp], #8
  40c0be:	bf00      	nop

0040c0c0 <__aeabi_dcmpge>:
  40c0c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c0c4:	f7ff ffce 	bl	40c064 <__aeabi_cdrcmple>
  40c0c8:	bf94      	ite	ls
  40c0ca:	2001      	movls	r0, #1
  40c0cc:	2000      	movhi	r0, #0
  40c0ce:	f85d fb08 	ldr.w	pc, [sp], #8
  40c0d2:	bf00      	nop

0040c0d4 <__aeabi_dcmpgt>:
  40c0d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  40c0d8:	f7ff ffc4 	bl	40c064 <__aeabi_cdrcmple>
  40c0dc:	bf34      	ite	cc
  40c0de:	2001      	movcc	r0, #1
  40c0e0:	2000      	movcs	r0, #0
  40c0e2:	f85d fb08 	ldr.w	pc, [sp], #8
  40c0e6:	bf00      	nop

0040c0e8 <__aeabi_dcmpun>:
  40c0e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40c0ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c0f0:	d102      	bne.n	40c0f8 <__aeabi_dcmpun+0x10>
  40c0f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40c0f6:	d10a      	bne.n	40c10e <__aeabi_dcmpun+0x26>
  40c0f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40c0fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40c100:	d102      	bne.n	40c108 <__aeabi_dcmpun+0x20>
  40c102:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40c106:	d102      	bne.n	40c10e <__aeabi_dcmpun+0x26>
  40c108:	f04f 0000 	mov.w	r0, #0
  40c10c:	4770      	bx	lr
  40c10e:	f04f 0001 	mov.w	r0, #1
  40c112:	4770      	bx	lr

0040c114 <__aeabi_d2iz>:
  40c114:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40c118:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40c11c:	d215      	bcs.n	40c14a <__aeabi_d2iz+0x36>
  40c11e:	d511      	bpl.n	40c144 <__aeabi_d2iz+0x30>
  40c120:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40c124:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40c128:	d912      	bls.n	40c150 <__aeabi_d2iz+0x3c>
  40c12a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40c12e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40c132:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40c136:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40c13a:	fa23 f002 	lsr.w	r0, r3, r2
  40c13e:	bf18      	it	ne
  40c140:	4240      	negne	r0, r0
  40c142:	4770      	bx	lr
  40c144:	f04f 0000 	mov.w	r0, #0
  40c148:	4770      	bx	lr
  40c14a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40c14e:	d105      	bne.n	40c15c <__aeabi_d2iz+0x48>
  40c150:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40c154:	bf08      	it	eq
  40c156:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40c15a:	4770      	bx	lr
  40c15c:	f04f 0000 	mov.w	r0, #0
  40c160:	4770      	bx	lr
  40c162:	bf00      	nop

0040c164 <__aeabi_uldivmod>:
  40c164:	b953      	cbnz	r3, 40c17c <__aeabi_uldivmod+0x18>
  40c166:	b94a      	cbnz	r2, 40c17c <__aeabi_uldivmod+0x18>
  40c168:	2900      	cmp	r1, #0
  40c16a:	bf08      	it	eq
  40c16c:	2800      	cmpeq	r0, #0
  40c16e:	bf1c      	itt	ne
  40c170:	f04f 31ff 	movne.w	r1, #4294967295
  40c174:	f04f 30ff 	movne.w	r0, #4294967295
  40c178:	f000 b97a 	b.w	40c470 <__aeabi_idiv0>
  40c17c:	f1ad 0c08 	sub.w	ip, sp, #8
  40c180:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40c184:	f000 f806 	bl	40c194 <__udivmoddi4>
  40c188:	f8dd e004 	ldr.w	lr, [sp, #4]
  40c18c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40c190:	b004      	add	sp, #16
  40c192:	4770      	bx	lr

0040c194 <__udivmoddi4>:
  40c194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40c198:	468c      	mov	ip, r1
  40c19a:	460d      	mov	r5, r1
  40c19c:	4604      	mov	r4, r0
  40c19e:	9e08      	ldr	r6, [sp, #32]
  40c1a0:	2b00      	cmp	r3, #0
  40c1a2:	d151      	bne.n	40c248 <__udivmoddi4+0xb4>
  40c1a4:	428a      	cmp	r2, r1
  40c1a6:	4617      	mov	r7, r2
  40c1a8:	d96d      	bls.n	40c286 <__udivmoddi4+0xf2>
  40c1aa:	fab2 fe82 	clz	lr, r2
  40c1ae:	f1be 0f00 	cmp.w	lr, #0
  40c1b2:	d00b      	beq.n	40c1cc <__udivmoddi4+0x38>
  40c1b4:	f1ce 0c20 	rsb	ip, lr, #32
  40c1b8:	fa01 f50e 	lsl.w	r5, r1, lr
  40c1bc:	fa20 fc0c 	lsr.w	ip, r0, ip
  40c1c0:	fa02 f70e 	lsl.w	r7, r2, lr
  40c1c4:	ea4c 0c05 	orr.w	ip, ip, r5
  40c1c8:	fa00 f40e 	lsl.w	r4, r0, lr
  40c1cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40c1d0:	0c25      	lsrs	r5, r4, #16
  40c1d2:	fbbc f8fa 	udiv	r8, ip, sl
  40c1d6:	fa1f f987 	uxth.w	r9, r7
  40c1da:	fb0a cc18 	mls	ip, sl, r8, ip
  40c1de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40c1e2:	fb08 f309 	mul.w	r3, r8, r9
  40c1e6:	42ab      	cmp	r3, r5
  40c1e8:	d90a      	bls.n	40c200 <__udivmoddi4+0x6c>
  40c1ea:	19ed      	adds	r5, r5, r7
  40c1ec:	f108 32ff 	add.w	r2, r8, #4294967295
  40c1f0:	f080 8123 	bcs.w	40c43a <__udivmoddi4+0x2a6>
  40c1f4:	42ab      	cmp	r3, r5
  40c1f6:	f240 8120 	bls.w	40c43a <__udivmoddi4+0x2a6>
  40c1fa:	f1a8 0802 	sub.w	r8, r8, #2
  40c1fe:	443d      	add	r5, r7
  40c200:	1aed      	subs	r5, r5, r3
  40c202:	b2a4      	uxth	r4, r4
  40c204:	fbb5 f0fa 	udiv	r0, r5, sl
  40c208:	fb0a 5510 	mls	r5, sl, r0, r5
  40c20c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40c210:	fb00 f909 	mul.w	r9, r0, r9
  40c214:	45a1      	cmp	r9, r4
  40c216:	d909      	bls.n	40c22c <__udivmoddi4+0x98>
  40c218:	19e4      	adds	r4, r4, r7
  40c21a:	f100 33ff 	add.w	r3, r0, #4294967295
  40c21e:	f080 810a 	bcs.w	40c436 <__udivmoddi4+0x2a2>
  40c222:	45a1      	cmp	r9, r4
  40c224:	f240 8107 	bls.w	40c436 <__udivmoddi4+0x2a2>
  40c228:	3802      	subs	r0, #2
  40c22a:	443c      	add	r4, r7
  40c22c:	eba4 0409 	sub.w	r4, r4, r9
  40c230:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c234:	2100      	movs	r1, #0
  40c236:	2e00      	cmp	r6, #0
  40c238:	d061      	beq.n	40c2fe <__udivmoddi4+0x16a>
  40c23a:	fa24 f40e 	lsr.w	r4, r4, lr
  40c23e:	2300      	movs	r3, #0
  40c240:	6034      	str	r4, [r6, #0]
  40c242:	6073      	str	r3, [r6, #4]
  40c244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c248:	428b      	cmp	r3, r1
  40c24a:	d907      	bls.n	40c25c <__udivmoddi4+0xc8>
  40c24c:	2e00      	cmp	r6, #0
  40c24e:	d054      	beq.n	40c2fa <__udivmoddi4+0x166>
  40c250:	2100      	movs	r1, #0
  40c252:	e886 0021 	stmia.w	r6, {r0, r5}
  40c256:	4608      	mov	r0, r1
  40c258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c25c:	fab3 f183 	clz	r1, r3
  40c260:	2900      	cmp	r1, #0
  40c262:	f040 808e 	bne.w	40c382 <__udivmoddi4+0x1ee>
  40c266:	42ab      	cmp	r3, r5
  40c268:	d302      	bcc.n	40c270 <__udivmoddi4+0xdc>
  40c26a:	4282      	cmp	r2, r0
  40c26c:	f200 80fa 	bhi.w	40c464 <__udivmoddi4+0x2d0>
  40c270:	1a84      	subs	r4, r0, r2
  40c272:	eb65 0503 	sbc.w	r5, r5, r3
  40c276:	2001      	movs	r0, #1
  40c278:	46ac      	mov	ip, r5
  40c27a:	2e00      	cmp	r6, #0
  40c27c:	d03f      	beq.n	40c2fe <__udivmoddi4+0x16a>
  40c27e:	e886 1010 	stmia.w	r6, {r4, ip}
  40c282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c286:	b912      	cbnz	r2, 40c28e <__udivmoddi4+0xfa>
  40c288:	2701      	movs	r7, #1
  40c28a:	fbb7 f7f2 	udiv	r7, r7, r2
  40c28e:	fab7 fe87 	clz	lr, r7
  40c292:	f1be 0f00 	cmp.w	lr, #0
  40c296:	d134      	bne.n	40c302 <__udivmoddi4+0x16e>
  40c298:	1beb      	subs	r3, r5, r7
  40c29a:	0c3a      	lsrs	r2, r7, #16
  40c29c:	fa1f fc87 	uxth.w	ip, r7
  40c2a0:	2101      	movs	r1, #1
  40c2a2:	fbb3 f8f2 	udiv	r8, r3, r2
  40c2a6:	0c25      	lsrs	r5, r4, #16
  40c2a8:	fb02 3318 	mls	r3, r2, r8, r3
  40c2ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c2b0:	fb0c f308 	mul.w	r3, ip, r8
  40c2b4:	42ab      	cmp	r3, r5
  40c2b6:	d907      	bls.n	40c2c8 <__udivmoddi4+0x134>
  40c2b8:	19ed      	adds	r5, r5, r7
  40c2ba:	f108 30ff 	add.w	r0, r8, #4294967295
  40c2be:	d202      	bcs.n	40c2c6 <__udivmoddi4+0x132>
  40c2c0:	42ab      	cmp	r3, r5
  40c2c2:	f200 80d1 	bhi.w	40c468 <__udivmoddi4+0x2d4>
  40c2c6:	4680      	mov	r8, r0
  40c2c8:	1aed      	subs	r5, r5, r3
  40c2ca:	b2a3      	uxth	r3, r4
  40c2cc:	fbb5 f0f2 	udiv	r0, r5, r2
  40c2d0:	fb02 5510 	mls	r5, r2, r0, r5
  40c2d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40c2d8:	fb0c fc00 	mul.w	ip, ip, r0
  40c2dc:	45a4      	cmp	ip, r4
  40c2de:	d907      	bls.n	40c2f0 <__udivmoddi4+0x15c>
  40c2e0:	19e4      	adds	r4, r4, r7
  40c2e2:	f100 33ff 	add.w	r3, r0, #4294967295
  40c2e6:	d202      	bcs.n	40c2ee <__udivmoddi4+0x15a>
  40c2e8:	45a4      	cmp	ip, r4
  40c2ea:	f200 80b8 	bhi.w	40c45e <__udivmoddi4+0x2ca>
  40c2ee:	4618      	mov	r0, r3
  40c2f0:	eba4 040c 	sub.w	r4, r4, ip
  40c2f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40c2f8:	e79d      	b.n	40c236 <__udivmoddi4+0xa2>
  40c2fa:	4631      	mov	r1, r6
  40c2fc:	4630      	mov	r0, r6
  40c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c302:	f1ce 0420 	rsb	r4, lr, #32
  40c306:	fa05 f30e 	lsl.w	r3, r5, lr
  40c30a:	fa07 f70e 	lsl.w	r7, r7, lr
  40c30e:	fa20 f804 	lsr.w	r8, r0, r4
  40c312:	0c3a      	lsrs	r2, r7, #16
  40c314:	fa25 f404 	lsr.w	r4, r5, r4
  40c318:	ea48 0803 	orr.w	r8, r8, r3
  40c31c:	fbb4 f1f2 	udiv	r1, r4, r2
  40c320:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40c324:	fb02 4411 	mls	r4, r2, r1, r4
  40c328:	fa1f fc87 	uxth.w	ip, r7
  40c32c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40c330:	fb01 f30c 	mul.w	r3, r1, ip
  40c334:	42ab      	cmp	r3, r5
  40c336:	fa00 f40e 	lsl.w	r4, r0, lr
  40c33a:	d909      	bls.n	40c350 <__udivmoddi4+0x1bc>
  40c33c:	19ed      	adds	r5, r5, r7
  40c33e:	f101 30ff 	add.w	r0, r1, #4294967295
  40c342:	f080 808a 	bcs.w	40c45a <__udivmoddi4+0x2c6>
  40c346:	42ab      	cmp	r3, r5
  40c348:	f240 8087 	bls.w	40c45a <__udivmoddi4+0x2c6>
  40c34c:	3902      	subs	r1, #2
  40c34e:	443d      	add	r5, r7
  40c350:	1aeb      	subs	r3, r5, r3
  40c352:	fa1f f588 	uxth.w	r5, r8
  40c356:	fbb3 f0f2 	udiv	r0, r3, r2
  40c35a:	fb02 3310 	mls	r3, r2, r0, r3
  40c35e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40c362:	fb00 f30c 	mul.w	r3, r0, ip
  40c366:	42ab      	cmp	r3, r5
  40c368:	d907      	bls.n	40c37a <__udivmoddi4+0x1e6>
  40c36a:	19ed      	adds	r5, r5, r7
  40c36c:	f100 38ff 	add.w	r8, r0, #4294967295
  40c370:	d26f      	bcs.n	40c452 <__udivmoddi4+0x2be>
  40c372:	42ab      	cmp	r3, r5
  40c374:	d96d      	bls.n	40c452 <__udivmoddi4+0x2be>
  40c376:	3802      	subs	r0, #2
  40c378:	443d      	add	r5, r7
  40c37a:	1aeb      	subs	r3, r5, r3
  40c37c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40c380:	e78f      	b.n	40c2a2 <__udivmoddi4+0x10e>
  40c382:	f1c1 0720 	rsb	r7, r1, #32
  40c386:	fa22 f807 	lsr.w	r8, r2, r7
  40c38a:	408b      	lsls	r3, r1
  40c38c:	fa05 f401 	lsl.w	r4, r5, r1
  40c390:	ea48 0303 	orr.w	r3, r8, r3
  40c394:	fa20 fe07 	lsr.w	lr, r0, r7
  40c398:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40c39c:	40fd      	lsrs	r5, r7
  40c39e:	ea4e 0e04 	orr.w	lr, lr, r4
  40c3a2:	fbb5 f9fc 	udiv	r9, r5, ip
  40c3a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40c3aa:	fb0c 5519 	mls	r5, ip, r9, r5
  40c3ae:	fa1f f883 	uxth.w	r8, r3
  40c3b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40c3b6:	fb09 f408 	mul.w	r4, r9, r8
  40c3ba:	42ac      	cmp	r4, r5
  40c3bc:	fa02 f201 	lsl.w	r2, r2, r1
  40c3c0:	fa00 fa01 	lsl.w	sl, r0, r1
  40c3c4:	d908      	bls.n	40c3d8 <__udivmoddi4+0x244>
  40c3c6:	18ed      	adds	r5, r5, r3
  40c3c8:	f109 30ff 	add.w	r0, r9, #4294967295
  40c3cc:	d243      	bcs.n	40c456 <__udivmoddi4+0x2c2>
  40c3ce:	42ac      	cmp	r4, r5
  40c3d0:	d941      	bls.n	40c456 <__udivmoddi4+0x2c2>
  40c3d2:	f1a9 0902 	sub.w	r9, r9, #2
  40c3d6:	441d      	add	r5, r3
  40c3d8:	1b2d      	subs	r5, r5, r4
  40c3da:	fa1f fe8e 	uxth.w	lr, lr
  40c3de:	fbb5 f0fc 	udiv	r0, r5, ip
  40c3e2:	fb0c 5510 	mls	r5, ip, r0, r5
  40c3e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40c3ea:	fb00 f808 	mul.w	r8, r0, r8
  40c3ee:	45a0      	cmp	r8, r4
  40c3f0:	d907      	bls.n	40c402 <__udivmoddi4+0x26e>
  40c3f2:	18e4      	adds	r4, r4, r3
  40c3f4:	f100 35ff 	add.w	r5, r0, #4294967295
  40c3f8:	d229      	bcs.n	40c44e <__udivmoddi4+0x2ba>
  40c3fa:	45a0      	cmp	r8, r4
  40c3fc:	d927      	bls.n	40c44e <__udivmoddi4+0x2ba>
  40c3fe:	3802      	subs	r0, #2
  40c400:	441c      	add	r4, r3
  40c402:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40c406:	eba4 0408 	sub.w	r4, r4, r8
  40c40a:	fba0 8902 	umull	r8, r9, r0, r2
  40c40e:	454c      	cmp	r4, r9
  40c410:	46c6      	mov	lr, r8
  40c412:	464d      	mov	r5, r9
  40c414:	d315      	bcc.n	40c442 <__udivmoddi4+0x2ae>
  40c416:	d012      	beq.n	40c43e <__udivmoddi4+0x2aa>
  40c418:	b156      	cbz	r6, 40c430 <__udivmoddi4+0x29c>
  40c41a:	ebba 030e 	subs.w	r3, sl, lr
  40c41e:	eb64 0405 	sbc.w	r4, r4, r5
  40c422:	fa04 f707 	lsl.w	r7, r4, r7
  40c426:	40cb      	lsrs	r3, r1
  40c428:	431f      	orrs	r7, r3
  40c42a:	40cc      	lsrs	r4, r1
  40c42c:	6037      	str	r7, [r6, #0]
  40c42e:	6074      	str	r4, [r6, #4]
  40c430:	2100      	movs	r1, #0
  40c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40c436:	4618      	mov	r0, r3
  40c438:	e6f8      	b.n	40c22c <__udivmoddi4+0x98>
  40c43a:	4690      	mov	r8, r2
  40c43c:	e6e0      	b.n	40c200 <__udivmoddi4+0x6c>
  40c43e:	45c2      	cmp	sl, r8
  40c440:	d2ea      	bcs.n	40c418 <__udivmoddi4+0x284>
  40c442:	ebb8 0e02 	subs.w	lr, r8, r2
  40c446:	eb69 0503 	sbc.w	r5, r9, r3
  40c44a:	3801      	subs	r0, #1
  40c44c:	e7e4      	b.n	40c418 <__udivmoddi4+0x284>
  40c44e:	4628      	mov	r0, r5
  40c450:	e7d7      	b.n	40c402 <__udivmoddi4+0x26e>
  40c452:	4640      	mov	r0, r8
  40c454:	e791      	b.n	40c37a <__udivmoddi4+0x1e6>
  40c456:	4681      	mov	r9, r0
  40c458:	e7be      	b.n	40c3d8 <__udivmoddi4+0x244>
  40c45a:	4601      	mov	r1, r0
  40c45c:	e778      	b.n	40c350 <__udivmoddi4+0x1bc>
  40c45e:	3802      	subs	r0, #2
  40c460:	443c      	add	r4, r7
  40c462:	e745      	b.n	40c2f0 <__udivmoddi4+0x15c>
  40c464:	4608      	mov	r0, r1
  40c466:	e708      	b.n	40c27a <__udivmoddi4+0xe6>
  40c468:	f1a8 0802 	sub.w	r8, r8, #2
  40c46c:	443d      	add	r5, r7
  40c46e:	e72b      	b.n	40c2c8 <__udivmoddi4+0x134>

0040c470 <__aeabi_idiv0>:
  40c470:	4770      	bx	lr
  40c472:	bf00      	nop
  40c474:	454c4449 	.word	0x454c4449
  40c478:	00000000 	.word	0x00000000
  40c47c:	51726d54 	.word	0x51726d54
  40c480:	00000000 	.word	0x00000000
  40c484:	20726d54 	.word	0x20726d54
  40c488:	00637653 	.word	0x00637653

0040c48c <__FUNCTION__.11635>:
  40c48c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
  40c49c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
  40c4ac:	00005d64 61766e49 2064696c 54434f49     d]..Invalid IOCT
  40c4bc:	6f63204c 6e616d6d 000a2164 0000000d     L command!......

0040c4cc <__FUNCTION__.9901>:
  40c4cc:	5f666968 646e6573 00000000              hif_send....

0040c4d8 <__FUNCTION__.9911>:
  40c4d8:	5f666968 00727369                       hif_isr.

0040c4e0 <__FUNCTION__.9917>:
  40c4e0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0040c4f0 <__FUNCTION__.9932>:
  40c4f0:	5f666968 65636572 00657669              hif_receive.

0040c4fc <__FUNCTION__.9947>:
  40c4fc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
  40c50c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
  40c51c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
  40c52c:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
  40c53c:	73657264 75622073 61662073 000a6c69     dress bus fail..
  40c54c:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
  40c55c:	6b636170 53207465 20657a69 7525203d     packet Size = %u
  40c56c:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
  40c57c:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
  40c58c:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
  40c59c:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
  40c5ac:	61207473 64207070 276e6469 65732074     st app didn't se
  40c5bc:	58522074 6e6f4420 00000a65 66696828     t RX Done...(hif
  40c5cc:	72572029 20676e6f 657a6953 0000000a     ) Wrong Size....
  40c5dc:	66696828 61462029 2065736c 65746e69     (hif) False inte
  40c5ec:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
  40c5fc:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
  40c60c:	7265746e 74707572 67657220 0000000a     nterrupt reg....
  40c61c:	66696828 41462029 74204c49 6177206f     (hif) FAIL to wa
  40c62c:	7075656b 65687420 69686320 00000a70     keup the chip...
  40c63c:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
  40c64c:	656c646e 746e6920 75727265 25207470     ndle interrupt %
  40c65c:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
  40c66c:	66696820 6365725f 65766965 6e49203a      hif_receive: In
  40c67c:	696c6176 72612064 656d7567 000a746e     valid argument..
  40c68c:	20505041 75716552 65747365 69532064     APP Requested Si
  40c69c:	6920657a 616c2073 72656772 61687420     ze is larger tha
  40c6ac:	6874206e 65722065 65766963 75622064     n the recived bu
  40c6bc:	72656666 7a697320 253c2065 253c3e64     ffer size <%d><%
  40c6cc:	000a3e64 20505041 75716552 65747365     d>..APP Requeste
  40c6dc:	64412064 73657264 65622073 646e6f79     d Address beyond
  40c6ec:	65687420 63657220 64657669 66756220      the recived buf
  40c6fc:	20726566 72646461 20737365 20646e61     fer address and 
  40c70c:	676e656c 000a6874 20705247 6425203f     length..GRp ? %d
  40c71c:	0000000a 46494828 69614629 6f74206c     ....(HIF)Fail to
  40c72c:	6b617720 74207075 63206568 0a706968      wakup the chip.
  40c73c:	00000000                                ....

0040c740 <__FUNCTION__.9874>:
  40c740:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0040c74c <__FUNCTION__.9898>:
  40c74c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0040c75c <__FUNCTION__.9926>:
  40c75c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
  40c76c:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
  40c77c:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
  40c78c:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
  40c79c:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
  40c7ac:	000a6425 2079654b 6e207369 7620746f     %d..Key is not v
  40c7bc:	64696c61 0000000a 61766e49 2064696c     alid....Invalid 
  40c7cc:	0a79654b 00000000 44495353 4e454c20     Key.....SSID LEN
  40c7dc:	564e4920 44494c41 0000000a 49204843      INVALID....CH I
  40c7ec:	4c41564e 000a4449 61766e49 2064696c     NVALID..Invalid 
  40c7fc:	20706557 2079656b 65646e69 64252078     Wep key index %d
  40c80c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
  40c81c:	2079656b 676e656c 25206874 00000a64     key length %d...
  40c82c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
  40c83c:	656c2079 6874676e 0000000a 65646e75     y length....unde
  40c84c:	656e6966 65732064 79742063 000a6570     fined sec type..
  40c85c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
  40c86c:	2e752520 252e7525 00000a75 206e694d      %u.%u.%u...Min 
  40c87c:	76697264 76207265 3a207265 2e752520     driver ver : %u.
  40c88c:	252e7525 00000a75 72727543 69726420     %u.%u...Curr dri
  40c89c:	20726576 3a726576 2e752520 252e7525     ver ver: %u.%u.%
  40c8ac:	00000a75 6d73694d 68637461 72694620     u...Mismatch Fir
  40c8bc:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0040c8cc <__FUNCTION__.9711>:
  40c8cc:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0040c8dc <__FUNCTION__.9805>:
  40c8dc:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
  40c8ec:	74206465 6564206f 696e692d 6c616974     ed to de-initial
  40c8fc:	0a657a69 00000000 6f727245 68772072     ize.....Error wh
  40c90c:	20656c69 74697277 20676e69 0a676572     ile writing reg.
  40c91c:	00000000 6f727245 68772072 20656c69     ....Error while 
  40c92c:	64616572 20676e69 0a676572 00000000     reading reg.....
  40c93c:	20737542 6f727265 31282072 57202e29     Bus error (1). W
  40c94c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40c95c:	20737542 6f727265 32282072 57202e29     Bus error (2). W
  40c96c:	20656b61 66207075 656c6961 00000a64     ake up failed...
  40c97c:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
  40c98c:	6157202e 7520656b 61662070 64656c69     . Wake up failed
  40c99c:	0000000a 3a676572 2f207825 20782520     ....reg:%x / %x 
  40c9ac:	0000000a                                ....

0040c9b0 <__FUNCTION__.9792>:
  40c9b0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0040c9bc <__FUNCTION__.9799>:
  40c9bc:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
  40c9cc:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
  40c9dc:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
  40c9ec:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
  40c9fc:	73616c66 69642068 6c626173 61662065     flash disable fa
  40ca0c:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
  40ca1c:	6c696166 696e6920 75622074 00000a73     fail init bus...
  40ca2c:	6c696166 74206465 6e65206f 656c6261     failed to enable
  40ca3c:	746e6920 75727265 2e737470 00000a2e      interrupts.....
  40ca4c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
  40ca5c:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
  40ca6c:	20444920 0a786c25 00000000               ID %lx.....

0040ca78 <__FUNCTION__.9176>:
  40ca78:	5f697073 00646d63                       spi_cmd.

0040ca80 <__FUNCTION__.9184>:
  40ca80:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0040ca8c <__FUNCTION__.9200>:
  40ca8c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0040ca9c <__FUNCTION__.9215>:
  40ca9c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0040caac <__FUNCTION__.9225>:
  40caac:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0040cabc <__FUNCTION__.9233>:
  40cabc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0040cacc <__FUNCTION__.9242>:
  40cacc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0040cadc <__FUNCTION__.9250>:
  40cadc:	735f6d6e 725f6970 00646165              nm_spi_read.

0040cae8 <__FUNCTION__.9267>:
  40cae8:	735f6d6e 695f6970 0074696e              nm_spi_init.

0040caf4 <crc7_syndrome_table>:
  40caf4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
  40cb04:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
  40cb14:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
  40cb24:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
  40cb34:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
  40cb44:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
  40cb54:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
  40cb64:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
  40cb74:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
  40cb84:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
  40cb94:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
  40cba4:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
  40cbb4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
  40cbc4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
  40cbd4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
  40cbe4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
  40cbf4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cc04:	6e692064 6e726574 72206c61 20646165     d internal read 
  40cc14:	746f7270 6c6f636f 74697720 52432068     protocol with CR
  40cc24:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
  40cc34:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
  40cc44:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cc54:	6e692064 6e726574 72206c61 20646165     d internal read 
  40cc64:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
  40cc74:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cc84:	6e692064 6e726574 77206c61 65746972     d internal write
  40cc94:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
  40cca4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40ccb4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
  40ccc4:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
  40ccd4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40cce4:	72202c64 20646165 636f6c62 2528206b     d, read block (%
  40ccf4:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
  40cd04:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40cd14:	65722064 6e6f7073 202c6573 64616572     d response, read
  40cd24:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
  40cd34:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40cd44:	656c6961 6c622064 206b636f 61746164     ailed block data
  40cd54:	61657220 2e2e2e64 0000000a 696d6e5b      read.......[nmi
  40cd64:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40cd74:	77202c64 65746972 6f6c6220 28206b63     d, write block (
  40cd84:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
  40cd94:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
  40cda4:	7220646d 6f707365 2c65736e 69727720     md response, wri
  40cdb4:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
  40cdc4:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40cdd4:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40cde4:	646d6320 69727720 202c6574 20737562      cmd write, bus 
  40cdf4:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
  40ce04:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
  40ce14:	62206174 6b636f6c 69727720 202c6574     ta block write, 
  40ce24:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
  40ce34:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40ce44:	61642064 62206174 6b636f6c 63726320     d data block crc
  40ce54:	69727720 202c6574 20737562 6f727265      write, bus erro
  40ce64:	2e2e2e72 0000000a 696d6e5b 69707320     r.......[nmi spi
  40ce74:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
  40ce84:	61746164 69727720 2e2e6574 00000a2e     data write......
  40ce94:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cea4:	6d632064 72772064 2c657469 73756220     d cmd write, bus
  40ceb4:	72726520 2e2e726f 00000a2e 696d6e5b      error......[nmi
  40cec4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40ced4:	65722064 6e6f7073 72206573 2c646165     d response read,
  40cee4:	73756220 72726520 2e2e726f 00000a2e      bus error......
  40cef4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cf04:	61642064 72206174 6f707365 2065736e     d data response 
  40cf14:	64616572 7562202c 72652073 2e726f72     read, bus error.
  40cf24:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
  40cf34:	656c6961 61642064 72206174 6f707365     ailed data respo
  40cf44:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
  40cf54:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
  40cf64:	656c6961 61642064 62206174 6b636f6c     ailed data block
  40cf74:	61657220 62202c64 65207375 726f7272      read, bus error
  40cf84:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
  40cf94:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
  40cfa4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
  40cfb4:	65207375 726f7272 0a2e2e2e 00000000     us error........
  40cfc4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40cfd4:	6d632064 72202c64 20646165 20676572     d cmd, read reg 
  40cfe4:	38302528 2e2e2978 00000a2e 696d6e5b     (%08x)......[nmi
  40cff4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d004:	65722064 6e6f7073 202c6573 64616572     d response, read
  40d014:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
  40d024:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d034:	61642064 72206174 2e646165 000a2e2e     d data read.....
  40d044:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
  40d054:	6d632064 77202c64 65746972 67657220     d cmd, write reg
  40d064:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
  40d074:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
  40d084:	65722064 6e6f7073 202c6573 74697277     d response, writ
  40d094:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
  40d0a4:	00000000 52524528 75432952 6e657272     ....(ERRR)Curren
  40d0b4:	253c2074 000a3e64 43454641 49414320     t <%d>..AFEC CAI
  40d0c4:	51412055 25204955 000a2064 57202d2d     U AQUI %d ..-- W
  40d0d4:	31434e49 20303035 74616577 20726568     INC1500 weather 
  40d0e4:	65696c63 6520746e 706d6178 2d20656c     client example -
  40d0f4:	2d0a0d2d 4153202d 3037454d 4c50582d     -..-- SAME70-XPL
  40d104:	2d2d2044 2d2d0a0d 6d6f4320 656c6970     D --..-- Compile
  40d114:	4a203a64 31206e75 30322033 31203931     d: Jun 13 2019 1
  40d124:	33323a36 2038313a 0a0d2d2d 00000000     6:23:18 --......
  40d134:	69666957 00000000 6c696146 74206465     Wifi....Failed t
  40d144:	7263206f 65746165 66695720 61742069     o create Wifi ta
  40d154:	0a0d6b73 00000000 646e6573 00000000     sk......send....
  40d164:	6c696146 74206465 7263206f 65746165     Failed to create
  40d174:	6e657320 61742064 0a0d6b73 00000000      send task......
  40d184:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
  40d194:	64612050 73657264 73692073 2e642520     P address is %d.
  40d1a4:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
  40d1b4:	6b636f73 6d5f7465 635f6773 656e6e6f     socket_msg_conne
  40d1c4:	000a7463 253a6425 64253a64 00000000     ct..%d:%d:%d....
  40d1d4:	69676964 006c6174 656d616e 2673253d     digital.name=%s&
  40d1e4:	61746164 2664253d 656d6974 6d617473     data=%d&timestam
  40d1f4:	73253d70 00000000 54534f50 73752f20     p=%s....POST /us
  40d204:	2f737265 69676572 72657473 54544820     ers/register HTT
  40d214:	2e312f50 430a0d31 65746e6f 542d746e     P/1.1..Content-T
  40d224:	3a657079 70706120 6163696c 6e6f6974     ype: application
  40d234:	772d782f 662d7777 2d6d726f 656c7275     /x-www-form-urle
  40d244:	646f636e 0a0d6465 746e6f43 2d746e65     ncoded..Content-
  40d254:	676e654c 203a6874 0a0d6425 73250a0d     Length: %d....%s
  40d264:	00000000 6c616e61 6369676f 00000000     ....analogic....
  40d274:	646e6573 00000a20 6b636f73 635f7465     send ...socket_c
  40d284:	63203a62 656e6e6f 65207463 726f7272     b: connect error
  40d294:	000a0d21 6b636f73 635f7465 72203a62     !...socket_cb: r
  40d2a4:	20766365 6f727265 0a0d2172 00000000     ecv error!......
  40d2b4:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
  40d2c4:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
  40d2d4:	0d296425 0000000a 00000065 6e69616d     %d).....e...main
  40d2e4:	6f63203a 63656e6e 676e6974 206f7420     : connecting to 
  40d2f4:	69466957 20504120 2e2e7325 000a0d2e     WiFi AP %s......
  40d304:	34333231 38373635 00003039 322e3831     1234567890..18.2
  40d314:	312e3831 312e3831 00003530 74656e49     18.118.105..Inet
  40d324:	6f746120 203a206e 00006425 6b636f73      aton : %d..sock
  40d334:	69207465 2074696e 0000000a 6e69616d     et init ....main
  40d344:	6166203a 64656c69 206f7420 61657263     : failed to crea
  40d354:	54206574 63205043 6e65696c 6f732074     te TCP client so
  40d364:	74656b63 72726520 0d21726f 0000000a     cket error!.....
  40d374:	6b636f73 63207465 656e6e6f 6e697463     socket connectin
  40d384:	00000a67 6f727265 00000a72 63617473     g...error...stac
  40d394:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  40d3a4:	00000a0d 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40d3b4:	4649575f 4f435f49 43454e4e 0d444554     _WIFI_CONNECTED.
  40d3c4:	0000000a 69666977 3a62635f 4d324d20     ....wifi_cb: M2M
  40d3d4:	4649575f 49445f49 4e4f4353 5443454e     _WIFI_DISCONNECT
  40d3e4:	0a0d4445 00000000 69666977 3a62635f     ED......wifi_cb:
  40d3f4:	20504920 72646461 20737365 25207369      IP address is %
  40d404:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......

0040d414 <_global_impure_ptr>:
  40d414:	20400028 00464e49 00666e69 004e414e     (.@ INF.inf.NAN.
  40d424:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40d434:	46454443 00000000 33323130 37363534     CDEF....01234567
  40d444:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40d454:	0000296c 00000030                       l)..0...

0040d45c <blanks.7223>:
  40d45c:	20202020 20202020 20202020 20202020                     

0040d46c <zeroes.7224>:
  40d46c:	30303030 30303030 30303030 30303030     0000000000000000

0040d47c <blanks.7217>:
  40d47c:	20202020 20202020 20202020 20202020                     

0040d48c <zeroes.7218>:
  40d48c:	30303030 30303030 30303030 30303030     0000000000000000
  40d49c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40d4ac:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40d4bc:	00000000                                ....

0040d4c0 <__mprec_bigtens>:
  40d4c0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40d4d0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40d4e0:	7f73bf3c 75154fdd                       <.s..O.u

0040d4e8 <__mprec_tens>:
  40d4e8:	00000000 3ff00000 00000000 40240000     .......?......$@
  40d4f8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40d508:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40d518:	00000000 412e8480 00000000 416312d0     .......A......cA
  40d528:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40d538:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40d548:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40d558:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40d568:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40d578:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40d588:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40d598:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40d5a8:	79d99db4 44ea7843                       ...yCx.D

0040d5b0 <p05.6055>:
  40d5b0:	00000005 00000019 0000007d              ........}...

0040d5bc <_ctype_>:
  40d5bc:	20202000 20202020 28282020 20282828     .         ((((( 
  40d5cc:	20202020 20202020 20202020 20202020                     
  40d5dc:	10108820 10101010 10101010 10101010      ...............
  40d5ec:	04040410 04040404 10040404 10101010     ................
  40d5fc:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40d60c:	01010101 01010101 01010101 10101010     ................
  40d61c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40d62c:	02020202 02020202 02020202 10101010     ................
  40d63c:	00000020 00000000 00000000 00000000      ...............
	...

0040d6c0 <_init>:
  40d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d6c2:	bf00      	nop
  40d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d6c6:	bc08      	pop	{r3}
  40d6c8:	469e      	mov	lr, r3
  40d6ca:	4770      	bx	lr

0040d6cc <__init_array_start>:
  40d6cc:	00408815 	.word	0x00408815

0040d6d0 <__frame_dummy_init_array_entry>:
  40d6d0:	00400165                                e.@.

0040d6d4 <_fini>:
  40d6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40d6d6:	bf00      	nop
  40d6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40d6da:	bc08      	pop	{r3}
  40d6dc:	469e      	mov	lr, r3
  40d6de:	4770      	bx	lr

0040d6e0 <__fini_array_start>:
  40d6e0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <egstrNmBusCapabilities>:
20400010:	1000 0000                                   ....

20400014 <clk_status_reg_adr>:
20400014:	000f 0000                                   ....

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <tcp_client_socket>:
20400020:	00ff 0000                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	cb2c 2040                                   ,.@ 

20400454 <__global_locale>:
20400454:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400474:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400494:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204004f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400514:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400534:	b54d 0040 a7a9 0040 0000 0000 d5bc 0040     M.@...@.......@.
20400544:	d4b8 0040 d1b0 0040 d1b0 0040 d1b0 0040     ..@...@...@...@.
20400554:	d1b0 0040 d1b0 0040 d1b0 0040 d1b0 0040     ..@...@...@...@.
20400564:	d1b0 0040 d1b0 0040 ffff ffff ffff ffff     ..@...@.........
20400574:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040059c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...

204005c0 <__malloc_av_>:
	...
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 
204008a8:	08a0 2040 08a0 2040 08a8 2040 08a8 2040     ..@ ..@ ..@ ..@ 
204008b8:	08b0 2040 08b0 2040 08b8 2040 08b8 2040     ..@ ..@ ..@ ..@ 
204008c8:	08c0 2040 08c0 2040 08c8 2040 08c8 2040     ..@ ..@ ..@ ..@ 
204008d8:	08d0 2040 08d0 2040 08d8 2040 08d8 2040     ..@ ..@ ..@ ..@ 
204008e8:	08e0 2040 08e0 2040 08e8 2040 08e8 2040     ..@ ..@ ..@ ..@ 
204008f8:	08f0 2040 08f0 2040 08f8 2040 08f8 2040     ..@ ..@ ..@ ..@ 
20400908:	0900 2040 0900 2040 0908 2040 0908 2040     ..@ ..@ ..@ ..@ 
20400918:	0910 2040 0910 2040 0918 2040 0918 2040     ..@ ..@ ..@ ..@ 
20400928:	0920 2040 0920 2040 0928 2040 0928 2040      .@  .@ (.@ (.@ 
20400938:	0930 2040 0930 2040 0938 2040 0938 2040     0.@ 0.@ 8.@ 8.@ 
20400948:	0940 2040 0940 2040 0948 2040 0948 2040     @.@ @.@ H.@ H.@ 
20400958:	0950 2040 0950 2040 0958 2040 0958 2040     P.@ P.@ X.@ X.@ 
20400968:	0960 2040 0960 2040 0968 2040 0968 2040     `.@ `.@ h.@ h.@ 
20400978:	0970 2040 0970 2040 0978 2040 0978 2040     p.@ p.@ x.@ x.@ 
20400988:	0980 2040 0980 2040 0988 2040 0988 2040     ..@ ..@ ..@ ..@ 
20400998:	0990 2040 0990 2040 0998 2040 0998 2040     ..@ ..@ ..@ ..@ 
204009a8:	09a0 2040 09a0 2040 09a8 2040 09a8 2040     ..@ ..@ ..@ ..@ 
204009b8:	09b0 2040 09b0 2040 09b8 2040 09b8 2040     ..@ ..@ ..@ ..@ 

204009c8 <__malloc_sbrk_base>:
204009c8:	ffff ffff                                   ....

204009cc <__malloc_trim_threshold>:
204009cc:	0000 0002                                   ....
